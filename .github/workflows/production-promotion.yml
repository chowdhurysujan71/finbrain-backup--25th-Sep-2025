# FinBrain Production Promotion Pipeline
# Manual approval required for production deployments
name: Production Promotion

on:
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Type of deployment'
        required: true
        default: 'standard'
        type: choice
        options:
          - standard
          - hotfix
          - rollback
      commit_sha:
        description: 'Commit SHA to deploy (leave blank for latest main)'
        required: false
        type: string
      migration_required:
        description: 'Does this deployment require database migrations?'
        required: true
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'
      skip_trust_checks:
        description: 'Skip trust checks (emergency use only)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

env:
  PYTHON_VERSION: '3.11'

jobs:
  pre-deployment-validation:
    name: Pre-Deployment Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    outputs:
      deployment_commit: ${{ steps.commit-info.outputs.commit_sha }}
      ci_status: ${{ steps.ci-check.outputs.status }}
      trust_checks_required: ${{ steps.validation.outputs.trust_checks_required }}
    
    steps:
      - name: Determine deployment commit
        id: commit-info
        run: |
          if [ -n "${{ github.event.inputs.commit_sha }}" ]; then
            COMMIT_SHA="${{ github.event.inputs.commit_sha }}"
            echo "Using specified commit: $COMMIT_SHA"
          else
            # Get latest commit from main branch
            COMMIT_SHA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/commits/main" | \
              jq -r '.sha')
            echo "Using latest main commit: $COMMIT_SHA"
          fi
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

      - name: Check CI Status
        id: ci-check
        run: |
          COMMIT_SHA="${{ steps.commit-info.outputs.commit_sha }}"
          
          # Check if CI pipeline passed for this commit
          CI_STATUS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/commits/$COMMIT_SHA/status" | \
            jq -r '.state')
          
          echo "CI status for commit $COMMIT_SHA: $CI_STATUS"
          echo "status=$CI_STATUS" >> $GITHUB_OUTPUT
          
          if [ "$CI_STATUS" != "success" ]; then
            echo "‚ùå CI pipeline must pass before production deployment"
            echo "Current status: $CI_STATUS"
            exit 1
          fi

      - name: Validate deployment parameters
        id: validation
        run: |
          echo "Deployment type: ${{ github.event.inputs.deployment_type }}"
          echo "Migration required: ${{ github.event.inputs.migration_required }}"
          echo "Skip trust checks: ${{ github.event.inputs.skip_trust_checks }}"
          
          # Determine if trust checks are required
          if [ "${{ github.event.inputs.skip_trust_checks }}" = "true" ]; then
            echo "‚ö†Ô∏è Trust checks will be skipped (emergency deployment)"
            echo "trust_checks_required=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Trust checks will be performed"
            echo "trust_checks_required=true" >> $GITHUB_OUTPUT
          fi

  production-trust-checks:
    name: Production Trust Checks
    runs-on: ubuntu-latest
    needs: pre-deployment-validation
    if: needs.pre-deployment-validation.outputs.trust_checks_required == 'true'
    timeout-minutes: 20
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: finbrain_prod_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout deployment commit
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.pre-deployment-validation.outputs.deployment_commit }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client jq
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up production-like environment
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finbrain_prod_test
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/finbrain_prod_test" >> $GITHUB_ENV
          echo "AI_ENABLED=false" >> $GITHUB_ENV
          echo "ID_SALT=prod_test_salt" >> $GITHUB_ENV
          echo "SESSION_SECRET=prod_test_session" >> $GITHUB_ENV
          echo "PCA_MODE=FALLBACK" >> $GITHUB_ENV

      - name: Initialize production test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finbrain_prod_test
        run: |
          # Create production-like schema
          psql $DATABASE_URL -c "CREATE EXTENSION IF NOT EXISTS btree_gin;"
          python scripts/migrate_with_lock.py

      - name: Run production trust checks
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finbrain_prod_test
          BASE_URL: ${{ secrets.BASE_URL }}
          SESSION_COOKIE: ${{ secrets.SESSION_COOKIE }}
          PSQL_URI: postgresql://postgres:postgres@localhost:5432/finbrain_prod_test
          EXPECT_EXPENSES_COUNT: ${{ secrets.EXPECT_EXPENSES_COUNT || '' }}
          EXPECT_ORPHANS: "0"
          EXPECT_DUPES: "0"
        run: |
          echo "Running production trust checks after migrations..."
          chmod +x trust_check.sh
          ./trust_check.sh
          
          # Validate results
          OVERALL_STATUS=$(cat report.json | jq -r '.trust_check.overall_status')
          if [ "$OVERALL_STATUS" = "FAIL" ]; then
            echo "‚ùå Production trust checks failed - deployment blocked"
            exit 1
          fi

      - name: Upload production trust report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: production-trust-report
          path: |
            report.json
            trust_check_logs.tar.gz

  deployment-approval:
    name: Deployment Approval
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, production-trust-checks]
    if: always() && needs.pre-deployment-validation.result == 'success'
    environment:
      name: production
      url: https://finbrain.replit.app
    
    steps:
      - name: Display deployment summary
        run: |
          echo "## üöÄ Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- **Type:** ${{ github.event.inputs.deployment_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ needs.pre-deployment-validation.outputs.deployment_commit }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Migration Required:** ${{ github.event.inputs.migration_required }}" >> $GITHUB_STEP_SUMMARY
          echo "- **CI Status:** ${{ needs.pre-deployment-validation.outputs.ci_status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.production-trust-checks.result }}" = "success" ]; then
            echo "- **Trust Checks:** ‚úÖ Passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.production-trust-checks.result }}" = "skipped" ]; then
            echo "- **Trust Checks:** ‚ö†Ô∏è Skipped (emergency deployment)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Trust Checks:** ‚ùå Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pre-deployment checklist completed. Ready for manual approval.**" >> $GITHUB_STEP_SUMMARY

      - name: Manual approval checkpoint
        run: |
          echo "üéØ Manual approval required for production deployment"
          echo "Deployment commit: ${{ needs.pre-deployment-validation.outputs.deployment_commit }}"
          echo "CI status: ${{ needs.pre-deployment-validation.outputs.ci_status }}"
          
          if [ "${{ needs.production-trust-checks.result }}" = "failure" ]; then
            echo "‚ùå Trust checks failed - deployment should not proceed"
            exit 1
          fi
          
          echo "‚úÖ All automated checks passed - deployment approved"

  deploy-to-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, deployment-approval]
    if: needs.deployment-approval.result == 'success'
    timeout-minutes: 30
    
    steps:
      - name: Checkout deployment commit
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.pre-deployment-validation.outputs.deployment_commit }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create Database Backup
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          ENABLE_BACKUPS: "true"
        run: |
          echo "Creating pre-deployment database backup..."
          python -c "
          from utils.database_backup import DatabaseBackup
          import json
          backup = DatabaseBackup()
          result = backup.create_full_backup()
          print(json.dumps(result, indent=2))
          if result.get('status') == 'success':
              print('‚úÖ Database backup completed successfully')
              print(f'Backup file: {result.get(\"backup_file\")}')
          else:
              print('‚ö†Ô∏è Database backup had issues:', result.get('message'))
          "

      - name: Run pre-deployment migrations
        if: github.event.inputs.migration_required == 'true'
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "Running production database migrations..."
          python scripts/migrate_with_lock.py
          
          echo "‚úÖ Database migrations completed successfully"

      - name: Deploy to Replit
        env:
          REPLIT_TOKEN: ${{ secrets.REPLIT_TOKEN }}
          REPLIT_PROJECT_ID: ${{ secrets.REPLIT_PROJECT_ID }}
        run: |
          echo "Deploying to Replit production environment..."
          
          # Create deployment notification
          echo "## üöÄ Production Deployment Started" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ needs.pre-deployment-validation.outputs.deployment_commit }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type:** ${{ github.event.inputs.deployment_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Migration:** ${{ github.event.inputs.migration_required }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          
          # Note: Actual Replit deployment would be implemented here
          # This is a placeholder for the deployment mechanism
          echo "Production deployment completed successfully"

      - name: Post-deployment verification
        run: |
          echo "Running post-deployment health checks..."
          
          # Wait for deployment to be live
          sleep 30
          
          # Basic health check (replace with actual production URL)
          if curl -f -s "https://finbrain.replit.app/health" > /dev/null; then
            echo "‚úÖ Production health check passed"
          else
            echo "‚ùå Production health check failed"
            exit 1
          fi

      - name: Create deployment record
        run: |
          echo "Recording deployment in audit log..."
          
          # Create deployment record
          cat > deployment-record.json << EOF
          {
            "deployment_id": "${{ github.run_id }}",
            "commit_sha": "${{ needs.pre-deployment-validation.outputs.deployment_commit }}",
            "deployment_type": "${{ github.event.inputs.deployment_type }}",
            "migration_required": ${{ github.event.inputs.migration_required }},
            "deployed_by": "${{ github.actor }}",
            "deployed_at": "$(date -u -Iseconds)",
            "ci_status": "${{ needs.pre-deployment-validation.outputs.ci_status }}",
            "trust_checks_passed": "${{ needs.production-trust-checks.result == 'success' }}",
            "environment": "production"
          }
          EOF

      - name: Upload deployment record
        uses: actions/upload-artifact@v3
        with:
          name: deployment-record
          path: deployment-record.json

      - name: Notify deployment success
        run: |
          echo "## üéâ Production Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ needs.pre-deployment-validation.outputs.deployment_commit }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next steps:**" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor application metrics and logs" >> $GITHUB_STEP_SUMMARY
          echo "- Verify user-facing functionality" >> $GITHUB_STEP_SUMMARY
          echo "- Check error rates and performance" >> $GITHUB_STEP_SUMMARY