tests/test_webhook_smoke.py

import importlib
import pytest
from flask import Flask

def import_webhook_bp():
    candidates = ["utils.production_router", "finbrain.router", "app"]
    for name in candidates:
        try:
            mod = importlib.import_module(name)
        except Exception:
            continue
        if hasattr(mod, "webhook_bp"):
            return getattr(mod, "webhook_bp")
    pytest.skip("webhook_bp not found")

def test_webhook_smoke():
    bp = import_webhook_bp()
    app = Flask(__name__)
    app.register_blueprint(bp)
    c = app.test_client()
    payload = {
        "object": "page",
        "entry": [{
            "messaging": [{
                "sender": {"id": "TEST_123"},
                "message": {"text": "coffee 100", "mid": "m1"},
                "timestamp": 1734567890000
            }]
        }]
    }
    r = c.post("/webhook/messenger", json=payload)
    assert r.status_code == 200
    body = r.get_json()
    assert body is not None and ("messages" in body or "recipient" in body)


tests/test_ai_mode_logging.py

import logging
from flask import Flask
from utils.production_router import webhook_bp

def test_modes_are_logged(caplog):
    caplog.set_level(logging.INFO, logger="finbrain.router")
    app = Flask(__name__)
    app.register_blueprint(webhook_bp)
    c = app.test_client()

    def post(text):
        payload = {
            "object":"page",
            "entry":[{"messaging":[{"sender":{"id":"T"},
                                     "message":{"text":text,"mid":"m"},
                                     "timestamp":1734567890000}]}]
        }
        return c.post("/webhook/messenger", json=payload)

    post("coffee 100")
    post("summary")

    lines = [r.getMessage() for r in caplog.records if r.name=="finbrain.router"]
    assert any("ai_path_exit" in s for s in lines)
    assert any("mode" in s and "LOG" in s for s in lines)
    assert any("mode" in s and "AI" in s for s in lines)


tests/test_perf_math.py

from finbrain.ops import perf

def test_p95_nearest_rank():
    for _ in range(19):
        perf.record(100.0)
    perf.record(1000.0)
    assert perf.count() == 20
    val = perf.p95()
    assert val is not None and val >= 1000.0 - 1e-6


tests/test_perf_log_hook.py

import logging
from flask import Flask
from utils.production_router import webhook_bp

def test_perf_log_and_snapshot(caplog):
    caplog.set_level(logging.INFO, logger="finbrain.router")
    app = Flask(__name__)
    app.register_blueprint(webhook_bp)
    c = app.test_client()

    payload = {"object":"page","entry":[{"messaging":[{"sender":{"id":"T"},
               "message":{"text":"hi","mid":"m"},"timestamp":1734567890000}]}]}
    for _ in range(3):
        c.post("/webhook/messenger", json=payload)

    assert any(r.name=="finbrain.router" and r.getMessage().startswith("perf_e2e")
               for r in caplog.records)


Optional mypy config

mypy.ini

[mypy]
ignore_missing_imports = True
check_untyped_defs = True
warn_unused_ignores = True
warn_redundant_casts = True
warn_unreachable = True

[mypy-finbrain.ai.*]
disallow_untyped_defs = True

[mypy-utils.production_router]
disallow_untyped_defs = True