You are editing the FinBrain repository. Perform a READ-ONLY GLOBAL BACKDOOR AUDIT of all database write paths across the system. Do not modify any code or schema. Only analyze and report.

SCOPE
• All tables: users, expenses, messages, monthly_summaries, logs, or any others found in models or schema.
• All code paths that create, insert, update, or delete records.

TASKS
1. Search the entire codebase for:
   • Direct SQL strings (INSERT, UPDATE, DELETE) against any table.
   • Any model constructors (User, Expense, Message, MonthlySummary, etc.) created outside utils/db.py helper functions.
   • Any raw DB cursor.execute() calls.
2. For each occurrence, capture:
   • File and line number
   • Function/handler name
   • Table affected
   • Whether the operation goes through a canonical helper (e.g., save_expense, save_user, log_message) or bypasses it.
   • Whether required fields (e.g., month for expenses, psid_hash for users/messages) are set correctly.
3. Build a call graph from entrypoints (webhook → router → DB) to identify alternate branches or fallback paths.
4. Cross-reference with LSP/type diagnostics for mismatched constructors that could cause bypasses.
5. Write findings into artifacts/BACKDOOR_AUDIT_GLOBAL.md:
   • A table of all write paths: table, file, line, function, helper used = Yes/No, required fields set = Yes/No.
   • Identify the canonical safe path per table.
   • List of “backdoor” paths still active for each table.
   • Risk rating per table (Low = only canonical helpers, High = multiple bypasses).
6. Print summary to console:
   === GLOBAL DB WRITE PATH AUDIT ===
   Users table: canonical helper present Yes/No, bypasses <count>
   Expenses table: canonical helper present Yes/No, bypasses <count>
   Messages table: canonical helper present Yes/No, bypasses <count>
   Summaries table: canonical helper present Yes/No, bypasses <count>
   Other tables: <list>
   Risk level overall: Low / Medium / High
   ========================================
