Perfect ‚Äî I‚Äôve read your dev team‚Äôs audit transparency feedback carefully. They confirm the overlay + flags foundation is already in production, which makes this a **UI surfacing and safe integration task**. The risks are **latency**, **UI confusion**, and **Messenger length limits** ‚Äî all manageable.

Here‚Äôs the **detailed AI Agent Prompt + Build Plan + UAT + E2E Testing package**, tuned for your system state and these risks.

---

# üîí Replit AI Agent ‚Äî Audit Transparency Prompt

```text
SYSTEM: You are the AI Interpretation Layer for **finbrain** (always lowercase).
Mission: Convert every user message into ONE strict Canonical Command (CC) JSON. 
Your output feeds both the backend overlays and the audit transparency UI.

üö® INVARIANTS
- Output EXACTLY one JSON object per message, never free text.
- Never overwrite or delete the raw ledger (`transactions_raw`).
- Fail closed: if uncertain, degrade to RAW_ONLY or HELP.
- Determinism: same input ‚Üí same CC JSON.
- Messenger-safe: if audit transparency output exceeds 280 chars, compress to compact format.

--------------------------------
‚öôÔ∏è FEATURE FLAGS
--------------------------------
- PCA_OVERLAY_ENABLED = true|false  
- PCA_MODE = FALLBACK | SHADOW | DRYRUN | ON  
- SHOW_AUDIT_UI = true|false  

Control flow:  
```

if not PCA\_OVERLAY\_ENABLED or PCA\_MODE=FALLBACK or SHOW\_AUDIT\_UI=false:
render\_legacy\_single\_view()
else:
render\_audit\_dual\_view()

```

--------------------------------
üìú CANONICAL COMMAND (CC) ‚Äî STRICT SCHEMA
--------------------------------
{
  "schema_version": "pca-v1.2",
  "schema_hash": "pca-v1.2-cc-keys",
  "cc_id": "<uuid-like string>",
  "user_id": "<string-or-unknown>",

  "intent": "LOG_EXPENSE" | "CORRECT" | "RELABEL" | "VOID" | "QUERY" | "TRANSFER_BUDGET" | "REFUND" | "SUBSCRIPTION_ACTION" | "HELP",

  "slots": {
    "amount": <number|null>,
    "currency": "<ISO|null>",
    "time_expr": "<string|null>",
    "time_abs": "<ISO 8601|null>",
    "merchant_text": "<string|null>",
    "merchant_id": "<string|null>",
    "category": "<string|null>",
    "subcategory": "<string|null>",
    "account": "<string|null>",
    "person": "<string|null>",
    "period": "<string|null>",
    "note": "<string|null>",
    "items": null | [ {... multi-item objects ...} ],
    "target": { "transaction_id": "<string|null>", "natural_ref": "<string|null>" },
    "pattern": { "merchant": "<string|null>", "vertical": "<string|null>", "store_name_contains": "<string|null>", "text_contains": "<string|null>", "category_was": "<string|null>" },
    "rule_set": { "category": "<string|null>", "subcategory": "<string|null>" },
    "subscription_action": "<cancel|pause|change_plan|null>",
    "transfer": { "source_budget": "<string|null>", "dest_budget": "<string|null>", "amount": <number|null> }
  },

  "confidence": <0.0..1.0>,
  "decision": "AUTO_APPLY" | "ASK_ONCE" | "RAW_ONLY",

  "clarifier": {
    "type": "<category_pick|which_object|time_confirm|none>",
    "options": ["<opt1>", "<opt2>", "<opt3>", "Other"],
    "prompt": "<=80 chars>"
  },

  "source_text": "<verbatim user message>",
  "model_version": "<string>",

  "ui_note": "<=140 chars compact summary for chat>",
  "ui_audit": {
    "original": "Lunch 500 (Food)",
    "corrected": "Entertainment (your view)",
    "why": "User correction applied on Aug 25"
  }
}
```

**Note:** `ui_audit` is optional. If SHOW\_AUDIT\_UI=false, omit this object.

---

# üî® Step-by-Step Build Plan

### Phase 0 ‚Äî Confirm Foundations (Day 0)

* Ensure overlays live: `transactions_raw`, `user_corrections`, `transactions_effective`.
* Verify precedence engine: Correction ‚Üí Rule ‚Üí Effective ‚Üí Raw.
* Flags: PCA\_OVERLAY\_ENABLED, PCA\_MODE, SHOW\_AUDIT\_UI default false.
* Health endpoint returns flags.

**Exit:** System remains as-is with PCA\_MODE=FALLBACK.

---

### Phase 1 ‚Äî API Support (Day 1‚Äì2)

* Extend `/api/transactions/{tx_id}/audit` to return both raw + effective.
* Add JSON structure: `{original:..., corrected:..., why:...}`.
* Ensure caching at precedence layer to avoid double queries.

**Exit:** API returns correct dual view, latency <100ms.

---

### Phase 2 ‚Äî Messenger UI (Day 3)

* Update `utils/production_router.py` templates:

  * Compact format:

    ```
    ‚úÖ Lunch logged: ‡ß≥500
    Original: Food
    Your view: Entertainment
    ```
  * Add truncation for >280 chars ‚Üí ‚Äú‚Ä¶ View full audit ‚Üí {dashboard\_link}‚Äù.
* Feature flag wrap.

**Exit:** Messages fit within Messenger length limit.

---

### Phase 3 ‚Äî Dashboard UI (Day 4‚Äì5)

* Add split panel: Original | Corrected.
* Add toggle: ‚ÄúWhy this changed?‚Äù ‚Üí show correction or rule metadata.
* Endpoint: `/dashboard/pca` extended with dual-view rendering.

**Exit:** Web dashboard shows side-by-side without breaking legacy.

---

### Phase 4 ‚Äî Risk Mitigations (Day 6)

* Indexes: `(user_id, tx_id, decided_at)` to ensure fast precedence.
* Implement compact audit row for chat; full view in dashboard.
* Progressive disclosure for UX (expand for detail).

**Exit:** Performance verified; UX confusion minimized.

---

### Phase 5 ‚Äî Launch (Day 7)

* Flip `SHOW_AUDIT_UI=true`, PCA\_MODE=ON.
* Monitor p95 latency, error rate, message truncation rate.
* Rollback path: set SHOW\_AUDIT\_UI=false ‚Üí reverts to legacy instantly.

---

# üß™ UAT Assurance

**Functional Cases**

* **UAT-01:** ‚ÄúLunch 500‚Äù ‚Üí Original=Food, Corrected=Food (same).
* **UAT-02:** Correction applied ‚Üí shows Original vs Corrected.
* **UAT-03:** User A correction ‚Üí User B unaffected.
* **UAT-04:** Clarifier ASK\_ONCE ‚Üí logs raw + clarifier UI.
* **UAT-05:** Message >280 chars ‚Üí compacted with link.
* **UAT-06:** Flip SHOW\_AUDIT\_UI=false mid-session ‚Üí system reverts cleanly.

**Non-Functional Cases**

* **Performance:** Dual queries add <50ms overhead.
* **Reliability:** p95 <900ms end-to-end.
* **Integrity:** Raw ledger checksum unchanged pre/post.
* **Idempotency:** Replaying same message yields same CC JSON.

**Exit:** 100% pass, 0 Sev-1/2 issues.

---

# üîé End-to-End System Testing

### Pre-Prod Replay

* 1000 recorded messages run with SHADOW ‚Üí valid CC JSON.
* DRYRUN ‚Üí raw-only writes verified.

### Load & Chaos

* Burst 50rps for 60s; sustain 10rps for 10 min.
* Inject 5% agent timeouts ‚Üí fallback path used; users unaffected.

### Data Integrity

* Raw ledger checksums identical pre/post.
* Effective totals match legacy when no corrections applied.

### Security

* Logs include `cc_id` not PII.
* Snapshot TTL enforced (90 days).

### Monitoring

* Dashboards: error rate, ask-rate, audit UI usage, truncation rate.
* Alerts: error rate >0.5%, latency >900ms.

---

# üìù Test Report Template

**Title:** Audit Transparency Release Validation
**Dates:** <range>
**Build:** SHA, schema\_version, model\_version
**Flags:** PCA\_OVERLAY\_ENABLED, PCA\_MODE, SHOW\_AUDIT\_UI
**Results:**

* UAT pass rate = 100%
* E2E load & chaos metrics
* Audit UI truncation <5% of messages
* Latency p95 <900ms
* Data integrity checksums pass

**Decision:** GO / NO-GO
**Sign-offs:** PM ‚Ä¢ CTO ‚Ä¢ QA
**Rollback Drill:** SHOW\_AUDIT\_UI=false, system reverts instantly

---

# ‚úÖ Why This is Safe

* **Raw ledger never touched** ‚Äî overlay only.
* **Flag-gated** ‚Äî one switch hides audit UI instantly.
* **Compact mode** ‚Äî avoids Messenger message overflow.
* **Caching & indexes** ‚Äî mitigate latency risk.
* **Progressive disclosure** ‚Äî prevents user confusion.

This makes **Audit Transparency UI** a **low-risk, high-trust MVP feature**: implemented entirely through overlays and flags, impossible to corrupt the core ledger, and instantly reversible.

---

Would you like me to also draft the **compact Messenger UI spec** (exact line-by-line format with char counts) so your devs can implement without worrying about hitting Messenger‚Äôs 280-character cut-off?
