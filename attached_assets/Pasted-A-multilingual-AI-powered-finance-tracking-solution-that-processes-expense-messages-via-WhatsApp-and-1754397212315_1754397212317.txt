A multilingual AI-powered finance tracking solution that processes expense messages via WhatsApp and Facebook Messenger, providing intelligent categorization, real-time database storage, and automated financial insights.

## Core Features

### 1. Multi-Platform Messaging Integration
- **WhatsApp Business API** via Twilio
  - Webhook endpoint: /webhook (POST for messages, GET for verification)
  - Phone number format: whatsapp:+1234567890
  - Direct API messaging with requests.post() to Twilio
  - Message parsing from Twilio form data (Body, From, SmsMessageSid)
  
- **Facebook Messenger Platform**
  - Webhook verification with hub.verify_token
  - JSON message processing from Graph API
  - Real PSID (Page-Scoped User ID) handling
  - Direct API responses via Facebook Graph API v17.0

### 2. Intelligent Expense Processing
- **Amount Extraction**
  - Regex-based number parsing: \d+\.?\d*
  - Multi-currency support (‡ß≥, $, etc.)
  - Handles decimal amounts and integers
  - Error handling for messages without amounts

- **Smart Categorization System** (10 Categories)
  - **Food üçî**: coffee, tea, restaurant, cafe, meal, breakfast, lunch, dinner, pizza, burger, rice, food, eat, drink
  - **Transport üöó**: uber, taxi, bus, train, petrol, gas, fuel, ride, transport, travel, journey
  - **Shopping üõçÔ∏è**: shop, buy, purchase, clothes, electronics, gadget, phone, computer, shoes
  - **Groceries üõí**: grocery, supermarket, vegetables, fruits, milk, bread, market, store
  - **Utilities üí°**: electricity, water, gas, internet, phone, bill, utility, subscription
  - **Entertainment üé¨**: movie, cinema, gym, fitness, game, sport, music, concert, party
  - **Health üè•**: doctor, medicine, hospital, clinic, pharmacy, health, medical
  - **Education üìö**: school, university, course, book, tuition, training, education
  - **Personal Care üíÖ**: haircut, salon, spa, beauty, cosmetics, barber
  - **Misc üíº**: Default category for unmatched expenses

### 3. Database Architecture (PostgreSQL)

#### Expenses Table (Primary)
sql
CREATE TABLE expenses (
    id SERIAL PRIMARY KEY,
    user_id VARCHAR(255) NOT NULL,           -- SHA-256 hashed user identifier
    description TEXT,                        -- Original expense message
    amount NUMERIC(10,2) NOT NULL,          -- Expense amount
    category VARCHAR(50) NOT NULL,          -- AI-categorized expense type
    currency VARCHAR(10) DEFAULT '‡ß≥',       -- Currency symbol
    date DATE NOT NULL,                     -- Expense date
    time TIME NOT NULL,                     -- Expense time
    month VARCHAR(7) NOT NULL,              -- Format: YYYY-MM
    unique_id TEXT NOT NULL,                -- Unique identifier per expense
    created_at TIMESTAMP DEFAULT NOW(),     -- Database insertion timestamp
    platform VARCHAR(20),                  -- WhatsApp or Facebook
    original_message TEXT,                  -- Full original message
    ai_insights TEXT                        -- Future AI insights storage
);


#### Users Table (User Tracking)
sql
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    user_id_hash VARCHAR(255) UNIQUE NOT NULL, -- SHA-256 hashed user ID
    platform VARCHAR(20) NOT NULL,             -- WhatsApp or Facebook
    total_expenses NUMERIC(12,2) DEFAULT 0,    -- Lifetime total expenses
    expense_count INTEGER DEFAULT 0,           -- Total number of expenses
    created_at TIMESTAMP DEFAULT NOW()        -- User first interaction
);


#### Monthly Summaries Table (Analytics)
sql
CREATE TABLE monthly_summaries (
    id SERIAL PRIMARY KEY,
    user_id_hash VARCHAR(255) NOT NULL,       -- SHA-256 hashed user ID
    month VARCHAR(7) NOT NULL,                -- Format: YYYY-MM
    total_amount NUMERIC(12,2) NOT NULL,      -- Monthly total
    expense_count INTEGER NOT NULL,           -- Monthly expense count
    categories JSON,                          -- Category breakdown
    ai_insights TEXT,                         -- Monthly insights
    created_at TIMESTAMP DEFAULT NOW(),      -- Summary creation
    updated_at TIMESTAMP DEFAULT NOW()       -- Last update
);


### 4. Security & Privacy Features

#### User Data Protection
- **SHA-256 Hashing**: All phone numbers and user IDs hashed before database storage
- **No Raw Phone Storage**: Original phone numbers never stored in database
- **Platform Identification**: WhatsApp vs Facebook tracking without exposing identifiers
- **Secure Environment Variables**: All credentials stored as environment secrets

#### Database Security
- **PostgreSQL Connection**: Encrypted connections via DATABASE_URL
- **Input Sanitization**: Parameterized queries prevent SQL injection
- **Data Validation**: Amount validation, category validation
- **Error Handling**: Secure error messages without data exposure

#### API Security
- **Webhook Verification**: Facebook token verification
- **Twilio Authentication**: Account SID and Auth Token validation
- **HTTPS Endpoints**: All API calls over secure connections
- **Rate Limiting**: Built-in protection via platform APIs

## Technical Implementation

### 5. Core Functions

#### Message Processing
python
def parse_amount(message):
    """Extract numeric amount from expense message"""
    
def categorize_expense(description):
    """Categorize expense using keyword matching"""
    
def save_expense_to_database(user_id, description, amount):
    """Save expense to PostgreSQL with security hashing"""


#### Messaging APIs
python
def send_whatsapp_message(phone_number, message):
    """Send WhatsApp message via Twilio API"""
    
def send_facebook_message(recipient_id, message):
    """Send Facebook message via Graph API"""


#### Database Operations
python
def save_expense_to_database(user_id, description, amount):
    """Insert expense with full schema population"""
    - Hash user ID with SHA-256
    - Categorize expense automatically
    - Calculate monthly totals
    - Return updated monthly total


### 6. Environment Configuration

#### Required Environment Variables
bash
# Database
DATABASE_URL=postgresql://user:pass@host:port/dbname

# Twilio WhatsApp
TWILIO_ACCOUNT_SID=ACxxxxxxxxx
TWILIO_AUTH_TOKEN=your_auth_token
TWILIO_WHATSAPP_NUMBER=+14155238886

# Facebook Messenger
FACEBOOK_PAGE_ACCESS_TOKEN=EAAxxxxxxx
FACEBOOK_VERIFY_TOKEN=your_custom_verify_token

# Application Security
SESSION_SECRET=your_secure_session_key


#### Optional Variables
bash
# AI Enhancement (if enabled)
GOOGLE_API_KEY=your_gemini_api_key
GOOGLE_SHEETS_CREDS_JSON=service_account_json

# Additional Security
CSV_ENCRYPTION_KEY=encryption_key_for_backups


### 7. API Endpoints

#### Webhook Endpoint (/webhook)
- **GET**: Facebook webhook verification
- **POST**: Unified message processing for WhatsApp and Facebook

#### Health Check (/health)
json
{
    "status": "healthy",
    "service": "whatsapp-finance-bot",
    "database": "connected"
}


### 8. Message Flow Architecture

#### WhatsApp Flow
1. User sends: "Coffee 150"
2. Twilio webhook delivers form data to /webhook
3. Extract amount (150) and categorize (Food üçî)
4. Hash user ID and save to database
5. Calculate monthly total
6. Send reply via Twilio API: "‚úÖ Logged: Coffee 150 üí∞ Total: ‡ß≥2,450.00"

#### Facebook Flow
1. User sends: "Lunch 200"
2. Facebook webhook delivers JSON to /webhook
3. Extract sender PSID and message text
4. Process expense identically to WhatsApp
5. Send reply via Facebook Graph API

### 9. Data Processing Features

#### Real-Time Calculations
- Monthly totals calculated on each expense
- Category distribution tracking
- Platform-specific analytics
- User engagement metrics

#### Message Formatting
- Single-line responses to prevent truncation
- Emoji categorization for visual appeal
- Consistent currency formatting (‡ß≥)
- Error messages with examples

### 10. Deployment Architecture

#### Production Environment
- **Framework**: Flask with Gunicorn WSGI server
- **Database**: PostgreSQL with connection pooling
- **Hosting**: Replit with automatic scaling
- **Monitoring**: Health checks and logging

#### Development Features
- **Debug Mode**: Detailed error logging
- **Environment Detection**: Development vs production configs
- **Hot Reload**: Automatic code reloading during development

## Replication Instructions

### 1. Environment Setup
bash
# Install dependencies
pip install flask twilio requests psycopg2-binary

# Set environment variables
export DATABASE_URL="postgresql://..."
export TWILIO_ACCOUNT_SID="ACxxxxx"
export TWILIO_AUTH_TOKEN="your_token"
export FACEBOOK_PAGE_ACCESS_TOKEN="EAAxxxx"
export FACEBOOK_VERIFY_TOKEN="your_verify_token"
export SESSION_SECRET="secure_key"


### 2. Database Setup
sql
-- Create database
CREATE DATABASE finance_tracker;

-- Create tables (see schema above)
-- Set up indexes for performance
CREATE INDEX idx_expenses_user_month ON expenses(user_id, month);
CREATE INDEX idx_expenses_created_at ON expenses(created_at);


### 3. Webhook Configuration
- **Twilio**: Set webhook URL to https://your-domain.com/webhook
- **Facebook**: Configure webhook with verify token and message permissions

### 4. Testing
bash
# WhatsApp test
curl -X POST /webhook -H "Content-Type: application/x-www-form-urlencoded" \
  -d "From=whatsapp:+1234567890&Body=Test coffee 150"

# Facebook test
curl -X POST /webhook -H "Content-Type: application/json" \
  -d '{"object":"page","entry":[{"messaging":[{"sender":{"id":"123"},"message":{"text":"Test lunch 200"}}]}]}'


## Security Considerations for Replication

### Data Protection
- Never store raw phone numbers or user identifiers
- Use SHA-256 hashing for all user data
- Implement proper error handling without data leakage
- Use parameterized database queries
- Secure environment variable management

### API Security
- Validate all webhook requests
- Implement rate limiting
- Use HTTPS for all external communications
- Secure credential storage
- Regular security audits

This comprehensive feature list covers all aspects of the WhatsApp Finance Tracker Bot, from technical implementation to security measures, enabling complete project replication with proper data protection.

from this is it safe to provide command to AI to build both the whatsapp and fb messenger module together or separate
Last time I started with whatsapp and then fb messnger but the database structure first broke and then whatsapp stopped functioning - and then all hell broke lose