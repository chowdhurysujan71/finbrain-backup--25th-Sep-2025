BLOCK 1 ‚Äî Health & Observability

Instruction to Agent
You are responsible for ensuring the system has reliable health and readiness signals.

Create /health endpoint that always returns a 200 response with {status: "alive"} if the process is up.

Create /readyz endpoint that verifies:

Database connection pool is active and can return at least 1 connection.

All external dependencies (AI API, object storage) respond with <1s latency.

Enable Sentry DSN so all runtime errors are captured, tagged with environment (staging, prod), and include request metadata (user_id, endpoint, timestamp).

Ensure both endpoints are accessible without authentication.

Acceptance Checks

/health always returns 200 on live service.

/readyz returns 200 only when DB + dependencies healthy, otherwise 503 with details.

Sentry dashboard displays at least 1 error event triggered by forced test failure.

BLOCK 2 ‚Äî File Storage Migration

Instruction to Agent
You are responsible for migrating static assets out of the repo.

Identify all files currently in attached_assets/.

Migrate them to chosen object storage (R2, S3, or Supabase).

Replace file references in code with signed URL generation (time-bound, expiring links).

Implement upload flow that writes new files only to storage.

Ensure repo has no user-uploaded binary assets after migration.

Acceptance Checks

Repo size reduced (no binaries left).

Upload API writes directly to storage bucket.

Signed URLs work and expire after configured TTL.

Attempting to fetch after expiry fails with 403.

BLOCK 3 ‚Äî AI Execution Stabilization

Instruction to Agent
You are responsible for stabilizing Gemini API usage.

Wrap Gemini calls in async tasks using asyncio or background workers.

Add timeout: if Gemini response >5s, return fallback message (‚ÄúCould not parse, please retry‚Äù).

Implement circuit breaker logic: if 3 consecutive failures occur, open breaker for 60s and route to regex/rule fallback.

Introduce lightweight queue (RQ/Arq) to handle background tasks like large report generation.

Ensure request path never blocks due to AI lag.

Acceptance Checks

Requests complete in <3s average.

Circuit breaker opens on repeated failures and closes automatically.

Fallback response visible in logs.

Queue processes background jobs without blocking request threads.

BLOCK 4 ‚Äî Logging & Telemetry

Instruction to Agent
You are responsible for structured event logging.

Configure all logs to stream to stdout in JSON format.

Mirror error + warning logs to Sentry.

Define structured events:

expense_logged (fields: user_id, amount, category, timestamp).

report_requested (fields: user_id, report_type, timestamp).

challenge_started (fields: user_id, challenge_id, day_number).

Ensure all events include correlation IDs (request_id).

Test by simulating expense log and verifying event appears in both logs and Sentry.

Acceptance Checks

JSON logs visible in Replit console.

Structured events searchable in Sentry by event name.

Correlation IDs consistent across logs + events.

BLOCK 5 ‚Äî Expense Parsing & Classification

Instruction to Agent
You are responsible for natural language understanding.

Build AI-first intent detection for commands: EXPENSE_LOG, EXPENSE_EDIT.

Add regex/rule fallback for simple Bangla and English cases:

Bangla verbs (‡¶ñ‡¶∞‡¶ö ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø, ‡¶ï‡¶ø‡¶®‡ßá‡¶õ‡¶ø).

English verbs (spent, paid, bought).

Normalize digits: BN (‡ß´‡ß¶) ‚Üí 50.

Add confidence scoring: if AI confidence <0.6, fallback to clarification prompt (‚ÄúDid you mean log expense for Food ‡ß≥700?‚Äù).

Always validate parsed amount and category against DB schema before saving.

Acceptance Checks

90%+ accuracy in 100 controlled test sentences.

Confidence fallback prompt triggers correctly.

Works for both Bangla and English inputs.

No invalid DB writes (e.g., amount null).

BLOCK 6 ‚Äî Corrections Flow

Instruction to Agent
You are responsible for enabling edits to logged expenses.

Implement ‚Äúedit last expense‚Äù flow tied to most recent entry for user_id.

Edits must overwrite the existing record but maintain an audit trail.

Store history of changes in expense_edits table (fields: expense_id, old_value, new_value, edited_at).

Prevent duplication: edits must not create a new expense record.

Confirm with user after correction: ‚Äú‚úÖ Updated last expense to Food ‡ß≥500.‚Äù

Acceptance Checks

Editing last entry updates DB correctly.

Audit trail shows previous + new values.

No duplicate rows created.

Confirmation shown in user chat.

BLOCK 7 ‚Äî Bilingual Support

Instruction to Agent
You are responsible for enabling full bilingual expense logging.

Maintain keyword dictionary for Bangla + English verbs.

Normalize all Bangla numerals into Arabic digits before parsing.

Extend regex fallback to handle both languages.

Test with mixed inputs (‚Äú‡¶Ü‡¶ú ‡ß´‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ spent for food‚Äù).

Acceptance Checks

All Bangla numerals convert correctly.

Mixed-language inputs parsed successfully.

Dictionary is extensible (new words can be added without code change).

BLOCK 8 ‚Äî User Flow & Confirmation

Instruction to Agent
You are responsible for clear, friendly confirmations.

After logging, respond with confirmation: ‚Äú‚úÖ Logged ‡ß≥700 for Food.‚Äù

If category ambiguous, prompt: ‚ÄúWhich category? üçî Food / üõí Groceries / üöï Transport.‚Äù

Ensure responses are bilingual (fallback to English if no Bangla detected).

Confirmation must always include parsed amount + category.

Acceptance Checks

Every logged expense gets a confirmation message.

Category prompt shows up when confidence <0.6.

Bilingual confirmations work in controlled test.

BLOCK 9 ‚Äî PWA App Shell

Instruction to Agent
You are responsible for moving from Messenger to a web-native shell.

Build PWA (React/HTMX served from Replit).

Implement pages:

/chat ‚Üí expense logs + corrections.

/report ‚Üí Money Story.

/challenge ‚Üí 3-Day Challenge flow.

/profile ‚Üí counters: reports, challenges, expense count.

Implement /api/report/preview endpoint serving static JSON.

Enable offline caching + installable PWA.

Acceptance Checks

PWA installs on Android/iOS.

All routes return valid UI.

Preview endpoint serves JSON successfully.

BLOCK 10 ‚Äî Growth Telemetry

Instruction to Agent
You are responsible for basic growth tracking.

Capture DAU, D1, D3 metrics in DB.

Add counters: total_expenses, total_reports, challenges_started.

Expose metrics via /metrics endpoint (Prometheus style).

Verify metric increments on user actions.

Acceptance Checks

Metrics recorded in DB after user activity.

/metrics endpoint accessible and up-to-date.

D1/D3 retention visible in logs.