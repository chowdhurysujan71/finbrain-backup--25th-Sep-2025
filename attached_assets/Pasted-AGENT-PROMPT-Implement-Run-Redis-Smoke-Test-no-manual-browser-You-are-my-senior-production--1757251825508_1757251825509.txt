AGENT PROMPT — Implement & Run Redis Smoke Test (no manual browser)

You are my senior production engineer. Add a minimal, NON-BREAKING Redis connectivity smoke test to this Flask app and execute it automatically. I will not run any browser tests.

Scope
- Do NOT modify existing job queue, circuit breaker, or other routes.
- Use REDIS_URL from secrets; 3s connect timeout.
- All changes must be additive and reversible.

Tasks

1) Route
- Create a new blueprint file: app/routes_redis_smoke.py
  • Register GET /redis-smoke
  • Logic (wrap all in try/except, never crash):
      - If REDIS_URL missing → return {"connected":false,"error":"missing REDIS_URL"}, 503
      - Connect to Redis with 3s timeouts (redis-py).
      - SET "smoke:test" = "ok" with EX=5
      - GET "smoke:test"
      - On success: return {"connected": true, "value": "<value or null>"} with 200
      - On error: return {"connected": false, "error": "<string>"} with 503
  • Use existing utils/logger.py for one JSON line:
      {"event":"redis_smoke","connected":true|false,"latency_ms":<int>,"error":optional}

- Wire the blueprint into the app factory / app.py WITHOUT altering init order or existing logic.

2) Tests
- Add tests/test_redis_smoke.py (pytest)
  • Mock redis client to simulate:
     - success (set/get ok) → 200, {"connected":true,"value":"ok"}
     - connection error → 503, {"connected":false}
     - missing REDIS_URL → 503, {"connected":false}
  • Ensure route never raises.

3) Docs
- Add /docs/redis-smoke.md
  • Purpose: validate Redis connectivity safely
  • Endpoint: GET /redis-smoke
  • Success vs failure JSON examples
  • Troubleshooting (missing REDIS_URL, wrong password, network error, TLS mismatch)
  • Note: uses short-lived key smoke:test with 5s TTL

4) Dependencies
- Ensure requirements include redis>=5.0 and pytest>=8.0 (dedupe if already present).

5) Run & Prove (NO BROWSER)
- Restart/launch the app.
- From the agent, run:
    curl -s -i http://127.0.0.1:PORT/redis-smoke || true
  (Use whatever local bind/port the app uses; detect from app run output.)
- Print the full HTTP response (status + JSON) as acceptance evidence.
- Run tests: pytest -q and show output.

6) Acceptance
- Console shows one JSON log line with event=redis_smoke and latency_ms.
- The curl output shows either:
   - 200 with {"connected":true,"value":"ok"}  (Redis reachable), OR
   - 503 with {"connected":false,"error":"..."} (expected if REDIS_URL not configured yet)
- tests/test_redis_smoke.py passes.

7) Commit
- Commit message:
  feat(test): add /redis-smoke endpoint, docs, and automated smoke execution

Constraints
- Keep changes minimal and additive.
- Do not change /readyz behavior.
- Do not leak secrets in logs or responses.
