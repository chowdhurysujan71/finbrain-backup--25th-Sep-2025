AGENT PROMPT — Phase D: PWA Shell (Installable + Offline) + HIG UI + E2E/UAT

You are my senior production engineer & UI engineer. Implement an installable, offline-capable PWA shell that follows Apple Human Interface Guidelines (HIG)-inspired principles and my brand tokens. Make MINIMAL, NON-BREAKING edits. Do not modify existing APIs or business logic. Reuse existing logger & Sentry.

NON-BREAKING GUARANTEES
- Additive files only (templates, static assets, blueprint).
- Do NOT remove or rename existing routes or change init order.
- If an API for chat/report isn’t present, show UI with gentle no-op messages (no 500s).
- Respect current auth/headers (use X-User-ID if present).

UI & DESIGN SYSTEM (apply in CSS via variables; keep clean & minimal)
Color tokens (use as CSS custom properties):
  --color-primary: hsl(210, 100%, 50%);          /* Primary Blue */
  --color-primary-50: hsl(210, 100%, 95%);       /* Finance Blue Light */
  --color-success: hsl(142, 76%, 36%);
  --color-bg: hsl(0, 0%, 100%);
  --color-fg: hsl(220, 13%, 18%);
  --color-muted: hsl(220, 9%, 46%);

Typography:
  - Primary: Inter with system fallbacks: "Inter", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", sans-serif
  - Hierarchy: Hero > Headline > Subheading > Body
  - Tracking-tight, light-to-regular weights, comfortable line-heights.

HIG-inspired style:
  - Clean, airy layouts; ample white space; clear hierarchy.
  - Border radius default: 12px (0.75rem).
  - Subtle layered shadows (no heavy drop shadows).
  - Smooth transitions (ease-out), short durations (120–200ms).
  - Hit targets ≥44px height; accessible contrast and focus states.

Build

1) ROUTES (Blueprint `pwa_ui`)
Create `app/pwa_ui.py` registering:
  - GET /chat       → expense input + recent entries list (HTMX partial hydrate)
  - GET /report     → Money Story (summary cards + placeholder charts)
  - GET /profile    → profile summary (shows user id if available)
  - GET /challenge  → 3-day challenge progress UI (placeholder if backend not ready)
  - GET /offline    → offline fallback page
Ensure these only read/POST to existing endpoints. If POST endpoints don’t exist, show a non-destructive toast “Action simulated (demo)”.

2) TEMPLATES (Jinja)
Create:
  - templates/base.html
    * <meta> for theme-color, viewport; link rel="manifest"; Apple touch icons; PWA install prompt hook.
    * Include HTMX via CDN.
    * Global nav: Chat | Report | Profile | Challenge (large tap targets).
    * Offline banner region; toast container.
  - templates/chat.html
    * “Hero” title; small card with expense form (amount, category, memo).
    * HTMX section for recent entries (loads partial).
  - templates/report.html
    * Summary cards (spend today/week/month placeholders); section that fetches Money Story via existing read/report API (if available) or shows a static placeholder.
  - templates/profile.html
    * Shows X-User-ID if present; app/version; links (privacy placeholder).
  - templates/challenge.html
    * Simple progress (3 steps) with success/neutral states; CTA to “Log today”.
  - templates/offline.html
    * Large “You’re offline” message, instructions to retry, limited nav.
  - templates/partials/entries.html
    * Table/list of recent entries; graceful empty state.
  - templates/partials/toast.html
    * Minimal accessible toast markup.

All template UI must use the design tokens & classes from app.css.

3) STATIC ASSETS
Create:
  - static/manifest.webmanifest
    * name: FinBrain; short_name: FinBrain; start_url: "/chat"; display: standalone; theme_color/bg per tokens
    * icons: 192x192, 512x512 PNGs (add simple placeholder icons in static/icons/)
  - static/js/sw.js
    * Precache: manifest, icons, app.css, pwa.js, offline.html.
    * Runtime: cache-first for static; network-first for API/HTML navigations; offline fallback to /offline.
    * Use skipWaiting() & clients.claim().
  - static/js/pwa.js
    * Register SW; add a subtle “Install” button that appears when installable.
    * Listen to online/offline events; toggle offline banner.
  - static/css/app.css
    * Define :root tokens above; Inter font-face if locally added, otherwise rely on system fallback; Apple-like spacing, shadows, and motion.
    * Components: navbar, card, button (primary/neutral/success), inputs, table/list styles, focus-visible outline, toast, offline banner.
  - static/icons/
    * icon-192.png, icon-512.png (placeholder logos in brand blue).
  - static/icons/social/
    * Optional simple monochrome SVGs; colorize via CSS to match brand colors (safe, non-breaking).

4) WIRING
- Register blueprint in app init without disturbing existing logic.
- Ensure static files served and /manifest.webmanifest available at /manifest.webmanifest and link rel="manifest" in base.html.
- Add meta apple-mobile-web-app-capable and apple-touch-icon links.
- Keep logging as-is; ensure one JSON line per request still emitted.

5) ACCESSIBILITY & PERFORMANCE
- Include proper labels, aria-live for toasts, focus-visible styles, color contrast ≥ WCAG AA.
- Keep payloads small; no SPA bundlers; HTMX only via CDN.

6) SERVICE WORKER BEHAVIOR (sw.js details)
- Precache list: ["/", "/chat", "/report", "/profile", "/challenge", "/offline", "/manifest.webmanifest", "/static/css/app.css", "/static/js/pwa.js", icon files]
- Install: open cache and addAll; skipWaiting.
- Activate: clients.claim.
- Fetch:
  * For navigations: try network; if fail, return offline.html.
  * For static: cache-first.
  * For API (paths starting with /assets, /jobs, your JSON endpoints): network-first; on failure, return a small Response with a friendly offline JSON or let UI show toast.

7) UAT & E2E (Automated + Manual)
Automated (Playwright + pytest):
  - Add dev deps: playwright>=1.45, pytest-playwright>=0.5.0, pytest>=8.
  - tests_e2e/test_pwa.py:
    1) test_manifest_and_sw: visit /chat → assert rel="manifest" present; SW registered.
    2) test_routes_render: assert 200 and key UI elements for /chat, /report, /profile, /challenge.
    3) test_offline_fallback: go online, visit /chat; then emulate offline; navigate to /report → see offline notice or offline page content.
    4) test_chat_form_smoke: if ENV flag PWA_E2E_STUB=1, post to a stub route that returns 201 and updates entries partial; otherwise skip with clear message.
  - Provide Make target: `make e2e` that installs browsers if needed and runs tests.

Manual (Docs):
  - /docs/pwa-uat-checklist.md:
    * Install on Android: Chrome → Add to Home Screen → Launch standalone.
    * Install on iOS: Safari → Share → Add to Home Screen → Launch.
    * Offline test: Airplane mode → open installed app → see “You’re offline”.
    * Route checks: /chat, /report, /profile, /challenge usable.
    * Optional: create a test expense; see list refresh.
    * Copy-paste spaces for screenshots (icon on home screen, install prompt, offline banner, each route).

8) PROOF & DOCS
- /docs/pwa-proof.md:
  * What was implemented (manifest, SW strategies, routes, HIG tokens).
  * How to install on Android/iOS with screenshots.
  * Acceptance criteria and results.
- /docs/CHANGELOG.md: Phase D entry with date and overview.

9) REQUIREMENTS
Ensure requirements.txt includes:
  flask (if not already)
  pytest>=8.0
  playwright>=1.45
  pytest-playwright>=0.5.0
HTMX via CDN in base.html (no Python dep).

10) ACCEPTANCE (print in agent output)
- `curl -I /manifest.webmanifest` → 200
- Grep `/chat` HTML for `<link rel="manifest"` and `navigator.serviceWorker.register`
- Run `make e2e` → show passing tests (or skips with clear reason if stubbing is enabled)
- Render /offline → 200 and proper message
- Confirm basic Lighthouse-like indicators (manifest detected, SW active) if feasible

COMMIT
- Commit message: feat(pwa): HIG-inspired PWA shell (installable + offline), routes (/chat,/report,/profile,/challenge), brand tokens, Playwright E2E, UAT docs
