You are editing the FinBrain repository. Apply THREE FIXES safely, then re-run the full DIAGNOSIS. Do not change payload shapes, routes, DB schema, secrets, or production security.

OBJECTIVE
1) Restore missing utils.intent_router so production routing no longer falls back.
2) Fix AI cold-start wiring causing "'str' object has no attribute 'session'".
3) Unblock E2E by enabling dev-only PSID allowlist.
Then re-run the existing diagnostic suite and print a Yes/No checklist.

HARD CONSTRAINTS
• Keep production behavior unchanged.
• Never weaken signature verification in production.
• Prefer least-invasive changes and document any assumptions.
• Commit to a cleanup branch only.

STEP 0 SAFETY
1) Capture current HEAD short hash, create branch fix_intent_ai_psid.
2) Ensure folders exist: utils, ai, scripts, artifacts.

STEP 1 INTENT ROUTER RESTORE
1) Search imports for intent routing:
   rg -n "intent_router|route_intent|route_message|from utils\.intent_router"
2) If utils/intent_router.py does not exist, create it as a thin adapter to the canonical production router:
   # utils/intent_router.py
   from utils.production_router import route_message
   def route_intent(message, *, psid_hash, now, ai, db):
       return route_message(message, psid_hash=psid_hash, now=now, ai=ai, db=db)
3) If callers expect a different name, add a shim:
   # preserve legacy import name if needed
   def route_intent_v2(*args, **kwargs): return route_intent(*args, **kwargs)
4) Run: python -c "import utils.intent_router; print('intent_router: OK')"

STEP 2 AI COLD-START FIX
1) Locate AI bootstrap:
   rg -n "build_ai|AIAdapter|Gemini|OpenAI|vendor_clients|Adapter" ai/ utils/ app/
2) Ensure adapter receives a real client object, not a string key.
   • If currently passing an API key string to AIAdapter, build the vendor client with the key, then pass the client into the adapter.
   Example:
   # ai/bootstrap.py
   import os
   from ai.vendor_clients import GeminiClient
   from ai.adapter import AIAdapter
   def build_ai():
       key = os.environ['GEMINI_API_KEY']
       client = GeminiClient(api_key=key)    # must expose .session or equivalent
       return AIAdapter(client)
3) Add a safe warm-up:
   def warmup(ai):
       try:
           ai.health_check()
       except Exception as e:
           print(f"[AI warmup warning] {e}")
4) On app startup, call warmup(ai) in dev only.
5) Quick smoke:
   python - <<'PY'
from ai.bootstrap import build_ai
ai = build_ai()
print("ai_type:", type(ai))
try:
    from ai.bootstrap import warmup
    warmup(ai)
    print("ai_warmup: OK")
except Exception as e:
    print("ai_warmup: WARN", e)
PY

STEP 3 DEV-ONLY PSID ALLOWLIST FOR E2E
1) Create utils/allowlist.py if missing:
   import os
   DEV_PSIDS = set(filter(None, os.getenv("DEV_PSIDS","").split(",")))
   def is_dev_psid(psid): return psid in DEV_PSIDS
2) In the router where sender_psid is available, before rejecting in non-production:
   if os.getenv("ENV") != "production":
       from utils.allowlist import is_dev_psid
       if is_dev_psid(sender_psid):
           pass  # allow through normal flow
3) Do not execute any allowlist logic when ENV=production.
4) Expect the user to provide DEV_PSIDS in Replit Secrets. Do not hardcode.

STEP 4 RE-RUN DIAGNOSTICS
1) Start the app as usual. Verify /health returns OK.
2) Run existing script:
   bash ./scripts/e2e_local_http.sh || true
3) Produce updated reports in artifacts/ and refresh:
   TEST_REPORT.md, PERF_REPORT.md, SECURITY_CHECKLIST.md

STEP 5 OUTPUT CHECKLIST
At the end, PRINT EXACTLY the following block, with Yes or No filled from actual results:

=== GO/NO-GO CHECKLIST ===
Missing utils.intent_router fixed: Yes/No
Routing uses canonical router, no emergency fallback: Yes/No
AI cold-start error resolved (no "'str' has no attribute 'session'"): Yes/No
AI warm-up completes without fatal error: Yes/No
Dev E2E unblocked using allowlisted PSID: Yes/No
DB writes verified from E2E: Yes/No
Security unchanged in production path: Yes/No
Performance within previous baseline: Yes/No
All diagnostics regenerated: Yes/No
Recommendation: GO / CONDITIONAL GO / NO-GO
==========================

COMMIT
Create commits for:
• intent router restore
• AI bootstrap wiring and warm-up
• dev-only PSID allowlist
• diagnostics re-run

If any step cannot be completed, stop and print a short reason plus the partial checklist with “No” for the blocked items.
