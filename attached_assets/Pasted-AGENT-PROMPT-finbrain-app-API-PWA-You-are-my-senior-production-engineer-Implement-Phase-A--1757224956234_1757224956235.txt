AGENT PROMPT — finbrain-app (API + PWA)

You are my senior production engineer. Implement Phase A: Observability Foundations for this Flask app with zero breaking changes. Perform all edits automatically (create/modify files, install packages, run tests, write docs). Do not remove existing routes or logic.

Requirements
- Add endpoints:
  - GET /health → always 200 {"status":"ok"}, no dependencies, <100ms.
  - GET /readyz → 200 only if DB OK AND AI key present; else 503. Body: {"db":bool,"redis":bool,"ai_key_present":bool}. Redis is informational (not gating).
  - GET /__test_error → raises an exception for Sentry verification.
- Sentry: initialize only when ENV=prod and SENTRY_DSN is set.
- JSON logging middleware (all requests): one line with fields ts, level, request_id, method, path, status, latency_ms, user_id (from X-User-ID if present). Echo X-Request-ID header in responses.
- Timeouts: DB connect_timeout=2s; Redis socket timeouts=1s; /readyz budget ≤2s.
- Env vars used: ENV, SENTRY_DSN, DATABASE_URL, REDIS_URL, AI_API_KEY.

Tasks
1) Create app/bootstrap.py with create_app():
   - Initialize Sentry (guarded by ENV=prod + SENTRY_DSN).
   - Register JSON logging middleware.
   - Add /health, /readyz, /__test_error.
   - Helpers: check_db() uses psycopg3 SELECT 1; check_redis() uses redis ping with 1s timeouts.
2) If app instance is created elsewhere (e.g., app.py), minimally refactor to import and use create_app() without breaking current behavior.
3) Dependencies: ensure requirements include:
   - flask
   - psycopg[binary]>=3.1
   - redis>=5.0
   - sentry-sdk>=2.0
   - requests>=2.31
   - pytest for tests
4) Add tests/tests_health_readyz.py using pytest:
   - Build app via create_app().
   - Assert /health returns 200 + {"status":"ok"}.
   - Monkeypatch DB check and set AI_API_KEY to simulate:
     a) DB True + AI True → 200
     b) DB False or AI False → 503
5) Add Makefile:
   - make test → pytest -q
   - make run → start the app (match current project’s entrypoint)
6) Add docs:
   - /docs/health-spec.md with the contract, checks, timeouts, runbook, acceptance.
   - /docs/logging-proof.md with log format and verification steps.
7) On startup, print exactly one JSON log line: {"component":"finbrain-app","event":"boot","env":ENV}

Verification (run and show outputs)
- Install deps; run `make test` and show passing tests.
- Start the server. Run:
  - curl -i /health  (expect 200, X-Request-ID header present)
  - curl -s /readyz  (200 only when DB OK AND AI_API_KEY set; otherwise 503)
- Show console JSON logs for each request.
- Trigger /__test_error once (only if ENV=prod + SENTRY_DSN set) and confirm Sentry event.

Commit
- Commit with message: feat(observability): add /health, /readyz, Sentry, JSON logs + docs
