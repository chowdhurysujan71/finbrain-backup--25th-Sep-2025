Final, no-surprises patch (copy/paste)
1) Precedence (lock it)
ADMIN ‚Üí PCA_AUDIT ‚Üí EXPENSE_LOG ‚Üí ANALYSIS ‚Üí FAQ ‚Üí COACHING ‚Üí SMALLTALK

2) Signals (first-person ‚Äúspent/paid/bought‚Äù verb)

Add a boolean in your extractor:

# nlp/signals_extractor.py (add)
RE_SPENT_VERB_BN = re.compile(r"(‡¶ñ‡¶∞‡¶ö ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø|‡¶ñ‡¶∞‡¶ö ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ|‡¶¶‡¶ø‡¶≤‡¶æ‡¶Æ|‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø|‡¶ï‡¶ø‡¶®‡ßá‡¶õ‡¶ø|‡¶®‡¶ø‡ßü‡ßá‡¶õ‡¶ø)\b")
RE_SPENT_VERB_EN = re.compile(r"\b(spent|paid|bought|purchased)\b", re.IGNORECASE)

signals["has_first_person_spent_verb"] = bool(
    RE_SPENT_VERB_BN.search(norm) or RE_SPENT_VERB_EN.search(norm)
)

3) Router rule (one clause)
# routing decision (top to bottom)
if signals.is_admin: return "ADMIN"
if session.pca_audit_mode: return "PCA_AUDIT"

# EXPENSE_LOG beats analysis/smalltalk if money + user's past-tense verb
if signals.has_money and signals.has_first_person_spent_verb:
    return "EXPENSE_LOG"

# Ambiguous money (no verb, no explicit analysis) ‚Üí clarify, not smalltalk
if signals.has_money and not signals.explicit_analysis_request:
    return "CLARIFY_EXPENSE"

# Analysis stays OR (not AND): time window OR analysis terms OR explicit analysis
if (signals.explicit_analysis_request
    or signals.has_time_window
    or signals.has_analysis_terms):
    return "ANALYSIS"

if signals.has_faq_terms: return "FAQ"
if signals.has_coaching_verbs and session.eligible_for_coaching: return "COACHING"
return "SMALLTALK"


Note the OR for analysis. Your report says ‚Äúrequires both time window AND analysis terms‚Äù; that will under-route real analysis asks like ‚Äú‡¶è‡¶á ‡¶∏‡¶™‡ßç‡¶§‡¶æ‡¶π?‚Äù or ‚Äúthis month?‚Äù. Keep it OR as we designed.

üß™ Contract tests (add these 5; they keep you at 100%)

BN expense with verb ‚Üí EXPENSE_LOG

Input: ‡¶Ü‡¶ú ‡¶ö‡¶æ ‡ß´‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶ñ‡¶∞‡¶ö ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø

Expect: EXPENSE_LOG and a stored expense (date=today, amount=50, category‚âàTea/Food & Dining)

BN expense without verb ‚Üí CLARIFY_EXPENSE

Input: ‡¶ö‡¶æ ‡ß´‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ

Expect: Clarify prompt with actions: ‚Äú‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡¶≤‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶® / ‡¶®‡¶æ / ‡¶¨‡¶∞‡¶Ç ‡¶∏‡¶æ‡¶∞‡¶æ‡¶Ç‡¶∂ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‚Äù

Explicit analysis wins

Input: ‡¶è‡¶á ‡¶Æ‡¶æ‡¶∏‡ßá‡¶∞ ‡¶ñ‡¶∞‡¶ö‡ßá‡¶∞ ‡¶∏‡¶æ‡¶∞‡¶æ‡¶Ç‡¶∂ ‡¶¶‡¶æ‡¶ì

Expect: ANALYSIS

Coaching stays coaching

Input: help me ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶§‡ßá this month

Expect: COACHING

No false positives from ‚Äú‡¶Ü‡¶ú‚Äù

Input: ‡¶Ü‡¶ú ‚Ä¶ (no money, no verbs)

Expect: not EXPENSE_LOG; continue normal routing

üö¶ Preflight probes (run before flipping overlays)

Probe A (BN log): ‚Äú‡¶Ü‡¶ú ‡¶ö‡¶æ ‡ß´‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶ñ‡¶∞‡¶ö ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø‚Äù
‚Üí 200/201, expense row created, reply confirms logging

Probe B (BN ambiguous): ‚Äú‡¶ö‡¶æ ‡ß´‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ‚Äù
‚Üí Clarify prompt rendered

Probe C (analysis): ‚Äú‡¶è‡¶á ‡¶Æ‡¶æ‡¶∏‡ßá‡¶∞ ‡¶ñ‡¶∞‡¶ö‡ßá‡¶∞ ‡¶∏‡¶æ‡¶∞‡¶æ‡¶Ç‡¶∂ ‡¶¶‡¶æ‡¶ì‚Äù
‚Üí Analysis bullets (AI on/fallback), strict JSON

Probe D (coaching): ‚Äúhelp me reduce food spend‚Äù
‚Üí Coaching plan returned

If any probe fails, don‚Äôt flip ROUTER_SCOPE further.