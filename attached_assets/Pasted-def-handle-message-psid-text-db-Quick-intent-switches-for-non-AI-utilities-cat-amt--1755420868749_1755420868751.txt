def handle_message(psid, text, db):
    # Quick intent switches for non-AI utilities
    cat, amt = parse_expense(text)
    if cat and amt:
        db.add_expense(psid, category=cat, amount=amt)
        safe_send_text(psid, f"Logged {cat} ৳{int(amt):,}. Need a 7-day snapshot?")
        send_quick_replies(psid, [
            {"title": "Yes, snapshot", "payload": "SHOW_SNAPSHOT"},
            {"title": "Set a cap", "payload": "SET_GOAL"},
            {"title": "Done", "payload": "DONE"},
        ])
        return

    # AI path (assumes you already applied the 4/60s limiter)
    allowed, retry_in = can_use_ai(psid)
    if not allowed:
        safe_send_text(psid, fallback_blurb(retry_in))
        send_picker(psid)  # “Pick one:” Log/Weekly Review/Set Goal
        record_event("fallback_sent")
        return

    # Build short-burst reply from AI signal
    insight = ai_reply(psid, text, system_prompt=SYSTEM_PROMPT)  # your adapter
    # Example mapping insight → rubric fields:
    summary = insight.get("summary", "Here’s a quick take.")
    action  = insight.get("action", "Want me to set a simple budget so this stays on track?")
    question = insight.get("question", "See details or set a cap?")

    safe_send_text(psid, format_coach_reply(summary, action, question))
    send_quick_replies(psid, [
        {"title": "Show breakdown", "payload": "SHOW_BREAKDOWN"},
        {"title": "Set a cap", "payload": "SET_GOAL"},
        {"title": "Not now", "payload": "IGNORE"},
    ])
    record_event("ai_allowed")
9) Payload handlers for quick replies (stubs)
python
Copy
Edit
def handle_payload(psid, payload, db):
    if payload == "SHOW_SNAPSHOT":
        safe_send_text(psid, snapshot_last_7_days(psid, db))
        return send_picker(psid)
    if payload == "SET_GOAL":
        safe_send_text(psid, "Which category should we cap?")
        # follow with dynamic quick replies
    if payload.startswith("SET_DINING_CAP_YES"):
        db.set_cap(psid, "Dining", 6500)
        return safe_send_text(psid, "Done. Dining cap set to ৳6,500 for next week.")
    if payload.startswith("GOAL_ADD_"):
        amt = int(payload.split("_")[-1])
        db.transfer_to_goal(psid, amt)
        return safe_send_text(psid, f"Added ৳{amt:,} to your goal.")
    # …add other handlers similarly