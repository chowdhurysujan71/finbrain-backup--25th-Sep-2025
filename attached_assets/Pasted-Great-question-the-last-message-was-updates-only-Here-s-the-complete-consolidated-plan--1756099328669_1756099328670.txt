Great question — the last message was **updates only**. Here’s the **complete, consolidated plan** (everything in one place) so you can hand it to the Replit agent without hunting through earlier threads.

---

# FinBrain Guardrails v2 — Full Implementation Package (Post-FAQ, Low Risk)

## Objectives

* Add spam/cost guardrails **without** touching DB schema or breaking FAQ speed.
* Keep all changes **additive**, **flag-gated**, and **reversible**.
* Owner bypass for **30522114904098519** / **a20425ef9abcb34401cd0f33773b7f5071bc2713885cf7f15b026e6fe26916ff**.

## Injection Point (critical)

* Run **FAQ first** (instant, deterministic).
* If **no FAQ match**, run guardrails.
* Then continue to **Limiter → RL-2 (if limited) → AI (if enabled) → Dispatcher/Handlers**.

---

## Files to Add / Edit

* **NEW** `utils/ux_copy.py` — all UX strings in one place.
* **NEW** `utils/ttl_store.py` — Redis (preferred) or safe in-proc TTL store (with Redis import fallback).
* **EDIT** `utils/ai_adapter_v2.py` — prepend Messaging Guardrail prompt.
* **EDIT** `utils/production_router.py` — post-FAQ guardrail middleware (burst, daily cap, PII, anti-repeat; all flag-gated).
* **NEW** `tests/test_guardrails.py` — smoke tests for store + copy.

---

## Environment (minimal, safe defaults)

```
FEATURE_BURST_LIMIT=false
FEATURE_DAILY_CAP=false
FEATURE_PII_FILTER=false
FEATURE_ANTI_REPEAT=false
OWNER_PSID=30522114904098519
OWNER_PSID_HASH=a20425ef9abcb34401cd0f33773b7f5071bc2713885cf7f15b026e6fe26916ff
DAILY_CAP_LIMIT=30
BURST_LIMIT_MAX=5
BURST_LIMIT_WINDOW_SECONDS=10
REDIS_URL=  # optional; use Redis if available
```

---

## UX Copy (paste into `utils/ux_copy.py`)

* **Burst:** “⚠️ You’re sending messages very fast—please slow down.”
* **Daily cap:** “⏳ You’ve reached today’s limit of 30 messages. Please come back tomorrow.”
* **Repeat:** “Got that—anything new you’d like me to do now: log, summary, or insight?”
* **PII:** “🔒 For your security, please don’t share sensitive information here.”
* **Busy:** “⏳ FinBrain is a bit busy right now. Please try again in a few minutes.”
* **Fallback:** “🧭 I can help you log expenses, show summaries, or share insights. Try: ‘coffee 120’ or ‘summary this week’. For details visit [www.finbrain.app”](http://www.finbrain.app”)

---

## Messaging Guardrail Prompt (prepend in `utils/ai_adapter_v2.py`)

* Natural, concise, one bubble, ≤280 chars, 0–2 emojis, one CTA.
* Acknowledge → answer/log/insight → one next step.
* Avoid repeating exact phrasing within \~45s; ask **one** clarifying question if unclear.
* Never request/echo card numbers, passwords, or PII.

*(Use the improved text from my previous message — it’s final.)*

---

## TTL Store (safe Redis import) — `utils/ttl_store.py`

* Prefers Redis when `REDIS_URL` exists.
* **Try/except** on `import redis`; fallback to in-proc TTL with locks if package missing.
* Simple ops: `incr(key, ttl)`, `get(key)`, `setex(key, ttl, value)`, `exists(key)`.

---

## Guardrail Middleware (post-FAQ) — `utils/production_router.py`

**Order inside handler:**

1. `det = match_faq_or_smalltalk(user_text)` → if present, **return** (no guardrails).
2. `gate = _guardrail_after_faq(psid, psid_hash, text)` → if message returned, **return** it.
3. Proceed to your existing flow (Limiter → RL-2 → AI → Dispatcher/Handlers).

**Guardrails (all flag-gated; owner bypass):**

* **Owner bypass:** skip all checks if PSID or hash matches owner.
* **Burst limiter:** `BURST_LIMIT_MAX` per `BURST_LIMIT_WINDOW_SECONDS` → on exceed, return **SLOW\_DOWN**.
* **Daily cap:** `DAILY_CAP_LIMIT` per UTC day using TTL key `daily:{psid}:{YYYYMMDD}` → on exceed, **DAILY\_LIMIT**. Auto-reset at UTC midnight via TTL.
* **PII light filter:** regex for 13–19 digit sequences, `password|pin|otp` → return **PII\_WARNING** (do not echo content).
* **Anti-repeat:** MD5 of full text with **45s** TTL (`repeat:{psid}`) → on identical repeat within window, return **REPEAT\_HINT**. *(MD5 fixes “coffee 120” vs “coffee 100” collisions).*
* **Graceful failure:** wrap guardrail block in `try/except`; on error, **fail open** (continue normal processing).

---

## UAT (manual, 30–40 min)

**Setup**

* Turn flags ON for testing:

  * `FEATURE_BURST_LIMIT=true`
  * `FEATURE_DAILY_CAP=true`
  * `FEATURE_PII_FILTER=true`
  * `FEATURE_ANTI_REPEAT=true`
* Ensure owner ENV is set (PSID + full hash).
* Deploy to your Reserved VM.

**Scenarios**

1. **FAQ preserved**

   * Send `what is finbrain` rapidly 6× → always FAQ response, no SLOW\_DOWN/DAILY\_LIMIT.
2. **Burst limiter (non-FAQ)**

   * 6 non-FAQ messages in 10s → exactly one **SLOW\_DOWN**; after 10s, normal again.
3. **Daily cap**

   * 31 non-FAQ messages same UTC day → 31st gets **DAILY\_LIMIT**; no more messages processed that day.
   * After UTC midnight → counter resets → normal.
4. **PII**

   * Paste a 16-digit number or “my password is 1234” → **PII\_WARNING** once; content not echoed.
5. **Anti-repeat (45s)**

   * Send identical text twice within 45s → second gets **REPEAT\_HINT**.
   * “coffee 120” then “coffee 100” → **no repeat hint**.
6. **Owner bypass**

   * From **30522114904098519** → never see SLOW\_DOWN/DAILY\_LIMIT; all flows normal.
7. **Prompt naturalness**

   * Ask same question twice within 45s → wording varies (not robotic); replies ≤280 chars, 0–2 emojis, one CTA.

**Latency spot-check**

* FAQ latency unchanged (\~1 ms).
* Non-FAQ overhead target: <10 ms (Redis) / \~1–2 ms (in-proc).

---

## End-of-Run Report (fill after UAT)

**Build:** `<commit>`
**Env:** Reserved VM (0.5 vCPU / 2 GiB)
**Date (UTC+6):** `<YYYY-MM-DD>`
**Tester:** `<name>`

### Summary

* ✅ Post-FAQ injection confirmed (FAQ path untouched, \~1 ms).
* ✅ Burst limiter (5/10s), daily cap (30/day, UTC reset), PII, anti-repeat (45s, MD5) working.
* ✅ Owner bypass (PSID + hash) respected.
* ✅ Messaging prompt produces short, friendly, varied replies (≤280 chars, 0–2 emojis, one CTA).
* ✅ No regressions in logging/summaries/insights.

### Metrics

* Avg FAQ latency: `<X ms>` (baseline parity)
* Non-FAQ guardrail overhead: `<Y ms>`
* Burst hits/day: `<n>` | Daily caps/day: `<n>` | PII warns/day: `<n>` | Repeat hints/day: `<n>`

### Issues

* `<none / list with severity & repro>`

### Go/No-Go

* **GO / NO-GO** — Sign-off: `<name>`

---

## Rollback & Safety

* **Flags OFF** to disable any module instantly.
* Redis import guarded with try/except; falls back to in-proc store.
* Guardrail middleware wrapped in try/except; failures never block user flows.
* All edits are **additive**; no file moves/renames; no DB/schema changes.

---

This is the **entire plan** (not just updates): prompts, guardrail logic, UX copy, injection point, envs, UAT, report, rollback. If you want, I can collapse this into a single “Replit Agent” instruction block formatted exactly for your agent UI.
