Awesome ‚Äî here‚Äôs a **single, copy-paste Replit AI Agent prompt** to implement the **Budget Status Report enhancement** exactly in line with your ‚Äúalways\_on\_v1‚Äù architecture. It‚Äôs additive, no feature flags, no schema changes, and plugs cleanly into your existing summary flow.

---

# Replit Agent Task ‚Äî FinBrain ‚ÄúBudget Status Report‚Äù (Always-On, Low Risk)

You are editing the FinBrain repo. Make **additive** changes only. **Do not** rename/move files or change public interfaces. Respect the current pipeline:

**FAQ fast-path ‚Üí (post-FAQ) guardrails v2 ‚Üí Limiter ‚Üí RL-2 (if limited) ‚Üí AI (if enabled) ‚Üí Dispatcher/Handlers**

## Files in scope

* `handlers/summary.py` (extend existing summary path)
* `utils/ux_copy.py` (append short, emoji-friendly templates)
* `utils/intent_router.py` (tiny keyword boost to map ‚Äústatus/budget status‚Äù ‚Üí SUMMARY)
* `utils/production_router.py` (**read only**; do not re-order the pipeline)

## Hard constraints

* **Always-on**: no feature flags. The enhancement should:

  * Auto-augment existing ‚Äúsummary/report/spending‚Äù replies with a **period-over-period** comparison (week-over-week or month-over-month) and **biggest movers**.
  * Also respond naturally if the user says ‚Äústatus‚Äù or ‚Äúbudget status‚Äù by using the SUMMARY intent.
* **DB access**: Use the project‚Äôs existing **SQLAlchemy** pattern (e.g., `db.session.query(Expense).filter(Expense.user_id == user_id, ‚Ä¶)`).
* **No new routes, no file serving, no exports.**
* **Response style**: keep to your guardrail tone (‚â§280 chars, 0‚Äì2 emojis, one CTA).

---

## PART 1 ‚Äî UX copy (append to `utils/ux_copy.py`)

Add these (do **not** edit existing constants):

```python
# Budget Status / Comparison snippets (short, single-bubble friendly)
BUDGET_STATUS_WOW = "üìä This week: ‡ß≥{this_total:.0f} vs last week ‡ß≥{prev_total:.0f} ({delta_sign}{delta_pct}%). üî• Top mover: {top_cat}."
BUDGET_STATUS_MOM = "üìà This month: ‡ß≥{this_total:.0f} vs last month ‡ß≥{prev_total:.0f} ({delta_sign}{delta_pct}%). üî• Top mover: {top_cat}."
BUDGET_STATUS_TRAIL = "üí° Want tips or a category breakdown?"
BUDGET_STATUS_EMPTY = "üì≠ Not enough data for a comparison yet. Log a few expenses and try again."
```

> Keep them short; the handler will compose at most **one** bubble and (optionally) add the trailing CTA text inline if room remains under the guardrail.

---

## PART 2 ‚Äî Intent enrichment (edit `utils/intent_router.py`)

**Goal:** Map ‚Äústatus‚Äù and ‚Äúbudget status‚Äù to **existing SUMMARY intent** (do not create new intents).

Add a light keyword rule **without** disrupting current logic:

```python
text_l = (text or "").lower()

# If user asks for 'status' or 'budget status', treat as SUMMARY
if "budget status" in text_l or text_l.strip() == "status":
    return Intent.SUMMARY
```

> Ensure this runs alongside your existing summary/report/spending detection. Don‚Äôt change priorities for other intents.

---

## PART 3 ‚Äî Summary enhancement (edit `handlers/summary.py`)

Extend the **existing summary handler** (where you already format week/month summaries). Add helpers for period bounds and category totals using **SQLAlchemy**. Assume your Expense model has (at least) `user_id`, `amount`, `category`, `timestamp`/`created_at`.

1. **Helpers (top of file or near existing helpers):**

```python
import datetime, calendar
from sqlalchemy import func
from app import db
from models import Expense  # adjust import to your project

def _week_bounds(dt_utc: datetime.datetime):
    # Monday 00:00:00 to Sunday 23:59:59 (ISO week)
    dow = dt_utc.weekday()
    start = datetime.datetime(dt_utc.year, dt_utc.month, dt_utc.day) - datetime.timedelta(days=dow)
    end = start + datetime.timedelta(days=6, hours=23, minutes=59, seconds=59)
    return start, end

def _month_bounds(year: int, month: int):
    last_day = calendar.monthrange(year, month)[1]
    start = datetime.datetime(year, month, 1)
    end = datetime.datetime(year, month, last_day, 23, 59, 59)
    return start, end

def _sum_and_top_category(user_id, start, end):
    q = (
        db.session.query(
            func.coalesce(func.sum(Expense.amount), 0).label("total"),
            Expense.category,
        )
        .filter(Expense.user_id == user_id)
        .filter(Expense.timestamp >= start)
        .filter(Expense.timestamp <= end)
        .group_by(Expense.category)
    )
    rows = q.all()
    total = sum([r.total if hasattr(r, "total") else r[0] for r in rows]) if rows else 0
    # Find largest category by spend
    if rows:
        # handle either row.total/row.category or tuple access depending on ORM config
        pairs = [(getattr(r, "category", r[1]) or "Uncategorized", float(getattr(r, "total", r[0]) or 0)) for r in rows]
        top_cat = max(pairs, key=lambda x: x[1])[0]
    else:
        top_cat = "‚Äî"
    return float(total), top_cat

def _pct_change(cur, prev):
    if prev == 0:
        return 100.0 if cur > 0 else 0.0
    return round(abs((cur - prev) / prev) * 100.0, 1)
```

2. **Compose a compact ‚ÄúBudget Status‚Äù line inside your existing summary path:**

* Detect whether the user asked for **week** or **month** (reuse your current logic; if ambiguous, prefer **week** when today is within a week summary path, otherwise **month**).
* Compute **this period** vs **previous period**, totals and top category for **this period**.
* Format with the new UX strings and append a short CTA if room permits.

```python
from utils.ux_copy import (
    BUDGET_STATUS_WOW, BUDGET_STATUS_MOM, BUDGET_STATUS_TRAIL, BUDGET_STATUS_EMPTY
)

def _append_budget_status_line(user_id: str, mode: str, now_utc: datetime.datetime):
    """
    mode: 'week' or 'month'
    returns a short single-line string or None
    """
    try:
        if mode == "week":
            this_s, this_e = _week_bounds(now_utc)
            last_s = this_s - datetime.timedelta(days=7)
            last_e = this_s - datetime.timedelta(seconds=1)
            cur_total, cur_top = _sum_and_top_category(user_id, this_s, now_utc)
            prev_total, _ = _sum_and_top_category(user_id, last_s, last_e)
            if cur_total == 0 and prev_total == 0:
                return BUDGET_STATUS_EMPTY
            delta_sign = "+" if (cur_total - prev_total) > 0 else "‚Äì"
            pct = _pct_change(cur_total, prev_total)
            line = BUDGET_STATUS_WOW.format(
                this_total=cur_total, prev_total=prev_total,
                delta_sign=delta_sign, delta_pct=pct, top_cat=cur_top
            )
            # Optionally add CTA if under ~240 chars
            return line if len(line) > 240 else f"{line} {BUDGET_STATUS_TRAIL}"

        # default: month
        this_s, _ = _month_bounds(now_utc.year, now_utc.month)
        last_month_day = (now_utc.replace(day=1) - datetime.timedelta(days=1))
        last_s, last_e = _month_bounds(last_month_day.year, last_month_day.month)
        cur_total, cur_top = _sum_and_top_category(user_id, this_s, now_utc)
        prev_total, _ = _sum_and_top_category(user_id, last_s, last_e)
        if cur_total == 0 and prev_total == 0:
            return BUDGET_STATUS_EMPTY
        delta_sign = "+" if (cur_total - prev_total) > 0 else "‚Äì"
        pct = _pct_change(cur_total, prev_total)
        line = BUDGET_STATUS_MOM.format(
            this_total=cur_total, prev_total=prev_total,
            delta_sign=delta_sign, delta_pct=pct, top_cat=cur_top
        )
        return line if len(line) > 240 else f"{line} {BUDGET_STATUS_TRAIL}"
    except Exception:
        # Fail-quiet: never block main summary if comparison has an issue
        return None
```

3. **Use it inside the existing summary reply builder**
   Find the place in your summary handler where the final reply is assembled (e.g., `format_ai_summary_reply(...)` or similar). After computing the usual totals, **append exactly one** ‚Äúbudget status‚Äù line. Keep to a **single bubble**.

Pseudo-example (adjust to your function names):

```python
def handle_summary(user_id: str, text: str, now_utc: datetime.datetime, ...):
    # ... your existing logic for detecting period + building primary summary line(s)
    mode = "week" if "week" in (text or "").lower() or /* your current week detection */ else "month"

    status_line = _append_budget_status_line(user_id=user_id, mode=mode, now_utc=now_utc)
    base_reply = existing_summary_compose(...)  # your current summary text

    if status_line:
        # Keep single bubble; join with newline if within guardrail limits
        combined = f"{base_reply}\n{status_line}"
        return combined if len(combined) <= 280 else base_reply  # respect guardrail length
    return base_reply
```

**Important:** Do not change call signatures used by `production_router.py` or the dispatcher. This enhancement should be contained within `handlers/summary.py`.

---

## PART 4 ‚Äî What NOT to do

* ‚ùå No feature flags.
* ‚ùå No file exports or links.
* ‚ùå No new Flask routes.
* ‚ùå No changes to production router order.
* ‚ùå Don‚Äôt exceed one message bubble.

---

## UAT (manual, \~15 minutes)

**Data setup:** Ensure test user has at least 4‚Äì6 expenses across two weeks and two months, with 2‚Äì3 categories.

**Scenarios**

1. **Weekly summary with status (explicit):**

   * Input: `this week summary`
   * Expect: your normal weekly totals + **one** extra line like:
     `üìä This week: ‡ß≥2500 vs last week ‡ß≥1800 (+39%). üî• Top mover: Food. üí° Want tips or a category breakdown?`
   * Single bubble, ‚â§280 chars, 0‚Äì2 emojis.

2. **Monthly summary with status (explicit):**

   * Input: `this month summary`
   * Expect: your normal monthly line + MoM comparison line (as above, using üìà template).

3. **Status keyword path:**

   * Input: `status` or `budget status`
   * Expect: SUMMARY intent triggered, same output behavior as above (choose week/month per your default).

4. **Low data case:**

   * With a new user (few/no expenses):
   * Input: `summary`
   * Expect: either your current minimal summary or `üì≠ Not enough data for a comparison yet. Log a few expenses and try again.` appended (still one bubble).

5. **Guardrails respected:**

   * Messages stay ‚â§280 chars, one bubble, 0‚Äì2 emojis, one CTA (‚Äútips?‚Äù or ‚Äúbreakdown?‚Äù).
   * No change to FAQ latency or other intents.

---

## End-of-Run Report (fill after UAT)

**Build:** `<commit>`
**Date (UTC+6):** `<YYYY-MM-DD>`
**Tester:** `<name>`

### Summary

* ‚úÖ Weekly and monthly summaries now include compact period-over-period status + ‚Äútop mover‚Äù.
* ‚úÖ ‚Äústatus‚Äù / ‚Äúbudget status‚Äù map to SUMMARY without adding new intents.
* ‚úÖ No schema changes; DB queries follow SQLAlchemy pattern.
* ‚úÖ Guardrail style respected (single bubble, ‚â§280 chars, 0‚Äì2 emojis, one CTA).
* ‚úÖ No regressions in logging/insights/FAQ.

### Examples

* Paste 2‚Äì3 example replies from UAT.

### Issues

* `<none / list>` with repro steps.

### Go/No-Go

* **GO / NO-GO** ‚Äî Sign-off: `<name>`

---

### Why this is safe

* Pure **read-only** aggregation using your existing Expense table and summary code paths.
* **Always-on** and additive; no flags, no routes, no exports.
* Fails quietly: if comparison calc errors, the base summary still returns.

If you want, I can also craft **tone-polished example outputs** for your demo script (‚ÄúFinBrain Demo Flow‚Äù) using this new status line‚Äîjust say the word.
