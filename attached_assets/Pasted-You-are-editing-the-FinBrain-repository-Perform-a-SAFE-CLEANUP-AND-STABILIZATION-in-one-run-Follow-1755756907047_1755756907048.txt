You are editing the FinBrain repository. Perform a SAFE CLEANUP AND STABILIZATION in one run. Follow every step exactly and report a clear summary at the end.

OBJECTIVE
Stabilize the codebase by archiving junk, unifying modules, fixing imports, and enforcing a minimal folder layout, while keeping current runtime behavior unchanged.

HARD CONSTRAINTS
1) Do not change payload shapes, routes, webhook security behavior, or DB schema.
2) Keep identity hashing exactly as utils.identity.psid_hash or the current canonical function. If multiple copies exist, keep one canonical function and refactor callers to use it.
3) Do not expose secrets. Do not modify environment variables.
4) If anything is unclear, choose the least invasive action that preserves current behavior.

DELIVERABLES
1) A cleanup branch with commits after each major step.
2) An archive/ folder containing quarantined files.
3) A minimal folder layout: app/, ai/, db/, utils/, tests/, archive/.
4) Passing static checks and the app starting successfully with an OK health check.
5) A Cleanup Report printed at the end listing files moved, duplicates removed, and commands to roll back if needed.

STEP 0 SAFETY NET
1) Capture current HEAD short hash into a variable.
2) Create a new git branch named cleanup.
3) Create snapshots/ if not present and copy the whole tree into snapshots/baseline_<date>_<hash> excluding venv and large caches.

STEP 1 DISCOVER ENTRYPOINT AND ACTIVE ROUTER
1) Read .replit and any Procfile or run script to find the entry command and main app file.
2) Resolve which router or webhook module the entrypoint imports. Treat that as the canonical production router. Do not change its behavior.

STEP 2 CREATE MINIMAL FOLDERS
1) Ensure these directories exist: app, ai, db, utils, tests, archive.
2) If main app file is at project root and named main.py, move it to app/main.py and update the run command accordingly. If moving would break the run command, leave it in place and skip the move.

STEP 3 QUARANTINE DUPLICATES AND EXPERIMENTS
1) Find duplicate or versioned modules such as router_v2.py, router_prod.py, webhook_old.py, parser2.py, identity_copy.py, models_old.py, etc.
2) Keep the modules that are imported by the active entrypoint or are referenced by other kept modules. Move all other conflicting or duplicate versions into archive/ while preserving relative paths under archive/.
3) Common keepers by category:
   app folder: keep main server file, the canonical router or webhook, blueprints actually imported.
   ai folder: keep the adapter used in production by the canonical router. Move other adapters or stale experiments to archive.
   db folder: keep the models module actually imported. Move old migrations or experimental schemas to archive unless they are required by imports.
   utils folder: keep identity, logging helpers, config helpers actually imported. Move copies to archive.
4) Never delete. Always move to archive/.

STEP 4 IMPORT AND PATH FIXES
1) After moving files, run a project-wide import fix. Update imports to the kept module paths.
2) Run ruff with autofix for import sorting and simple issues. Then run mypy. Then run again until obvious import errors are gone.
3) If multiple identity functions exist, refactor all call sites to import the single canonical utils.identity.psid_hash. Move other identity implementations to archive.

STEP 5 DEAD CODE PASS
1) Search for .py files that are not imported anywhere and not the entrypoint. Move them to archive unless tests or tools reference them.
2) Do not move config files like pyproject.toml, requirements.txt, README.md, .replit, replit.nix.

STEP 6 TEST AND HEALTH CHECK
1) Ensure requirements include ruff, mypy, pytest. Install if missing.
2) Run ruff and mypy. Fix straightforward issues created by the moves.
3) Start the app with the normal run command. Verify the health endpoint responds OK.
4) If a dev-only webhook bypass header exists such as X-Local-Testing, send a local test webhook request using it to confirm no import errors occur in the message path. Do not weaken production security.

STEP 7 DOCUMENTATION
1) Create or update README.md with a short section:
   Repository layout
   Entry command
   How to run checks and tests
2) Write CLEANUP_REPORT.md with a summary of:
   Files moved to archive
   Canonical router and identity module kept
   Any import changes
   Commands to roll back:
   git checkout main
   git branch -D cleanup
   or git reset --hard <baseline_hash>

STEP 8 COMMITS
Create commits at the end of each step with clear messages:
   safety net created
   archive created and files moved
   imports fixed
   static checks passed
   health check verified
Push the cleanup branch.

FINAL OUTPUT
Print a Cleanup Report to the console with:
1) Baseline HEAD and branch name
2) Canonical entrypoint and router
3) List count of files moved to archive with their paths
4) Static check status for ruff and mypy
5) Health check result
6) Exact rollback commands
