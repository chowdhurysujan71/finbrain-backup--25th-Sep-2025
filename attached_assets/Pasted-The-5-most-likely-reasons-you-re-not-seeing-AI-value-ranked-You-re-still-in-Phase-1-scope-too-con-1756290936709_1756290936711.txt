The 5 most likely reasons you’re not seeing AI value (ranked)
You’re still in Phase-1 scope (too conservative)

What’s happening: ROUTER_SCOPE=zero_ledger_only limits the new rules layer to users with no data. Everyone else keeps the old routing—where “analysis please” can still get hijacked by coaching.

Symptom: Few or no analysis routes → the insight model isn’t being called, so it “feels robotic.”

Fix now: Flip scope to cover actual analysis queries:

ROUTER_MODE=hybrid

ROUTER_SCOPE=analysis_keywords_only
(No redeploy—overlay flip.)

Analysis is being short-circuited by “unchanged data”

What’s happening: UNIQUENESS_MODE=data_version suppresses repeats when the data_version didn’t change. If your window parsing or hashing is off (UTC vs Asia/Dhaka; wrong window; weak fingerprint), you’ll get “no change” too often.

Symptoms: Lots of “No changes since your last check” even after new transactions.

Fix now: Verify the hash (see diagnosis below). If it’s wrong, switch to the lightweight fallback (COUNT+SUM+MAX(updated_at)) until the strong fingerprint is fixed.

Router isn’t matching “analysis” patterns in prod text

What’s happening: Messenger normalizes text (smart quotes, ZWJ/ZWSP, mixed BN+EN), and if we don’t normalize input (NFKC/strip zero-width), regex misses → routes to SMALLTALK/COACHING.

Symptom: route_event.routed_intent rarely = ANALYSIS even for obvious queries (“analysis please”, “এই মাসের খরচ”).

Fix now: Normalize incoming text (lower().casefold(), NFKC, remove zero-width chars) before regex.

Payload says “insufficient_data” due to window/filters

What’s happening: Totals query uses the wrong window or filters (is_deleted, currency) so grand_total=0 even though the user has data.

Symptoms: flags.insufficient_data=true in logs; users with known data get the safe minimal line.

Fix now: Check the exact SQL window boundaries (Asia/Dhaka offset!), and ensure your totals query matches the same window the router inferred.

Adapter is failing closed (timeouts / schema / non-JSON)

What’s happening: The model is called, but the adapter rejects output (schema violation, non-JSON, timeout) and you fall back to the minimal response.

Symptoms: insights.adapter.schema_violation_total or nonjson_total or errors_total > 0.

Fix now: Inspect those counters; if they’re spiking, raise timeout slightly or capture a few failing samples to refine the prompt/validator.

5-minute diagnosis (no redeploy)

Run/observe these and compare to the “expected”:

Are we actually routing to analysis?

Expected: For “analysis please” / “এই মাসের খরচ বিশ্লেষণ”, you should see routed_intent=ANALYSIS.

Check: your route_event logs—count of ANALYSIS in the last 30 min. If near zero, it’s #1 or #3 above.

Is the insight model being invoked?

Metric: insights.adapter.calls_total increasing with those analysis messages.

If flat: the adapter isn’t reached (routing issue).

If rising but schema_violation_total/nonjson_total > 0: it’s #5.

Are we suppressing because “no change”?

For the same PSID, compare last two data_version values (router or payload logs).

If unchanged even after you add a tiny expense: it’s #2. Switch to the fallback hash immediately.

Are we mis-counting data as zero?

Log the computed window and grand_total for your test PSID. If grand_total=0 but you know there are rows: it’s #4 (window/filters). Fix the query window or TZ.

Regex actually matching?

Log signals[] on a real user message “আজকের analysis please”. If has_time_window or explicit_analysis_request is false, it’s #3 (normalization).