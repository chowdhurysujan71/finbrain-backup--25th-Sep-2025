You are the QA automation assistant. Perform a comprehensive User Acceptance Test (UAT) for FinBrain after the hash normalization + DB fixes. The goal is to validate expense logging, summaries, and data consistency across all layers (Messenger, DB, API).

Test Scope

Expense Logging (Messenger + API)

Summary Retrieval (Messenger)

DB Quickscan Consistency (raw PSID vs hashed)

Multi-User Isolation (parallel testers)

Regression Protection (idempotent hashing)

Cache/summary tables (if applicable)

Test Steps

Step 1: Environment Setup

Confirm env vars: STRICT_IDS=true, AI_ENABLED=true, SUMMARY_MODE=direct.

Start the application and tail logs.

Ensure TRACE logging is active (record_expense, summary_query).

Step 2: Single User Flow

Use a canary PSID (e.g. PSID_DEMO_UAT).

Log two expenses via Messenger:

I spent 120 on groceries

I spent 100 on Uber

Expected: “Got it…” acks.

Ask:
3. summary
4. insights

Expected:

Summary shows ≥ 220 total.

Insights mention both groceries and Uber.

Step 3: Quickscan Cross-Verification

Call Quickscan with raw PSID:

curl "http://localhost:5000/ops/quickscan?psid=<RAW>" | jq .


Call Quickscan with hash:

curl "http://localhost:5000/ops/quickscan?psid_hash=<64HEX>" | jq .


Expected: identical resolved_user_id, count=2, total=220.

Step 4: TRACE Validation

Verify logs show matching user_id between:

TRACE record_expense … user_id=…

TRACE summary_query … user_id=…

Expected: IDs are identical for the same PSID.

Step 5: Multi-User Isolation

Add 2 more test users (different PSIDs).

Each logs a single expense (e.g., “50 on snacks”, “200 on rent”).

Each runs summary.

Expected:

Each user only sees their own data.

No cross-user leakage.

Step 6: Regression/Edge Tests

Idempotency:

Call ensure_hashed(raw) and ensure_hashed(ensure_hashed(raw)).

Expected: identical results.

Cache bypass:

If summaries rely on cache tables, temporarily force SUMMARY_MODE=direct and verify counts match.

Concurrency:

Send 2 expense logs quickly (<200ms apart).

Expected: both persist and appear in summary.

Rate limit fallback:

Send 3 summary requests in 1 second.

Expected: 2 AI responses, 1 fallback template with disclaimer.

Acceptance Criteria

✅ All expenses acknowledged in Messenger.
✅ Summaries reflect exact totals from DB.
✅ Quickscan raw/hash outputs are identical.
✅ TRACE logs confirm consistent user_id.
✅ No cross-user contamination.
✅ Idempotency tests pass.
✅ Cache/summary tables rebuilt or bypassed successfully.
✅ Concurrency + rate limiting behave as expected.

Deliverables

List of test steps executed

Logs (TRACE excerpts) proving user_id consistency

Quickscan JSON outputs (raw + hash)

Messenger transcript screenshots for expense + summary flows

Confirmation of no runtime errors during UAT