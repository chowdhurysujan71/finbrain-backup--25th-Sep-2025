AGENT PROMPT — Phase B (Supabase Storage)

You are my senior production engineer. Migrate file handling to **Supabase Storage** with signed URLs only, without breaking existing logic. Do NOT expose public buckets. Use MINIMAL, additive changes. Reuse utils/logger.py. Keep app init order intact.

Provider: Supabase Storage (private bucket, signed URLs)
Env vars (I will set secrets): SUPABASE_URL, SUPABASE_SERVICE_KEY, SUPABASE_BUCKET=user-assets

Goals
1) Add server endpoints for short-lived signed URLs:
   - POST /assets/upload-url  (body: {"path":"<user-namespace>/<filename>", "content_type":"...","size":<bytes>})
     → returns {"upload_url": "...", "expires_in": 60, "path": "<canonical path>"}
   - GET /assets/download-url?path=...
     → returns {"download_url": "...", "expires_in": 60}
   - Optional DELETE /assets?path=... (soft delete via Supabase API), feature-flagged (ASSETS_ALLOW_DELETE=true)
2) Security/validation:
   - Require authenticated context via header X-User-ID; reject if missing.
   - Enforce per-user path prefix: path must start with "{user_id}/".
   - Enforce allowlist of content types: image/png, image/jpeg, application/pdf, text/plain, application/json.
   - Max size 10 MB (reject if size > 10*1024*1024).
3) No direct file bytes via our server. Client uploads/downloads directly to Supabase using our signed URLs.
4) Logging: use utils/logger.py; include request_id, user_id, path, op, status, latency_ms.
5) Tests: pytest with requests-mock to simulate Supabase responses.
6) Docs: /docs/storage-spec.md and /docs/storage-acceptance.md
7) One-off migration helper: tools/migrate_assets_supabase.py (reads a local folder path and PUTs to Supabase using service key).

Changes to codebase (additive, non-breaking)
A) Create app/storage_supabase.py
   - Functions:
     • get_upload_url(path, content_type, expires_in=60)
       -> POST {SUPABASE_URL}/storage/v1/object/upload/resumable?bucket=<bucket>&objectName=<path> OR use sign endpoint flow:
          For simplicity, call: POST /storage/v1/object/sign/<bucket>/<path> with expiresIn
          But for upload, generate a signed URL for PUT:
          Use Supabase "object/sign" with 'POST' not supported; fallback: use signed URL via "sign" + method override if available.
          If direct upload sign RPC isn’t available, call the "upload" REST endpoint with Authorization: Bearer SERVICE_KEY, and return a one-time server-proxied URL:
          IMPLEMENTATION CHOICE: Use Supabase official sign endpoint:
             POST {SUPABASE_URL}/storage/v1/object/sign/<bucket>/<path> body {"expiresIn": expires_in}
          Return signed URL for PUT (if PUT not supported by sign, use URL for POST with 'upsert=true' header when client uploads).
          NOTE: Implement using current REST behavior; mock in tests.
     • get_download_url(path, expires_in=60) -> POST sign endpoint, return signedURL.
   - All HTTP calls via requests with 3s timeout; raise for status.

B) Create app/routes_assets.py
   - Blueprint /assets with:
     • POST /upload-url:
       - Validate X-User-ID, JSON body (path, content_type, size).
       - Validate prefix path.startswith(f"{user_id}/"), content_type allowlist, size ≤ 10MB.
       - Call storage_supabase.get_upload_url; return JSON.
     • GET /download-url:
       - Validate X-User-ID, query param path with correct prefix.
       - Call storage_supabase.get_download_url; return JSON.
     • DELETE /  (feature-flagged via ASSETS_ALLOW_DELETE=true):
       - Validate prefix; call Supabase delete endpoint.
   - Wrap with try/except, never leak stack traces.

C) Wire routes in app.py (or factory) WITHOUT changing existing init order. Register blueprint under /assets.

D) requirements.txt:
   - Ensure/pin: requests>=2.31, pytest>=8.0, requests-mock>=1.12
   - Keep existing deps; dedupe lines.

E) tests/test_assets_supabase.py
   - Use Flask client + requests-mock.
   - Cases:
     • Missing X-User-ID → 401
     • Path without user prefix → 403
     • Bad content_type or size too big → 400
     • Happy path: upload-url returns URL + path; download-url returns URL.
   - Mock Supabase sign endpoints to return {"signedURL": "/signed/abc"}.

F) /docs/storage-spec.md (write exact content):
   ---
   # Storage Spec (Supabase, Signed URLs)

   Provider: Supabase Storage (bucket: $SUPABASE_BUCKET, private)

   Endpoints
   - POST /assets/upload-url → {"upload_url","expires_in", "path"}
     Input: {"path","content_type","size"} with path prefix "{user_id}/"
   - GET /assets/download-url?path=... → {"download_url","expires_in"}
   - DELETE /assets?path=... (optional; ASSETS_ALLOW_DELETE=true)

   Security
   - Require X-User-ID header
   - Path must start with "{user_id}/"
   - Allowlist content types; max 10 MB
   - Signed URLs expire in 60s

   Client Flow
   1) Call POST /assets/upload-url → get upload_url
   2) PUT/POST bytes to upload_url directly
   3) Store canonical path in DB
   4) For reads, call GET /assets/download-url to mint a fresh URL

   Runbook
   - 4xx due to validation or prefix mismatch
   - 5xx from provider → retry with backoff; open incident if sustained

   Acceptance
   - All tests pass
   - Direct upload succeeds with curl
   - Private bucket (no public ACLs)
   ---

G) /docs/storage-acceptance.md
   - Steps:
     1) Set secrets SUPABASE_URL, SUPABASE_SERVICE_KEY, SUPABASE_BUCKET
     2) POST /assets/upload-url with X-User-ID and small file meta
     3) Upload the file bytes to upload_url
     4) GET /assets/download-url and fetch the file
     5) Verify request logs include user_id, request_id, path, op
     6) Confirm bucket objects not publicly accessible without signed URL

H) tools/migrate_assets_supabase.py
   - CLI: python tools/migrate_assets_supabase.py --src ./local_uploads --user-id <uid>
   - Walk directory; for each file create path f"{uid}/{relative_path}" and upload via Supabase REST using SERVICE_KEY.
   - Log JSON per file with status.

Output & verify
- Install deps, run pytest -q (show passing).
- Start server, show:
  • POST /assets/upload-url (happy path + validations)
  • GET /assets/download-url
- Show one successful file upload/download using curl.
- Commit: feat(storage): Supabase signed URLs, secure endpoints, tests, docs, migration helper
