# === FinBrain psid_hash hardening (NO GIT, safe run) ===
set -euo pipefail

cd /home/runner/workspace

timestamp="$(date +%Y%m%d_%H%M%S)"

echo "== 0) Safety backups (no git) =="
# Make timestamped backups if files exist
test -f ./utils/production_router.py && cp ./utils/production_router.py ./utils/production_router.py.backup_${timestamp}
test -f ./utils/conversational_ai.py && cp ./utils/conversational_ai.py ./utils/conversational_ai.py.backup_${timestamp}
echo "  - Backups created with suffix .backup_${timestamp}"

echo "== 1) Verify target files exist =="
test -f ./utils/production_router.py
test -f ./utils/conversational_ai.py

# Ensure ripgrep exists; fall back to grep -nE if not.
if command -v rg >/dev/null 2>&1; then
  RG="rg -n --pcre2"
else
  echo "  - ripgrep (rg) not found; using grep -nE (patterns still work)."
  RG="grep -nE"
fi

echo "== 2) Hotfix router handoff call site (create .bak backup) =="
if $RG 'handle_conversational_query_with_hash\(\s*psid_hash\s*,' ./utils/production_router.py >/dev/null; then
  cp ./utils/production_router.py ./utils/production_router.py.bak
  sed -i -E 's/handle_conversational_query_with_hash\(\s*psid_hash\s*,/handle_conversational_query_with_hash(job["psid_hash"],/g' ./utils/production_router.py
  echo "  - Patched router call site"
else
  echo "  - Router call site already OK (no risky pattern found)"
fi

echo "== 3) Add hard type-guard in conversational_ai (non-destructive insert) =="
# Insert the guard once, only if not present already.
if ! $RG 'psid_hash must be a string' ./utils/conversational_ai.py >/dev/null; then
  cp ./utils/conversational_ai.py ./utils/conversational_ai.py.bak
  if $RG 'def\s+handle_conversational_query_with_hash\(\s*self\s*,\s*psid_hash[^)]*\)\s*:' ./utils/conversational_ai.py >/dev/null; then
    awk '
      BEGIN{added=0}
      /def[[:space:]]+handle_conversational_query_with_hash[[:space:]]*\(.*psid_hash.*\)[[:space:]]*:/ {
        print $0
        print "    # --- AUTO-INSERTED GUARD ---"
        print "    if callable(psid_hash) or not isinstance(psid_hash, str):"
        print "        self.logger.error(\"BUG: psid_hash must be string, got %s\", type(psid_hash))"
        print "        raise ValueError(\"psid_hash must be a string\")"
        print "    # --- END GUARD ---"
        added=1; next
      }
      {print $0}
      END{ if(added==0){ exit 2 } }
    ' ./utils/conversational_ai.py > ./utils/conversational_ai.py.tmp || {
      echo "  ! Could not auto-insert guard (signature mismatch)"; exit 1;
    }
    mv ./utils/conversational_ai.py.tmp ./utils/conversational_ai.py
    echo "  - Inserted type-guard into conversational_ai"
  else
    echo "  ! Function signature not found; please add guard manually."
    echo "    Place this at the top of handle_conversational_query_with_hash(self, psid_hash, text):"
    echo '      if callable(psid_hash) or not isinstance(psid_hash, str):'
    echo '          self.logger.error("BUG: psid_hash must be string, got %s", type(psid_hash))'
    echo '          raise ValueError("psid_hash must be a string")'
    exit 1
  fi
else
  echo "  - Type-guard already present"
fi

echo "== 4) Add temporary 'diag' reply (manual paste) =="
cat <<'DIAG_SNIPPET'

# --- Paste this where you handle text commands in production_router (temporary) ---
if text.strip().lower() == "diag":
    return send(job["psid"], f"diag | type={type(job['psid_hash']).__name__} | psid_hash={job['psid_hash'][:8]} | mode=STD")
# --- End snippet ---

DIAG_SNIPPET

echo "== 5) Read-only sweep for other risky usages =="
echo "  • Risky imports (function in scope):"
$RG 'from\s+[\w\.]+\.identity\s+import\s+psid_hash|import\s+[\w\.]+\.identity\s+as\s+\w+' ./workspace || true
echo
echo "  • psid_hash passed as arg (first/any position):"
$RG '\(\s*psid_hash\s*(?:,|\))' ./workspace || true
$RG '\(\s*[^)]*?,\s*psid_hash\s*(?:,|\))' ./workspace || true
echo
echo "  • Shadowing assignments:"
$RG '^\s*psid_hash\s*=\s*psid_hash\s*(?:#|$)' ./workspace || true
$RG '^\s*psid_hash\s*=\s*\w+\.psid_hash\s*(?:#|$)' ./workspace || true
echo
echo "  • Re-hashing outside intake (shouldn’t happen):"
# Use grep fallback variant when RG is grep -nE (no --glob)
if [ "$RG" = "rg -n --pcre2" ]; then
  $RG 'psid_hash\(' ./workspace \
    --glob '!**/identity.py' \
    --glob '!**/webhook*' \
    --glob '!**/webhooks*' \
    --glob '!**/utils/webhook_*' || true
else
  echo "    (grep fallback) Showing all calls; manually ignore identity/webhook files:"
  $RG 'psid_hash\(' ./workspace || true
fi
echo
echo "  • Slicing sites (will crash if psid_hash is a function):"
$RG 'psid_hash\s*\[:\s*\d+\s*\]' ./workspace || true
echo
echo "== 6) Syntax sanity =="
python -m compileall -q ./workspace
echo "  - Python files compile OK"

echo "== 7) What to do next =="
echo "Paste the DIAG snippet into your text-command handler in production_router, then test in Messenger:"
echo "  1) Send: diag         -> expect type=str and your hash prefix"
echo "  2) Send: coffee 50    -> expect Logged ... | mode=AI"
echo "  3) Send: summary      -> shows the entry and same psid_hash"
echo
echo "Backups made:"
echo "  ./utils/production_router.py.backup_${timestamp}"
echo "  ./utils/conversational_ai.py.backup_${timestamp}"
echo "If needed, restore with:"
echo "  cp ./utils/production_router.py.backup_${timestamp} ./utils/production_router.py || true"
echo "  cp ./utils/conversational_ai.py.backup_${timestamp} ./utils/conversational_ai.py || true"
echo
echo "All done."
