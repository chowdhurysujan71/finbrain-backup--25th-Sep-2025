You are editing the FinBrain repo. Your task is to clear five LSP diagnostics in the production router and align the AI adapter contract without changing behavior.

Absolute constraints:
1) Do not change HTTP routes, payload shapes, Facebook webhook security, or Send API plumbing.
2) Do not change database schema or identity hashing. Keep psid_hash untouched.
3) Keep current message handling and summaries working. No copy or UX changes.
4) Prefer using existing types and modules as the single source of truth. Do not duplicate definitions.

Goals:
A) Fix the five diagnostics described below and achieve zero LSP errors in the touched files.
   1. Missing phrase_summary method in AI adapter at or referenced by production_router line ~71.
   2. Bool or None type mismatch around line ~109. Ensure a real boolean is used.
   3. Unbound user_hash around line ~564. It must be explicitly bound in scope.
   4. User constructor argument mismatch around line ~596. Align call site with the actual model fields.
   5. Method name/signature conflicts between router and adapter.

B) Keep a single adapter entrypoint:
   adapter.process(message, context) → AIResult
   If the router currently calls phrase_summary, add a minimal shim in the adapter that returns a deterministic text based on an input summary dict. Do not remove existing router calls today if they are widely used.

C) Use a contracts “barrel” that re-exports existing types, not new ones:
   Create finbrain/ai/contracts.py that imports and re-exports the existing canonical types for InboundMessage, AIContext, and AIResult from their current modules. If no canonical types exist yet, create minimal TypedDict shims with the same field names used at runtime, but only as a last resort.
   Then update only the router and adapter imports to use finbrain.ai.contracts for these three names.

D) Centralize AI calls in a single gateway function in the router, for example _ai_reply(message, context) which calls adapter.process. Replace scattered calls like process_ai or phrase with this gateway unless phrase_summary is required for summaries. Leave phrase_summary as a thin adapter shim.

E) Bind user_hash from the incoming payload using the canonical identity function already in the repo (psid_hash). Never rely on a variable from outer scope.

F) Ensure ai_enabled is a real bool. If it comes from config or env, coerce with bool(...) and avoid Optional[bool].

G) Align the User model constructor call to actual fields. Use explicit keyword args that match the model. Do not create or change database columns. Only fix the call site.

H) Add two log lines before and after the adapter call:
   logger.info("ai_path_enter", extra={"psid_hash": msg.psid_hash, "mid": msg.mid})
   logger.info("ai_path_exit",  extra={"intents": result.intents, "mid": msg.mid})

I) Add and run the tests I will provide in tests/, then run ruff and mypy on the changed modules, and run pytest. Your edits must make all tests pass and eliminate the listed LSP diagnostics.

Acceptance criteria:
1) ruff check passes on finbrain/ai and utils/production_router.py with no errors.
2) mypy passes on those same modules or at least shows no errors in the changed files.
3) pytest passes for the provided tests.
4) One live or test POST to /webhook/messenger returns a JSON body with "messages" and the two log lines appear.
5) No route names, payload shapes, DB schema, identity hashing, or Facebook security are altered.