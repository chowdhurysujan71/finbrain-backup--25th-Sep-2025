Code References Audit Results
===================================

Total Violations Found: 2461

VIOLATIONS: get_completion() calls (deprecated AI adapter method)
Count: 5
  ./utils/production_router.py:1863:                    response = ai.get_completion(prompt)
  ./utils/ai_adapter_v2.py:363:    def get_completion(self, prompt: str) -> str:
  ./utils/ai_adapter_v2.py:395:            logger.warning(f"get_completion() shim failed: {e}")
  ./utils/ai_adapter_v2.py:928:    def get_completion(self, prompt: str, **kwargs) -> str:
  ./utils/ai_adapter_v2.py:933:        get_completion() while using the new ai_parse() infrastructure.

VIOLATIONS: localhost hardcoding (should use config)
Count: 48
  ./comprehensive_phase_test.py:25:        self.base_url = "http://localhost:5000"
  ./uat_phase2_router_decision.py:28:        self.base_url = "http://localhost:5000"
  ./app.py:105:    # Development: Allow HTTP and localhost sessions for testing
  ./app.py:107:    logger.info("✓ Session cookies configured for localhost (development, non-secure)")
  ./app.py:126:    # Development: Allow localhost and any finbrain.app subdomain for testing
  ./app.py:128:        os.getenv("APP_ORIGIN", "http://localhost:5000"),
  ./app.py:129:        "http://localhost:5000",
  ./app.py:167:    app.logger.info(f"[{g.request_id}] → {request.method} {request.path} user={g.user_id or 'anon'} subdomain={current_subdomain or 'localhost'}")
  ./app.py:849:            return parsed.hostname or "localhost"
  ./uat_phase0_clarifier_config.py:21:        self.base_url = "http://localhost:5000"
  ./comprehensive_uat_audit_transparency.py:21:BASE_URL = "http://localhost:5000"
  ./test_integration_api.py:13:BASE_URL = "http://localhost:5000"
  ./test_api_smoke.py:10:BASE_URL = "http://localhost:5000"
  ./uat_simple.py:16:        response = requests.get("http://localhost:5000/health", timeout=5)
  ./uat_simple.py:31:        response = requests.post("http://localhost:5000/ai-chat", 
  ./uat_simple.py:134:        response = requests.get("http://localhost:5000/health", timeout=5)
  ./test_uat_scenarios.py:12:BASE_URL = "http://localhost:5000"
  ./ops/preflight_probes.py:21:        self.base_url = base_url or os.environ.get("APP_URL", "http://localhost:5000")
  ./comprehensive_uat_test.py:16:        self.base_url = "http://localhost:5000"
  ./FINAL_VALIDATION_TEST.py:21:    base_url = "http://localhost:5000"
  ./verify_backend.py:9:API_BASE = "http://localhost:5000/api/backend"
  ./verify_backend.py:14:    "host": os.environ.get("PGHOST") or "localhost",
  ./security_checks.py:111:                    if any(safe in match.group(0).lower() for safe in ['localhost', 'example', 'test']):
  ./security_scanner.py:80:            r'localhost',
  ./security_scanner.py:239:                    if any(safe in env_value.lower() for safe in ['test', 'dev', 'localhost', 'example']):
  ./auth_helpers.py:56:        None: For localhost or non-finbrain.app domains
  ./auth_helpers.py:62:        localhost:5000 -> None
  ./auth_helpers.py:67:        # Handle localhost and development environments
  ./auth_helpers.py:68:        if 'localhost' in host or '127.0.0.1' in host or not host:
  ./demo_smoke.py:15:BASE_URL = os.getenv("BASE_URL", "http://localhost:5000/api/backend")
  ./validate_ui_guardrails.py:41:    base_url = "http://localhost:5000"
  ./master_uat_audit.py:415:            base_url = "http://localhost:5000"
  ./utils/production_router.py:2565:                f"http://localhost:5000/api/audit/transactions/{tx_id}/compare?user_id={user_hash}",
  ./demo_cleanup.py:9:BASE = os.getenv("BASE_URL", "http://localhost:5000/api/backend")
  ./utils/health_ping.py:21:        self.health_url = os.environ.get('HEALTH_PING_URL', 'http://localhost:5000/health')
  ./utils/job_queue.py:83:            logger.warning("Fixing malformed REDIS_URL: rediss:6379 -> redis://localhost:6379")
  ./utils/job_queue.py:84:            redis_url = "redis://localhost:6379"
  ./utils/job_queue.py:87:            redis_url = redis_url.replace("rediss:", "redis://localhost:")
  ./utils/ai_limiter.py:75:            redis_url = os.environ.get("REDIS_URL", "redis://localhost:6379")
  ./utils/production_smoke_tests.py:268:            base_url = "http://localhost:5000"
  ./utils/production_smoke_tests.py:300:            base_url = "http://localhost:5000"
  ./utils/deployment_confidence_validator.py:29:    def __init__(self, base_url: str = "http://localhost:5000"):
  ./utils/deployment_confidence_validator.py:282:    parser.add_argument('--url', default='http://localhost:5000', 
  ./utils/deployment_confidence_validator.py:283:                       help='Base URL to test (default: http://localhost:5000)')
  ./utils/block5_comprehensive_uat.py:42:        self.base_url = "http://localhost:5000"
  ./utils/migration_config.py:28:    - Host (if not localhost)
  ./utils/migration_config.py:41:        >>> get_safe_database_info("postgresql://user:pass@localhost:5432/mydb")
  ./utils/migration_config.py:42:        "mydb@localhost:5432"

VIOLATIONS: bare print() statements (should use logging)
Count: 2408
  ./prod_probe.py:35:    print(f"\n> {text}\n{r.status_code} | handler={handler} | RL={rl}\n{str(data)[:200]}")
  ./prod_probe.py:45:print("PROD URL:", PROD_URL)
  ./emergency_data_fix.py:16:    print("🚨 EMERGENCY DATA INTEGRITY FIX")
  ./emergency_data_fix.py:17:    print("=" * 40)
  ./emergency_data_fix.py:22:            print("1. Creating user records for orphaned expenses...")
  ./emergency_data_fix.py:68:                    print(f"   ✅ Created user record: {user_id[:16]}... (৳{total_amount}, {expense_count} expenses)")
  ./emergency_data_fix.py:71:            print("\n2. Cleaning invalid user hash records...")
  ./emergency_data_fix.py:91:                    print(f"   ✅ Removed invalid user record: ID={user_id}, Hash='{user_hash}'")
  ./emergency_data_fix.py:93:                    print(f"   ⚠️ Cannot remove invalid user with expenses: ID={user_id} ({expense_count} expenses)")
  ./emergency_data_fix.py:97:            print("\n✅ All fixes committed to database")
  ./emergency_data_fix.py:100:            print("\n3. Validating fixes...")
  ./emergency_data_fix.py:119:                print("✅ ALL DATA INTEGRITY ISSUES RESOLVED")
  ./emergency_data_fix.py:122:                print(f"❌ Issues remain: {remaining_orphans} orphans, {remaining_invalid} invalid hashes")
  ./emergency_data_fix.py:126:            print(f"❌ Error during emergency fix: {e}")
  ./data_integrity_fix.py:18:    print("🔧 FIXING ORPHANED EXPENSES")
  ./data_integrity_fix.py:19:    print("=" * 30)
  ./data_integrity_fix.py:32:        print(f"Found {len(orphaned_user_ids)} user IDs with orphaned expenses")
  ./data_integrity_fix.py:48:                print(f"   ✅ Created user record for {user_id_hash[:16]}...")
  ./data_integrity_fix.py:56:                print(f"      Set total_expenses to ৳{total}")
  ./data_integrity_fix.py:59:                print(f"   ❌ Invalid hash format, cannot fix: {user_id_hash}")
  ./data_integrity_fix.py:63:            print(f"✅ Fixed {fixes_applied} orphaned expense user records")
  ./data_integrity_fix.py:69:    print("\\n🔧 FIXING INVALID USER HASHES")
  ./data_integrity_fix.py:70:    print("=" * 35)
  ./data_integrity_fix.py:81:                print(f"   ❌ Invalid hash found: ID={user.id}, Hash='{user.user_id_hash}', Length={hash_len}")
  ./data_integrity_fix.py:87:                    print(f"      User has {expense_count} expenses - CANNOT DELETE")
  ./data_integrity_fix.py:88:                    print(f"      Manual intervention required for user ID {user.id}")
  ./data_integrity_fix.py:93:                    print(f"      ✅ Removed invalid unused user record")
  ./data_integrity_fix.py:97:            print(f"✅ Cleaned up {fixes_applied} invalid user records")
  ./data_integrity_fix.py:103:    print("\\n🧪 VALIDATING DATA INTEGRITY FIXES")
  ./data_integrity_fix.py:104:    print("=" * 40)
  ./data_integrity_fix.py:118:            print("✅ No orphaned expenses remaining")
  ./data_integrity_fix.py:120:            print(f"❌ Still have {orphaned_count} orphaned expenses")
  ./data_integrity_fix.py:134:            print("✅ All user hashes properly formatted")
  ./data_integrity_fix.py:136:            print(f"❌ Still have {invalid_count} invalid user hashes")
  ./data_integrity_fix.py:144:            print("✅ All expenses have corresponding user records")
  ./data_integrity_fix.py:146:            print(f"❌ {len(missing)} expenses still missing user records")
  ./data_integrity_fix.py:152:    print("🚨 EXECUTING CRITICAL DATA INTEGRITY FIXES")
  ./data_integrity_fix.py:153:    print("=" * 50)
  ./data_integrity_fix.py:162:            print(f"\\n✅ ALL DATA INTEGRITY ISSUES RESOLVED")
  ./data_integrity_fix.py:163:            print(f"✅ Applied {total_fixes} fixes successfully")
  ./data_integrity_fix.py:164:            print("✅ Financial data integrity restored")
  ./data_integrity_fix.py:167:            print(f"\\n❌ Some issues remain after fixes")
  ./data_integrity_fix.py:171:        print(f"\\n❌ Error during fixes: {str(e)}")
  ./data_integrity_audit.py:19:    print("🔒 AUDITING USER DATA ISOLATION")
  ./data_integrity_audit.py:20:    print("=" * 40)
  ./data_integrity_audit.py:30:        print(f"Found {len(users_with_expenses)} users with expense data")
  ./data_integrity_audit.py:36:            print(f"\n👤 Testing user: {user_id[:16]}... ({count} expenses, ৳{total})")
  ./data_integrity_audit.py:48:                print(f"   ✅ All {len(user_expenses)} expenses belong to correct user")
  ./data_integrity_audit.py:56:                    print(f"   ✅ Category breakdown isolated correctly")
  ./data_integrity_audit.py:66:    print("\n🔐 AUDITING USER IDENTITY SYSTEM")
  ./data_integrity_audit.py:67:    print("=" * 40)
  ./data_integrity_audit.py:82:            print("✅ No duplicate user identity hashes found")
  ./data_integrity_audit.py:94:            print("✅ No orphaned expenses found")
  ./data_integrity_audit.py:108:            print(f"✅ All {len(all_users)} user identity hashes properly formatted (SHA256)")
  ./data_integrity_audit.py:114:    print("\n💰 AUDITING EXPENSE CALCULATIONS")
  ./data_integrity_audit.py:115:    print("=" * 40)
  ./data_integrity_audit.py:124:            print(f"\n🧮 Testing calculations for user: {user_id[:16]}...")
  ./data_integrity_audit.py:148:                print(f"   ✅ Amount calculation accurate: ৳{manual_total} ({manual_count} expenses)")
  ./data_integrity_audit.py:153:                print(f"   ✅ Expense count accurate: {manual_count} transactions")
  ./data_integrity_audit.py:159:    print("\n📅 AUDITING TIMEFRAME CALCULATIONS")
  ./data_integrity_audit.py:160:    print("=" * 40)
  ./data_integrity_audit.py:169:        print(f"Current month timeframe: {current_month_start.strftime('%Y-%m-%d')} to {now.strftime('%Y-%m-%d %H:%M')}")
  ./data_integrity_audit.py:192:            print(f"✅ Current month timeframe filter accurate: {len(current_month_expenses)} expenses")
  ./data_integrity_audit.py:207:                    print(f"   ✅ Category breakdown timeframe working for user {user_id[:16]}...")
  ./data_integrity_audit.py:215:    print("\n🏷️  AUDITING CATEGORY CONSISTENCY")
  ./data_integrity_audit.py:216:    print("=" * 40)
  ./data_integrity_audit.py:227:        print(f"Found {len(categories)} unique categories:")
  ./data_integrity_audit.py:229:            print(f"   - {category}: {count} expenses")
  ./data_integrity_audit.py:238:            print(f"✅ Transport categories well consolidated: {transport_variations}")
  ./data_integrity_audit.py:254:                print(f"   ✅ '{query}' correctly maps to '{actual}'")
  ./data_integrity_audit.py:260:    print("🚨 CRITICAL DATA INTEGRITY AUDIT")
  ./data_integrity_audit.py:261:    print("=" * 50)
  ./data_integrity_audit.py:262:    print("Ensuring users only see their own accurate financial data")
  ./data_integrity_audit.py:263:    print("=" * 50)
  ./data_integrity_audit.py:275:    print(f"\n📋 AUDIT SUMMARY")
  ./data_integrity_audit.py:276:    print("=" * 30)
  ./data_integrity_audit.py:279:        print(f"❌ FOUND {len(all_issues)} CRITICAL ISSUES:")
  ./data_integrity_audit.py:281:            print(f"{i}. {issue}")
  ./data_integrity_audit.py:282:        print(f"\n🚨 DATA INTEGRITY COMPROMISED - IMMEDIATE ACTION REQUIRED")
  ./data_integrity_audit.py:285:        print("✅ ALL AUDIT CHECKS PASSED")
  ./data_integrity_audit.py:286:        print("✅ DATA INTEGRITY VERIFIED - USERS ONLY SEE THEIR OWN ACCURATE DATA")
  ./data_integrity_audit.py:287:        print("✅ FINANCIAL CALCULATIONS ARE ACCURATE AND RELIABLE")
  ./comprehensive_uat_test.py:40:            print(f"✅ {test_name}: {details}")
  ./comprehensive_uat_test.py:43:            print(f"❌ {test_name}: {details}")
  ./comprehensive_uat_test.py:45:                print(f"   Error: {error}")
  ./comprehensive_uat_test.py:333:        print("🚀 Starting FinBrain End-to-End UAT")
  ./comprehensive_uat_test.py:334:        print("=" * 50)
  ./comprehensive_uat_test.py:360:        print("\n" + "=" * 50)
  ./comprehensive_uat_test.py:361:        print("📊 UAT SUMMARY")
  ./comprehensive_uat_test.py:362:        print("=" * 50)
  ./comprehensive_uat_test.py:363:        print(f"Total Tests: {summary['total']}")
  ./comprehensive_uat_test.py:364:        print(f"Passed: {summary['passed']} ✅")
  ./comprehensive_uat_test.py:365:        print(f"Failed: {summary['failed']} ❌")
  ./comprehensive_uat_test.py:366:        print(f"Success Rate: {(summary['passed']/summary['total']*100):.1f}%")
  ./comprehensive_uat_test.py:370:            print("\n🎉 ALL TESTS PASSED - System is ready for production!")
  ./comprehensive_uat_test.py:372:            print(f"\n⚠️  Minor issues detected ({summary['failed']} failures)")
  ./comprehensive_uat_test.py:374:            print(f"\n🔥 Major issues detected ({summary['failed']} failures) - needs attention")
  ./comprehensive_uat_test.py:386:    print(f"\n📄 Detailed results saved to uat_results.json")
  ./test_feature_flags.py:15:    print("🚀 Feature Flags/Kill Switch Test Suite")
  ./test_feature_flags.py:16:    print("=" * 50)
  ./test_feature_flags.py:22:        print(f"\n🔄 Testing PCA_MODE = {mode}")
  ./test_feature_flags.py:33:        print(f"   ✅ Mode: {test_flags.mode.value}")
  ./test_feature_flags.py:34:        print(f"   ✅ Should log snapshots: {test_flags.should_log_snapshots()}")
  ./test_feature_flags.py:35:        print(f"   ✅ Should write overlays: {test_flags.should_write_overlays()}")
  ./test_feature_flags.py:36:        print(f"   ✅ Should write raw only: {test_flags.should_write_raw_only()}")
  ./test_feature_flags.py:37:        print(f"   ✅ Should enable clarifiers: {test_flags.should_enable_clarifiers()}")
  ./test_feature_flags.py:43:            print("   ✅ FALLBACK mode: Skip CC entirely ✓")
  ./test_feature_flags.py:48:            print("   ✅ SHADOW mode: Log CC but show legacy response ✓")
  ./test_feature_flags.py:54:            print("   ✅ DRYRUN mode: Raw write + 'would log' message ✓")
  ./test_feature_flags.py:59:            print("   ✅ ON mode: Full CC with audit transparency ✓")
  ./test_feature_flags.py:64:    print(f"\n🎯 All 4 PCA modes tested successfully!")
  ./test_feature_flags.py:65:    print("✅ Conditional flow logic working correctly")
  ./test_feature_flags.py:66:    print("✅ Feature Flags system fully operational")
  ./test_feature_flags.py:70:    print(f"\n🔧 Testing Production Router Integration")
  ./test_feature_flags.py:71:    print("-" * 40)
  ./test_feature_flags.py:86:        print("   ✅ All required methods present")
  ./test_feature_flags.py:87:        print("   ✅ Production router ready for Feature Flags")
  ./test_feature_flags.py:90:        print(f"   ❌ Integration test failed: {e}")
  ./test_feature_flags.py:97:    print(f"\n🛑 Testing Kill Switch")
  ./test_feature_flags.py:98:    print("-" * 40)
  ./test_feature_flags.py:107:    print("   ✅ Kill switch OFF: Normal operation")
  ./test_feature_flags.py:113:    print("   ✅ Kill switch ON: Emergency mode")
  ./test_feature_flags.py:117:    print("   ✅ Kill switch mechanism working")
  ./test_feature_flags.py:120:    print("🎯 Starting Feature Flags/Kill Switch Test Suite...")
  ./test_feature_flags.py:127:        print("\n" + "=" * 50)
  ./test_feature_flags.py:128:        print("🚀 ALL TESTS PASSED!")
  ./test_feature_flags.py:129:        print("✅ Feature Flags/Kill Switch system is OPERATIONAL")
  ./test_feature_flags.py:130:        print("✅ 4-state conditional flow implemented correctly")
  ./test_feature_flags.py:131:        print("✅ Production router integration complete")
  ./test_feature_flags.py:132:        print("✅ Emergency kill switch functional")
  ./test_feature_flags.py:133:        print("\n🔥 Ready for graduated rollout: FALLBACK → SHADOW → DRYRUN → ON")
  ./test_feature_flags.py:136:        print(f"\n❌ Test failed: {e}")
  ./start_server.py:13:    print(f"\nReceived signal {sig}, shutting down gracefully...")
  ./start_server.py:36:    print("Starting FinBrain production server...")
  ./start_server.py:37:    print(f"Command: {' '.join(cmd)}")
  ./start_server.py:44:        print("\nShutdown requested by user")
  ./start_server.py:47:        print(f"Error starting server: {e}")
  ./FINAL_VALIDATION_TEST.py:17:    print("🎯 FINAL CC SYSTEM VALIDATION")
  ./FINAL_VALIDATION_TEST.py:18:    print("="*50)
  ./FINAL_VALIDATION_TEST.py:24:    print("\n📋 Phase 1: CC Persistence Validation")
  ./FINAL_VALIDATION_TEST.py:39:        print(f"✅ CC Count: {cc_count}, Latest: {latest_cc.cc_id if latest_cc else 'None'}")
  ./FINAL_VALIDATION_TEST.py:42:        print(f"❌ Error: {e}")
  ./FINAL_VALIDATION_TEST.py:45:    print("\n🔄 Phase 3: Replay & Debug Validation")
  ./FINAL_VALIDATION_TEST.py:55:            print(f"✅ Replay API: {response.status_code}, CC: {cc_id}")
  ./FINAL_VALIDATION_TEST.py:58:            print(f"❌ Replay Error: {e}")
  ./FINAL_VALIDATION_TEST.py:61:        print("⚠️ Skipped - No CC data")
  ./FINAL_VALIDATION_TEST.py:64:    print("\n📊 Phase 4: Enhanced Monitoring Validation")
  ./FINAL_VALIDATION_TEST.py:75:        print(f"✅ Health: {health_resp.status_code}, Metrics: {metrics_resp.status_code}")
  ./FINAL_VALIDATION_TEST.py:78:        print(f"❌ Monitoring Error: {e}")
  ./FINAL_VALIDATION_TEST.py:81:    print("\n🚀 Phase 5: Production Blast Validation")
  ./FINAL_VALIDATION_TEST.py:89:        print(f"✅ Production Status: {prod_resp.status_code}")
  ./FINAL_VALIDATION_TEST.py:92:        print(f"❌ Production Error: {e}")
  ./FINAL_VALIDATION_TEST.py:95:    print("\n" + "="*50)
  ./FINAL_VALIDATION_TEST.py:96:    print("🎯 FINAL VALIDATION SUMMARY")
  ./FINAL_VALIDATION_TEST.py:97:    print("="*50)
  ./FINAL_VALIDATION_TEST.py:102:    print(f"Phases Passed: {passed_phases}/{total_phases}")
  ./FINAL_VALIDATION_TEST.py:105:        print(f"{status_icon} {phase_name.upper()}: {result['status']}")
  ./FINAL_VALIDATION_TEST.py:108:        print("\n🎉 ALL PHASES OPERATIONAL - CC SYSTEM COMPLETE!")
  ./FINAL_VALIDATION_TEST.py:111:        print(f"\n⚠️ {total_phases - passed_phases} phases need attention")
  ./comprehensive_phase_test.py:31:        print("🧪 Starting Comprehensive CC Phase Testing")
  ./comprehensive_phase_test.py:32:        print("=" * 50)
  ./comprehensive_phase_test.py:54:        print("\n📋 Testing Phase 1: CC Persistence + Immediate Fixes")
  ./comprehensive_phase_test.py:112:        print("\n🔀 Testing Phase 2: Router Integration")
  ./comprehensive_phase_test.py:166:        print("\n🔄 Testing Phase 3: Replay & Debug")
  ./comprehensive_phase_test.py:223:        print("\n📊 Testing Phase 4: Enhanced Monitoring")
  ./comprehensive_phase_test.py:293:        print("\n🚀 Testing Phase 5: Production Blast")
  ./comprehensive_phase_test.py:352:        print("\n📊 Generating Final Report")
  ./comprehensive_phase_test.py:353:        print("=" * 50)
  ./comprehensive_phase_test.py:399:        print(f"Overall Success: {'✅ YES' if overall_success else '❌ NO'}")
  ./comprehensive_phase_test.py:400:        print(f"Phases Passed: {phases_passed}/{total_phases}")
  ./comprehensive_phase_test.py:401:        print(f"Tests Passed: {passed_tests}/{total_tests} ({final_report['test_run_summary']['success_rate']}%)")
  ./comprehensive_phase_test.py:402:        print(f"Duration: {duration:.1f}s")
  ./comprehensive_phase_test.py:411:    print("⏳ Waiting for server to be ready...")
  ./comprehensive_phase_test.py:422:    print("\n" + "=" * 60)
  ./comprehensive_phase_test.py:423:    print("🎯 COMPREHENSIVE CC PHASE TEST COMPLETE")
  ./comprehensive_phase_test.py:424:    print("=" * 60)
  ./comprehensive_phase_test.py:427:        print("🎉 ALL PHASES OPERATIONAL - READY FOR PRODUCTION")
  ./comprehensive_phase_test.py:430:        print("⚠️ SOME TESTS FAILED - REVIEW REQUIRED")
  ./uat_phase1_cc_persistence.py:38:        print(f"{status_icon} {test_name}: {result['status']}")
  ./uat_phase1_cc_persistence.py:40:            print(f"   {details}")
  ./uat_phase1_cc_persistence.py:172:                    print(f"   Sample issues: {compliance_issues[:3]}")
  ./uat_phase1_cc_persistence.py:319:        print("🧪 PHASE 1 UAT: CC Persistence & Schema Compliance")
  ./uat_phase1_cc_persistence.py:320:        print("=" * 70)
  ./uat_phase1_cc_persistence.py:321:        print(f"Started: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}")
  ./uat_phase1_cc_persistence.py:322:        print()
  ./uat_phase1_cc_persistence.py:341:        print()
  ./uat_phase1_cc_persistence.py:342:        print("=" * 70)
  ./uat_phase1_cc_persistence.py:343:        print(f"PHASE 1 UAT RESULTS:")
  ./uat_phase1_cc_persistence.py:344:        print(f"✅ Passed: {passed_tests}/{total_tests} ({pass_rate:.1f}%)")
  ./uat_phase1_cc_persistence.py:345:        print(f"⏱️  Duration: {duration:.2f}s")
  ./uat_phase1_cc_persistence.py:346:        print(f"🎯 Exit Gate: {'PASS' if pass_rate >= 90 else 'FAIL'}")
  ./uat_phase1_cc_persistence.py:349:            print()
  ./uat_phase1_cc_persistence.py:350:            print("🎉 PHASE 1 VALIDATED!")
  ./uat_phase1_cc_persistence.py:351:            print("✅ Inference snapshots table operational")
  ./uat_phase1_cc_persistence.py:352:            print("✅ CC persistence working correctly") 
  ./uat_phase1_cc_persistence.py:353:            print("✅ Schema compliance verified")
  ./uat_phase1_cc_persistence.py:354:            print("✅ Decision routing active")
  ./uat_phase1_cc_persistence.py:355:            print("✅ Core foundation safe (0% risk)")
  ./uat_phase1_cc_persistence.py:356:            print("✅ Performance tracking in place")
  ./uat_phase1_cc_persistence.py:357:            print("✅ Ready for Phase 2 validation or Phase 3 development")
  ./uat_phase1_cc_persistence.py:359:            print()
  ./uat_phase1_cc_persistence.py:360:            print("❌ PHASE 1 ISSUES FOUND")
  ./uat_phase1_cc_persistence.py:363:                print(f"   ❌ {test['test']}: {test['details']}")
  ./uat_phase2_router_decision.py:40:        print(f"{status_icon} {test_name}: {result['status']}")
  ./uat_phase2_router_decision.py:42:            print(f"   {details}")
  ./uat_phase2_router_decision.py:150:                    print(f"   CC method exception: {cc_e}")
  ./uat_phase2_router_decision.py:211:                    print(f"   Save method exception: {save_e}")
  ./uat_phase2_router_decision.py:281:                    print(f"   Coverage test failed for '{test_msg}': {e}")
  ./uat_phase2_router_decision.py:297:        print("🧪 PHASE 2 UAT: Router Decision Tree")
  ./uat_phase2_router_decision.py:298:        print("=" * 60)
  ./uat_phase2_router_decision.py:299:        print(f"Started: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}")
  ./uat_phase2_router_decision.py:300:        print()
  ./uat_phase2_router_decision.py:320:        print()
  ./uat_phase2_router_decision.py:321:        print("=" * 60)
  ./uat_phase2_router_decision.py:322:        print(f"PHASE 2 UAT RESULTS:")
  ./uat_phase2_router_decision.py:323:        print(f"✅ Passed: {passed_tests}/{total_tests} ({pass_rate:.1f}%)")
  ./uat_phase2_router_decision.py:324:        print(f"⏱️  Duration: {duration:.2f}s")
  ./uat_phase2_router_decision.py:325:        print(f"🎯 Exit Gate: {'PASS' if pass_rate == 100 else 'FAIL'}")
  ./uat_phase2_router_decision.py:328:            print()
  ./uat_phase2_router_decision.py:329:            print("🎉 PHASE 2 COMPLETE!")
  ./uat_phase2_router_decision.py:330:            print("✅ CC decision routing working correctly")
  ./uat_phase2_router_decision.py:331:            print("✅ AUTO_APPLY/ASK_ONCE→AUTO_APPLY/RAW_ONLY paths active") 
  ./uat_phase2_router_decision.py:332:            print("✅ Expense saving from CC data operational")
  ./uat_phase2_router_decision.py:333:            print("✅ Legacy AI fallback preserved")
  ./uat_phase2_router_decision.py:334:            print("✅ No UI changes - clarifiers remain disabled")
  ./uat_phase2_router_decision.py:335:            print("✅ Ready for Phase 3: Clarifier UI (when enabled)")
  ./uat_phase2_router_decision.py:337:            print()
  ./uat_phase2_router_decision.py:338:            print("❌ PHASE 2 FAILED - Issues must be resolved before proceeding")
  ./uat_phase2_router_decision.py:341:                print(f"   ❌ {test['test']}: {test['details']}")
  ./test_integration_api.py:99:            print(f"Login failed: {e}")
  ./test_integration_api.py:139:        print("✅ Backward compatibility verified")
  ./test_integration_api.py:164:        print("✅ Additive API fields verified")
  ./test_integration_api.py:203:        print("✅ Expense repair working for misclassified intent")
  ./test_integration_api.py:226:        print("✅ Category normalization working")
  ./test_integration_api.py:256:        print("✅ Feature flag system working")
  ./test_integration_api.py:285:        print("✅ Database constraints working")
  ./test_integration_api.py:324:        print("✅ Error handling working correctly")
  ./uat_phase1_agent_output.py:36:        print(f"{status_icon} {test_name}: {result['status']}")
  ./uat_phase1_agent_output.py:38:            print(f"   {details}")
  ./uat_phase1_agent_output.py:67:                        print(f"   Missing fields in '{msg}': {missing_fields}")
  ./uat_phase1_agent_output.py:75:                            print(f"   Invalid decision in '{msg}': {result['decision']}")
  ./uat_phase1_agent_output.py:83:                            print(f"   Invalid confidence in '{msg}': {conf}")
  ./uat_phase1_agent_output.py:87:                    print(f"   Legacy format for '{msg}' - not CC schema")
  ./uat_phase1_agent_output.py:92:                print(f"   Exception for '{msg}': {str(e)}")
  ./uat_phase1_agent_output.py:160:                print(f"   Threshold logic failed: conf={conf}, expected={expected}, got={actual}")
  ./uat_phase1_agent_output.py:288:        print("🧪 PHASE 1 UAT: Agent Output & Snapshot")
  ./uat_phase1_agent_output.py:289:        print("=" * 60)
  ./uat_phase1_agent_output.py:290:        print(f"Started: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}")
  ./uat_phase1_agent_output.py:291:        print()
  ./uat_phase1_agent_output.py:310:        print()
  ./uat_phase1_agent_output.py:311:        print("=" * 60)
  ./uat_phase1_agent_output.py:312:        print(f"PHASE 1 UAT RESULTS:")
  ./uat_phase1_agent_output.py:313:        print(f"✅ Passed: {passed_tests}/{total_tests} ({pass_rate:.1f}%)")
  ./uat_phase1_agent_output.py:314:        print(f"⏱️  Duration: {duration:.2f}s")
  ./uat_phase1_agent_output.py:315:        print(f"🎯 Exit Gate: {'PASS' if pass_rate == 100 else 'FAIL'}")
  ./uat_phase1_agent_output.py:318:            print()
  ./uat_phase1_agent_output.py:319:            print("🎉 PHASE 1 COMPLETE!")
  ./uat_phase1_agent_output.py:320:            print("✅ AI agent emitting schema-valid Canonical Commands")
  ./uat_phase1_agent_output.py:321:            print("✅ Decision and clarifier fields properly structured")
  ./uat_phase1_agent_output.py:322:            print("✅ UI note length enforced ≤ 140 chars")
  ./uat_phase1_agent_output.py:323:            print("✅ No UI changes - clarifiers remain disabled")
  ./uat_phase1_agent_output.py:324:            print("✅ Ready for Phase 2: Router Decision Tree")
  ./uat_phase1_agent_output.py:326:            print()
  ./uat_phase1_agent_output.py:327:            print("❌ PHASE 1 FAILED - Issues must be resolved before proceeding")
  ./uat_phase1_agent_output.py:330:                print(f"   ❌ {test['test']}: {test['details']}")
  ./uat_phase0_clarifier_config.py:35:        print(f"{status_icon} {test_name}: {result['status']}")
  ./uat_phase0_clarifier_config.py:37:            print(f"   {details}")
  ./uat_phase0_clarifier_config.py:209:        print("🧪 PHASE 0 UAT: Clarifier Configuration & Safety")
  ./uat_phase0_clarifier_config.py:210:        print("=" * 60)
  ./uat_phase0_clarifier_config.py:211:        print(f"Started: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}")
  ./uat_phase0_clarifier_config.py:212:        print()
  ./uat_phase0_clarifier_config.py:229:        print()
  ./uat_phase0_clarifier_config.py:230:        print("=" * 60)
  ./uat_phase0_clarifier_config.py:231:        print(f"PHASE 0 UAT RESULTS:")
  ./uat_phase0_clarifier_config.py:232:        print(f"✅ Passed: {passed_tests}/{total_tests} ({pass_rate:.1f}%)")
  ./uat_phase0_clarifier_config.py:233:        print(f"⏱️  Duration: {duration:.2f}s")
  ./uat_phase0_clarifier_config.py:234:        print(f"🎯 Exit Gate: {'PASS' if pass_rate == 100 else 'FAIL'}")
  ./uat_phase0_clarifier_config.py:237:            print()
  ./uat_phase0_clarifier_config.py:238:            print("🎉 PHASE 0 COMPLETE!")
  ./uat_phase0_clarifier_config.py:239:            print("✅ Configuration safely added with zero behavioral impact")
  ./uat_phase0_clarifier_config.py:240:            print("✅ Clarifiers properly disabled by default")
  ./uat_phase0_clarifier_config.py:241:            print("✅ All safety mechanisms validated")
  ./uat_phase0_clarifier_config.py:242:            print("✅ Ready for Phase 1: Agent Output & Snapshot")
  ./uat_phase0_clarifier_config.py:244:            print()
  ./uat_phase0_clarifier_config.py:245:            print("❌ PHASE 0 FAILED - Issues must be resolved before proceeding")
  ./uat_phase0_clarifier_config.py:248:                print(f"   ❌ {test['test']}: {test['details']}")
  ./comprehensive_uat_audit_transparency.py:112:    print("\n🧪 FUNCTIONAL TESTS")
  ./comprehensive_uat_audit_transparency.py:113:    print("=" * 50)
  ./comprehensive_uat_audit_transparency.py:116:    print("UAT-01: Basic expense logging...")
  ./comprehensive_uat_audit_transparency.py:129:        print(f"  {'PASS' if passed else 'FAIL'}: {details}")
  ./comprehensive_uat_audit_transparency.py:133:        print(f"  FAIL: {str(e)}")
  ./comprehensive_uat_audit_transparency.py:136:    print("UAT-02: Correction handling...")
  ./comprehensive_uat_audit_transparency.py:153:        print(f"  {'PASS' if passed else 'FAIL'}: {details}")
  ./comprehensive_uat_audit_transparency.py:157:        print(f"  FAIL: {str(e)}")
  ./comprehensive_uat_audit_transparency.py:160:    print("UAT-03: User isolation...")
  ./comprehensive_uat_audit_transparency.py:170:        print(f"  {'PASS' if passed else 'FAIL'}: {details}")
  ./comprehensive_uat_audit_transparency.py:174:        print(f"  FAIL: {str(e)}")
  ./comprehensive_uat_audit_transparency.py:177:    print("UAT-04: Clarifier flow...")
  ./comprehensive_uat_audit_transparency.py:185:        print(f"  {'PASS' if passed else 'FAIL'}: {details}")
  ./comprehensive_uat_audit_transparency.py:189:        print(f"  FAIL: {str(e)}")
  ./comprehensive_uat_audit_transparency.py:192:    print("UAT-05: Message length handling...")
  ./comprehensive_uat_audit_transparency.py:213:        print(f"  {'PASS' if passed else 'FAIL'}: {details}")
  ./comprehensive_uat_audit_transparency.py:217:        print(f"  FAIL: {str(e)}")
  ./comprehensive_uat_audit_transparency.py:220:    print("UAT-06: Flag toggle behavior...")
  ./comprehensive_uat_audit_transparency.py:236:        print(f"  {'PASS' if passed else 'FAIL'}: {details}")
  ./comprehensive_uat_audit_transparency.py:240:        print(f"  FAIL: {str(e)}")
  ./comprehensive_uat_audit_transparency.py:244:    print("\n⚡ PERFORMANCE TESTS")
  ./comprehensive_uat_audit_transparency.py:245:    print("=" * 50)
  ./comprehensive_uat_audit_transparency.py:248:    print("Performance Test 1: API response time...")
  ./comprehensive_uat_audit_transparency.py:269:        print(f"  {'PASS' if passed else 'FAIL'}: {details}")
  ./comprehensive_uat_audit_transparency.py:273:        print(f"  FAIL: {str(e)}")
  ./comprehensive_uat_audit_transparency.py:276:    print("Performance Test 2: End-to-end latency...")
  ./comprehensive_uat_audit_transparency.py:295:        print(f"  {'PASS' if passed else 'FAIL'}: {details}")
  ./comprehensive_uat_audit_transparency.py:299:        print(f"  FAIL: {str(e)}")
  ./comprehensive_uat_audit_transparency.py:303:    print("\n🔒 INTEGRITY TESTS")
  ./comprehensive_uat_audit_transparency.py:304:    print("=" * 50)
  ./comprehensive_uat_audit_transparency.py:307:    print("Integrity Test 1: Raw ledger checksum...")
  ./comprehensive_uat_audit_transparency.py:330:        print(f"  {'PASS' if passed else 'FAIL'}: {details}")
  ./comprehensive_uat_audit_transparency.py:334:        print(f"  FAIL: {str(e)}")
  ./comprehensive_uat_audit_transparency.py:337:    print("Integrity Test 2: Idempotency...")
  ./comprehensive_uat_audit_transparency.py:355:        print(f"  {'PASS' if passed else 'FAIL'}: {details}")
  ./comprehensive_uat_audit_transparency.py:359:        print(f"  FAIL: {str(e)}")
  ./comprehensive_uat_audit_transparency.py:363:    print("\n🚀 LOAD TESTS")
  ./comprehensive_uat_audit_transparency.py:364:    print("=" * 50)
  ./comprehensive_uat_audit_transparency.py:367:    print("Load Test 1: Burst capacity...")
  ./comprehensive_uat_audit_transparency.py:397:        print(f"  {'PASS' if passed else 'FAIL'}: {details}")
  ./comprehensive_uat_audit_transparency.py:401:        print(f"  FAIL: {str(e)}")
  ./comprehensive_uat_audit_transparency.py:404:    print("Load Test 2: Sustained capacity...")
  ./comprehensive_uat_audit_transparency.py:427:        print(f"  {'PASS' if passed else 'FAIL'}: {details}")
  ./comprehensive_uat_audit_transparency.py:431:        print(f"  FAIL: {str(e)}")
  ./comprehensive_uat_audit_transparency.py:435:    print("\n🛡️ SECURITY TESTS")
  ./comprehensive_uat_audit_transparency.py:436:    print("=" * 50)
  ./comprehensive_uat_audit_transparency.py:439:    print("Security Test 1: PII protection...")
  ./comprehensive_uat_audit_transparency.py:454:        print(f"  {'PASS' if passed else 'FAIL'}: {details}")
  ./comprehensive_uat_audit_transparency.py:458:        print(f"  FAIL: {str(e)}")
  ./comprehensive_uat_audit_transparency.py:461:    print("Security Test 2: Access control...")
  ./comprehensive_uat_audit_transparency.py:474:        print(f"  {'PASS' if passed else 'FAIL'}: {details}")
  ./comprehensive_uat_audit_transparency.py:478:        print(f"  FAIL: {str(e)}")
  ./comprehensive_uat_audit_transparency.py:484:    print("\n" + "=" * 70)
  ./comprehensive_uat_audit_transparency.py:485:    print("📋 COMPREHENSIVE UAT REPORT")
  ./comprehensive_uat_audit_transparency.py:486:    print("=" * 70)
  ./comprehensive_uat_audit_transparency.py:488:    print(f"\n📊 Summary:")
  ./comprehensive_uat_audit_transparency.py:489:    print(f"Total Tests: {summary['total_tests']}")
  ./comprehensive_uat_audit_transparency.py:490:    print(f"Passed: {summary['passed']}")
  ./comprehensive_uat_audit_transparency.py:491:    print(f"Failed: {summary['failed']}")
  ./comprehensive_uat_audit_transparency.py:492:    print(f"Pass Rate: {summary['pass_rate']:.1f}%")
  ./comprehensive_uat_audit_transparency.py:493:    print(f"Duration: {summary['duration']}")
  ./comprehensive_uat_audit_transparency.py:503:    print(f"\n🏗️ Build Info:")
  ./comprehensive_uat_audit_transparency.py:505:        print(f"{key}: {value}")
  ./comprehensive_uat_audit_transparency.py:507:    print(f"\n📋 Test Results:")
  ./comprehensive_uat_audit_transparency.py:510:        print(f"{status} {test['name']}")
  ./comprehensive_uat_audit_transparency.py:512:            print(f"    {test['details']}")
  ./comprehensive_uat_audit_transparency.py:515:                print(f"    {k}: {v}")
  ./comprehensive_uat_audit_transparency.py:519:    print(f"\n🎯 DECISION: {decision}")
  ./comprehensive_uat_audit_transparency.py:522:        print("\n✅ All tests passed - Audit Transparency ready for activation")
  ./comprehensive_uat_audit_transparency.py:523:        print("👥 Sign-offs needed: PM • CTO • QA")
  ./comprehensive_uat_audit_transparency.py:524:        print("🔄 Rollback: Set SHOW_AUDIT_UI=false")
  ./comprehensive_uat_audit_transparency.py:526:        print(f"\n❌ {summary['failed']} test(s) failed - Review required before activation")
  ./comprehensive_uat_audit_transparency.py:527:        print("\nFailed tests:")
  ./comprehensive_uat_audit_transparency.py:530:                print(f"  - {test['name']}: {test['details']}")
  ./comprehensive_uat_audit_transparency.py:536:    print("🧪 COMPREHENSIVE AUDIT TRANSPARENCY UAT")
  ./comprehensive_uat_audit_transparency.py:537:    print(f"Started: {datetime.now()}")
  ./comprehensive_uat_audit_transparency.py:538:    print(f"Target: {BASE_URL}")
  ./comprehensive_uat_audit_transparency.py:539:    print("Requirement: 100% pass rate for GO decision")
  ./comprehensive_uat_audit_transparency.py:558:        print(f"\n❌ UAT EXECUTION FAILED: {str(e)}")
  ./phase0_setup.py:7:print("=" * 60)
  ./phase0_setup.py:8:print("PHASE 0: SAFE FOUNDATION SETUP")
  ./phase0_setup.py:9:print("=" * 60)
  ./phase0_setup.py:21:print("\n📝 Setting controlled feature flags:")
  ./phase0_setup.py:24:    print(f"  {flag} = {value}")
  ./phase0_setup.py:27:print("\n🔍 Verifying flag configuration:")
  ./phase0_setup.py:31:print(f"  Overlay System: {'Enabled' if os.environ.get('PCA_OVERLAY_ENABLED') == 'true' else 'Disabled'}")
  ./phase0_setup.py:32:print(f"  Current Mode: {pca_feature_flags.mode}")
  ./phase0_setup.py:33:print(f"  Audit UI: {'Hidden' if not pca_feature_flags.should_show_audit_ui() else 'Visible'}")
  ./phase0_setup.py:34:print(f"  System State: {'Safe FALLBACK - No overlay processing' if pca_feature_flags.mode == 'FALLBACK' else 'Active'}")
  ./phase0_setup.py:36:print("\n✅ Phase 0 Setup Complete")
  ./phase0_setup.py:37:print("System remains in FALLBACK mode - 0% risk to core ledger")
  ./phase0_setup.py:38:print("Ready for Phase 1 API development")
  ./test_e2e_data_flow.py:90:        print("🔄 Starting End-to-End Data Flow Table Tests")
  ./test_e2e_data_flow.py:91:        print("=" * 60)
  ./test_e2e_data_flow.py:96:            print(result)
  ./test_e2e_data_flow.py:97:            print(f"   📊 Flow: {result.flow_stages}")
  ./test_e2e_data_flow.py:98:            print()
  ./test_e2e_data_flow.py:232:        print("=" * 60)
  ./test_e2e_data_flow.py:233:        print("📊 END-TO-END DATA FLOW SUMMARY")
  ./test_e2e_data_flow.py:234:        print("=" * 60)
  ./test_e2e_data_flow.py:239:        print(f"Overall Results: {passed}/{total} data flows completed successfully")
  ./test_e2e_data_flow.py:240:        print()
  ./test_e2e_data_flow.py:248:        print("📈 Stage-by-Stage Analysis:")
  ./test_e2e_data_flow.py:252:            print(f"  {stage.replace('_', ' ').title()}: {stage_successes}/{total}")
  ./test_e2e_data_flow.py:254:        print()
  ./test_e2e_data_flow.py:255:        print("🔍 Verification Analysis:")
  ./test_e2e_data_flow.py:261:            print(f"  {verification.replace('_', ' ').title()}: {verification_successes}/{total}")
  ./test_e2e_data_flow.py:263:        print()
  ./test_e2e_data_flow.py:265:            print("🎉 ALL DATA FLOW TESTS PASSED!")
  ./test_e2e_data_flow.py:266:            print("✅ Complete pipeline from input to storage verified")
  ./test_e2e_data_flow.py:268:            print(f"⚠️  {total - passed} data flow tests failed")
  ./test_e2e_data_flow.py:270:        print("=" * 60)
  ./test_api_smoke.py:19:        print("✅ Health endpoint working")
  ./test_api_smoke.py:37:        print("✅ Authentication required for /ai-chat")
  ./test_api_smoke.py:49:        print("✅ Malformed request handling working")
  ./test_api_smoke.py:65:        print("✅ Captcha endpoint working")
  ./test_api_smoke.py:71:        print("✅ Auth endpoint working")
  ./test_api_smoke.py:84:        print("✅ Database connection healthy")
  ./test_api_smoke.py:95:        print("✅ Categories table migration successful")
  ./test_api_smoke.py:105:        print("✅ Feature flag system working")
  ./parsers/expense_broken.py:640:                print(f"FAIL: parse_amount_currency_category('{text}') = {result}, expected empty dict")
  ./parsers/expense_broken.py:643:                print(f"PASS: parse_amount_currency_category('{text}') = empty (correct)")
  ./parsers/expense_broken.py:650:                        print(f"FAIL: parse_amount_currency_category('{text}') {key} = {result.get(key)}, expected {expected[key]}")
  ./parsers/expense_broken.py:655:                print(f"PASS: parse_amount_currency_category('{text}') = correct")
  ./parsers/expense_broken.py:660:    print("Testing parse_amount_currency_category() function:")
  ./production_ready_uat.py:49:        print(f"🚀 PRODUCTION UAT SUITE - {self.start_time}")
  ./production_ready_uat.py:50:        print(f"🔒 Test User A Hash: {self.test_user_a_hash[:12]}...")
  ./production_ready_uat.py:51:        print(f"🔒 Test User B Hash: {self.test_user_b_hash[:12]}...")
  ./production_ready_uat.py:52:        print("=" * 80)
  ./production_ready_uat.py:71:        print(f"{icon} [{category}] {test_name}: {'PASS' if status else 'FAIL'}{perf}{sev}")
  ./production_ready_uat.py:73:            print(f"   {details}")
  ./production_ready_uat.py:95:                print("🧹 Test data cleaned successfully")
  ./production_ready_uat.py:98:            print(f"⚠️  Cleanup warning: {e}")
  ./production_ready_uat.py:172:                print(f"     Exception for '{malicious_input[:30]}...': {e}")
  ./production_ready_uat.py:248:                print(f"     Dispatch error for '{message}': {e}")
  ./production_ready_uat.py:314:            print(f"     REPORT test error: {e}")
  ./production_ready_uat.py:347:                        print(f"     Expense creation error for '{expense_text}': {e}")
  ./production_ready_uat.py:356:            print(f"     Expense workflow error: {e}")
  ./production_ready_uat.py:415:            print(f"     Storage persistence error: {e}")
  ./production_ready_uat.py:479:            print(f"     User isolation error: {e}")
  ./production_ready_uat.py:541:            print(f"     Data consistency error: {e}")
  ./production_ready_uat.py:578:            print(f"     Audit trail error: {e}")
  ./production_ready_uat.py:595:        print("🔍 Starting Comprehensive End-to-End UAT...")
  ./production_ready_uat.py:602:            print("\n📊 DATA HANDLING TESTS")
  ./production_ready_uat.py:603:            print("-" * 40)
  ./production_ready_uat.py:607:            print("\n🚦 ROUTING TESTS")  
  ./production_ready_uat.py:608:            print("-" * 40)
  ./production_ready_uat.py:612:            print("\n⚙️  PROCESSING TESTS")
  ./production_ready_uat.py:613:            print("-" * 40)
  ./production_ready_uat.py:617:            print("\n💾 STORAGE TESTS")
  ./production_ready_uat.py:618:            print("-" * 40)
  ./production_ready_uat.py:622:            print("\n🔒 DATA INTEGRITY TESTS")
  ./production_ready_uat.py:623:            print("-" * 40)
  ./production_ready_uat.py:657:        print(f"\n{'='*80}")
  ./production_ready_uat.py:658:        print(f"🔍 COMPREHENSIVE UAT AUDIT REPORT")
  ./production_ready_uat.py:659:        print(f"{'='*80}")
  ./production_ready_uat.py:660:        print(f"📅 Execution Time: {self.start_time} - {end_time}")
  ./production_ready_uat.py:661:        print(f"⏱️  Total Duration: {duration:.2f} seconds")
  ./production_ready_uat.py:662:        print(f"🧪 Total Tests: {total_tests}")
  ./production_ready_uat.py:663:        print(f"✅ Passed: {passed_tests}")
  ./production_ready_uat.py:664:        print(f"❌ Failed: {failed_tests}")
  ./production_ready_uat.py:665:        print(f"📊 Success Rate: {success_rate:.1f}%")
  ./production_ready_uat.py:667:        print(f"\n📋 CATEGORY BREAKDOWN:")
  ./production_ready_uat.py:671:            print(f"  {status_icon} {category}: {stats['passed']}/{stats['total']} ({cat_success:.1f}%)")
  ./production_ready_uat.py:674:            print(f"\n🚨 CRITICAL FAILURES ({len(critical_failures)}):")
  ./production_ready_uat.py:676:                print(f"  ❌ [{failure['category']}] {failure['test']}")
  ./production_ready_uat.py:677:                print(f"     {failure['details']}")
  ./production_ready_uat.py:679:        print(f"\n📈 PERFORMANCE METRICS:")
  ./production_ready_uat.py:684:            print(f"  ⏱️  Average Response Time: {avg_performance:.1f}ms")
  ./production_ready_uat.py:685:            print(f"  🏃 Max Response Time: {max_performance:.1f}ms")
  ./production_ready_uat.py:687:        print(f"\n🔍 DETAILED TEST RESULTS:")
  ./production_ready_uat.py:691:            print(f"  {icon} [{result['category']}] {result['test']}: {result['status']}{perf}")
  ./production_ready_uat.py:693:                print(f"     {result['details']}")
  ./production_ready_uat.py:696:        print(f"\n{'='*80}")
  ./production_ready_uat.py:698:            print(f"🎉 PRODUCTION READY: {success_rate:.1f}% success rate - System ready for deployment!")
  ./production_ready_uat.py:700:            print(f"⚠️  CAUTION ADVISED: {success_rate:.1f}% success rate - Address failures before deployment")
  ./production_ready_uat.py:702:            print(f"🚨 NOT PRODUCTION READY: {success_rate:.1f}% success rate - Critical issues must be resolved")
  ./production_ready_uat.py:704:        print(f"{'='*80}")
  ./uat_comprehensive_e2e.py:62:        print(f"🔧 Starting Comprehensive E2E UAT at {self.start_time}")
  ./uat_comprehensive_e2e.py:63:        print(f"🔒 Test User A: {self.test_user_a_hash[:8]}...")
  ./uat_comprehensive_e2e.py:64:        print(f"🔒 Test User B: {self.test_user_b_hash[:8]}...")
  ./uat_comprehensive_e2e.py:65:        print("=" * 80)
  ./uat_comprehensive_e2e.py:85:        print(f"{status_icon} {test_name}: {result['status']}{perf_str}{severity_str}")
  ./uat_comprehensive_e2e.py:87:            print(f"   {details}")
  ./uat_comprehensive_e2e.py:126:            print(f"⚠️ Warning: Test cleanup failed: {e}")
  ./uat_comprehensive_e2e.py:179:                print(f"     Parse error for '{test_input}': {e}")
  ./uat_comprehensive_e2e.py:226:                print(f"     Sanitization error: {e}")
  ./uat_comprehensive_e2e.py:266:                    print(f"     User learning test: expected=food, actual={actual_category}, match={actual_category == 'food'}")
  ./uat_comprehensive_e2e.py:268:                    print(f"     User learning test: no expenses parsed")
  ./uat_comprehensive_e2e.py:336:                        print(f"     Route mismatch: '{test_message}' → {intent} (expected {expected_str})")
  ./uat_comprehensive_e2e.py:339:                    print(f"     Routing error for '{test_message}': {e}")
  ./uat_comprehensive_e2e.py:392:                        print(f"     Pipeline flow failed for: {test['name']}")
  ./uat_comprehensive_e2e.py:393:                        print(f"       Response: {response[:100]}...")
  ./uat_comprehensive_e2e.py:396:                    print(f"     Pipeline error for {test['name']}: {e}")
  ./uat_comprehensive_e2e.py:436:                    print(f"     Category mismatch: '{test_input}' → {actual} (expected {expected_category})")
  ./uat_comprehensive_e2e.py:439:                print(f"     Categorization error for '{test_input}': {e}")
  ./uat_comprehensive_e2e.py:759:                    print(f"     Field validation test failed: {e}")
  ./uat_comprehensive_e2e.py:797:                    print(f"     Valid expense creation failed: {e}")
  ./uat_comprehensive_e2e.py:906:            print("🧹 Cleaning up any existing test data...")
  ./uat_comprehensive_e2e.py:909:            print("\n📊 1. DATA HANDLING TESTS")
  ./uat_comprehensive_e2e.py:910:            print("-" * 40)
  ./uat_comprehensive_e2e.py:915:            print("\n🔀 2. ROUTING TESTS")
  ./uat_comprehensive_e2e.py:916:            print("-" * 40)
  ./uat_comprehensive_e2e.py:920:            print("\n⚙️ 3. PROCESSING TESTS")
  ./uat_comprehensive_e2e.py:921:            print("-" * 40)
  ./uat_comprehensive_e2e.py:925:            print("\n💾 4. STORAGE TESTS")
  ./uat_comprehensive_e2e.py:926:            print("-" * 40)
  ./uat_comprehensive_e2e.py:930:            print("\n🔒 5. DATA INTEGRITY TESTS")
  ./uat_comprehensive_e2e.py:931:            print("-" * 40)
  ./uat_comprehensive_e2e.py:939:            print(f"\n❌ UAT EXECUTION FAILED: {e}")
  ./uat_comprehensive_e2e.py:944:            print("\n🧹 Cleaning up test data...")
  ./uat_comprehensive_e2e.py:978:        print("\n" + "="*80)
  ./uat_comprehensive_e2e.py:979:        print("🔍 COMPREHENSIVE E2E UAT AUDIT REPORT")
  ./uat_comprehensive_e2e.py:980:        print("="*80)
  ./uat_comprehensive_e2e.py:982:        print(f"\n📋 EXECUTIVE SUMMARY")
  ./uat_comprehensive_e2e.py:983:        print(f"   Test Duration: {duration.total_seconds():.1f} seconds")
  ./uat_comprehensive_e2e.py:984:        print(f"   Total Tests: {total_tests}")
  ./uat_comprehensive_e2e.py:985:        print(f"   Passed: {passed_tests} ({passed_tests/total_tests*100:.1f}%)")
  ./uat_comprehensive_e2e.py:986:        print(f"   Failed: {failed_tests} ({failed_tests/total_tests*100:.1f}%)")
  ./uat_comprehensive_e2e.py:987:        print(f"   Average Performance: {avg_performance:.1f}ms")
  ./uat_comprehensive_e2e.py:989:        print(f"\n🔒 SECURITY & CRITICAL TESTS")
  ./uat_comprehensive_e2e.py:990:        print(f"   Critical Tests: {len(critical_tests)} (Passed: {critical_passed}, Failed: {critical_failed})")
  ./uat_comprehensive_e2e.py:991:        print(f"   Security Tests: {len(security_tests)} (Passed: {security_passed}, Failed: {security_failed})")
  ./uat_comprehensive_e2e.py:993:        print(f"\n📊 RESULTS BY CATEGORY")
  ./uat_comprehensive_e2e.py:997:            print(f"   {category.replace('_', ' ').title()}: {passed}/{total} ({passed/total*100:.1f}%)")
  ./uat_comprehensive_e2e.py:999:        print(f"\n❌ FAILED TESTS DETAIL")
  ./uat_comprehensive_e2e.py:1004:                print(f"   • {result['test']} {severity_tag}")
  ./uat_comprehensive_e2e.py:1005:                print(f"     {result['details']}")
  ./uat_comprehensive_e2e.py:1007:            print("   No failed tests! 🎉")
  ./uat_comprehensive_e2e.py:1009:        print(f"\n⚡ PERFORMANCE ANALYSIS")
  ./uat_comprehensive_e2e.py:1012:            print(f"   Fastest: {sorted_perf[-1]['test']} ({sorted_perf[-1]['performance_ms']:.1f}ms)")
  ./uat_comprehensive_e2e.py:1013:            print(f"   Slowest: {sorted_perf[0]['test']} ({sorted_perf[0]['performance_ms']:.1f}ms)")
  ./uat_comprehensive_e2e.py:1026:        print(f"\n🎯 DEPLOYMENT READINESS ASSESSMENT")
  ./uat_comprehensive_e2e.py:1027:        print(f"   Overall Pass Rate: {overall_pass_rate:.1f}% (Required: ≥90%)")
  ./uat_comprehensive_e2e.py:1028:        print(f"   Critical Pass Rate: {critical_pass_rate:.1f}% (Required: ≥95%)")
  ./uat_comprehensive_e2e.py:1029:        print(f"   Security Pass Rate: {security_pass_rate:.1f}% (Required: 100%)")
  ./uat_comprehensive_e2e.py:1032:            print(f"\n✅ RECOMMENDATION: DEPLOY")
  ./uat_comprehensive_e2e.py:1033:            print(f"   System meets all quality thresholds for production deployment.")
  ./uat_comprehensive_e2e.py:1034:            print(f"   All critical systems functioning correctly with high reliability.")
  ./uat_comprehensive_e2e.py:1036:            print(f"\n❌ RECOMMENDATION: DO NOT DEPLOY")
  ./uat_comprehensive_e2e.py:1037:            print(f"   System does not meet required quality thresholds.")
  ./uat_comprehensive_e2e.py:1038:            print(f"   Address failed tests before considering deployment.")
  ./uat_comprehensive_e2e.py:1040:        print("="*80)
  ./uat_comprehensive_e2e.py:1048:    print(f"\n🏁 UAT COMPLETED")
  ./uat_comprehensive_e2e.py:1049:    print(f"Deployment Ready: {'YES' if deployment_ready else 'NO'}")
  ./utils/ci_invariant_enforcement.py:216:    print(report)
  ./production_flow_uat.py:85:                    print(f"  ⚠️ Database verification failed: {e}")
  ./production_flow_uat.py:112:        print("\n🇧🇩 BENGALI EXPENSE LOGGING - LIVE USER SIMULATION")
  ./production_flow_uat.py:113:        print("-" * 65)
  ./production_flow_uat.py:143:            print(f"\n  👤 User: {user_psid}")
  ./production_flow_uat.py:144:            print(f"  💬 Message: {test_case['message']}")
  ./production_flow_uat.py:161:            print(f"  ⚡ Response Time: {result.get('response_time_ms', 0):.1f}ms")
  ./production_flow_uat.py:162:            print(f"  🎯 Intent: {result.get('intent')}")
  ./production_flow_uat.py:163:            print(f"  💰 Amount: {result.get('amount')} (expected: {test_case['expected_amount']})")
  ./production_flow_uat.py:164:            print(f"  💾 Data Stored: {result.get('data_stored')}")
  ./production_flow_uat.py:165:            print(f"  📱 Response: {result.get('response', 'None')[:80]}...")
  ./production_flow_uat.py:166:            print(f"  ✅ Success: {overall_success}")
  ./production_flow_uat.py:184:        print(f"\n  📊 Bengali Expense Logging Success Rate: {bengali_success_rate:.1f}%")
  ./production_flow_uat.py:190:        print("\n🤔 BENGALI CLARIFICATION - LIVE USER SIMULATION")
  ./production_flow_uat.py:191:        print("-" * 60)
  ./production_flow_uat.py:216:            print(f"\n  👤 User: {user_psid}")
  ./production_flow_uat.py:217:            print(f"  💬 Message: {test_case['message']}")
  ./production_flow_uat.py:232:            print(f"  ⚡ Response Time: {result.get('response_time_ms', 0):.1f}ms")
  ./production_flow_uat.py:233:            print(f"  🎯 Intent: {result.get('intent')}")
  ./production_flow_uat.py:234:            print(f"  📱 Response: {result.get('response', 'None')[:80]}...")
  ./production_flow_uat.py:235:            print(f"  ✅ Success: {overall_success}")
  ./production_flow_uat.py:252:        print(f"\n  📊 Bengali Clarification Success Rate: {clarification_success_rate:.1f}%")
  ./production_flow_uat.py:258:        print("\n🇺🇸 ENGLISH EXPENSE FLOW - LIVE USER SIMULATION")
  ./production_flow_uat.py:259:        print("-" * 55)
  ./production_flow_uat.py:284:            print(f"\n  👤 User: {user_psid}")
  ./production_flow_uat.py:285:            print(f"  💬 Message: {test_case['message']}")
  ./production_flow_uat.py:298:            print(f"  ⚡ Response Time: {result.get('response_time_ms', 0):.1f}ms")
  ./production_flow_uat.py:299:            print(f"  🎯 Intent: {result.get('intent')}")
  ./production_flow_uat.py:300:            print(f"  💰 Amount: {result.get('amount')}")
  ./production_flow_uat.py:301:            print(f"  📱 Response: {result.get('response', 'None')[:80]}...")
  ./production_flow_uat.py:302:            print(f"  ✅ Success: {overall_success}")
  ./production_flow_uat.py:319:        print(f"\n  📊 English Expense Success Rate: {english_success_rate:.1f}%")
  ./production_flow_uat.py:325:        print("\n📊 ANALYSIS REQUESTS - LIVE USER SIMULATION")
  ./production_flow_uat.py:326:        print("-" * 50)
  ./production_flow_uat.py:360:            print(f"\n  👤 User: {user_psid}")
  ./production_flow_uat.py:361:            print(f"  💬 Message: {test_case['message']}")
  ./production_flow_uat.py:374:            print(f"  ⚡ Response Time: {result.get('response_time_ms', 0):.1f}ms")
  ./production_flow_uat.py:375:            print(f"  🎯 Intent: {result.get('intent')}")
  ./production_flow_uat.py:376:            print(f"  📱 Response: {result.get('response', 'None')[:80]}...")
  ./production_flow_uat.py:377:            print(f"  ✅ Success: {overall_success}")
  ./production_flow_uat.py:394:        print(f"\n  📊 Analysis Requests Success Rate: {analysis_success_rate:.1f}%")
  ./production_flow_uat.py:400:        print("\n🔒 DATA INTEGRITY VALIDATION - LIVE USER SIMULATION")
  ./production_flow_uat.py:401:        print("-" * 60)
  ./production_flow_uat.py:406:        print("\n  🧪 Test 1: Expense Storage and Retrieval")
  ./production_flow_uat.py:413:        print(f"     Expense Storage: {'✅' if storage_success else '❌'}")
  ./production_flow_uat.py:416:        print("\n  🧪 Test 2: User Data Isolation")
  ./production_flow_uat.py:434:            print(f"     User Isolation: {'✅' if isolation_success else '❌'}")
  ./production_flow_uat.py:438:            print(f"     User Isolation: ❌ Error - {e}")
  ./production_flow_uat.py:441:        print("\n  🧪 Test 3: Hash Consistency")
  ./production_flow_uat.py:450:            print(f"     Hash Consistency: {'✅' if hash_consistency else '❌'}")
  ./production_flow_uat.py:454:            print(f"     Hash Consistency: ❌ Error - {e}")
  ./production_flow_uat.py:457:        print("\n  🧪 Test 4: Bengali Digit Processing")
  ./production_flow_uat.py:464:        print(f"     Bengali Digits: {'✅' if bengali_digit_success else '❌'}")
  ./production_flow_uat.py:474:        print(f"\n  📊 Overall Data Integrity: {'✅' if overall_integrity else '❌'}")
  ./production_flow_uat.py:480:        print("\n💊 SYSTEM HEALTH ANALYSIS")
  ./production_flow_uat.py:481:        print("-" * 40)
  ./production_flow_uat.py:486:            print("  ❌ No test scenarios completed")
  ./production_flow_uat.py:526:        print(f"  📈 Overall Success Rate: {success_rate:.1f}%")
  ./production_flow_uat.py:527:        print(f"  ⚡ Average Response Time: {avg_response_time:.1f}ms")
  ./production_flow_uat.py:528:        print(f"  📊 P95 Response Time: {p95_response_time:.1f}ms")
  ./production_flow_uat.py:529:        print(f"  🇧🇩 Bengali Success Rate: {bengali_success_rate:.1f}%")
  ./production_flow_uat.py:530:        print(f"  🇺🇸 English Success Rate: {english_success_rate:.1f}%")
  ./production_flow_uat.py:531:        print(f"  💊 System Health: {'✅ HEALTHY' if is_healthy else '⚠️ ISSUES DETECTED'}")
  ./production_flow_uat.py:534:            print("  🚨 Health Issues:")
  ./production_flow_uat.py:536:                print(f"     - {issue}")
  ./production_flow_uat.py:548:        print("\n🚀 DEPLOYMENT READINESS ASSESSMENT")
  ./production_flow_uat.py:549:        print("-" * 50)
  ./production_flow_uat.py:581:        print(f"  📊 Readiness Score: {readiness_score:.1f}%")
  ./production_flow_uat.py:582:        print(f"  ✅ Criteria Met: {criteria_met}/{total_criteria}")
  ./production_flow_uat.py:583:        print(f"  🎯 Deployment Status: {deployment_status}")
  ./production_flow_uat.py:584:        print(f"  🔒 Confidence Level: {confidence}")
  ./production_flow_uat.py:587:        print(f"\n  📋 Deployment Criteria:")
  ./production_flow_uat.py:589:            print(f"     {'✅' if met else '❌'} {criterion.replace('_', ' ').title()}")
  ./production_flow_uat.py:621:        print(f"\n📄 Comprehensive audit report saved: {report_filename}")
  ./production_flow_uat.py:626:        print("🎯 PRODUCTION FLOW UAT - LIVE USER EXPERIENCE SIMULATION")
  ./production_flow_uat.py:627:        print("=" * 75)
  ./production_flow_uat.py:628:        print("Testing complete end-to-end pipeline using exact production routes")
  ./production_flow_uat.py:629:        print("Simulating real Facebook Messenger webhook calls")
  ./production_flow_uat.py:630:        print("=" * 75)
  ./production_flow_uat.py:651:        print("\n" + "=" * 75)
  ./production_flow_uat.py:652:        print("🏁 PRODUCTION FLOW UAT COMPLETE")
  ./production_flow_uat.py:653:        print("=" * 75)
  ./uat_simple.py:14:    print("🏥 Testing system health...")
  ./uat_simple.py:18:            print("✅ System health: PASS")
  ./uat_simple.py:21:            print(f"❌ System health: FAIL (status {response.status_code})")
  ./uat_simple.py:24:        print(f"❌ System health: FAIL ({e})")
  ./uat_simple.py:29:    print("🔐 Testing authentication...")
  ./uat_simple.py:34:            print("✅ Authentication: PASS (401 required)")
  ./uat_simple.py:37:            print(f"❌ Authentication: FAIL (got {response.status_code})")
  ./uat_simple.py:40:        print(f"❌ Authentication: FAIL ({e})")
  ./uat_simple.py:45:    print("💰 Testing expense patterns...")
  ./uat_simple.py:63:                print(f"✅ '{message[:30]}...' -> detected={detected}, amount={amount}")
  ./uat_simple.py:65:                print(f"❌ '{message[:30]}...' -> expected detect={should_detect}, amount={expected_amount}, got detect={detected}, amount={amount}")
  ./uat_simple.py:69:            print("✅ Expense patterns: PASS")
  ./uat_simple.py:71:            print("❌ Expense patterns: FAIL") 
  ./uat_simple.py:75:        print(f"❌ Expense patterns: FAIL ({e})")
  ./uat_simple.py:80:    print("📂 Testing category normalization...")
  ./uat_simple.py:98:                print(f"✅ '{input_cat}' -> '{result}'")
  ./uat_simple.py:100:                print(f"❌ '{input_cat}' -> expected '{expected}', got '{result}'")
  ./uat_simple.py:104:            print("✅ Category normalization: PASS")
  ./uat_simple.py:106:            print("❌ Category normalization: FAIL")
  ./uat_simple.py:110:        print(f"❌ Category normalization: FAIL ({e})")
  ./uat_simple.py:115:    print("🚩 Testing feature flags...")
  ./uat_simple.py:122:        print(f"✅ Feature flag system: PASS (EXPENSE_REPAIR_ENABLED = {enabled})")
  ./uat_simple.py:126:        print(f"❌ Feature flag system: FAIL ({e})")
  ./uat_simple.py:131:    print("🗄️  Testing database constraints...")
  ./uat_simple.py:136:            print("✅ Database constraints: PASS (system running)")
  ./uat_simple.py:139:            print("❌ Database constraints: FAIL (system not responding)")
  ./uat_simple.py:142:        print(f"❌ Database constraints: FAIL ({e})")
  ./uat_simple.py:147:    print("🚀 Starting Finbrain UAT Verification")
  ./uat_simple.py:148:    print("=" * 50)
  ./uat_simple.py:163:        print()
  ./uat_simple.py:169:    print("=" * 50)
  ./uat_simple.py:170:    print(f"📊 UAT SUMMARY: {passed}/{total} tests passed")
  ./uat_simple.py:173:        print("🎉 ALL UAT TESTS PASSED! System ready for deployment.")
  ./uat_simple.py:176:        print(f"⚠️  {total - passed} tests failed. Review required.")
  ./test_uat_scenarios.py:34:        print("🚀 Starting End-to-End UAT Scenarios")
  ./test_uat_scenarios.py:35:        print("=" * 50)
  ./test_uat_scenarios.py:374:        print("\n" + "=" * 50)
  ./test_uat_scenarios.py:375:        print("🎯 UAT SUMMARY")
  ./test_uat_scenarios.py:376:        print("=" * 50)
  ./test_uat_scenarios.py:382:            print(result)
  ./test_uat_scenarios.py:384:        print("\n" + "=" * 50)
  ./test_uat_scenarios.py:385:        print(f"📊 OVERALL RESULT: {passed}/{total} scenarios passed")
  ./test_uat_scenarios.py:388:            print("🎉 ALL UAT SCENARIOS PASSED! System ready for deployment.")
  ./test_uat_scenarios.py:390:            print(f"⚠️  {total - passed} scenarios failed. Review required.")
  ./test_uat_scenarios.py:391:        print("=" * 50)
  ./final_comprehensive_uat.py:16:        print("🎯 FINAL COMPREHENSIVE UAT - TARGETING 100% SUCCESS")
  ./final_comprehensive_uat.py:17:        print("=" * 70)
  ./final_comprehensive_uat.py:29:        print("\n🔧 PHASE 1: CRITICAL COMPONENT VALIDATION")
  ./final_comprehensive_uat.py:30:        print("-" * 60)
  ./final_comprehensive_uat.py:66:                print(f"  {'✅' if test_passed else '❌'} '{test_input}' → Money: {has_money}, Amount: {amount}")
  ./final_comprehensive_uat.py:68:            print(f"  📊 Money Detection: {money_passed}/{money_total} ({money_passed/money_total*100:.1f}%)")
  ./final_comprehensive_uat.py:72:            print(f"  ❌ Money Detection System: Error - {e}")
  ./final_comprehensive_uat.py:95:            print(f"  {'✅' if hash_test_passed else '❌'} Identity Hashing: Length={len(hashed1)}, Idempotent={hashed1 == hashed2}")
  ./final_comprehensive_uat.py:99:            print(f"  ❌ Identity Hashing System: Error - {e}")
  ./final_comprehensive_uat.py:130:            print(f"  {'✅' if db_test_passed and retrieval_passed else '❌'} Database: Create={db_test_passed}, Retrieve={len(user_expenses)} expenses")
  ./final_comprehensive_uat.py:134:            print(f"  ❌ Database Operations: Error - {e}")
  ./final_comprehensive_uat.py:139:        print("\n🧭 PHASE 2: ROUTING PRECISION VALIDATION")
  ./final_comprehensive_uat.py:140:        print("-" * 60)
  ./final_comprehensive_uat.py:181:                    print(f"  {'✅' if test_passed else '❌'} {description}: {test_input} → {actual_intent} (conf: {result.confidence})")
  ./final_comprehensive_uat.py:195:                    print(f"  {'✅' if test_passed else '❌'} {description}: No deterministic routing (expected for SMALLTALK)")
  ./final_comprehensive_uat.py:200:            print(f"  📊 Routing Precision: {routing_passed}/{routing_total} ({routing_passed/routing_total*100:.1f}%)")
  ./final_comprehensive_uat.py:204:            print(f"  ❌ Routing System: Error - {e}")
  ./final_comprehensive_uat.py:209:        print("\n🔄 PHASE 3: END-TO-END INTEGRATION VALIDATION")
  ./final_comprehensive_uat.py:210:        print("-" * 60)
  ./final_comprehensive_uat.py:279:                    print(f"  {'✅' if test_passed else '❌'} {test_case['name']}: Intent={intent}, Time={response_time_ms:.1f}ms")
  ./final_comprehensive_uat.py:290:                    print(f"  ❌ {test_case['name']}: Error - {e}")
  ./final_comprehensive_uat.py:292:            print(f"  📊 Integration Success: {integration_passed}/{integration_total} ({integration_passed/integration_total*100:.1f}%)")
  ./final_comprehensive_uat.py:296:            print(f"  ❌ End-to-End Integration: Error - {e}")
  ./final_comprehensive_uat.py:301:        print("\n🔒 PHASE 4: DATA INTEGRITY VALIDATION")
  ./final_comprehensive_uat.py:302:        print("-" * 60)
  ./final_comprehensive_uat.py:324:            print(f"  {'✅' if hash_consistency else '❌'} Hash Consistency: {hash_consistency}")
  ./final_comprehensive_uat.py:350:            print(f"  ✅ Bengali Normalization: {bn_passed}/{len(bn_test_cases)} ({bn_passed/len(bn_test_cases)*100:.1f}%)")
  ./final_comprehensive_uat.py:354:            print(f"  ❌ Data Integrity: Error - {e}")
  ./final_comprehensive_uat.py:359:        print("\n" + "=" * 70)
  ./final_comprehensive_uat.py:360:        print("📊 FINAL COMPREHENSIVE RESULTS")
  ./final_comprehensive_uat.py:361:        print("=" * 70)
  ./final_comprehensive_uat.py:379:        print("\n🔹 CATEGORY BREAKDOWN:")
  ./final_comprehensive_uat.py:381:            print(f"   {category.upper()}: {stats['passed']}/{stats['total']} ({stats['rate']:.1f}%)")
  ./final_comprehensive_uat.py:388:        print(f"\n📈 OVERALL RESULTS:")
  ./final_comprehensive_uat.py:389:        print(f"   Total Tests: {passed_tests}/{total_tests}")
  ./final_comprehensive_uat.py:390:        print(f"   Success Rate: {final_success_rate:.1f}%")
  ./final_comprehensive_uat.py:391:        print(f"   Target: 100.0%")
  ./final_comprehensive_uat.py:392:        print(f"   Gap: {100.0 - final_success_rate:.1f} percentage points")
  ./final_comprehensive_uat.py:408:        print(f"\n🚀 DEPLOYMENT RECOMMENDATION:")
  ./final_comprehensive_uat.py:409:        print(f"   Status: {deployment_status}")
  ./final_comprehensive_uat.py:410:        print(f"   Recommendation: {recommendation}")
  ./final_comprehensive_uat.py:434:        print(f"\n📄 Comprehensive audit report saved: {report_filename}")
  ./final_comprehensive_uat.py:435:        print("\n" + "=" * 70)
  ./final_comprehensive_uat.py:436:        print("✅ FINAL COMPREHENSIVE UAT COMPLETE")
  ./final_comprehensive_uat.py:437:        print("=" * 70)
  ./utils/single_writer_monitor.py:307:    print("🔍 Single Writer System Health Check")
  ./utils/single_writer_monitor.py:308:    print("=" * 40)
  ./utils/single_writer_monitor.py:312:    print(report)
  ./utils/single_writer_monitor.py:319:        print("\n✅ System monitoring completed successfully")
  ./utils/single_writer_monitor.py:322:        print("\n⚠️  System has degraded performance")
  ./utils/single_writer_monitor.py:325:        print("\n❌ System health check failed")
  ./quick_validation_test.py:12:        print("🔧 VALIDATING CRITICAL FIXES")
  ./quick_validation_test.py:13:        print("=" * 40)
  ./quick_validation_test.py:26:            print("\n💰 Money Detection & Extraction:")
  ./quick_validation_test.py:30:                print(f"  ✅ '{test_case}' → Money: {has_money}, Amount: {amount}")
  ./quick_validation_test.py:33:            print(f"  ❌ Money Detection Error: {e}")
  ./quick_validation_test.py:39:            print("\n🔒 Identity Hashing:")
  ./quick_validation_test.py:42:            print(f"  ✅ PSID '{test_psid}' → Hash: {hashed[:16]}...")
  ./quick_validation_test.py:46:            print(f"  ✅ Hash idempotency: {hashed == hashed2}")
  ./quick_validation_test.py:49:            print(f"  ❌ Identity Hashing Error: {e}")
  ./quick_validation_test.py:55:            print("\n💾 Database Operations:")
  ./quick_validation_test.py:65:            print(f"  ✅ Expense storage: {result is not None}")
  ./quick_validation_test.py:68:            print(f"  ❌ Database Error: {e}")
  ./quick_validation_test.py:74:            print("\n🧭 Routing Validation:")
  ./quick_validation_test.py:80:            print(f"  ✅ '{test_input}' → {result.intent.value}")
  ./quick_validation_test.py:83:            print(f"  ❌ Routing Error: {e}")
  ./quick_validation_test.py:85:        print("\n" + "=" * 40)
  ./quick_validation_test.py:86:        print("✅ CRITICAL FIXES VALIDATION COMPLETE")
  ./focused_e2e_uat.py:16:        print("🧪 COMPREHENSIVE END-TO-END UAT AUDIT")
  ./focused_e2e_uat.py:17:        print("=" * 60)
  ./focused_e2e_uat.py:28:        print("\n🔍 PHASE 1: DATA HANDLING VALIDATION")
  ./focused_e2e_uat.py:29:        print("-" * 50)
  ./focused_e2e_uat.py:47:            print(f"  {'✅' if passed else '❌'} Bengali Digit Conversion: {test_input} → {converted}")
  ./focused_e2e_uat.py:50:            print(f"  ❌ Bengali Digit Conversion: Error - {e}")
  ./focused_e2e_uat.py:74:                print(f"  {'✅' if passed else '❌'} Money Detection '{test_case}': Money={has_money}, Amount={amount}")
  ./focused_e2e_uat.py:77:            print(f"  ❌ Money Pattern Detection: Error - {e}")
  ./focused_e2e_uat.py:82:        print("\n🧭 PHASE 2: ROUTING VALIDATION")
  ./focused_e2e_uat.py:83:        print("-" * 50)
  ./focused_e2e_uat.py:138:                    print(f"  {'✅' if passed else '❌'} {test_case['description']}: {test_case['input']} → {actual_intent}")
  ./focused_e2e_uat.py:145:                    print(f"  ❌ {test_case['description']}: Deterministic routing not activated")
  ./focused_e2e_uat.py:149:            print(f"  ❌ Routing System: Error - {e}")
  ./focused_e2e_uat.py:154:        print("\n💾 PHASE 3: DATABASE OPERATIONS")
  ./focused_e2e_uat.py:155:        print("-" * 50)
  ./focused_e2e_uat.py:184:            print(f"  {'✅' if storage_passed else '❌'} Expense Storage: Record created = {storage_passed}")
  ./focused_e2e_uat.py:197:                print(f"  {'✅' if retrieval_passed else '❌'} Expense Retrieval: Found {len(user_expenses)} expenses")
  ./focused_e2e_uat.py:215:                    print(f"  {'✅' if integrity_passed else '❌'} Data Integrity: Description and amount match = {integrity_passed}")
  ./focused_e2e_uat.py:219:            print(f"  ❌ Database Operations: Error - {e}")
  ./focused_e2e_uat.py:224:        print("\n🔄 PHASE 4: END-TO-END INTEGRATION")
  ./focused_e2e_uat.py:225:        print("-" * 50)
  ./focused_e2e_uat.py:284:                    print(f"  {'✅' if passed else '❌'} {test_case['name']}: Intent={intent}, Time={response_time_ms:.1f}ms")
  ./focused_e2e_uat.py:292:                    print(f"  ❌ {test_case['name']}: Error - {e}")
  ./focused_e2e_uat.py:296:            print(f"  ❌ End-to-End Integration: Error - {e}")
  ./focused_e2e_uat.py:301:        print("\n" + "=" * 60)
  ./focused_e2e_uat.py:302:        print("📊 COMPREHENSIVE AUDIT SUMMARY")
  ./focused_e2e_uat.py:303:        print("=" * 60)
  ./focused_e2e_uat.py:320:            print(f"\n🔹 {category.upper().replace('_', ' ')}")
  ./focused_e2e_uat.py:321:            print(f"   Tests: {category_passed}/{category_total} ({category_rate:.1f}%)")
  ./focused_e2e_uat.py:326:                print(f"   ❌ Failed Tests:")
  ./focused_e2e_uat.py:329:                    print(f"      - {failed.get('test', 'Unknown')}: {error_msg}")
  ./focused_e2e_uat.py:332:        print(f"\n📈 OVERALL ASSESSMENT")
  ./focused_e2e_uat.py:333:        print(f"   Total Tests: {passed_tests}/{total_tests}")
  ./focused_e2e_uat.py:334:        print(f"   Success Rate: {success_rate:.1f}%")
  ./focused_e2e_uat.py:350:        print(f"\n🚀 DEPLOYMENT RECOMMENDATION")
  ./focused_e2e_uat.py:351:        print(f"   Status: {deployment_status}")
  ./focused_e2e_uat.py:352:        print(f"   Recommendation: {recommendation}")
  ./focused_e2e_uat.py:371:        print(f"\n📄 Detailed audit report saved: {report_filename}")
  ./focused_e2e_uat.py:372:        print("\n" + "=" * 60)
  ./focused_e2e_uat.py:373:        print("✅ COMPREHENSIVE END-TO-END UAT COMPLETE")
  ./focused_e2e_uat.py:374:        print("=" * 60)
  ./comprehensive_e2e_uat.py:44:        print("🔍 DATA HANDLING VALIDATION")
  ./comprehensive_e2e_uat.py:45:        print("-" * 40)
  ./comprehensive_e2e_uat.py:119:                print(f"  {'✅' if passed else '❌'} {test_case['name']}: {details}")
  ./comprehensive_e2e_uat.py:123:                print(f"  ❌ {test_case['name']}: Exception - {e}")
  ./comprehensive_e2e_uat.py:127:        print("\n🧭 ROUTING DECISION VALIDATION")
  ./comprehensive_e2e_uat.py:128:        print("-" * 40)
  ./comprehensive_e2e_uat.py:208:                print(f"  {'✅' if passed else '❌'} {test['description']}: {details}")
  ./comprehensive_e2e_uat.py:212:                print(f"  ❌ {test['description']}: Exception - {e}")
  ./comprehensive_e2e_uat.py:216:        print("\n⚙️ PROCESSING HANDLER VALIDATION")
  ./comprehensive_e2e_uat.py:217:        print("-" * 40)
  ./comprehensive_e2e_uat.py:238:                print(f"  {'✅' if expense_passed else '❌'} EXPENSE_LOG Handler: {expense_details}")
  ./comprehensive_e2e_uat.py:242:                print(f"  ❌ EXPENSE_LOG Handler: Exception - {e}")
  ./comprehensive_e2e_uat.py:260:                print(f"  {'✅' if clarify_passed else '❌'} CLARIFY_EXPENSE Handler: {clarify_details}")
  ./comprehensive_e2e_uat.py:264:                print(f"  ❌ CLARIFY_EXPENSE Handler: Exception - {e}")
  ./comprehensive_e2e_uat.py:268:            print(f"  ❌ Handler Import: {e}")
  ./comprehensive_e2e_uat.py:272:        print("\n💾 DATABASE OPERATIONS VALIDATION")
  ./comprehensive_e2e_uat.py:273:        print("-" * 40)
  ./comprehensive_e2e_uat.py:303:                print(f"  {'✅' if storage_passed else '❌'} Expense Storage: {storage_details}")
  ./comprehensive_e2e_uat.py:315:                    print(f"  {'✅' if retrieval_passed else '❌'} Expense Retrieval: {retrieval_details}")
  ./comprehensive_e2e_uat.py:319:                print(f"  ❌ Expense Storage: Exception - {e}")
  ./comprehensive_e2e_uat.py:323:            print(f"  ❌ Database Import: {e}")
  ./comprehensive_e2e_uat.py:327:        print("\n🔄 END-TO-END WORKFLOW VALIDATION")
  ./comprehensive_e2e_uat.py:328:        print("-" * 40)
  ./comprehensive_e2e_uat.py:398:                    print(f"  {'✅' if passed else '❌'} {scenario['name']}: {details}")
  ./comprehensive_e2e_uat.py:402:                    print(f"  ❌ {scenario['name']}: Exception - {e}")
  ./comprehensive_e2e_uat.py:406:            print(f"  ❌ Production Router Import: {e}")
  ./comprehensive_e2e_uat.py:410:        print("\n🔒 DATA INTEGRITY VALIDATION")
  ./comprehensive_e2e_uat.py:411:        print("-" * 40)
  ./comprehensive_e2e_uat.py:430:            print(f"  {'✅' if hash_consistency else '❌'} User ID Hashing: {hash_details}")
  ./comprehensive_e2e_uat.py:444:            print(f"  {'✅' if isolation_passed else '❌'} Data Isolation: {isolation_details}")
  ./comprehensive_e2e_uat.py:448:            print(f"  ❌ Integrity Tests: Exception - {e}")
  ./comprehensive_e2e_uat.py:452:        print("\n" + "=" * 60)
  ./comprehensive_e2e_uat.py:453:        print("📊 COMPREHENSIVE UAT AUDIT REPORT")
  ./comprehensive_e2e_uat.py:454:        print("=" * 60)
  ./comprehensive_e2e_uat.py:468:            print(f"\n🔹 {category.upper()}")
  ./comprehensive_e2e_uat.py:469:            print(f"   Tests: {category_passed}/{category_total} ({success_rate:.1f}%)")
  ./comprehensive_e2e_uat.py:474:                print(f"   ❌ Failed Tests:")
  ./comprehensive_e2e_uat.py:476:                    print(f"      - {failed['name']}: {failed['details']}")
  ./comprehensive_e2e_uat.py:487:        print(f"\n📈 OVERALL RESULTS")
  ./comprehensive_e2e_uat.py:488:        print(f"   Total Tests: {total_passed}/{total_tests}")
  ./comprehensive_e2e_uat.py:489:        print(f"   Success Rate: {overall_success_rate:.1f}%")
  ./comprehensive_e2e_uat.py:505:        print(f"\n🚀 DEPLOYMENT RECOMMENDATION")
  ./comprehensive_e2e_uat.py:506:        print(f"   Status: {deployment_status}")
  ./comprehensive_e2e_uat.py:513:        print(f"\n📄 Detailed report saved: {report_filename}")
  ./comprehensive_e2e_uat.py:518:        print("🧪 STARTING COMPREHENSIVE END-TO-END UAT")
  ./comprehensive_e2e_uat.py:519:        print("=" * 60)
  ./final_por_v1_1_validation.py:15:        print("🧪 CONTRACT TESTS (Direct Deterministic Router)")
  ./final_por_v1_1_validation.py:16:        print("=" * 50)
  ./final_por_v1_1_validation.py:53:            print(f"\n{i}. {test['name']}")
  ./final_por_v1_1_validation.py:54:            print(f"   Input: {test['input']}")
  ./final_por_v1_1_validation.py:55:            print(f"   Expected: {test['expected']}")
  ./final_por_v1_1_validation.py:70:            print(f"   Actual: {actual}")
  ./final_por_v1_1_validation.py:71:            print(f"   Should Use Det. Routing: {should_use}")
  ./final_por_v1_1_validation.py:73:                print(f"   Money: {signals.has_money}, Verb: {getattr(signals, 'has_first_person_spent_verb', False)}")
  ./final_por_v1_1_validation.py:74:            print(f"   Description: {test['description']}")
  ./final_por_v1_1_validation.py:77:                print(f"   ✅ PASS")
  ./final_por_v1_1_validation.py:80:                print(f"   ❌ FAIL")
  ./final_por_v1_1_validation.py:82:        print(f"\nContract Results: {passed}/{len(tests)}")
  ./final_por_v1_1_validation.py:92:        print("\n🚦 PREFLIGHT PROBES (Production Readiness)")
  ./final_por_v1_1_validation.py:93:        print("=" * 50)
  ./final_por_v1_1_validation.py:120:            print(f"\n{i}. {probe['name']}")
  ./final_por_v1_1_validation.py:121:            print(f"   Input: {probe['input']}")
  ./final_por_v1_1_validation.py:122:            print(f"   Expected: {probe['expected']}")
  ./final_por_v1_1_validation.py:132:                print(f"   Intent: {intent}")
  ./final_por_v1_1_validation.py:133:                print(f"   Response: {response[:80]}...")
  ./final_por_v1_1_validation.py:135:                    print(f"   Category: {category}")
  ./final_por_v1_1_validation.py:137:                    print(f"   Amount: {amount}")
  ./final_por_v1_1_validation.py:141:                    print(f"   ✅ PASS - Response generated")
  ./final_por_v1_1_validation.py:144:                    print(f"   ❌ FAIL - No meaningful response")
  ./final_por_v1_1_validation.py:147:                print(f"   ❌ FAIL - Exception: {e}")
  ./final_por_v1_1_validation.py:149:        print(f"\nPreflight Results: {passed}/{len(probes)}")
  ./final_por_v1_1_validation.py:154:    print("🎯 FINAL PoR v1.1 VALIDATION")
  ./final_por_v1_1_validation.py:155:    print("=" * 60)
  ./final_por_v1_1_validation.py:164:    print("\n" + "=" * 60)
  ./final_por_v1_1_validation.py:165:    print("📊 FINAL ASSESSMENT")
  ./final_por_v1_1_validation.py:166:    print("-" * 60)
  ./final_por_v1_1_validation.py:168:    print(f"Contract Tests: {'✅ PASS' if contract_success else '❌ FAIL'}")
  ./final_por_v1_1_validation.py:169:    print(f"Preflight Probes: {'✅ PASS' if preflight_success else '❌ FAIL'}")
  ./final_por_v1_1_validation.py:172:        print("\n🎉 SYSTEM READY FOR ROUTER_SCOPE EXPANSION")
  ./final_por_v1_1_validation.py:173:        print("✅ All contract tests passing at 100%")
  ./final_por_v1_1_validation.py:174:        print("✅ Preflight probes successful") 
  ./final_por_v1_1_validation.py:175:        print("✅ Safe to flip ROUTER_SCOPE to ALL")
  ./final_por_v1_1_validation.py:178:        print("\n⚠️ CONTRACT TESTS PASS BUT PREFLIGHT ISSUES")
  ./final_por_v1_1_validation.py:179:        print("🔧 Core routing working but integration needs attention")
  ./final_por_v1_1_validation.py:182:        print("\n❌ DO NOT FLIP ROUTER_SCOPE")
  ./final_por_v1_1_validation.py:183:        print("🚫 Contract tests failing - core routing needs fixes")
  ./ci_unification_checks.py:17:    print(f"🔍 {description}")
  ./ci_unification_checks.py:22:        print(f"❌ Command failed: {e}")
  ./ci_unification_checks.py:27:    print(f"🔍 {description}")
  ./ci_unification_checks.py:33:            print("❌ DATABASE_URL not found")
  ./ci_unification_checks.py:44:        print(f"   Result: {result} (max allowed: {max_allowed})")
  ./ci_unification_checks.py:47:            print(f"❌ FAIL: {description} returned {result}, expected <= {max_allowed}")
  ./ci_unification_checks.py:50:            print(f"✅ PASS: {description}")
  ./ci_unification_checks.py:54:        print(f"❌ SQL check failed: {e}")
  ./ci_unification_checks.py:59:    print("\n🔒 SECURITY CHECKS")
  ./ci_unification_checks.py:60:    print("=" * 60)
  ./ci_unification_checks.py:68:        print(result.stdout)
  ./ci_unification_checks.py:70:            print("Security check warnings:", result.stderr)
  ./ci_unification_checks.py:73:            print("❌ FAIL: Security violations detected")
  ./ci_unification_checks.py:76:            print("✅ PASS: No security violations found")
  ./ci_unification_checks.py:79:        print(f"❌ Security checks failed to run: {e}")
  ./ci_unification_checks.py:84:    print("\n🎯 F) Source Validation - No hardcoded deprecated sources")
  ./ci_unification_checks.py:112:            print(f"Warning: Could not scan {file_path}: {e}")
  ./ci_unification_checks.py:115:        print("❌ FAIL: Hardcoded deprecated sources found")
  ./ci_unification_checks.py:117:            print(f"  {violation}")
  ./ci_unification_checks.py:120:        print("✅ PASS: No hardcoded deprecated sources")
  ./ci_unification_checks.py:125:    print("🚀 Starting Database Unification CI Checks")
  ./ci_unification_checks.py:126:    print("=" * 60)
  ./ci_unification_checks.py:136:    print("\n📁 A) Code Pattern Checks - No fragmented reads")
  ./ci_unification_checks.py:145:        print(f"❌ FAIL: Found forbidden inference_snapshots reads:")
  ./ci_unification_checks.py:146:        print(stdout)
  ./ci_unification_checks.py:149:        print("✅ PASS: No inference_snapshots reads in user-facing code")
  ./ci_unification_checks.py:158:        print(f"❌ FAIL: Found forbidden monthly_summaries reads:")
  ./ci_unification_checks.py:159:        print(stdout)
  ./ci_unification_checks.py:162:        print("✅ PASS: No monthly_summaries reads in user-facing code")
  ./ci_unification_checks.py:165:    print("\n🛡️  C) UI Guardrail Checks - Frontend API enforcement")
  ./ci_unification_checks.py:174:        print(f"❌ FAIL: Found direct database access in UI components (must use API endpoints only):")
  ./ci_unification_checks.py:175:        print(stdout)
  ./ci_unification_checks.py:178:        print("✅ PASS: No direct database access in UI components")
  ./ci_unification_checks.py:187:        print(f"❌ FAIL: Found prepared statement calls outside backend layer:")
  ./ci_unification_checks.py:188:        print(stdout)
  ./ci_unification_checks.py:191:        print("✅ PASS: Prepared statements only used in backend layer")
  ./ci_unification_checks.py:194:    print("\n👻 GHOST CODE PROTECTION: Single Writer Principle Enforcement")
  ./ci_unification_checks.py:211:            print(f"❌ FAIL: Found forbidden import of {func_name}:")
  ./ci_unification_checks.py:212:            print(stdout)
  ./ci_unification_checks.py:215:            print(f"✅ PASS: No forbidden {func_name} imports")
  ./ci_unification_checks.py:224:        print(f"❌ FAIL: Found direct expense table inserts (violates single writer principle):")
  ./ci_unification_checks.py:225:        print(stdout)
  ./ci_unification_checks.py:228:        print(f"✅ PASS: No direct expense table inserts detected")
  ./ci_unification_checks.py:237:        print(f"❌ FAIL: Found add_expense calls not imported from backend_assistant:")
  ./ci_unification_checks.py:238:        print(stdout)
  ./ci_unification_checks.py:241:        print(f"✅ PASS: All add_expense calls use canonical backend_assistant import")
  ./ci_unification_checks.py:244:    print("\n🗃️  B) Database State Checks")
  ./ci_unification_checks.py:270:    print("\n🔒 D) Permission Checks")
  ./ci_unification_checks.py:285:    print("\n🔒 E) UI Guardrails - Frontend can only use approved endpoints")
  ./ci_unification_checks.py:293:        print(f"❌ FAIL: UI guardrails validation failed")
  ./ci_unification_checks.py:294:        print(ui_stdout)
  ./ci_unification_checks.py:297:        print("✅ PASS: UI guardrails enforced")
  ./ci_unification_checks.py:314:        print(f"🔍 Verifying expenses table is accessible (unified read path)")
  ./ci_unification_checks.py:315:        print(f"   Result: {expense_count} expenses found")
  ./ci_unification_checks.py:318:            print("✅ PASS: Expenses table accessible with data")
  ./ci_unification_checks.py:320:            print("❌ FAIL: Expenses table returned 0 records - unified read path broken")
  ./ci_unification_checks.py:323:        print(f"❌ FAIL: Could not access expenses table: {e}")
  ./ci_unification_checks.py:327:    print("\n" + "=" * 60)
  ./ci_unification_checks.py:329:        print("🎉 ALL CHECKS PASSED - Database unification intact")
  ./ci_unification_checks.py:332:        print("💥 CHECKS FAILED - Database unification regression detected")
  ./ci_unification_checks.py:333:        print("🚫 BUILD BLOCKED - Fix violations before deployment")
  ./utils/data_integrity_check.py:753:        print("=" * 80)
  ./utils/data_integrity_check.py:754:        print("FINBRAIN DATA INTEGRITY CHECK")
  ./utils/data_integrity_check.py:755:        print("=" * 80)
  ./utils/data_integrity_check.py:759:        print(f"\nRun ID: {report.run_id}")
  ./utils/data_integrity_check.py:760:        print(f"Overall Status: {report.overall_status}")
  ./utils/data_integrity_check.py:761:        print(f"Summary: {report.summary}")
  ./utils/data_integrity_check.py:762:        print(f"Duration: {(datetime.fromisoformat(report.end_time) - datetime.fromisoformat(report.start_time)).total_seconds():.2f} seconds")
  ./utils/data_integrity_check.py:764:        print(f"\n{'='*80}")
  ./utils/data_integrity_check.py:765:        print("DETAILED RESULTS")
  ./utils/data_integrity_check.py:766:        print("="*80)
  ./utils/data_integrity_check.py:770:            print(f"\n{status_emoji} {check.check_name}: {check.status}")
  ./utils/data_integrity_check.py:771:            print(f"   {check.message}")
  ./utils/data_integrity_check.py:774:                print(f"   Affected users: {', '.join(check.affected_users)}")
  ./utils/data_integrity_check.py:778:        print(f"\nExit code: {exit_code}")
  ./debug_routing_test.py:15:        print("🐛 DEBUGGING DETERMINISTIC ROUTING")
  ./debug_routing_test.py:16:        print("=" * 50)
  ./debug_routing_test.py:20:        print(f"\n1. Testing: {test_input}")
  ./debug_routing_test.py:24:        print(f"   Raw signals:")
  ./debug_routing_test.py:25:        print(f"   - has_money: {signals.has_money}")
  ./debug_routing_test.py:26:        print(f"   - has_first_person_spent_verb: {signals.has_first_person_spent_verb}")
  ./debug_routing_test.py:27:        print(f"   - has_explicit_analysis: {signals.has_explicit_analysis}")
  ./debug_routing_test.py:28:        print(f"   - ledger_count_30d: {signals.ledger_count_30d}")
  ./debug_routing_test.py:32:        print(f"   - ledger_count_30d (forced): {signals.ledger_count_30d}")
  ./debug_routing_test.py:36:        print(f"   - should_use_deterministic_routing: {should_use}")
  ./debug_routing_test.py:41:            print(f"   - Routing result: {routing_result.intent.value}")
  ./debug_routing_test.py:42:            print(f"   - Reason codes: {routing_result.reason_codes}")
  ./debug_routing_test.py:43:            print(f"   - Matched patterns: {routing_result.matched_patterns}")
  ./debug_routing_test.py:45:            print(f"   ❌ Deterministic routing not activated!")
  ./debug_routing_test.py:49:        print(f"\n2. Testing: {test_input2}")
  ./debug_routing_test.py:54:        print(f"   - has_money: {signals2.has_money}")
  ./debug_routing_test.py:55:        print(f"   - has_first_person_spent_verb: {signals2.has_first_person_spent_verb}")
  ./debug_routing_test.py:56:        print(f"   - has_explicit_analysis: {signals2.has_explicit_analysis}")
  ./debug_routing_test.py:59:        print(f"   - should_use_deterministic_routing: {should_use2}")
  ./debug_routing_test.py:63:            print(f"   - Routing result: {routing_result2.intent.value}")
  ./debug_routing_test.py:65:            print(f"   ❌ Deterministic routing not activated!")
  ./debug_routing_test.py:69:        print(f"\n3. Testing: {test_input3}")
  ./debug_routing_test.py:74:        print(f"   - has_explicit_analysis: {signals3.has_explicit_analysis}")
  ./debug_routing_test.py:75:        print(f"   - has_time_window: {signals3.has_time_window}")
  ./debug_routing_test.py:76:        print(f"   - has_analysis_terms: {signals3.has_analysis_terms}")
  ./debug_routing_test.py:79:        print(f"   - should_use_deterministic_routing: {should_use3}")
  ./debug_routing_test.py:83:            print(f"   - Routing result: {routing_result3.intent.value}")
  ./debug_routing_test.py:85:            print(f"   ❌ Deterministic routing not activated!")
  ./debug_routing_test.py:88:        print(f"\n🔧 CONFIGURATION CHECK")
  ./debug_routing_test.py:89:        print(f"   - Router flags: {deterministic_router.flags}")
  ./debug_routing_test.py:90:        print(f"   - Routing scope: {getattr(deterministic_router.flags, 'routing_scope', 'not_set')}")
  ./data_consistency_standards.py:349:    print("📏 FinBrain Data Consistency Standards")
  ./data_consistency_standards.py:350:    print("=" * 50)
  ./data_consistency_standards.py:352:    print(f"✅ Supported Currencies: {get_supported_currencies()}")
  ./data_consistency_standards.py:353:    print(f"✅ Default Currency: {DataConsistencyStandards.DEFAULT_CURRENCY}")
  ./data_consistency_standards.py:366:    print(f"\n🧪 Test Validation:")
  ./data_consistency_standards.py:367:    print(f"Valid: {result['valid']}")
  ./data_consistency_standards.py:369:        print(f"Errors: {result['errors']}")
  ./data_consistency_standards.py:370:    print(f"Normalized: {result['normalized_data']}")
  ./data_consistency_standards.py:372:    print("\n✅ Data Consistency Standards Ready!")
  ./data_consistency_validator.py:366:    print(report)
  ./data_consistency_validator.py:371:        print("\n💰 CURRENCY DISTRIBUTION:")
  ./data_consistency_validator.py:373:            print(f"  {currency}: {count} records ({percentage}%)")
  ./comprehensive_expense_log_validation.py:14:        print("🧪 COMPREHENSIVE PoR v1.1 EXPENSE_LOG VALIDATION")
  ./comprehensive_expense_log_validation.py:15:        print("=" * 70)
  ./comprehensive_expense_log_validation.py:18:        print("\n📋 STEP 1: CONTRACT-LEVEL ROUTING VALIDATION")
  ./comprehensive_expense_log_validation.py:19:        print("-" * 50)
  ./comprehensive_expense_log_validation.py:53:            print(f"{i}. {test['name']}")
  ./comprehensive_expense_log_validation.py:64:            print(f"   Input: {test['input']}")
  ./comprehensive_expense_log_validation.py:65:            print(f"   Expected: {test['expected']}")
  ./comprehensive_expense_log_validation.py:66:            print(f"   Actual: {actual_intent}")
  ./comprehensive_expense_log_validation.py:67:            print(f"   Money: {signals.has_money}, Verb: {signals.has_first_person_spent_verb}")
  ./comprehensive_expense_log_validation.py:70:                print(f"   ✅ PASS")
  ./comprehensive_expense_log_validation.py:73:                print(f"   ❌ FAIL")
  ./comprehensive_expense_log_validation.py:75:        print(f"\nContract Test Results: {contract_passed}/{len(contract_tests)}")
  ./comprehensive_expense_log_validation.py:78:        print("\n🔗 STEP 2: END-TO-END INTEGRATION VALIDATION")
  ./comprehensive_expense_log_validation.py:79:        print("-" * 50)
  ./comprehensive_expense_log_validation.py:99:            print(f"{i}. {test['name']}")
  ./comprehensive_expense_log_validation.py:109:                print(f"   Input: {test['input']}")
  ./comprehensive_expense_log_validation.py:110:                print(f"   Intent: {intent}")
  ./comprehensive_expense_log_validation.py:111:                print(f"   Response: {response[:100]}...")
  ./comprehensive_expense_log_validation.py:113:                    print(f"   Category: {category}")
  ./comprehensive_expense_log_validation.py:115:                    print(f"   Amount: {amount}")
  ./comprehensive_expense_log_validation.py:122:                    print(f"   ✅ PASS")
  ./comprehensive_expense_log_validation.py:125:                    print(f"   ❌ FAIL - Missing expected patterns")
  ./comprehensive_expense_log_validation.py:128:                print(f"   ❌ FAIL - Exception: {e}")
  ./comprehensive_expense_log_validation.py:130:        print(f"\nIntegration Test Results: {integration_passed}/{len(integration_tests)}")
  ./comprehensive_expense_log_validation.py:133:        print("\n⚡ STEP 3: SYSTEM HEALTH VALIDATION")
  ./comprehensive_expense_log_validation.py:134:        print("-" * 50)
  ./comprehensive_expense_log_validation.py:181:                print(f"✅ {name}")
  ./comprehensive_expense_log_validation.py:184:                print(f"❌ {name}: {error}")
  ./comprehensive_expense_log_validation.py:186:        print(f"\nHealth Check Results: {health_passed}/{len(health_checks)}")
  ./comprehensive_expense_log_validation.py:189:        print("\n" + "=" * 70)
  ./comprehensive_expense_log_validation.py:190:        print("📊 FINAL ASSESSMENT")
  ./comprehensive_expense_log_validation.py:191:        print("-" * 70)
  ./comprehensive_expense_log_validation.py:198:        print(f"Contract Tests: {contract_passed}/{len(contract_tests)}")
  ./comprehensive_expense_log_validation.py:199:        print(f"Integration Tests: {integration_passed}/{len(integration_tests)}")
  ./comprehensive_expense_log_validation.py:200:        print(f"Health Checks: {health_passed}/{len(health_checks)}")
  ./comprehensive_expense_log_validation.py:201:        print(f"Overall Success Rate: {success_rate:.1f}% ({total_passed}/{total_tests})")
  ./comprehensive_expense_log_validation.py:204:            print("\n🎉 SYSTEM READY FOR DEPLOYMENT")
  ./comprehensive_expense_log_validation.py:205:            print("✅ PoR v1.1 EXPENSE_LOG implementation validated successfully")
  ./comprehensive_expense_log_validation.py:206:            print("✅ All critical components functional")
  ./comprehensive_expense_log_validation.py:207:            print("✅ Deterministic routing working correctly")
  ./comprehensive_expense_log_validation.py:208:            print("✅ Bengali support validated")
  ./comprehensive_expense_log_validation.py:211:            print("\n⚠️ SYSTEM MOSTLY READY - Minor Issues Detected")
  ./comprehensive_expense_log_validation.py:212:            print("🔧 Core functionality working but may need minor adjustments")
  ./comprehensive_expense_log_validation.py:215:            print("\n❌ SYSTEM NOT READY FOR DEPLOYMENT")
  ./comprehensive_expense_log_validation.py:216:            print("🚫 Critical issues detected - requires fixes before deployment")
  ./security_checks.py:82:            print(f"Warning: Could not scan {py_file}: {e}")
  ./security_checks.py:122:            print(f"Warning: Could not scan {py_file}: {e}")
  ./security_checks.py:128:    print("🔒 SECURITY CHECKS - Scanning for vulnerabilities...")
  ./security_checks.py:129:    print("=" * 60)
  ./security_checks.py:134:    print("📁 Checking for committed environment files...")
  ./security_checks.py:139:        print(f"❌ Found {len(env_violations)} environment file violations")
  ./security_checks.py:141:        print("✅ No environment files found")
  ./security_checks.py:144:    print("\n🔑 Checking for hardcoded secrets...")
  ./security_checks.py:149:        print(f"❌ Found {len(secret_violations)} potential hardcoded secrets")
  ./security_checks.py:151:        print("✅ No hardcoded secrets detected")
  ./security_checks.py:154:    print("\n🗃️ Checking for hardcoded database credentials...")
  ./security_checks.py:159:        print(f"❌ Found {len(db_violations)} database credential violations")
  ./security_checks.py:161:        print("✅ No hardcoded database credentials found")
  ./security_checks.py:164:    print(f"\n🎯 SECURITY SCAN RESULTS:")
  ./security_checks.py:165:    print(f"Total violations: {len(all_violations)}")
  ./security_checks.py:168:        print("\n🚨 VIOLATIONS FOUND:")
  ./security_checks.py:174:            print(f"\n💀 CRITICAL ({len(critical_violations)}):")
  ./security_checks.py:176:                print(f"  {violation['message']}")
  ./security_checks.py:177:                print(f"    File: {violation['file']}")
  ./security_checks.py:180:            print(f"\n⚠️  HIGH ({len(high_violations)}):")
  ./security_checks.py:182:                print(f"  {violation['message']}")
  ./security_checks.py:183:                print(f"    File: {violation['file']}")
  ./security_checks.py:187:            print("\n❌ CRITICAL VIOLATIONS FOUND - BUILD SHOULD FAIL")
  ./security_checks.py:190:            print("\n⚠️ HIGH SEVERITY VIOLATIONS - REVIEW REQUIRED")
  ./security_checks.py:193:        print("✅ NO SECURITY VIOLATIONS FOUND!")
  ./test_new_expense_log_system.py:14:        print("🧪 TESTING NEW EXPENSE_LOG SYSTEM INTEGRATION")
  ./test_new_expense_log_system.py:15:        print("=" * 60)
  ./test_new_expense_log_system.py:59:            print(f"\n{i}️⃣ {test_case['name']}")
  ./test_new_expense_log_system.py:60:            print(f"  Input: {test_case['input']}")
  ./test_new_expense_log_system.py:70:                print(f"  Expected Intent: {test_case['expected_intent']}")
  ./test_new_expense_log_system.py:71:                print(f"  Actual Intent: {intent}")
  ./test_new_expense_log_system.py:72:                print(f"  Response: {response[:100]}...")
  ./test_new_expense_log_system.py:74:                    print(f"  Category: {category}")
  ./test_new_expense_log_system.py:76:                    print(f"  Amount: {amount}")
  ./test_new_expense_log_system.py:89:                    print(f"  ✅ PASS")
  ./test_new_expense_log_system.py:92:                    print(f"  ❌ FAIL - Intent mismatch")
  ./test_new_expense_log_system.py:95:                print(f"  ❌ FAIL - Exception: {e}")
  ./test_new_expense_log_system.py:98:        print("\n" + "=" * 60)
  ./test_new_expense_log_system.py:99:        print(f"📊 INTEGRATION TEST RESULTS: {passed_tests}/{total_tests}")
  ./test_new_expense_log_system.py:102:            print("🎉 ALL INTEGRATION TESTS PASSED")
  ./test_new_expense_log_system.py:103:            print("✅ NEW EXPENSE_LOG SYSTEM READY FOR PRODUCTION")
  ./test_new_expense_log_system.py:106:            print("⚠️ MOSTLY WORKING - Minor issues detected")
  ./test_new_expense_log_system.py:107:            print("🔧 System functional but may need minor adjustments")
  ./test_new_expense_log_system.py:110:            print("❌ INTEGRATION TESTS FAILED")
  ./test_new_expense_log_system.py:111:            print("🚫 DO NOT DEPLOY - SYSTEM NOT READY")
  ./security_scanner.py:386:    print(report)
  ./expense_log_contract_tests.py:15:        print("🧪 EXPENSE_LOG CONTRACT TESTS")
  ./expense_log_contract_tests.py:16:        print("=" * 50)
  ./expense_log_contract_tests.py:22:        print("\n1️⃣ Bengali expense with verb")
  ./expense_log_contract_tests.py:30:        print(f"  Input: {bn_expense_message}")
  ./expense_log_contract_tests.py:31:        print(f"  Expected: {expected_intent}")
  ./expense_log_contract_tests.py:32:        print(f"  Actual: {actual_intent}")
  ./expense_log_contract_tests.py:33:        print(f"  Money detected: {bn_signals.has_money}")
  ./expense_log_contract_tests.py:34:        print(f"  Verb detected: {bn_signals.has_first_person_spent_verb}")
  ./expense_log_contract_tests.py:37:            print(f"  ✅ PASS")
  ./expense_log_contract_tests.py:40:            print(f"  ❌ FAIL")
  ./expense_log_contract_tests.py:43:        print("\n2️⃣ Bengali expense without verb")
  ./expense_log_contract_tests.py:51:        print(f"  Input: {bn_ambiguous_message}")
  ./expense_log_contract_tests.py:52:        print(f"  Expected: {expected_intent}")
  ./expense_log_contract_tests.py:53:        print(f"  Actual: {actual_intent}")
  ./expense_log_contract_tests.py:54:        print(f"  Money detected: {bn_ambiguous_signals.has_money}")
  ./expense_log_contract_tests.py:55:        print(f"  Verb detected: {bn_ambiguous_signals.has_first_person_spent_verb}")
  ./expense_log_contract_tests.py:58:            print(f"  ✅ PASS")
  ./expense_log_contract_tests.py:61:            print(f"  ❌ FAIL")
  ./expense_log_contract_tests.py:64:        print("\n3️⃣ Explicit analysis wins")
  ./expense_log_contract_tests.py:72:        print(f"  Input: {analysis_message}")
  ./expense_log_contract_tests.py:73:        print(f"  Expected: {expected_intent}")
  ./expense_log_contract_tests.py:74:        print(f"  Actual: {actual_intent}")
  ./expense_log_contract_tests.py:75:        print(f"  Explicit analysis: {analysis_signals.has_explicit_analysis}")
  ./expense_log_contract_tests.py:78:            print(f"  ✅ PASS")
  ./expense_log_contract_tests.py:81:            print(f"  ❌ FAIL")
  ./expense_log_contract_tests.py:84:        print("\n4️⃣ Coaching stays coaching")
  ./expense_log_contract_tests.py:93:        print(f"  Input: {coaching_message}")
  ./expense_log_contract_tests.py:94:        print(f"  Expected: {expected_intent}")
  ./expense_log_contract_tests.py:95:        print(f"  Actual: {actual_intent}")
  ./expense_log_contract_tests.py:96:        print(f"  Coaching verbs: {coaching_signals.has_coaching_verbs}")
  ./expense_log_contract_tests.py:97:        print(f"  Ledger count: {coaching_signals.ledger_count_30d}")
  ./expense_log_contract_tests.py:100:            print(f"  ✅ PASS")
  ./expense_log_contract_tests.py:103:            print(f"  ❌ FAIL")
  ./expense_log_contract_tests.py:106:        print("\n5️⃣ No false positives")
  ./expense_log_contract_tests.py:114:        print(f"  Input: {no_expense_message}")
  ./expense_log_contract_tests.py:115:        print(f"  Should NOT be: {not_expected_intent}")
  ./expense_log_contract_tests.py:116:        print(f"  Actual: {actual_intent}")
  ./expense_log_contract_tests.py:117:        print(f"  Money detected: {no_expense_signals.has_money}")
  ./expense_log_contract_tests.py:118:        print(f"  Verb detected: {no_expense_signals.has_first_person_spent_verb}")
  ./expense_log_contract_tests.py:121:            print(f"  ✅ PASS")
  ./expense_log_contract_tests.py:124:            print(f"  ❌ FAIL")
  ./expense_log_contract_tests.py:127:        print("\n" + "=" * 50)
  ./expense_log_contract_tests.py:128:        print(f"📊 CONTRACT TEST RESULTS: {tests_passed}/{total_tests}")
  ./expense_log_contract_tests.py:131:            print("🎉 ALL CONTRACT TESTS PASSED - READY FOR DEPLOYMENT")
  ./expense_log_contract_tests.py:134:            print("❌ CONTRACT TESTS FAILED - DO NOT DEPLOY")
  ./comprehensive_e2e_audit.py:37:        print("🔍 COMPREHENSIVE END-TO-END UAT AUDIT")
  ./comprehensive_e2e_audit.py:38:        print("=" * 65)
  ./comprehensive_e2e_audit.py:39:        print("Testing: Complete user journeys with data integrity validation")
  ./comprehensive_e2e_audit.py:40:        print("Scope: Message ingestion → routing → processing → storage → integrity")
  ./comprehensive_e2e_audit.py:41:        print()
  ./comprehensive_e2e_audit.py:44:        print("🇧🇩 Testing Bengali Expense Workflow (End-to-End)")
  ./comprehensive_e2e_audit.py:45:        print("-" * 55)
  ./comprehensive_e2e_audit.py:51:        print("\n🇺🇸 Testing English Analysis Workflow (End-to-End)")
  ./comprehensive_e2e_audit.py:52:        print("-" * 55)
  ./comprehensive_e2e_audit.py:58:        print("\n🌐 Testing Mixed Language Coaching Workflow (End-to-End)")
  ./comprehensive_e2e_audit.py:59:        print("-" * 55)
  ./comprehensive_e2e_audit.py:65:        print("\n❓ Testing FAQ & Admin Workflow (End-to-End)")
  ./comprehensive_e2e_audit.py:66:        print("-" * 55)
  ./comprehensive_e2e_audit.py:72:        print("\n⚠️ Testing Edge Cases & Error Handling (End-to-End)")
  ./comprehensive_e2e_audit.py:73:        print("-" * 55)
  ./comprehensive_e2e_audit.py:79:        print("\n🔐 Testing Data Integrity (Database Validation)")
  ./comprehensive_e2e_audit.py:80:        print("-" * 55)
  ./comprehensive_e2e_audit.py:86:        print("\n⚡ Testing System Health & Performance")
  ./comprehensive_e2e_audit.py:87:        print("-" * 55)
  ./comprehensive_e2e_audit.py:108:            print("  📊 Step 1: Signal extraction from Bengali message")
  ./comprehensive_e2e_audit.py:132:            print("  🛡️ Step 2: Security sanitization")
  ./comprehensive_e2e_audit.py:152:            print("  🎯 Step 3: Routing decision")
  ./comprehensive_e2e_audit.py:173:            print("  🤖 Step 4: AI processing and categorization")
  ./comprehensive_e2e_audit.py:204:            print("  💾 Step 5: Database storage simulation")
  ./comprehensive_e2e_audit.py:236:            print("  🔐 Step 6: Data integrity validation")
  ./comprehensive_e2e_audit.py:291:            print("  📊 Step 1: Analysis request signal extraction")
  ./comprehensive_e2e_audit.py:316:            print("  🎯 Step 2: Routing to ANALYSIS intent")
  ./comprehensive_e2e_audit.py:336:            print("  📈 Step 3: Data aggregation for insights")
  ./comprehensive_e2e_audit.py:364:            print("  🤖 Step 4: AI insight generation")
  ./comprehensive_e2e_audit.py:393:            print("  📤 Step 5: Response formatting")
  ./comprehensive_e2e_audit.py:459:            print("  🌐 Step 1: Mixed language signal extraction")
  ./comprehensive_e2e_audit.py:481:            print("  🎯 Step 2: Routing to COACHING intent")
  ./comprehensive_e2e_audit.py:493:                print(f"    DEBUG: Expected COACHING, got {routing_result.intent.value}")
  ./comprehensive_e2e_audit.py:494:                print(f"    DEBUG: has_coaching_verbs={routing_signals.has_coaching_verbs}")
  ./comprehensive_e2e_audit.py:495:                print(f"    DEBUG: ledger_count_30d={routing_signals.ledger_count_30d}")
  ./comprehensive_e2e_audit.py:496:                print(f"    DEBUG: threshold={10}")
  ./comprehensive_e2e_audit.py:509:            print("  🎓 Step 3: Coaching response generation")
  ./comprehensive_e2e_audit.py:561:            print("  ❓ Step 1: FAQ workflow")
  ./comprehensive_e2e_audit.py:586:            print("  👨‍💼 Step 2: Admin workflow")
  ./comprehensive_e2e_audit.py:630:            print("  ⚠️ Testing empty message handling")
  ./comprehensive_e2e_audit.py:643:            print("  ⚠️ Testing very long message")
  ./comprehensive_e2e_audit.py:665:            print("  ⚠️ Testing malicious input handling")
  ./comprehensive_e2e_audit.py:686:            print("  ⚠️ Testing zero amount handling")
  ./comprehensive_e2e_audit.py:724:            print("  🗄️ Database schema validation")
  ./comprehensive_e2e_audit.py:754:            print("  🔍 Signal extraction consistency")
  ./comprehensive_e2e_audit.py:804:            print("  🎯 Routing determinism validation")
  ./comprehensive_e2e_audit.py:877:            print("  ⚡ Module import performance")
  ./comprehensive_e2e_audit.py:900:            print("  ⚡ Signal extraction performance")
  ./comprehensive_e2e_audit.py:930:            print("  🤖 AI adapter health")
  ./comprehensive_e2e_audit.py:947:            print("  💾 Memory usage estimation")
  ./comprehensive_e2e_audit.py:1002:            print(f"    Result: {successful_steps}/{total_steps} steps - {'✅ PASS' if success else '❌ FAIL'}")
  ./comprehensive_e2e_audit.py:1008:                    print(f"      ❌ Failed: {step['step']}")
  ./comprehensive_e2e_audit.py:1010:                        print(f"         Error: {step['error']}")
  ./comprehensive_e2e_audit.py:1015:            print(f"    Result: {successful_cases}/{total_cases} cases - {'✅ PASS' if success else '❌ FAIL'}")
  ./comprehensive_e2e_audit.py:1020:            print(f"    Result: {successful_checks}/{total_checks} checks - {'✅ PASS' if success else '❌ FAIL'}")
  ./comprehensive_e2e_audit.py:1025:            print(f"    Result: {successful_checks}/{total_checks} checks - {'✅ PASS' if success else '❌ FAIL'}")
  ./comprehensive_e2e_audit.py:1028:            print(f"    Result: {'✅ PASS' if success else '❌ FAIL'}")
  ./comprehensive_e2e_audit.py:1088:        print(f"\n🎯 COMPREHENSIVE END-TO-END ASSESSMENT")
  ./comprehensive_e2e_audit.py:1089:        print("=" * 65)
  ./comprehensive_e2e_audit.py:1090:        print(f"Bengali Expense Workflow: {'✅ PASS' if scenario_results.get('bengali_expense_workflow', {}).get('success', False) else '❌ FAIL'}")
  ./comprehensive_e2e_audit.py:1091:        print(f"English Analysis Workflow: {'✅ PASS' if scenario_results.get('english_analysis_workflow', {}).get('success', False) else '❌ FAIL'}")
  ./comprehensive_e2e_audit.py:1092:        print(f"Mixed Language Coaching: {'✅ PASS' if scenario_results.get('mixed_coaching_workflow', {}).get('success', False) else '❌ FAIL'}")
  ./comprehensive_e2e_audit.py:1093:        print(f"FAQ & Admin Workflows: {'✅ PASS' if scenario_results.get('faq_admin_workflow', {}).get('success', False) else '❌ FAIL'}")
  ./comprehensive_e2e_audit.py:1094:        print(f"Edge Case Handling: {'✅ PASS' if scenario_results.get('edge_cases_workflow', {}).get('success', False) else '❌ FAIL'}")
  ./comprehensive_e2e_audit.py:1095:        print(f"Data Integrity: {'✅ PASS' if integrity_pass else '❌ FAIL'}")
  ./comprehensive_e2e_audit.py:1096:        print(f"System Health: {'✅ PASS' if health_pass else '❌ FAIL'}")
  ./comprehensive_e2e_audit.py:1097:        print(f"Weighted Overall Score: {weighted_score:.1f}%")
  ./comprehensive_e2e_audit.py:1098:        print(f"All Critical Workflows: {'✅ PASS' if all_scenarios_pass else '❌ FAIL'}")
  ./comprehensive_e2e_audit.py:1099:        print(f"Deployment Ready: {'✅ YES' if deployment_ready else '❌ NO'}")
  ./comprehensive_e2e_audit.py:1102:            print("\n🎉 END-TO-END VALIDATION: COMPLETE SUCCESS")
  ./comprehensive_e2e_audit.py:1103:            print("   ✅ All user workflows functioning correctly")
  ./comprehensive_e2e_audit.py:1104:            print("   ✅ Data integrity maintained throughout")
  ./comprehensive_e2e_audit.py:1105:            print("   ✅ System health within acceptable parameters")
  ./comprehensive_e2e_audit.py:1106:            print("   ✅ Edge cases handled gracefully")
  ./comprehensive_e2e_audit.py:1107:            print("   ✅ Bilingual support working end-to-end")
  ./comprehensive_e2e_audit.py:1108:            print("\n🚀 SYSTEM READY FOR PRODUCTION DEPLOYMENT")
  ./comprehensive_e2e_audit.py:1110:            print("\n❌ END-TO-END VALIDATION: ISSUES DETECTED")
  ./comprehensive_e2e_audit.py:1112:                print("   • One or more critical workflows failing")
  ./comprehensive_e2e_audit.py:1114:                print("   • Data integrity issues detected")
  ./comprehensive_e2e_audit.py:1116:                print("   • System health issues detected")
  ./comprehensive_e2e_audit.py:1142:        print(f"\n📋 Comprehensive E2E audit report saved: {report_filename}")
  ./debug_analysis_terms.py:17:        print(f"Testing message: {bengali_message}")
  ./debug_analysis_terms.py:18:        print(f"has_time_window: {patterns.has_time_window(bengali_message)}")
  ./debug_analysis_terms.py:19:        print(f"has_analysis_terms: {patterns.has_analysis_terms(bengali_message)}")
  ./debug_analysis_terms.py:20:        print(f"has_explicit_analysis_request: {patterns.has_explicit_analysis_request(bengali_message)}")
  ./debug_analysis_terms.py:23:        print("\nTesting individual patterns:")
  ./debug_analysis_terms.py:24:        print(f"time_window_en match: {patterns.time_window_en.search(bengali_message)}")
  ./debug_analysis_terms.py:25:        print(f"time_window_bn match: {patterns.time_window_bn.search(bengali_message)}")
  ./debug_analysis_terms.py:26:        print(f"analysis_terms_en match: {patterns.analysis_terms_en.search(bengali_message)}")
  ./debug_analysis_terms.py:27:        print(f"analysis_terms_bn match: {patterns.analysis_terms_bn.search(bengali_message)}")
  ./test_reconciliation_fixes.py:18:    print("=== Testing Hash Determinism ===")
  ./test_reconciliation_fixes.py:26:    print(f"SHA256 hash 1: {hash1}")
  ./test_reconciliation_fixes.py:27:    print(f"SHA256 hash 2: {hash2}")
  ./test_reconciliation_fixes.py:28:    print(f"SHA256 deterministic: {hash1 == hash2} ✅" if hash1 == hash2 else "SHA256 deterministic: {hash1 == hash2} ❌")
  ./test_reconciliation_fixes.py:34:        print(f"Built-in hash 1: {builtin_hash1}")
  ./test_reconciliation_fixes.py:35:        print(f"Built-in hash 2: {builtin_hash2}")
  ./test_reconciliation_fixes.py:36:        print(f"Built-in hash deterministic: {builtin_hash1 == builtin_hash2} (may vary between runs)")
  ./test_reconciliation_fixes.py:38:        print(f"Built-in hash test skipped: {e}")
  ./test_reconciliation_fixes.py:44:    print("\n=== Testing Category Mappings ===")
  ./test_reconciliation_fixes.py:64:                print(f"{keyword} → {actual_category} (expected {expected_category}) {status}")
  ./test_reconciliation_fixes.py:68:                print(f"{keyword} → NOT FOUND ❌")
  ./test_reconciliation_fixes.py:74:        print(f"Category mapping test failed: {e}")
  ./test_reconciliation_fixes.py:79:    print("\n=== Testing Category Normalization ===")
  ./test_reconciliation_fixes.py:102:                print(f"normalize_category('{input_category}') → '{result}' (expected '{expected_output}') {status}")
  ./test_reconciliation_fixes.py:106:                print(f"normalize_category('{input_category}') → ERROR: {e} ❌")
  ./test_reconciliation_fixes.py:112:        print(f"Category normalization test failed: {e}")
  ./test_reconciliation_fixes.py:117:    print("\n=== Testing NL Integration Normalization ===")
  ./test_reconciliation_fixes.py:125:            print("✅ NL integration imports normalize_category")
  ./test_reconciliation_fixes.py:127:            print("❌ NL integration missing normalize_category import")
  ./test_reconciliation_fixes.py:131:            print("✅ NL integration uses normalize_category in handle_nl_expense_entry")
  ./test_reconciliation_fixes.py:133:            print("❌ NL integration not using normalize_category in handle_nl_expense_entry")
  ./test_reconciliation_fixes.py:137:            print("✅ NL integration uses normalize_category in handle_clarification_response")
  ./test_reconciliation_fixes.py:139:            print("❌ NL integration not using normalize_category in handle_clarification_response")
  ./test_reconciliation_fixes.py:145:        print(f"NL integration test failed: {e}")
  ./test_reconciliation_fixes.py:150:    print("\n=== Testing Hash Usage in NL Integration ===")
  ./test_reconciliation_fixes.py:157:            print("✅ NL integration imports hashlib")
  ./test_reconciliation_fixes.py:159:            print("❌ NL integration missing hashlib import")
  ./test_reconciliation_fixes.py:163:            print("✅ NL integration uses SHA256 for text hashing")
  ./test_reconciliation_fixes.py:165:            print("❌ NL integration not using SHA256 for text hashing")
  ./test_reconciliation_fixes.py:169:            print("✅ NL integration uses SHA256 for original_text hashing")
  ./test_reconciliation_fixes.py:171:            print("❌ NL integration not using SHA256 for original_text hashing")
  ./test_reconciliation_fixes.py:175:            print("❌ NL integration still contains built-in hash() calls")
  ./test_reconciliation_fixes.py:178:            print("✅ NL integration no longer uses built-in hash()")
  ./test_reconciliation_fixes.py:183:        print(f"Hash usage test failed: {e}")
  ./test_reconciliation_fixes.py:188:    print("🔧 Testing Reconciliation System Fixes\n")
  ./test_reconciliation_fixes.py:203:            print(f"\n❌ {test_name} failed with exception: {e}")
  ./test_reconciliation_fixes.py:206:    print("\n" + "="*50)
  ./test_reconciliation_fixes.py:207:    print("📊 TEST RESULTS SUMMARY")
  ./test_reconciliation_fixes.py:208:    print("="*50)
  ./test_reconciliation_fixes.py:213:        print(f"{test_name}: {status}")
  ./test_reconciliation_fixes.py:217:    print("\n" + "="*50)
  ./test_reconciliation_fixes.py:219:        print("🎉 ALL TESTS PASSED - Reconciliation fixes are working correctly!")
  ./test_reconciliation_fixes.py:220:        print("\nThe following issues have been resolved:")
  ./test_reconciliation_fixes.py:221:        print("• Non-deterministic hash replaced with stable SHA256")
  ./test_reconciliation_fixes.py:222:        print("• Missing category mappings added (wellness→health, salon→health, spa→health, general→other, misc→other, miscellaneous→other)")
  ./test_reconciliation_fixes.py:223:        print("• Category normalization applied to all NL integration save paths")
  ./test_reconciliation_fixes.py:224:        print("• Deploy restarts will no longer break reconciliation")
  ./test_reconciliation_fixes.py:225:        print("• Category recognition now works for common terms")
  ./test_reconciliation_fixes.py:227:        print("❌ SOME TESTS FAILED - Review the issues above")
  ./quick_routing_test.py:13:        print("=== Bengali Expense Test ===")
  ./quick_routing_test.py:18:        print(f"Message: {bengali_message}")
  ./quick_routing_test.py:19:        print(f"Signals: {bengali_signals}")
  ./quick_routing_test.py:22:        print(f"Result: {bengali_result}")
  ./quick_routing_test.py:23:        print(f"Expected: SMALLTALK, Got: {bengali_result.intent.value}")
  ./quick_routing_test.py:24:        print(f"Success: {bengali_result.intent.value == 'SMALLTALK'}")
  ./quick_routing_test.py:26:        print("\n=== Coaching Test ===")
  ./quick_routing_test.py:32:        print(f"Message: {coaching_message}")
  ./quick_routing_test.py:33:        print(f"Signals: {coaching_signals}")
  ./quick_routing_test.py:36:        print(f"Result: {coaching_result}")
  ./quick_routing_test.py:37:        print(f"Expected: COACHING, Got: {coaching_result.intent.value}")
  ./quick_routing_test.py:38:        print(f"Success: {coaching_result.intent.value == 'COACHING'}")
  ./final_100_percent_validation.py:33:        print("🎯 FINAL 100% SUCCESS VALIDATION")
  ./final_100_percent_validation.py:34:        print("=" * 60)
  ./final_100_percent_validation.py:35:        print("Testing: All systems with zero-surprise guarantee")
  ./final_100_percent_validation.py:36:        print("Standard: 100% user-visible success, no empty responses")
  ./final_100_percent_validation.py:37:        print()
  ./final_100_percent_validation.py:40:        print("📊 Testing Data Handling (Bengali Money Fix)")
  ./final_100_percent_validation.py:41:        print("-" * 50)
  ./final_100_percent_validation.py:47:        print("\n🛡️ Testing Security (Input Sanitization)")
  ./final_100_percent_validation.py:48:        print("-" * 50)
  ./final_100_percent_validation.py:54:        print("\n🤖 Testing AI Processing (Never Empty Contract)")
  ./final_100_percent_validation.py:55:        print("-" * 50)
  ./final_100_percent_validation.py:61:        print("\n🎯 Testing Routing System (100% Preservation)")
  ./final_100_percent_validation.py:62:        print("-" * 50)
  ./final_100_percent_validation.py:68:        print("\n🌐 Testing Bilingual Support (EN + Bengali)")
  ./final_100_percent_validation.py:69:        print("-" * 50)
  ./final_100_percent_validation.py:75:        print("\n🔗 Testing Integration (Edge Cases)")
  ./final_100_percent_validation.py:76:        print("-" * 50)
  ./final_100_percent_validation.py:163:                print(f"  {status} {case['name']}")
  ./final_100_percent_validation.py:172:                print(f"  ❌ {case['name']}: {e}")
  ./final_100_percent_validation.py:250:                print(f"  {status} {case['name']}")
  ./final_100_percent_validation.py:259:                print(f"  ❌ {case['name']}: {e}")
  ./final_100_percent_validation.py:360:                print(f"  {status} {case['name']}")
  ./final_100_percent_validation.py:368:                print(f"  ❌ {case['name']}: {e}")
  ./final_100_percent_validation.py:415:                print(f"  {status} {case['input'][:30]}... → {actual}")
  ./final_100_percent_validation.py:424:                print(f"  ❌ {case['input'][:30]}...: {e}")
  ./final_100_percent_validation.py:500:                print(f"  {status} {case['name']}")
  ./final_100_percent_validation.py:509:                print(f"  ❌ {case['name']}: {e}")
  ./final_100_percent_validation.py:554:                print(f"  {status} {check['name']}")
  ./final_100_percent_validation.py:562:                print(f"  ❌ {check['name']}: {e}")
  ./final_100_percent_validation.py:724:            print(f"  Result: {passed}/{total} ({rate:.1f}%) - {'✅ PASS' if success else '❌ FAIL'}")
  ./final_100_percent_validation.py:726:            print(f"  Result: {'✅ PASS' if success else '❌ FAIL'}")
  ./final_100_percent_validation.py:781:        print(f"\n🎯 FINAL 100% SUCCESS ASSESSMENT")
  ./final_100_percent_validation.py:782:        print("=" * 60)
  ./final_100_percent_validation.py:783:        print(f"Data Handling: {systems['data_handling'].get('success_rate', 0):.1f}% ({systems['data_handling'].get('critical_bengali_fix', 'UNKNOWN')})")
  ./final_100_percent_validation.py:784:        print(f"Security: {systems['security'].get('success_rate', 0):.1f}% ({systems['security'].get('security_hardening', 'UNKNOWN')})")
  ./final_100_percent_validation.py:785:        print(f"AI Processing: {systems['ai_processing'].get('success_rate', 0):.1f}% ({systems['ai_processing'].get('never_empty_contract', 'UNKNOWN')})")
  ./final_100_percent_validation.py:786:        print(f"Routing: {systems['routing'].get('success_rate', 0):.1f}% ({systems['routing'].get('routing_preservation', 'UNKNOWN')})")
  ./final_100_percent_validation.py:787:        print(f"Bilingual Support: {systems['bilingual_support'].get('success_rate', 0):.1f}% ({systems['bilingual_support'].get('bilingual_support', 'UNKNOWN')})")
  ./final_100_percent_validation.py:788:        print(f"Integration: {systems['integration'].get('success_rate', 0):.1f}%")
  ./final_100_percent_validation.py:789:        print(f"Weighted Overall: {weighted_score:.1f}%")
  ./final_100_percent_validation.py:790:        print(f"All Systems Perfect: {'✅ YES' if all_systems_perfect else '❌ NO'}")
  ./final_100_percent_validation.py:791:        print(f"Zero Surprise Guarantee: {'✅ VERIFIED' if all_systems_perfect else '❌ NOT MET'}")
  ./final_100_percent_validation.py:792:        print(f"Deployment Ready: {'✅ YES' if self.results['final_assessment']['deployment_ready'] else '❌ NO'}")
  ./final_100_percent_validation.py:795:            print("\n🎉 COMPREHENSIVE 100% SUCCESS ACHIEVED")
  ./final_100_percent_validation.py:796:            print("   ✅ Bengali money detection: 100% working")
  ./final_100_percent_validation.py:797:            print("   ✅ AI never-empty contract: 100% verified")
  ./final_100_percent_validation.py:798:            print("   ✅ Security hardening: 100% active")
  ./final_100_percent_validation.py:799:            print("   ✅ Routing system: 100% preserved")
  ./final_100_percent_validation.py:800:            print("   ✅ Bilingual support: 100% complete")
  ./final_100_percent_validation.py:801:            print("   ✅ All integration points: 100% verified")
  ./final_100_percent_validation.py:802:            print("\n🚀 READY FOR PRODUCTION DEPLOYMENT")
  ./final_100_percent_validation.py:803:            print("   • Zero surprise guarantee: ACTIVE")
  ./final_100_percent_validation.py:804:            print("   • All critical fixes: VERIFIED")
  ./final_100_percent_validation.py:805:            print("   • User-visible success: 100%")
  ./final_100_percent_validation.py:807:            print("\n❌ SYSTEM NOT READY FOR DEPLOYMENT")
  ./final_100_percent_validation.py:809:                print("   • Data handling issues detected")
  ./final_100_percent_validation.py:811:                print("   • Security vulnerabilities present")
  ./final_100_percent_validation.py:813:                print("   • AI contract violations found")
  ./final_100_percent_validation.py:815:                print("   • Core routing compromised")
  ./final_100_percent_validation.py:817:                print("   • Bilingual support incomplete")
  ./final_100_percent_validation.py:819:                print("   • Integration failures detected")
  ./final_100_percent_validation.py:832:        print(f"\n📋 Final validation report saved: {report_filename}")
  ./test_bengali_food_enhancements.py:32:    print("✓ Successfully imported expense parser functions")
  ./test_bengali_food_enhancements.py:34:    print(f"✗ Failed to import expense parser: {e}")
  ./test_bengali_food_enhancements.py:35:    print("Make sure you're running this from the project root directory")
  ./test_bengali_food_enhancements.py:105:        print("\n" + "="*60)
  ./test_bengali_food_enhancements.py:106:        print("1. TESTING: Vague Token Stoplist Fix")
  ./test_bengali_food_enhancements.py:107:        print("="*60)
  ./test_bengali_food_enhancements.py:108:        print("Testing that food aliases beat vague trailing tokens like 'general', 'misc'")
  ./test_bengali_food_enhancements.py:147:        print("\n" + "="*60)
  ./test_bengali_food_enhancements.py:148:        print("2. TESTING: Bengali Script Food Aliases")
  ./test_bengali_food_enhancements.py:149:        print("="*60)
  ./test_bengali_food_enhancements.py:150:        print("Testing native Bengali script food terms with Bengali numerals")
  ./test_bengali_food_enhancements.py:204:        print("\n" + "="*60)
  ./test_bengali_food_enhancements.py:205:        print("3. TESTING: Emoji Food Aliases")  
  ./test_bengali_food_enhancements.py:206:        print("="*60)
  ./test_bengali_food_enhancements.py:207:        print("Testing food emoji recognition in modern user inputs")
  ./test_bengali_food_enhancements.py:253:        print("\n" + "="*60)
  ./test_bengali_food_enhancements.py:254:        print("4. TESTING: Bengali Morphology Handling")
  ./test_bengali_food_enhancements.py:255:        print("="*60)
  ./test_bengali_food_enhancements.py:256:        print("Testing Bengali suffix stripping for proper word matching")
  ./test_bengali_food_enhancements.py:305:        print("\n" + "="*60)
  ./test_bengali_food_enhancements.py:306:        print("5. TESTING: ZWJ/ZWNJ Normalization")
  ./test_bengali_food_enhancements.py:307:        print("="*60)
  ./test_bengali_food_enhancements.py:308:        print("Testing zero-width character cleanup for proper matching")
  ./test_bengali_food_enhancements.py:339:        print("\n" + "="*60)
  ./test_bengali_food_enhancements.py:340:        print("6. TESTING: Word Boundary Prevention")
  ./test_bengali_food_enhancements.py:341:        print("="*60)
  ./test_bengali_food_enhancements.py:342:        print("Testing that generic terms don't falsely match food aliases")
  ./test_bengali_food_enhancements.py:373:        print("\n" + "="*60)
  ./test_bengali_food_enhancements.py:374:        print("7. TESTING: Transliteration Variants")
  ./test_bengali_food_enhancements.py:375:        print("="*60)
  ./test_bengali_food_enhancements.py:376:        print("Testing various English spellings of Bengali food terms")
  ./test_bengali_food_enhancements.py:422:        print("BENGALI FOOD ALIAS ENHANCEMENTS - COMPREHENSIVE TEST SUITE")
  ./test_bengali_food_enhancements.py:423:        print("=" * 70)
  ./test_bengali_food_enhancements.py:424:        print("Testing complete parsing pipeline with all Bengali food enhancements")
  ./test_bengali_food_enhancements.py:440:        print("\n" + "="*70)
  ./test_bengali_food_enhancements.py:441:        print("FINAL TEST REPORT")
  ./test_bengali_food_enhancements.py:442:        print("="*70)
  ./test_bengali_food_enhancements.py:450:        print(f"Total Tests: {total_tests}")
  ./test_bengali_food_enhancements.py:451:        print(f"Passed: {passed_tests}")
  ./test_bengali_food_enhancements.py:452:        print(f"Failed: {failed_tests}")
  ./test_bengali_food_enhancements.py:453:        print(f"Success Rate: {success_rate:.1f}%")
  ./test_bengali_food_enhancements.py:456:        print(f"\nDETAILED TEST RESULTS:")
  ./test_bengali_food_enhancements.py:457:        print("-" * 70)
  ./test_bengali_food_enhancements.py:459:            print(result)
  ./test_bengali_food_enhancements.py:464:            print(f"\nFAILED TESTS SUMMARY ({len(failed_tests_list)} failures):")
  ./test_bengali_food_enhancements.py:465:            print("-" * 70)
  ./test_bengali_food_enhancements.py:467:                print(f"✗ {result.name}: {result.input_text} → Expected: {result.expected_category}, Got: {result.actual_category}")
  ./test_bengali_food_enhancements.py:469:                    print(f"  Notes: {result.notes}")
  ./test_bengali_food_enhancements.py:471:            print(f"\n🎉 ALL TESTS PASSED! Bengali food alias enhancements are working correctly.")
  ./test_bengali_food_enhancements.py:474:        print(f"\nCRITICAL ENHANCEMENTS STATUS:")
  ./test_bengali_food_enhancements.py:475:        print("-" * 70)
  ./test_bengali_food_enhancements.py:489:            print(f"{status} | {enhancement}")
  ./test_bengali_food_enhancements.py:496:    print("Starting Bengali Food Alias Enhancement Tests...")
  ./test_bengali_food_enhancements.py:497:    print("Testing complete parsing pipeline with real expense inputs\n")
  ./test_bengali_food_enhancements.py:502:    print(f"\nTest run completed. {'SUCCESS' if success else 'NEEDS ATTENTION'}")
  ./ops/preflight_probes.py:234:        print("PRE-FLIGHT OK")
  ./ops/preflight_probes.py:239:        print("PRE-FLIGHT FAILED:")
  ./ops/preflight_probes.py:241:            print(f"  - {failure}")
  ./test_bengali_categorization.py:32:    print("🧪 Testing Bengali Food Categorization")
  ./test_bengali_categorization.py:33:    print("=" * 50)
  ./test_bengali_categorization.py:39:        print(f"\nTesting: '{test_text}'")
  ./test_bengali_categorization.py:47:            print(f"  → Amount: {expense['amount']} {expense['currency']}")
  ./test_bengali_categorization.py:48:            print(f"  → Category: {category}")
  ./test_bengali_categorization.py:51:                print("  ✅ PASS - Correctly categorized as food")
  ./test_bengali_categorization.py:53:                print(f"  ❌ FAIL - Incorrectly categorized as '{category}' instead of 'food'")
  ./test_bengali_categorization.py:56:            print("  ❌ FAIL - No expense found")
  ./test_bengali_categorization.py:61:        print(f"  → Direct category inference: {direct_category}")
  ./test_bengali_categorization.py:64:            print(f"  ⚠️  Warning: Direct inference gave '{direct_category}' instead of 'food'")
  ./test_bengali_categorization.py:66:    print("\n" + "=" * 50)
  ./test_bengali_categorization.py:68:        print("🎉 All tests PASSED! Bengali food terms are properly categorized.")
  ./test_bengali_categorization.py:70:        print("❌ Some tests FAILED. Check the category mapping.")
  ./phase3_impact_audit.py:28:        print("🔍 PHASE 3 IMPACT AUDIT")
  ./phase3_impact_audit.py:29:        print("=" * 50)
  ./phase3_impact_audit.py:30:        print("Testing: New AI resilience + Phase 1+2 preservation")
  ./phase3_impact_audit.py:31:        print("Ensuring: Zero risk to routing + data + security gains")
  ./phase3_impact_audit.py:32:        print()
  ./phase3_impact_audit.py:35:        print("🤖 Testing NEW AI Resilience System")
  ./phase3_impact_audit.py:36:        print("-" * 40)
  ./phase3_impact_audit.py:42:        print("\n🛡️ Testing Security Preservation")
  ./phase3_impact_audit.py:43:        print("-" * 40)
  ./phase3_impact_audit.py:49:        print("\n📊 Testing Data Handling Preservation")
  ./phase3_impact_audit.py:50:        print("-" * 40)
  ./phase3_impact_audit.py:56:        print("\n🎯 Testing Routing System Preservation")
  ./phase3_impact_audit.py:57:        print("-" * 40)
  ./phase3_impact_audit.py:114:                print(f"  {status} {case['name']}")
  ./phase3_impact_audit.py:122:                print(f"  ❌ {case['name']}: {e}")
  ./phase3_impact_audit.py:405:                print(f"  {status} Security test")
  ./phase3_impact_audit.py:409:                print(f"  ❌ Security test: {e}")
  ./phase3_impact_audit.py:451:                print(f"  {status} {case['input'][:25]}...")
  ./phase3_impact_audit.py:455:                print(f"  ❌ {case['input'][:25]}...: {e}")
  ./phase3_impact_audit.py:502:                print(f"  {status} {case['input'][:25]}... → {actual}")
  ./phase3_impact_audit.py:511:                print(f"  ❌ {case['input'][:25]}...: {e}")
  ./phase3_impact_audit.py:535:            print(f"  Result: {passed}/{total} ({rate:.1f}%) - {'✅ PASS' if success else '❌ FAIL'}")
  ./phase3_impact_audit.py:537:            print(f"  Result: {'✅ PASS' if success else '❌ FAIL'}")
  ./phase3_impact_audit.py:575:        print(f"\n📊 PHASE 3 CUMULATIVE ASSESSMENT")
  ./phase3_impact_audit.py:576:        print("=" * 50)
  ./phase3_impact_audit.py:577:        print(f"AI Processing: {self.results['ai_processing_after'].get('improvement', 'Unknown')}")
  ./phase3_impact_audit.py:578:        print(f"Security: {self.results['security_preservation'].get('status', 'Unknown')}")
  ./phase3_impact_audit.py:579:        print(f"Data Handling: {self.results['data_handling_preservation'].get('status', 'Unknown')}")
  ./phase3_impact_audit.py:580:        print(f"Routing: {self.results['routing_preservation'].get('status', 'Unknown')}")
  ./phase3_impact_audit.py:581:        print(f"Phase 3 Success: {'✅ YES' if phase3_success else '❌ NO'}")
  ./phase3_impact_audit.py:582:        print(f"Overall System: {overall_rate:.1f}% success rate")
  ./phase3_impact_audit.py:583:        print(f"Deployment Ready: {'✅ YES' if self.results['cumulative_assessment']['deployment_ready'] else '❌ NO'}")
  ./phase3_impact_audit.py:586:            print("\n🎉 PHASE 3 APPROVED - System Ready")
  ./phase3_impact_audit.py:587:            print("   • AI processing significantly improved")
  ./phase3_impact_audit.py:588:            print("   • All previous gains preserved")
  ./phase3_impact_audit.py:589:            print("   • Zero risk to core functionality")
  ./phase3_impact_audit.py:591:                print("   • Deployment threshold exceeded (83%+)")
  ./phase3_impact_audit.py:593:                print(f"   • Near deployment threshold (need {83.0 - overall_rate:.1f}% more)")
  ./phase3_impact_audit.py:595:            print("\n🚫 PHASE 3 BLOCKED")
  ./phase3_impact_audit.py:597:                print("   • AI processing still failing")
  ./phase3_impact_audit.py:599:                print("   • Security system degraded")
  ./phase3_impact_audit.py:601:                print("   • Data handling degraded")
  ./phase3_impact_audit.py:603:                print("   • Core routing compromised (CRITICAL)")
  ./phase3_impact_audit.py:616:        print(f"\n📋 Phase 3 impact report saved: {report_filename}")
  ./demo_smoke.py:24:    print(f"\n❌ FAIL: {msg}")
  ./demo_smoke.py:44:    print("Creating test session...")
  ./demo_smoke.py:75:    print("🚀 Frozen Contract Smoke Test")
  ./demo_smoke.py:76:    print(f"Base URL: {BASE_URL}")
  ./demo_smoke.py:77:    print(f"Test expense: {CANARY_DESC} {CANARY_AMOUNT_MAJOR}")
  ./demo_smoke.py:80:    print("\n1. Baseline totals...")
  ./demo_smoke.py:86:    print(f"   Baseline: {baseline_total/100:.2f} BDT ({baseline_count} expenses)")
  ./demo_smoke.py:89:    print("2. Propose expense...")
  ./demo_smoke.py:102:    print(f"   Proposed: {amount_minor/100:.2f} BDT, category={category}")
  ./demo_smoke.py:105:    print("3. Add expense...")
  ./demo_smoke.py:126:    print(f"   Added: ID={expense_id}, correlation_id={correlation_id[:8]}...")
  ./demo_smoke.py:129:    print("4. Check recent expenses...")
  ./demo_smoke.py:139:    print(f"   ✓ Found expense {expense_id} in recent list")
  ./demo_smoke.py:142:    print("5. Verify totals delta...")
  ./demo_smoke.py:159:    print(f"   ✓ Totals delta verified: +{amount_minor/100:.2f} BDT (+1 expense)")
  ./demo_smoke.py:161:    print("\n🎉 PASS: All frozen contract endpoints working correctly!")
  ./phase2_impact_audit.py:27:        print("🔍 PHASE 2 IMPACT AUDIT")
  ./phase2_impact_audit.py:28:        print("=" * 50)
  ./phase2_impact_audit.py:29:        print("Testing: New security layer + Phase 1 preservation")
  ./phase2_impact_audit.py:30:        print("Ensuring: Zero risk to 100% routing + 95% data handling")
  ./phase2_impact_audit.py:31:        print()
  ./phase2_impact_audit.py:34:        print("🛡️ Testing NEW Security System")
  ./phase2_impact_audit.py:35:        print("-" * 40)
  ./phase2_impact_audit.py:41:        print("\n📊 Testing Data Handling Preservation")
  ./phase2_impact_audit.py:42:        print("-" * 40)
  ./phase2_impact_audit.py:48:        print("\n🎯 Testing Routing System Preservation")
  ./phase2_impact_audit.py:49:        print("-" * 40)
  ./phase2_impact_audit.py:55:        print("\n🔗 Testing Integration Safety")
  ./phase2_impact_audit.py:56:        print("-" * 40)
  ./phase2_impact_audit.py:146:                print(f"  {status} {case['name']}")
  ./phase2_impact_audit.py:155:                print(f"  ❌ {case['name']}: {e}")
  ./phase2_impact_audit.py:206:                print(f"  {status} {case['input'][:25]}...")
  ./phase2_impact_audit.py:214:                print(f"  ❌ {case['input'][:25]}...: {e}")
  ./phase2_impact_audit.py:261:                print(f"  {status} {case['input'][:25]}... → {actual}")
  ./phase2_impact_audit.py:270:                print(f"  ❌ {case['input'][:25]}...: {e}")
  ./phase2_impact_audit.py:314:                print(f"  {status} {check['name']}")
  ./phase2_impact_audit.py:322:                print(f"  ❌ {check['name']}: {e}")
  ./phase2_impact_audit.py:426:            print(f"  Result: {passed}/{total} ({rate:.1f}%) - {'✅ PASS' if success else '❌ FAIL'}")
  ./phase2_impact_audit.py:428:            print(f"  Result: {'✅ PASS' if success else '❌ FAIL'}")
  ./phase2_impact_audit.py:454:        print(f"\n📊 PHASE 2 IMPACT ASSESSMENT")
  ./phase2_impact_audit.py:455:        print("=" * 50)
  ./phase2_impact_audit.py:456:        print(f"Security System: {self.results['security_after'].get('improvement', 'Unknown')}")
  ./phase2_impact_audit.py:457:        print(f"Data Handling: {self.results['data_handling_preservation'].get('status', 'Unknown')}")
  ./phase2_impact_audit.py:458:        print(f"Routing System: {self.results['routing_preservation'].get('status', 'Unknown')}")
  ./phase2_impact_audit.py:459:        print(f"Integration Safety: {'✅ VERIFIED' if integration_safe else '❌ FAILED'}")
  ./phase2_impact_audit.py:460:        print(f"Phase 2 Success: {'✅ YES' if phase2_success else '❌ NO'}")
  ./phase2_impact_audit.py:463:            print("\n🎉 PHASE 2 APPROVED - Ready for Phase 3")
  ./phase2_impact_audit.py:464:            print("   • Security significantly improved")
  ./phase2_impact_audit.py:465:            print("   • Data handling preserved (95%+)")
  ./phase2_impact_audit.py:466:            print("   • Core routing system preserved (100%)")
  ./phase2_impact_audit.py:467:            print("   • Zero risk to existing functionality")
  ./phase2_impact_audit.py:469:            print("\n🚫 PHASE 2 BLOCKED")
  ./phase2_impact_audit.py:471:                print("   • Security system still failing")
  ./phase2_impact_audit.py:473:                print("   • Data handling degraded from Phase 1")
  ./phase2_impact_audit.py:475:                print("   • Core routing compromised (CRITICAL)")
  ./phase2_impact_audit.py:477:                print("   • Integration safety issues")
  ./phase2_impact_audit.py:490:        print(f"\n📋 Phase 2 impact report saved: {report_filename}")
  ./phase1_impact_audit.py:26:        print("🔍 PHASE 1 IMPACT AUDIT")
  ./phase1_impact_audit.py:27:        print("=" * 50)
  ./phase1_impact_audit.py:28:        print("Testing: New signal extraction vs existing routing")
  ./phase1_impact_audit.py:29:        print("Ensuring: Zero risk to 100% working routing system")
  ./phase1_impact_audit.py:30:        print()
  ./phase1_impact_audit.py:33:        print("📊 Testing NEW Signal Extraction System")
  ./phase1_impact_audit.py:34:        print("-" * 40)
  ./phase1_impact_audit.py:40:        print("\n🎯 Testing EXISTING Routing System (Preservation)")
  ./phase1_impact_audit.py:41:        print("-" * 40)
  ./phase1_impact_audit.py:47:        print("\n🛡️ Testing Integration Safety")
  ./phase1_impact_audit.py:48:        print("-" * 40)
  ./phase1_impact_audit.py:132:                print(f"  {status} {case['name']}: {case['input'][:25]}...")
  ./phase1_impact_audit.py:141:                print(f"  ❌ {case['name']}: {e}")
  ./phase1_impact_audit.py:191:                print(f"  {status} {case['input'][:25]}... → {actual}")
  ./phase1_impact_audit.py:200:                print(f"  ❌ {case['input'][:25]}...: {e}")
  ./phase1_impact_audit.py:244:                print(f"  {status} {check['name']}")
  ./phase1_impact_audit.py:252:                print(f"  ❌ {check['name']}: {e}")
  ./phase1_impact_audit.py:341:            print(f"  Result: {passed}/{total} ({rate:.1f}%) - {'✅ PASS' if success else '❌ FAIL'}")
  ./phase1_impact_audit.py:343:            print(f"  Result: {'✅ PASS' if success else '❌ FAIL'}")
  ./phase1_impact_audit.py:368:        print(f"\n📊 PHASE 1 IMPACT ASSESSMENT")
  ./phase1_impact_audit.py:369:        print("=" * 50)
  ./phase1_impact_audit.py:370:        print(f"Data Handling: {data_handling.get('improvement', 'Unknown')}")
  ./phase1_impact_audit.py:371:        print(f"Routing System: {routing_preservation.get('status', 'Unknown')}")
  ./phase1_impact_audit.py:372:        print(f"Integration Safety: {'✅ VERIFIED' if integration_safe else '❌ FAILED'}")
  ./phase1_impact_audit.py:373:        print(f"Phase 1 Success: {'✅ YES' if phase1_success else '❌ NO'}")
  ./phase1_impact_audit.py:374:        print(f"Risk to Core: {self.results['phase1_assessment']['risk_level']}")
  ./phase1_impact_audit.py:377:            print("\n🎉 PHASE 1 APPROVED - Ready for Phase 2")
  ./phase1_impact_audit.py:378:            print("   • Data handling significantly improved")
  ./phase1_impact_audit.py:379:            print("   • Core routing system preserved (100%)")
  ./phase1_impact_audit.py:380:            print("   • Zero risk to existing functionality")
  ./phase1_impact_audit.py:382:            print("\n🚫 PHASE 1 BLOCKED")
  ./phase1_impact_audit.py:384:                print("   • Data handling still failing")
  ./phase1_impact_audit.py:386:                print("   • Core routing compromised (CRITICAL)")
  ./phase1_impact_audit.py:388:                print("   • Integration safety issues")
  ./phase1_impact_audit.py:401:        print(f"\n📋 Phase 1 impact report saved: {report_filename}")
  ./validate_ui_guardrails.py:14:    print("🛡️  Validating UI Guardrails")
  ./validate_ui_guardrails.py:15:    print("=" * 50)
  ./validate_ui_guardrails.py:20:    print("🔍 Test 1: /partials/entries session enforcement...")
  ./validate_ui_guardrails.py:26:            print("✅ PASS: /partials/entries accessible (checking content...)")
  ./validate_ui_guardrails.py:30:                print("✅ PASS: Returns empty/minimal content without session")
  ./validate_ui_guardrails.py:32:                print("❌ FAIL: Returns actual data without session authentication")
  ./validate_ui_guardrails.py:35:            print(f"❌ FAIL: /partials/entries returned {response.status_code}")
  ./validate_ui_guardrails.py:39:    print("\n🔍 Test 2: Backend API authentication enforcement...")
  ./validate_ui_guardrails.py:49:            print("✅ PASS: /api/backend/get_recent_expenses requires authentication")
  ./validate_ui_guardrails.py:51:            print(f"❌ FAIL: /api/backend/get_recent_expenses returned {response.status_code} (should be 401)")
  ./validate_ui_guardrails.py:55:        print(f"⚠️  SKIP: Could not test API endpoint (server not running): {e}")
  ./validate_ui_guardrails.py:63:            print("✅ PASS: /api/backend/get_totals requires authentication")
  ./validate_ui_guardrails.py:65:            print(f"❌ FAIL: /api/backend/get_totals returned {response.status_code} (should be 401)")
  ./validate_ui_guardrails.py:69:        print(f"⚠️  SKIP: Could not test API endpoint (server not running): {e}")
  ./validate_ui_guardrails.py:72:    print("\n🔍 Test 3: Code pattern validation...")
  ./validate_ui_guardrails.py:84:            print(f"   Checking {file_path}...")
  ./validate_ui_guardrails.py:93:                    print(f"❌ FAIL: Found {description} in {file_path}")
  ./validate_ui_guardrails.py:97:        print("\n✅ ALL UI GUARDRAILS VALIDATED")
  ./validate_ui_guardrails.py:98:        print("   - Frontend components use only session-authenticated API endpoints")
  ./validate_ui_guardrails.py:99:        print("   - No direct database access in UI layer")
  ./validate_ui_guardrails.py:100:        print("   - API endpoints properly enforce authentication")
  ./validate_ui_guardrails.py:102:        print("\n❌ UI GUARDRAIL VIOLATIONS DETECTED")
  ./ai/ai_reply_optimized.py:154:    print("=== OPTIMIZED AI REPLY TEST ===")
  ./ai/ai_reply_optimized.py:164:    print("\n1. Testing Thin Context Response:")
  ./ai/ai_reply_optimized.py:183:    print(f"   Summary: {result['summary']}")
  ./ai/ai_reply_optimized.py:184:    print(f"   Action: {result['action']}")
  ./ai/ai_reply_optimized.py:185:    print(f"   Question: {result['question']}")
  ./ai/ai_reply_optimized.py:188:    print("\n2. Testing Message Formatting:")
  ./ai/ai_reply_optimized.py:190:    print(f"   Message length: {len(msg)} chars")
  ./ai/ai_reply_optimized.py:191:    print(f"   Under 280 limit: {len(msg) <= 280}")
  ./ai/ai_reply_optimized.py:196:    print("\n✅ Optimized AI reply system tested successfully")
  ./uat_e2e_framework.py:39:        print("🔬 PHASE E END-TO-END UAT FRAMEWORK")
  ./uat_e2e_framework.py:40:        print("=" * 60)
  ./uat_e2e_framework.py:58:            print(f"\n🧪 Executing: {scenario_name}")
  ./uat_e2e_framework.py:67:                print(f"   ✅ PASS: {scenario_name}")
  ./uat_e2e_framework.py:75:                print(f"   ❌ FAIL: {scenario_name} - {str(e)}")
  ./uat_e2e_framework.py:708:    print("🚀 Starting Phase E End-to-End UAT...")
  ./uat_e2e_framework.py:709:    print("   Testing: Data Handling | Routing | Processing | Storing | Integrity")
  ./uat_e2e_framework.py:710:    print("   Users: New Users | Existing Users | Future Users")
  ./uat_e2e_framework.py:711:    print()
  ./uat_e2e_framework.py:718:        print(f"\n🎯 UAT EXECUTIVE SUMMARY")
  ./uat_e2e_framework.py:719:        print(f"=" * 50)
  ./uat_e2e_framework.py:720:        print(f"📊 Overall Success Rate: {summary['overall_success_rate']:.1f}%")
  ./uat_e2e_framework.py:721:        print(f"✅ Scenarios Passed: {summary['scenarios_passed']}/{summary['total_scenarios_tested']}")
  ./uat_e2e_framework.py:722:        print(f"🚨 Critical Failures: {summary['critical_failures']}")
  ./uat_e2e_framework.py:723:        print(f"🚀 Deployment Ready: {'YES' if summary['deployment_ready'] else 'NO'}")
  ./uat_e2e_framework.py:727:        print(f"\n🔍 DEPLOYMENT RECOMMENDATION")
  ./uat_e2e_framework.py:728:        print(f"Status: {recommendation['status']}")
  ./uat_e2e_framework.py:729:        print(f"Confidence: {recommendation['confidence_level']}")
  ./uat_e2e_framework.py:732:            print("Blockers:")
  ./uat_e2e_framework.py:734:                print(f"  • {blocker}")
  ./uat_e2e_framework.py:736:        print(f"\nNext Steps:")
  ./uat_e2e_framework.py:738:            print(f"  {step}")
  ./uat_e2e_framework.py:744:        print(f"\n📄 Detailed audit report saved: phase_e_uat_audit_report.json")
  ./uat_e2e_framework.py:749:        print(f"❌ UAT execution failed: {e}")
  ./demo_cleanup.py:17:    print(f"\n❌ {msg}")
  ./demo_cleanup.py:22:    print(f"🧹 Cleaning canary expenses (prefix='{CANARY_PREFIX}', since {cutoff.isoformat()} UTC)…")
  ./demo_cleanup.py:47:        print("✅ No canary expenses found to delete.")
  ./demo_cleanup.py:50:    print(f"Found {len(to_delete)} canary expenses to delete:")
  ./demo_cleanup.py:52:        print(f" - {e.get('id')} | {e.get('description')} | {e.get('created_at')}")
  ./demo_cleanup.py:54:        print(f"   … and {len(to_delete)-5} more")
  ./demo_cleanup.py:65:            print(f"   ✅ Deleted expense {expense_id}")
  ./demo_cleanup.py:67:            print(f"   ⚠️ Could not delete {expense_id} (HTTP {r.status_code}) — maybe no delete endpoint implemented.")
  ./demo_cleanup.py:69:    print("🧹 Cleanup finished.")
  ./fixed_comprehensive_audit.py:36:        print("🔧 FIXED COMPREHENSIVE END-TO-END AUDIT")
  ./fixed_comprehensive_audit.py:37:        print("=" * 60)
  ./fixed_comprehensive_audit.py:38:        print(f"Audit Session: {self.audit_session_id}")
  ./fixed_comprehensive_audit.py:39:        print("No excuses - testing actual system functions")
  ./fixed_comprehensive_audit.py:40:        print()
  ./fixed_comprehensive_audit.py:43:        print("📊 Phase 1: Data Handling Validation (FIXED)")
  ./fixed_comprehensive_audit.py:44:        print("-" * 40)
  ./fixed_comprehensive_audit.py:50:        print("\n🎯 Phase 2: Routing Validation") 
  ./fixed_comprehensive_audit.py:51:        print("-" * 40)
  ./fixed_comprehensive_audit.py:57:        print("\n🤖 Phase 3: AI Processing (FIXED)")
  ./fixed_comprehensive_audit.py:58:        print("-" * 40)
  ./fixed_comprehensive_audit.py:64:        print("\n💾 Phase 4: Storage Validation (FIXED)")
  ./fixed_comprehensive_audit.py:65:        print("-" * 40)
  ./fixed_comprehensive_audit.py:71:        print("\n🔒 Phase 5: Data Integrity (FIXED)")
  ./fixed_comprehensive_audit.py:72:        print("-" * 40)
  ./fixed_comprehensive_audit.py:78:        print("\n🛡️ Phase 6: Security Validation (FIXED)")
  ./fixed_comprehensive_audit.py:79:        print("-" * 40)
  ./fixed_comprehensive_audit.py:133:                print(f"  {'✅' if test_result['success'] else '❌'} {case['type']}: {case['input'][:20]}...")
  ./fixed_comprehensive_audit.py:142:                print(f"  ❌ {case['type']}: {e}")
  ./fixed_comprehensive_audit.py:188:                print(f"  {'✅' if success else '❌'} {case['input'][:25]}... → {actual}")
  ./fixed_comprehensive_audit.py:196:                print(f"  ❌ {case['input'][:25]}...: {e}")
  ./fixed_comprehensive_audit.py:234:                    print(f"  ⚠️ AI disabled: {case['message'][:20]}...")
  ./fixed_comprehensive_audit.py:258:                print(f"  {'✅' if success else '❌'} AI processing: {case['message'][:20]}... ({processing_time:.1f}ms)")
  ./fixed_comprehensive_audit.py:267:                print(f"  ❌ AI processing: {case['message'][:20]}... - {e}")
  ./fixed_comprehensive_audit.py:325:                print(f"  ✅ Expense insertion: ID {inserted.id if inserted else 'failed'}")
  ./fixed_comprehensive_audit.py:334:                print(f"  ❌ Expense insertion: {e}")
  ./fixed_comprehensive_audit.py:351:                print(f"  ✅ Data retrieval: Found amount {retrieval.amount if retrieval else 'none'}")
  ./fixed_comprehensive_audit.py:359:                print(f"  ❌ Data retrieval: {e}")
  ./fixed_comprehensive_audit.py:373:                print(f"  ✅ User isolation: {isolation_check.count} records")
  ./fixed_comprehensive_audit.py:381:                print(f"  ❌ User isolation: {e}")
  ./fixed_comprehensive_audit.py:389:            print(f"  ❌ Storage system: {e}")
  ./fixed_comprehensive_audit.py:458:                print(f"  {'✅' if validation_passed else '❌'} {check['description']}")
  ./fixed_comprehensive_audit.py:467:                print(f"  ❌ {check['description']}: {e}")
  ./fixed_comprehensive_audit.py:514:                print(f"  {'✅' if test_result['success'] else '❌'} {test_case['description']}")
  ./fixed_comprehensive_audit.py:523:                print(f"  ❌ {test_case['description']}: {e}")
  ./fixed_comprehensive_audit.py:600:            print(f"  Result: {summary['passed']}/{summary['total']} ({success_rate:.1f}%) - {'✅ PASS' if success else '❌ FAIL'}")
  ./fixed_comprehensive_audit.py:602:            print(f"  Result: {success_rate:.1f}% - {'✅ PASS' if success else '❌ FAIL'}")
  ./fixed_comprehensive_audit.py:638:        print(f"\n📊 HONEST COMPREHENSIVE AUDIT RESULTS")
  ./fixed_comprehensive_audit.py:639:        print("=" * 60)
  ./fixed_comprehensive_audit.py:640:        print(f"Overall Success Rate: {overall_success_rate:.1f}%")
  ./fixed_comprehensive_audit.py:641:        print(f"Phases Passed: {phase_successes}/{total_phases}")
  ./fixed_comprehensive_audit.py:642:        print(f"Deployment Ready: {'✅ YES' if deployment_ready else '❌ NO'}")
  ./fixed_comprehensive_audit.py:644:        print(f"\nDetailed Results:")
  ./fixed_comprehensive_audit.py:649:            print(f"  {name}: {'✅' if success else '❌'} {rate:.1f}%")
  ./fixed_comprehensive_audit.py:652:            print(f"\n🎉 DEPLOYMENT APPROVED")
  ./fixed_comprehensive_audit.py:653:            print(f"   • {phase_successes}/{total_phases} critical systems validated")
  ./fixed_comprehensive_audit.py:654:            print(f"   • Core routing and data handling working")
  ./fixed_comprehensive_audit.py:655:            print(f"   • Ready for Phase 1 zero-risk rollout")
  ./fixed_comprehensive_audit.py:657:                print(f"   ⚠️ Monitor: {', '.join(critical_failures)}")
  ./fixed_comprehensive_audit.py:659:            print(f"\n🚫 DEPLOYMENT BLOCKED")
  ./fixed_comprehensive_audit.py:660:            print(f"   • Critical failures: {', '.join(critical_failures)}")
  ./fixed_comprehensive_audit.py:661:            print(f"   • Must achieve 5/6 phases passing")
  ./fixed_comprehensive_audit.py:662:            print(f"   • Fix failures before deployment")
  ./fixed_comprehensive_audit.py:672:            print(f"\n🧹 Test data cleaned up")
  ./fixed_comprehensive_audit.py:674:            print(f"⚠️ Cleanup warning: {e}")
  ./fixed_comprehensive_audit.py:688:        print(f"\n📋 Fixed audit report saved: {report_filename}")
  ./robust_e2e_audit.py:37:        print("🔍 ROBUST END-TO-END UAT AUDIT")
  ./robust_e2e_audit.py:38:        print("=" * 60)
  ./robust_e2e_audit.py:39:        print(f"Audit Session: {self.audit_session_id}")
  ./robust_e2e_audit.py:40:        print(f"Test User: {self.test_user_id}")
  ./robust_e2e_audit.py:41:        print()
  ./robust_e2e_audit.py:47:        print("📊 Phase 1: Data Handling Validation")
  ./robust_e2e_audit.py:48:        print("-" * 40)
  ./robust_e2e_audit.py:54:        print("\n🎯 Phase 2: Routing System Validation")
  ./robust_e2e_audit.py:55:        print("-" * 40)
  ./robust_e2e_audit.py:61:        print("\n🤖 Phase 3: AI Processing Validation")
  ./robust_e2e_audit.py:62:        print("-" * 40)
  ./robust_e2e_audit.py:68:        print("\n💾 Phase 4: Storage System Validation")
  ./robust_e2e_audit.py:69:        print("-" * 40)
  ./robust_e2e_audit.py:75:        print("\n🔒 Phase 5: Data Integrity Validation")
  ./robust_e2e_audit.py:76:        print("-" * 40)
  ./robust_e2e_audit.py:82:        print("\n🛡️ Phase 6: Security Validation")
  ./robust_e2e_audit.py:83:        print("-" * 40)
  ./robust_e2e_audit.py:119:            print(f"System baseline established:")
  ./robust_e2e_audit.py:120:            print(f"  Contract Tests: {contract_results['passed']}/{contract_results['total']} ({contract_results['success_rate']}%)")
  ./robust_e2e_audit.py:121:            print(f"  Integration Tests: {integration_status['passed']}/{integration_status['total']} ({integration_status['success_rate']}%)")
  ./robust_e2e_audit.py:122:            print(f"  Database: {'✅ Connected' if db_status['connected'] else '❌ Failed'}")
  ./robust_e2e_audit.py:125:            print(f"⚠️ System info collection error: {e}")
  ./robust_e2e_audit.py:189:                print(f"  {'✅' if test_result['success'] else '❌'} {case['name']}")
  ./robust_e2e_audit.py:198:                print(f"  ❌ {case['name']}: {e}")
  ./robust_e2e_audit.py:253:                print(f"  {'✅' if test_result['success'] else '❌'} {case['input'][:30]}... → {actual_intent}")
  ./robust_e2e_audit.py:262:                print(f"  ❌ {case['input'][:30]}...: {e}")
  ./robust_e2e_audit.py:313:                print(f"  {'✅' if test_result['success'] else '❌'} {case['type']}: {processing_time:.1f}ms")
  ./robust_e2e_audit.py:323:                print(f"  ❌ {case['type']}: {e}")
  ./robust_e2e_audit.py:372:                print(f"  ✅ Expense insertion: ID {inserted_record.id}")
  ./robust_e2e_audit.py:381:                print(f"  ❌ Expense insertion: {e}")
  ./robust_e2e_audit.py:399:                print(f"  ✅ Data retrieval: Found record")
  ./robust_e2e_audit.py:407:                print(f"  ❌ Data retrieval: {e}")
  ./robust_e2e_audit.py:421:                print(f"  ✅ User isolation: {isolation_check.count} records")
  ./robust_e2e_audit.py:429:                print(f"  ❌ User isolation: {e}")
  ./robust_e2e_audit.py:437:            print(f"  ❌ Storage system error: {e}")
  ./robust_e2e_audit.py:509:                print(f"  {'✅' if validation_passed else '❌'} {check['description']}")
  ./robust_e2e_audit.py:518:                print(f"  ❌ {check['description']}: {e}")
  ./robust_e2e_audit.py:566:                print(f"  {'✅' if test_result['success'] else '❌'} {validation['description']}")
  ./robust_e2e_audit.py:575:                print(f"  ❌ {validation['description']}: {e}")
  ./robust_e2e_audit.py:673:            print(f"  Tests: {summary['passed_tests']}/{summary['total_tests']} ({summary['success_rate']:.1f}%)")
  ./robust_e2e_audit.py:675:            print(f"  Checks: {summary['passed_checks']}/{summary['total_checks']} ({summary['success_rate']:.1f}%)")
  ./robust_e2e_audit.py:677:        print(f"  Result: {'✅ PASS' if success else '❌ FAIL'}")
  ./robust_e2e_audit.py:721:        print(f"\n📊 COMPREHENSIVE AUDIT SUMMARY")
  ./robust_e2e_audit.py:722:        print("=" * 60)
  ./robust_e2e_audit.py:723:        print(f"Audit Session: {self.audit_session_id}")
  ./robust_e2e_audit.py:724:        print(f"Overall Success Rate: {overall_success_rate:.1f}%")
  ./robust_e2e_audit.py:725:        print(f"Deployment Readiness: {'✅ READY' if deployment_ready else '❌ NOT READY'}")
  ./robust_e2e_audit.py:726:        print(f"Recommendation: {self.results['deployment_assessment']['recommendation']}")
  ./robust_e2e_audit.py:728:        print(f"\nPhase Results:")
  ./robust_e2e_audit.py:733:            print(f"  {phase_name}: {status} ({success_rate:.1f}%)")
  ./robust_e2e_audit.py:736:            print("\n🎉 DEPLOYMENT APPROVED")
  ./robust_e2e_audit.py:737:            print("   • All critical systems validated")
  ./robust_e2e_audit.py:738:            print("   • Data integrity confirmed")
  ./robust_e2e_audit.py:739:            print("   • Security measures verified")
  ./robust_e2e_audit.py:740:            print("   • Ready for Phase 1 rollout")
  ./robust_e2e_audit.py:742:            print(f"\n⚠️  DEPLOYMENT BLOCKED")
  ./robust_e2e_audit.py:743:            print(f"   Critical failures in: {', '.join(critical_failures)}")
  ./robust_e2e_audit.py:744:            print("   • Fix failing systems before deployment")
  ./robust_e2e_audit.py:754:            print(f"\n🧹 Test data cleanup completed")
  ./robust_e2e_audit.py:756:            print(f"⚠️  Cleanup warning: {e}")
  ./robust_e2e_audit.py:770:        print(f"\n📋 Comprehensive audit report saved: {report_filename}")
  ./streamlined_uat.py:15:    print("🧪 Streamlined UAT for PoR v1.1")
  ./streamlined_uat.py:16:    print("=" * 50)
  ./streamlined_uat.py:24:        print("📋 Phase 1: Contract Test Validation")
  ./streamlined_uat.py:25:        print("-" * 40)
  ./streamlined_uat.py:30:        print(f"Contract Tests: {contract_results['passed']}/{contract_results['total']} ({contract_results['success_rate']}%)")
  ./streamlined_uat.py:33:            print("❌ Failures:")
  ./streamlined_uat.py:35:                print(f"  {failure}")
  ./streamlined_uat.py:37:            print("✅ All contract tests passed!")
  ./streamlined_uat.py:40:        print("\n🔗 Phase 2: Integration Test Validation")
  ./streamlined_uat.py:41:        print("-" * 40)
  ./streamlined_uat.py:46:            print(f"Integration Tests: {passed}/{total} ({success_rate}%)")
  ./streamlined_uat.py:48:                print("✅ All integration tests passed!")
  ./streamlined_uat.py:50:                print(f"❌ {total - passed} integration tests failed")
  ./streamlined_uat.py:52:            print(f"❌ Integration test error: {e}")
  ./streamlined_uat.py:57:        print("\n🎯 Phase 3: Key Routing Scenario Validation")
  ./streamlined_uat.py:58:        print("-" * 40)
  ./streamlined_uat.py:89:                    print(f"✅ {description}: '{text}' → {actual_intent}")
  ./streamlined_uat.py:91:                    print(f"❌ {description}: '{text}' → {actual_intent} (expected {expected_intent})")
  ./streamlined_uat.py:94:                print(f"❌ {description}: Error - {e}")
  ./streamlined_uat.py:99:        print(f"\nScenario Tests: {scenario_passed}/{scenario_total} ({scenario_success_rate:.1f}%)")
  ./streamlined_uat.py:102:        print("\n🔍 Phase 4: Pattern Recognition Validation") 
  ./streamlined_uat.py:103:        print("-" * 40)
  ./streamlined_uat.py:138:                    print(f"✅ {pattern_type.title()} pattern: '{text}' → {result}")
  ./streamlined_uat.py:140:                    print(f"❌ {pattern_type.title()} pattern: '{text}' → {result} (expected {expected})")
  ./streamlined_uat.py:143:                print(f"❌ {pattern_type.title()} pattern: Error - {e}")
  ./streamlined_uat.py:148:        print(f"\nPattern Tests: {pattern_passed}/{pattern_total} ({pattern_success_rate:.1f}%)")
  ./streamlined_uat.py:151:        print("\n💚 Phase 5: System Health Validation")
  ./streamlined_uat.py:152:        print("-" * 40)
  ./streamlined_uat.py:166:                print(f"✅ {check.replace('_', ' ').title()}: PASS")
  ./streamlined_uat.py:168:                print(f"❌ {check.replace('_', ' ').title()}: FAIL")
  ./streamlined_uat.py:173:        print("\n📊 STREAMLINED UAT RESULTS")
  ./streamlined_uat.py:174:        print("=" * 50)
  ./streamlined_uat.py:222:        print(f"Overall Success: {overall_success}")
  ./streamlined_uat.py:223:        print(f"Deployment Status: {results['deployment_readiness']}")
  ./streamlined_uat.py:224:        print()
  ./streamlined_uat.py:225:        print("Phase Results:")
  ./streamlined_uat.py:227:            print(f"  {phase}: {data['passed']}/{data['total']} ({data['success_rate']:.1f}%) - {data['status']}")
  ./streamlined_uat.py:230:        print("\nRecommendations:")
  ./streamlined_uat.py:232:            print("  ✅ All validation phases passed")
  ./streamlined_uat.py:233:            print("  ✅ PoR v1.1 system ready for deployment")
  ./streamlined_uat.py:234:            print("  ✅ Proceed with Phase 1 zero-risk rollout")
  ./streamlined_uat.py:236:            print("  ❌ Fix failing validation phases before deployment")
  ./streamlined_uat.py:238:                print("  ❌ Address contract test failures")
  ./streamlined_uat.py:240:                print("  ❌ Address integration test failures")
  ./streamlined_uat.py:242:                print("  ❌ Fix routing scenario issues")
  ./streamlined_uat.py:244:                print("  ❌ Fix pattern recognition issues")
  ./streamlined_uat.py:251:        print(f"\nDetailed report saved: {report_file}")
  ./comprehensive_uat_suite.py:211:            print("🧪 Starting Comprehensive End-to-End UAT Suite")
  ./comprehensive_uat_suite.py:212:            print("=" * 60)
  ./comprehensive_uat_suite.py:253:        print("\n📋 Phase 1: Contract Test Validation")
  ./comprehensive_uat_suite.py:254:        print("-" * 40)
  ./comprehensive_uat_suite.py:258:        print(f"Contract Tests: {results['passed']}/{results['total']} ({results['success_rate']}%)")
  ./comprehensive_uat_suite.py:261:            print("❌ Failures:")
  ./comprehensive_uat_suite.py:263:                print(f"  {failure}")
  ./comprehensive_uat_suite.py:265:            print("✅ All contract tests passed!")
  ./comprehensive_uat_suite.py:271:        print("\n🔗 Phase 2: Integration Test Validation")
  ./comprehensive_uat_suite.py:272:        print("-" * 40)
  ./comprehensive_uat_suite.py:286:        print("\n🔄 Phase 3: End-to-End Data Flow Tests")
  ./comprehensive_uat_suite.py:287:        print("-" * 40)
  ./comprehensive_uat_suite.py:307:                print(f"{status} {test_case.name}")
  ./comprehensive_uat_suite.py:310:                        print(f"    Error: {error}")
  ./comprehensive_uat_suite.py:314:                print(f"❌ {test_case.name} - Exception: {e}")
  ./comprehensive_uat_suite.py:317:        print(f"\nE2E Tests: {passed}/{total} ({success_rate:.1f}%)")
  ./comprehensive_uat_suite.py:454:            print(f"Integrity check {check} failed: {e}")
  ./comprehensive_uat_suite.py:459:        print("\n🔐 Phase 4: Data Integrity Audit")
  ./comprehensive_uat_suite.py:460:        print("-" * 30)
  ./comprehensive_uat_suite.py:472:            print(f"{status} {audit}: {result['message']}")
  ./comprehensive_uat_suite.py:576:        print("\n⚡ Phase 5: Performance Validation")
  ./comprehensive_uat_suite.py:577:        print("-" * 30)
  ./comprehensive_uat_suite.py:704:    print(f"\n📊 COMPREHENSIVE UAT COMPLETE")
  ./comprehensive_uat_suite.py:705:    print("=" * 50)
  ./comprehensive_uat_suite.py:706:    print(f"Overall Success: {report['overall_success']}")
  ./comprehensive_uat_suite.py:707:    print(f"Deployment Readiness: {report['deployment_readiness']}")
  ./comprehensive_uat_suite.py:708:    print(f"\nSummary:")
  ./comprehensive_uat_suite.py:710:        print(f"  {category}: {result}")
  ./comprehensive_uat_suite.py:712:    print(f"\nRecommendations:")
  ./comprehensive_uat_suite.py:714:        print(f"  {rec}")
  ./comprehensive_uat_suite.py:716:    print(f"\nDetailed report saved: {report_file}")
  ./debug_patterns.py:28:    print("🔍 Pattern Matching Debug Analysis")
  ./debug_patterns.py:29:    print("=" * 50)
  ./debug_patterns.py:32:    print("\n📋 Current Pattern Results:")
  ./debug_patterns.py:44:        print(f"{status} '{text}' → {current_result} (expected {expected_intent})")
  ./debug_patterns.py:45:        print(f"    FAQ: {has_faq}, Coaching: {has_coaching}")
  ./debug_patterns.py:48:    print(f"\n🔧 Current Coaching Regex:")
  ./debug_patterns.py:49:    print(f"EN: {patterns.coaching_verbs_en.pattern}")
  ./debug_patterns.py:50:    print(f"BN: {patterns.coaching_verbs_bn.pattern}")
  ./debug_patterns.py:61:    print(f"\n🧪 Individual Coaching Tests:")
  ./debug_patterns.py:64:        print(f"'{phrase}' → Match: {match.group() if match else None}")
  ./debug_patterns.py:67:    print(f"\n💡 Pattern Improvement Suggestions:")
  ./debug_patterns.py:74:    print(f"Improved coaching pattern: {improved_coaching}")
  ./debug_patterns.py:79:    print(f"\n✨ Testing Improved Pattern:")
  ./debug_patterns.py:83:        print(f"{status} '{phrase}' → Match: {match.group() if match else None}")
  ./test_routing_integration.py:14:        print("🧪 Testing Routing in Flask App Context")
  ./test_routing_integration.py:15:        print("=" * 50)
  ./test_routing_integration.py:73:            print(f'{status} "{text}" → {result.intent.value} (expected {expected_intent.value})')
  ./test_routing_integration.py:77:                print(f"    Reasons: {', '.join(result.reason_codes)}")
  ./test_routing_integration.py:80:        print(f"\n📊 Integration Test Results: {passed}/{total} passed ({success_rate:.1f}%)")
  ./test_routing_integration.py:87:        print("\n🎯 Testing Scope Behavior")
  ./test_routing_integration.py:88:        print("=" * 30)
  ./test_routing_integration.py:119:            print(f'{status} "{text}" (ledger={ledger_count}, scope={scope}) → deterministic={uses_deterministic}')
  ./test_routing_integration.py:127:        print("\n🛡️ Testing Phase 1 Safety Configuration")
  ./test_routing_integration.py:128:        print("=" * 40)
  ./test_routing_integration.py:138:        print(f"Router Mode: {config['mode']}")
  ./test_routing_integration.py:139:        print(f"Router Scope: {config['scope']}")
  ./test_routing_integration.py:140:        print(f"Coaching Threshold: {config['coaching_threshold']}")
  ./test_routing_integration.py:141:        print(f"Bilingual Routing: {config['bilingual']}")
  ./test_routing_integration.py:153:            print(f"{status} {check_name}")
  ./test_routing_integration.py:162:    print("\n📋 Running Contract Tests")
  ./test_routing_integration.py:163:    print("=" * 25)
  ./test_routing_integration.py:166:        print(f"Contract Tests: {results['passed']}/{results['total']} passed ({results['success_rate']}%)")
  ./test_routing_integration.py:169:            print(f"\nRemaining failures ({len(results['failures'])}):")
  ./test_routing_integration.py:171:                print(f"  {failure}")
  ./test_routing_integration.py:173:                print(f"  ... and {len(results['failures']) - 5} more")
  ./test_routing_integration.py:176:    print(f"\n🎉 PoR v1.1 Implementation Summary")
  ./test_routing_integration.py:177:    print(f"✅ Integration Tests: {routing_rate:.1f}% success")
  ./test_routing_integration.py:178:    print(f"✅ Contract Tests: {results['success_rate']}% success") 
  ./test_routing_integration.py:179:    print(f"✅ Phase 1 Configuration: Safe and ready")
  ./test_routing_integration.py:180:    print(f"🚀 Ready for Phase 1 deployment!")
  ./final_contamination_fix_validation.py:21:    print("🛡️  COMPREHENSIVE AI CONTAMINATION SAFEGUARDS TEST")
  ./final_contamination_fix_validation.py:22:    print("=" * 60)
  ./final_contamination_fix_validation.py:35:        print("✅ Creating isolated test data for contamination testing...")
  ./final_contamination_fix_validation.py:52:        print(f"   User 1: ৳1000 food + ৳500 transport = ৳1500 total")
  ./final_contamination_fix_validation.py:53:        print(f"   User 2: ৳2000 food + ৳300 entertainment = ৳2300 total")
  ./final_contamination_fix_validation.py:56:        print(f"\n🔒 TEST 1: Session Isolation")
  ./final_contamination_fix_validation.py:92:        print(f"   User 1 result: {'✅ Success' if result1.get('success') else '❌ Failed'}")
  ./final_contamination_fix_validation.py:93:        print(f"   User 2 result: {'✅ Success' if result2.get('success') else '❌ Failed'}")
  ./final_contamination_fix_validation.py:104:                print("   ❌ User 1 response contains User 2's data!")
  ./final_contamination_fix_validation.py:109:                print("   ❌ User 2 response contains User 1's data!")
  ./final_contamination_fix_validation.py:114:                print("   ❌ Identical responses for different users!")
  ./final_contamination_fix_validation.py:118:            print("   ✅ No cross-contamination detected - responses properly isolated")
  ./final_contamination_fix_validation.py:121:        print(f"\n🔍 TEST 2: Contamination Monitor Active")
  ./final_contamination_fix_validation.py:122:        print(f"   Active requests tracked: {len(ai_contamination_monitor.active_requests)}")
  ./final_contamination_fix_validation.py:123:        print(f"   Response fingerprints: {len(ai_contamination_monitor.response_fingerprints)}")
  ./final_contamination_fix_validation.py:124:        print("   ✅ Contamination monitor is actively tracking requests")
  ./final_contamination_fix_validation.py:127:        print(f"\n📝 TEST 3: User ID Isolation Logging")
  ./final_contamination_fix_validation.py:128:        print("   ✅ User IDs are logged with each request for audit trail")
  ./final_contamination_fix_validation.py:129:        print("   ✅ Request IDs generated for contamination tracking")
  ./final_contamination_fix_validation.py:141:    print(f"\n🛡️  INDIVIDUAL SAFEGUARD FEATURES TEST")
  ./final_contamination_fix_validation.py:142:    print("=" * 45)
  ./final_contamination_fix_validation.py:147:        print(f"✅ AI Adapter initialized with user isolation: {adapter.enabled}")
  ./final_contamination_fix_validation.py:148:        print(f"✅ Session template configured (no shared state): {len(adapter._session_template['headers'])} headers")
  ./final_contamination_fix_validation.py:149:        print(f"✅ Backwards compatibility session exists for health checks: {hasattr(adapter, 'session')}")
  ./final_contamination_fix_validation.py:152:        print(f"✅ AI contamination monitor active: {ai_contamination_monitor is not None}")
  ./final_contamination_fix_validation.py:160:        print(f"✅ Request logging working: {request_id[:20]}...")
  ./final_contamination_fix_validation.py:165:    print("🚨 CRITICAL FINANCIAL DATA SECURITY VALIDATION")
  ./final_contamination_fix_validation.py:166:    print("Testing all implemented safeguards against AI cross-contamination")
  ./final_contamination_fix_validation.py:167:    print("=" * 65)
  ./final_contamination_fix_validation.py:173:    print(f"\n📋 FINAL SECURITY ASSESSMENT")
  ./final_contamination_fix_validation.py:174:    print("=" * 35)
  ./final_contamination_fix_validation.py:177:        print("✅ ALL SAFEGUARDS PASSED - AI cross-contamination prevention active")
  ./final_contamination_fix_validation.py:178:        print("✅ Users will receive only their own financial data in AI responses")
  ./final_contamination_fix_validation.py:179:        print("✅ Contamination monitoring system operational")
  ./final_contamination_fix_validation.py:180:        print("✅ Per-request session isolation implemented")
  ./final_contamination_fix_validation.py:181:        print("✅ User isolation logging active for audit trails")
  ./final_contamination_fix_validation.py:182:        print(f"\n🛡️  FINANCIAL DATA INTEGRITY SECURED")
  ./final_contamination_fix_validation.py:185:        print("❌ SAFEGUARD FAILURES DETECTED")
  ./final_contamination_fix_validation.py:186:        print("🚨 FINANCIAL DATA SECURITY AT RISK")
  ./critical_cross_contamination_test.py:18:    print("🚨 TESTING CRITICAL AI CROSS-CONTAMINATION")
  ./critical_cross_contamination_test.py:19:    print("=" * 55)
  ./critical_cross_contamination_test.py:54:        print("EXPECTED USER DATA:")
  ./critical_cross_contamination_test.py:55:        print(f"User 1 ({user1_id[:16]}...):")
  ./critical_cross_contamination_test.py:59:            print(f"   {category}: ৳{total}")
  ./critical_cross_contamination_test.py:61:        print(f"\nKC ({kc_id[:16]}...):")
  ./critical_cross_contamination_test.py:65:            print(f"   {category}: ৳{total}")
  ./critical_cross_contamination_test.py:94:        print(f"\n🔄 TESTING CONCURRENT AI REQUESTS...")
  ./critical_cross_contamination_test.py:110:            print(f"\nIteration {iteration + 1}:")
  ./critical_cross_contamination_test.py:123:                print(f"   User 1 response length: {len(user1_response)}")
  ./critical_cross_contamination_test.py:124:                print(f"   KC response length: {len(kc_response)}")
  ./critical_cross_contamination_test.py:146:                print(f"   Contamination check: {'❌ ISSUES FOUND' if has_contamination else '✅ Clean'}")
  ./critical_cross_contamination_test.py:152:    print("\n🔍 TESTING SHARED STATE ISOLATION")
  ./critical_cross_contamination_test.py:153:    print("=" * 40)
  ./critical_cross_contamination_test.py:157:    print(f"AI Adapter attributes: {adapter_vars}")
  ./critical_cross_contamination_test.py:161:    print(f"Shared session ID: {session_id}")
  ./critical_cross_contamination_test.py:165:    print(f"Session headers: {list(original_headers.keys())}")
  ./critical_cross_contamination_test.py:175:    print(f"\n📋 CRITICAL SECURITY ASSESSMENT")
  ./critical_cross_contamination_test.py:176:    print("=" * 40)
  ./critical_cross_contamination_test.py:179:        print(f"🚨 CRITICAL DATA BREACH: {len(all_issues)} cross-contamination issues found")
  ./critical_cross_contamination_test.py:181:            print(f"{i}. {issue}")
  ./critical_cross_contamination_test.py:182:        print(f"\n🚨 IMMEDIATE ACTION REQUIRED - USERS SEEING OTHER USERS' FINANCIAL DATA")
  ./critical_cross_contamination_test.py:184:        print("✅ No cross-contamination detected in AI responses")
  ./critical_cross_contamination_test.py:185:        print("✅ User financial data properly isolated")
  ./deep_user_isolation_test.py:18:    print("🔬 TESTING CROSS-USER DATA CONTAMINATION")
  ./deep_user_isolation_test.py:19:    print("=" * 45)
  ./deep_user_isolation_test.py:32:            print(f"\n🧪 Testing user: {user_id[:16]}... (৳{user_total}, {user_count} expenses)")
  ./deep_user_isolation_test.py:62:                    print(f"   ✅ Category '{category}' response isolated correctly")
  ./deep_user_isolation_test.py:65:            print(f"   ✅ Core isolation tests passed (insights test skipped)")
  ./deep_user_isolation_test.py:71:    print("\n⚡ TESTING CONCURRENT USER ACCESS")
  ./deep_user_isolation_test.py:72:    print("=" * 35)
  ./deep_user_isolation_test.py:113:            print("✅ No race conditions detected in concurrent access")
  ./deep_user_isolation_test.py:118:    print("🔍 DEEP USER ISOLATION TESTING")
  ./deep_user_isolation_test.py:119:    print("=" * 40)
  ./deep_user_isolation_test.py:125:    print(f"\n📊 DEEP TESTING RESULTS")
  ./deep_user_isolation_test.py:126:    print("=" * 25)
  ./deep_user_isolation_test.py:129:        print(f"❌ FOUND {len(issues)} ISOLATION ISSUES:")
  ./deep_user_isolation_test.py:131:            print(f"{i}. {issue}")
  ./deep_user_isolation_test.py:133:        print("✅ ALL DEEP ISOLATION TESTS PASSED")
  ./deep_user_isolation_test.py:134:        print("✅ USER DATA COMPLETELY ISOLATED")
  ./data_integrity_monitoring.py:16:    print("🛡️ SETTING UP DATA INTEGRITY MONITORING")
  ./data_integrity_monitoring.py:17:    print("=" * 45)
  ./data_integrity_monitoring.py:22:            print("1. Checking foreign key constraints...")
  ./data_integrity_monitoring.py:33:                print("   Adding foreign key constraint to prevent orphaned expenses...")
  ./data_integrity_monitoring.py:35:                print("   ⚠️ Foreign key constraint creation skipped (would require production coordination)")
  ./data_integrity_monitoring.py:37:                print("   ✅ Foreign key constraints already exist")
  ./data_integrity_monitoring.py:40:            print("\n2. Creating data integrity monitoring view...")
  ./data_integrity_monitoring.py:72:            print("\n3. Testing data integrity monitoring...")
  ./data_integrity_monitoring.py:78:                print(f"   {status_icon} {check_type}: {issue_count} issues")
  ./data_integrity_monitoring.py:81:            print("\n✅ Data integrity monitoring system active")
  ./data_integrity_monitoring.py:85:            print(f"❌ Error setting up monitoring: {e}")
  ./data_integrity_monitoring.py:91:    print("\n📊 COMPREHENSIVE DATA INTEGRITY REPORT")
  ./data_integrity_monitoring.py:92:    print("=" * 45)
  ./data_integrity_monitoring.py:104:        print(f"📈 SYSTEM STATISTICS:")
  ./data_integrity_monitoring.py:105:        print(f"   Total users: {stats.total_users}")
  ./data_integrity_monitoring.py:106:        print(f"   Total expenses: {stats.total_expenses}")
  ./data_integrity_monitoring.py:107:        print(f"   Users with expenses: {stats.users_with_expenses}")
  ./data_integrity_monitoring.py:108:        print(f"   Valid user hashes: {stats.valid_users}")
  ./data_integrity_monitoring.py:111:        print(f"\n🛡️ INTEGRITY STATUS:")
  ./data_integrity_monitoring.py:119:            print(f"   {status_icon} {check_type}: {issue_count} issues")
  ./data_integrity_monitoring.py:122:        print(f"\n🔒 USER ISOLATION VERIFICATION:")
  ./data_integrity_monitoring.py:141:                print(f"   ❌ User {user_id[:16]}... isolation issue")
  ./data_integrity_monitoring.py:143:                print(f"   ✅ User {user_id[:16]}... properly isolated ({expense_count} expenses)")
  ./data_integrity_monitoring.py:146:        print(f"\n🎯 FINAL ASSESSMENT:")
  ./data_integrity_monitoring.py:148:            print("   ✅ DATA INTEGRITY EXCELLENT")
  ./data_integrity_monitoring.py:149:            print("   ✅ USER ISOLATION VERIFIED") 
  ./data_integrity_monitoring.py:150:            print("   ✅ FINANCIAL DATA ACCURATE AND RELIABLE")
  ./data_integrity_monitoring.py:153:            print("   ⚠️ Minor issues detected but system functional")
  ./data_integrity_monitoring.py:161:        print("\n🎉 DATA INTEGRITY SYSTEM FULLY OPERATIONAL")
  ./data_integrity_monitoring.py:163:        print("\n⚠️ System functional but requires monitoring")
  ./master_uat_audit.py:66:        print("🔍 FINBRAIN COMPREHENSIVE END-TO-END UAT AUDIT")
  ./master_uat_audit.py:67:        print("=" * 60)
  ./master_uat_audit.py:68:        print(f"Audit Started: {self.audit_start_time}")
  ./master_uat_audit.py:69:        print(f"Test User ID: {self.test_user_id}")
  ./master_uat_audit.py:70:        print()
  ./master_uat_audit.py:98:        print(f"{status_icon} {category}: {test_name} ({score:.1f}/100)")
  ./master_uat_audit.py:100:            print(f"   {details}")
  ./master_uat_audit.py:103:                print(f"   ERROR: {error}")
  ./master_uat_audit.py:107:        print("\n🔄 DATA HANDLING VALIDATION")
  ./master_uat_audit.py:108:        print("-" * 40)
  ./master_uat_audit.py:277:        print("\n🚦 ROUTING SYSTEM VALIDATION") 
  ./master_uat_audit.py:278:        print("-" * 40)
  ./master_uat_audit.py:392:        print("\n⚙️ PROCESSING SYSTEM VALIDATION")
  ./master_uat_audit.py:393:        print("-" * 40)
  ./master_uat_audit.py:523:        print("\n💾 STORAGE SYSTEM VALIDATION")
  ./master_uat_audit.py:524:        print("-" * 40)
  ./master_uat_audit.py:663:        print("\n🔒 DATA INTEGRITY VALIDATION")
  ./master_uat_audit.py:664:        print("-" * 40)
  ./master_uat_audit.py:799:        print("\n👥 USER CATEGORY VALIDATION")
  ./master_uat_audit.py:800:        print("-" * 40)
  ./master_uat_audit.py:1093:            print("\n" + "="*60)
  ./master_uat_audit.py:1094:            print("🎯 AUDIT COMPLETE - EXECUTIVE SUMMARY")
  ./master_uat_audit.py:1095:            print("="*60)
  ./master_uat_audit.py:1096:            print(f"Overall Score: {report['executive_summary']['overall_score']}/100")
  ./master_uat_audit.py:1097:            print(f"Deployment Decision: {report['executive_summary']['deployment_decision']}")
  ./master_uat_audit.py:1098:            print(f"Tests: {report['executive_summary']['passed_tests']}/{report['executive_summary']['total_tests']} passed")
  ./master_uat_audit.py:1099:            print(f"Critical Issues: {report['executive_summary']['critical_issues_count']}")
  ./master_uat_audit.py:1101:            print("\nCategory Breakdown:")
  ./master_uat_audit.py:1104:                print(f"{status_icon} {category}: {results['score']}/100")
  ./master_uat_audit.py:1107:                print(f"\n🚨 Critical Issues ({len(self.critical_issues)}):")
  ./master_uat_audit.py:1109:                    print(f"   • {issue}")
  ./master_uat_audit.py:1116:            print(f"\n📄 Full report saved: {report_filename}")
  ./master_uat_audit.py:1121:            print(f"\n❌ AUDIT FAILED: {str(e)}")
  ./master_uat_audit.py:1122:            print(traceback.format_exc())
  ./phase_e_audit_runner.py:25:        print("🔍 PHASE E FOCUSED AUDIT RUNNER")
  ./phase_e_audit_runner.py:26:        print("=" * 50)
  ./phase_e_audit_runner.py:27:        print("Testing: Data Handling | Processing | Integrity")
  ./phase_e_audit_runner.py:28:        print()
  ./phase_e_audit_runner.py:40:            print(f"🧪 Running: {test_name}")
  ./phase_e_audit_runner.py:50:                print(f"   {status}")
  ./phase_e_audit_runner.py:59:                print(f"   ❌ FAIL: {str(e)}")
  ./phase_e_audit_runner.py:511:        print(f"\n🎯 PHASE E AUDIT SUMMARY")
  ./phase_e_audit_runner.py:512:        print("=" * 40)
  ./phase_e_audit_runner.py:513:        print(f"📊 Success Rate: {summary['overall_success_rate']:.1f}%")
  ./phase_e_audit_runner.py:514:        print(f"✅ Categories Passed: {summary['categories_passed']}/{summary['total_test_categories']}")
  ./phase_e_audit_runner.py:515:        print(f"🚨 Critical Issues: {summary['critical_failures']}")
  ./phase_e_audit_runner.py:516:        print(f"🚀 Deployment Ready: {'YES' if summary['deployment_ready'] else 'NO'}")
  ./phase_e_audit_runner.py:518:        print(f"\n🔍 DEPLOYMENT ASSESSMENT")
  ./phase_e_audit_runner.py:519:        print(f"Status: {assessment['readiness_status']}")
  ./phase_e_audit_runner.py:520:        print(f"Confidence: {assessment['confidence_level']}")
  ./phase_e_audit_runner.py:523:            print("Blocking Issues:")
  ./phase_e_audit_runner.py:525:                print(f"  • {issue}")
  ./phase_e_audit_runner.py:527:        print(f"\nRecommendations:")
  ./phase_e_audit_runner.py:529:            print(f"  {rec}")
  ./phase_e_audit_runner.py:535:        print(f"\n📄 Detailed audit report: phase_e_focused_audit_report.json")
  ./phase_e_audit_runner.py:540:        print(f"❌ Audit execution failed: {e}")
  ./test_nl_parser.py:147:        print("🧪 Starting Natural Language Parser Test Suite...")
  ./test_nl_parser.py:148:        print("=" * 60)
  ./test_nl_parser.py:154:            print(f"Running test {i}/{self.total_tests}: {test_case['input_text'][:50]}...")
  ./test_nl_parser.py:165:            print(f"  {status} (Score: {result['overall_score']:.2f})")
  ./test_nl_parser.py:234:        print("\n" + "=" * 60)
  ./test_nl_parser.py:235:        print("🎯 NATURAL LANGUAGE PARSER TEST RESULTS")
  ./test_nl_parser.py:236:        print("=" * 60)
  ./test_nl_parser.py:241:        print(f"📊 OVERALL PERFORMANCE")
  ./test_nl_parser.py:242:        print(f"   Tests Passed: {summary['passed_tests']}/{summary['total_tests']} ({summary['overall_accuracy']:.1f}%)")
  ./test_nl_parser.py:243:        print(f"   Target Met: {'✅ YES' if targets['overall_target_met'] else '❌ NO'} (≥90% required)")
  ./test_nl_parser.py:245:        print(f"\n📏 DETAILED METRICS")
  ./test_nl_parser.py:246:        print(f"   Amount Extraction: {summary['amount_accuracy']:.1f}% {'✅' if targets['amount_target_met'] else '❌'} (≥95% required)")
  ./test_nl_parser.py:247:        print(f"   Category Classification: {summary['category_accuracy']:.1f}% {'✅' if targets['category_target_met'] else '❌'} (≥85% required)")
  ./test_nl_parser.py:248:        print(f"   Language Detection: {summary['language_accuracy']:.1f}% {'✅' if targets['language_target_met'] else '❌'} (≥95% required)")
  ./test_nl_parser.py:249:        print(f"   Confidence Calibration: {summary['confidence_accuracy']:.1f}% {'✅' if targets['confidence_target_met'] else '❌'} (≥80% required)")
  ./test_nl_parser.py:250:        print(f"   Fallback Rate: {summary['fallback_rate']:.1f}% {'✅' if targets['fallback_target_met'] else '❌'} (<10% required)")
  ./test_nl_parser.py:252:        print(f"\n🌐 LANGUAGE PERFORMANCE")
  ./test_nl_parser.py:254:        print(f"   Bangla: {lang_perf['bangla_accuracy']:.1f}%")
  ./test_nl_parser.py:255:        print(f"   English: {lang_perf['english_accuracy']:.1f}%")
  ./test_nl_parser.py:256:        print(f"   Mixed: {lang_perf['mixed_accuracy']:.1f}%")
  ./test_nl_parser.py:259:            print(f"\n❌ FAILED CASES: {report['failed_cases']}")
  ./test_nl_parser.py:262:                print(f"   {i}. \"{case['input_text'][:40]}...\" (Score: {case['overall_score']:.2f})")
  ./test_nl_parser.py:266:        print(f"\n🚀 PRODUCTION READINESS")
  ./test_nl_parser.py:267:        print(f"   Status: {'✅ READY' if all_targets_met else '❌ NOT READY'}")
  ./test_nl_parser.py:268:        print(f"   Recommendation: {'Deploy to production' if all_targets_met else 'Requires improvement before deployment'}")
  ./test_nl_parser.py:282:        print(f"\n📄 Detailed results saved to: test_results.json")
  ./test_nl_parser.py:289:        print(f"❌ Test execution failed: {e}")
  ./tools/migrate_assets_supabase.py:144:                print(json.dumps(result))
  ./tools/migrate_assets_supabase.py:174:            print(f"DRY RUN: Would migrate files from {src_path} to Supabase bucket '{migrator.bucket}' with user prefix '{args.user_id}'")
  ./tools/migrate_assets_supabase.py:182:                    print(json.dumps({
  ./tools/migrate_assets_supabase.py:192:        print(f"Starting migration from {src_path} to Supabase bucket '{migrator.bucket}'")
  ./tools/migrate_assets_supabase.py:193:        print(f"User ID prefix: {args.user_id}")
  ./tools/migrate_assets_supabase.py:194:        print("=" * 50)
  ./tools/migrate_assets_supabase.py:198:        print("=" * 50)
  ./tools/migrate_assets_supabase.py:199:        print("Migration Summary:")
  ./tools/migrate_assets_supabase.py:200:        print(json.dumps(summary["migration_summary"], indent=2))
  ./tools/migrate_assets_supabase.py:207:        print(json.dumps({
  ./milestone_focused_audit.py:18:    print("🎯 MILESTONE COACHING SYSTEM - FOCUSED AUDIT")
  ./milestone_focused_audit.py:19:    print("=" * 60)
  ./milestone_focused_audit.py:20:    print(f"Timestamp: {datetime.now().isoformat()}")
  ./milestone_focused_audit.py:21:    print("=" * 60)
  ./milestone_focused_audit.py:41:            print("\n🧪 TEST 1: MILESTONE DETECTION LOGIC")
  ./milestone_focused_audit.py:42:            print("-" * 40)
  ./milestone_focused_audit.py:52:            print("  📊 1.1: Testing streak calculation...")
  ./milestone_focused_audit.py:81:            print(f"     Expected streak: 3, Calculated: {calculated_streak}")
  ./milestone_focused_audit.py:82:            print(f"     {'✅ PASS' if streak_correct else '❌ FAIL'} - Streak Calculation")
  ./milestone_focused_audit.py:91:            print("  🎯 1.2: Testing streak-3 milestone triggering...")
  ./milestone_focused_audit.py:104:            print(f"     Milestone message: {'Present' if has_streak_milestone else 'Missing'}")
  ./milestone_focused_audit.py:105:            print(f"     Database record: {'Present' if streak_milestone_db else 'Missing'}")
  ./milestone_focused_audit.py:106:            print(f"     {'✅ PASS' if streak_milestone_valid else '❌ FAIL'} - Streak-3 Milestone")
  ./milestone_focused_audit.py:116:            print("\n🎯 TEST 2: 10-LOGS MILESTONE LOGIC")
  ./milestone_focused_audit.py:117:            print("-" * 40)
  ./milestone_focused_audit.py:126:            print("  📊 2.1: Creating 10 expense logs...")
  ./milestone_focused_audit.py:153:            print(f"     Expected logs: 10, Actual: {total_logs}")
  ./milestone_focused_audit.py:154:            print(f"     {'✅ PASS' if logs_count_correct else '❌ FAIL'} - Log Count")
  ./milestone_focused_audit.py:157:            print("  🎯 2.2: Testing 10-logs milestone...")
  ./milestone_focused_audit.py:170:            print(f"     Milestone message: {'Present' if has_logs_milestone else 'Missing'}")
  ./milestone_focused_audit.py:171:            print(f"     Database record: {'Present' if logs_milestone_db else 'Missing'}")
  ./milestone_focused_audit.py:172:            print(f"     {'✅ PASS' if logs_milestone_valid else '❌ FAIL'} - 10-logs Milestone")
  ./milestone_focused_audit.py:183:            print("\n🚫 TEST 3: DAILY CAP ENFORCEMENT")
  ./milestone_focused_audit.py:184:            print("-" * 40)
  ./milestone_focused_audit.py:216:            print("  🎯 3.1: First milestone trigger...")
  ./milestone_focused_audit.py:222:            print(f"     First trigger: {'Success' if first_has_milestone else 'Failed'}")
  ./milestone_focused_audit.py:224:            print("  🚫 3.2: Second milestone (should be blocked)...")
  ./milestone_focused_audit.py:232:            print(f"     Second trigger: {'Blocked' if not second_has_milestone else 'Failed to block'}")
  ./milestone_focused_audit.py:233:            print(f"     {'✅ PASS' if daily_cap_working else '❌ FAIL'} - Daily Cap")
  ./milestone_focused_audit.py:243:            print("\n💾 TEST 4: DATABASE CONSTRAINTS")
  ./milestone_focused_audit.py:244:            print("-" * 40)
  ./milestone_focused_audit.py:252:            print("  🔒 4.1: Unique constraint enforcement...")
  ./milestone_focused_audit.py:280:            print(f"     {'✅ PASS' if duplicate_blocked else '❌ FAIL'} - Unique Constraint")
  ./milestone_focused_audit.py:288:            print("\n🧹 CLEANING UP TEST DATA...")
  ./milestone_focused_audit.py:295:            print("     ✅ Test data cleaned")
  ./milestone_focused_audit.py:298:            print("\n📋 GENERATING AUDIT SUMMARY")
  ./milestone_focused_audit.py:299:            print("-" * 40)
  ./milestone_focused_audit.py:329:        print(f"\n❌ CRITICAL AUDIT ERROR: {e}")
  ./milestone_focused_audit.py:347:    print("\n" + "=" * 60)
  ./milestone_focused_audit.py:348:    print("🎯 MILESTONE COACHING SYSTEM - FOCUSED AUDIT REPORT")
  ./milestone_focused_audit.py:349:    print("=" * 60)
  ./milestone_focused_audit.py:353:    print(f"\n📊 EXECUTIVE SUMMARY")
  ./milestone_focused_audit.py:354:    print(f"Overall Status: {summary.get('overall_status', 'UNKNOWN')}")
  ./milestone_focused_audit.py:355:    print(f"Pass Rate: {summary.get('pass_rate', 0):.1f}% ({summary.get('passed_tests', 0)}/{summary.get('total_tests', 0)} tests)")
  ./milestone_focused_audit.py:356:    print(f"Deployment Ready: {'✅ YES' if summary.get('deployment_ready', False) else '❌ NO'}")
  ./milestone_focused_audit.py:358:    print(f"\n🔍 DETAILED RESULTS")
  ./milestone_focused_audit.py:359:    print("-" * 30)
  ./milestone_focused_audit.py:365:        print(f"{emoji} {test_name.upper()}: {status}")
  ./milestone_focused_audit.py:369:        print(f"\n🚨 CRITICAL ERROR")
  ./milestone_focused_audit.py:370:        print(f"Error: {results['critical_error']['error']}")
  ./milestone_focused_audit.py:373:    print(f"\n💡 DEPLOYMENT RECOMMENDATION")
  ./milestone_focused_audit.py:374:    print("-" * 35)
  ./milestone_focused_audit.py:377:        print("✅ MILESTONE SYSTEM READY FOR DEPLOYMENT")
  ./milestone_focused_audit.py:378:        print("   • All core functionality validated")
  ./milestone_focused_audit.py:379:        print("   • Database constraints working")
  ./milestone_focused_audit.py:380:        print("   • Daily caps enforced")
  ./milestone_focused_audit.py:381:        print("   • Milestone detection accurate")
  ./milestone_focused_audit.py:383:        print("❌ MILESTONE SYSTEM NOT READY FOR DEPLOYMENT")
  ./milestone_focused_audit.py:384:        print("   • Fix failing tests before deployment")
  ./milestone_focused_audit.py:385:        print("   • Re-run audit after fixes")
  ./milestone_focused_audit.py:387:    print(f"\n🕐 AUDIT COMPLETED: {summary.get('timestamp', 'Unknown')}")
  ./milestone_focused_audit.py:388:    print("=" * 60)
  ./milestone_focused_audit.py:401:    print(f"\n💾 Audit results saved to: milestone_focused_audit.json")
  ./milestone_focused_audit.py:405:        print("\n🚀 MILESTONE SYSTEM: DEPLOYMENT APPROVED")
  ./milestone_focused_audit.py:408:        print("\n⚠️  MILESTONE SYSTEM: DEPLOYMENT PENDING")
  ./verify_backend.py:33:        print(f"✅ {name} matches: {api_value}")
  ./verify_backend.py:35:        print(f"❌ {name} mismatch! API={api_value}, DB={db_value}")
  ./verify_backend.py:43:    print("Propose Expense:", r)
  ./verify_backend.py:50:    print("Get Totals API Response Status:", api.status_code)
  ./verify_backend.py:53:        print("✅ Auth protection working - get_totals requires session")
  ./verify_backend.py:72:    print("Get Recent Expenses API Response Status:", api.status_code)
  ./verify_backend.py:75:        print("✅ Auth protection working - get_recent_expenses requires session")
  ./verify_backend.py:85:        print("Recent (API):", api_data)
  ./verify_backend.py:86:        print("Recent (DB):", db_rows)
  ./verify_backend.py:89:    print("\n🔍 Direct DB Verification:")
  ./verify_backend.py:94:    print(f"✅ Total expenses in DB: {expense_count}")
  ./verify_backend.py:99:    print(f"✅ Total users in DB: {user_count}")
  ./verify_backend.py:105:        print(f"✅ Test user found: {user_data[0]}")
  ./verify_backend.py:107:        print(f"⚠️ Test user not found: {TEST_USER_HASH}")
  ./verify_backend.py:113:    print("🔍 Running Backend Verification...")
  ./verify_backend.py:118:    print("✅ Verification Complete")
  ./alembic/env.py:38:    print(f"Warning: Could not import models: {e}")
  ./ui_guardrails_validation.py:107:                    print(f"Warning: Could not scan {file_path}: {e}")
  ./ui_guardrails_validation.py:110:            print(f"Warning: Could not process pattern {file_pattern}: {e}")
  ./ui_guardrails_validation.py:129:                print(f"❌ Missing required endpoint: {endpoint}")
  ./ui_guardrails_validation.py:132:        print("✅ All approved API endpoints exist and are secured")
  ./ui_guardrails_validation.py:136:        print(f"❌ Could not verify endpoints: {e}")
  ./ui_guardrails_validation.py:154:                print(f"❌ Missing security pattern: {pattern}")
  ./ui_guardrails_validation.py:157:        print("✅ Backend endpoints use proper security patterns")
  ./ui_guardrails_validation.py:161:        print(f"❌ Could not verify backend security: {e}")
  ./ui_guardrails_validation.py:166:    print("🔒 UI Guardrails Validation")
  ./ui_guardrails_validation.py:167:    print("=" * 50)
  ./ui_guardrails_validation.py:172:    print("\n📋 1) Scanning UI files for guardrail violations...")
  ./ui_guardrails_validation.py:176:        print(f"❌ Found {len(violations)} UI guardrail violations:")
  ./ui_guardrails_validation.py:178:            print(f"   {file_line}: {violation_type}")
  ./ui_guardrails_validation.py:179:            print(f"      Code: {content}")
  ./ui_guardrails_validation.py:182:        print("✅ No UI guardrail violations found")
  ./ui_guardrails_validation.py:185:    print("\n🎯 2) Verifying approved API endpoints...")
  ./ui_guardrails_validation.py:190:    print("\n🔐 3) Verifying backend endpoint security...")
  ./ui_guardrails_validation.py:195:    print("\n" + "=" * 50)
  ./ui_guardrails_validation.py:197:        print("🎉 UI GUARDRAILS VALIDATION PASSED")
  ./ui_guardrails_validation.py:198:        print("✅ Frontend can only access approved API endpoints")
  ./ui_guardrails_validation.py:199:        print("✅ All data flows through session-authenticated backend")
  ./ui_guardrails_validation.py:200:        print("✅ No direct database access from UI components")
  ./ui_guardrails_validation.py:203:        print("💥 UI GUARDRAILS VALIDATION FAILED")
  ./ui_guardrails_validation.py:204:        print("🚫 Frontend has direct database access violations")
  ./ui_guardrails_validation.py:205:        print("🔧 Fix violations to ensure data security")
  ./test_standardized_error_handling.py:317:    print("\n=== DEMO: Field Validation Error System ===")
  ./test_standardized_error_handling.py:320:    print("\n1. Testing invalid expense data:")
  ./test_standardized_error_handling.py:330:        print(f"Status Code: {status_code}")
  ./test_standardized_error_handling.py:331:        print(f"Response: {json.dumps(response, indent=2)}")
  ./test_standardized_error_handling.py:334:    print("\n2. Testing invalid login data:")
  ./test_standardized_error_handling.py:343:        print(f"Status Code: {status_code}")
  ./test_standardized_error_handling.py:344:        print(f"Response: {json.dumps(response, indent=2)}")
  ./test_standardized_error_handling.py:347:    print("\n3. Testing valid expense data:")
  ./test_standardized_error_handling.py:361:        print(f"Response: {json.dumps(response, indent=2)}")
  ./test_standardized_error_handling.py:364:    print("🧪 STANDARDIZED ERROR HANDLING SYSTEM TEST SUITE")
  ./test_standardized_error_handling.py:365:    print("=" * 60)
  ./test_standardized_error_handling.py:374:    print(f"\n📊 TEST RESULTS SUMMARY:")
  ./test_standardized_error_handling.py:375:    print(f"Tests run: {test_result.testsRun}")
  ./test_standardized_error_handling.py:376:    print(f"Failures: {len(test_result.failures)}")
  ./test_standardized_error_handling.py:377:    print(f"Errors: {len(test_result.errors)}")
  ./test_standardized_error_handling.py:380:        print("✅ ALL TESTS PASSED - Standardized error handling system is working correctly!")
  ./test_standardized_error_handling.py:382:        print("❌ SOME TESTS FAILED - Review the output above for details")
  ./test_standardized_error_handling.py:384:    print("\n🎯 IMPLEMENTATION COMPLETE:")
  ./test_standardized_error_handling.py:385:    print("✅ Standardized error response format")
  ./test_standardized_error_handling.py:386:    print("✅ Comprehensive input validation")
  ./test_standardized_error_handling.py:387:    print("✅ Field-specific error messages") 
  ./test_standardized_error_handling.py:388:    print("✅ Security sanitization")
  ./test_standardized_error_handling.py:389:    print("✅ Structured logging with trace IDs")
  ./test_standardized_error_handling.py:390:    print("✅ Updated all API endpoints")
  ./test_standardized_error_handling.py:391:    print("✅ Test validation system")
  ./fix_all_hashing.py:46:            print(f"Updated: {file_path}")
  ./fix_all_hashing.py:49:            print(f"No changes needed: {file_path}")
  ./fix_all_hashing.py:53:        print(f"Error updating {file_path}: {e}")
  ./fix_all_hashing.py:81:    print("Fixing hash function calls across the codebase...")
  ./fix_all_hashing.py:87:            print(f"File not found: {file_path}")
  ./fix_all_hashing.py:89:    print("\nDone! All hash function calls should now use ensure_hashed()")
  ./utils/quick_reply_system.py:194:    print("=== QUICK REPLY SYSTEM TEST ===")
  ./utils/quick_reply_system.py:211:        print(f"Original: '{reply['title']}' → Validated: '{validated_reply['title']}'")
  ./utils/quick_reply_system.py:215:        print(f"\n{reply_set}: {len(replies)} options")
  ./utils/quick_reply_system.py:217:            print(f"  - {reply['title']} ({reply['payload']})")
  ./utils/quick_reply_system.py:219:    print("\n✅ Quick reply system tested successfully")
  ./FINAL_PRODUCTION_TEST.py:15:        print("🎯 FINAL PRODUCTION TEST")
  ./FINAL_PRODUCTION_TEST.py:16:        print("=" * 40)
  ./FINAL_PRODUCTION_TEST.py:32:            print(f"\n{i}. Testing: '{msg}'")
  ./FINAL_PRODUCTION_TEST.py:41:                print(f"   Response: {response}")
  ./FINAL_PRODUCTION_TEST.py:42:                print(f"   Intent: {intent}")
  ./FINAL_PRODUCTION_TEST.py:50:                    print(f"   ✅ SUCCESS: Real data found")
  ./FINAL_PRODUCTION_TEST.py:52:                    print(f"   ❌ FAILED: No real data or fallback response")
  ./FINAL_PRODUCTION_TEST.py:55:                print(f"   ❌ ERROR: {e}")
  ./FINAL_PRODUCTION_TEST.py:57:        print(f"\n🎯 PRODUCTION STATUS: READY FOR USER TESTING")
  ./utils/ai_context_adapter.py:265:    print("=== CONTEXT-DRIVEN AI TEST ===")
  ./utils/ai_context_adapter.py:268:    print("\n1. Thin Context Test:")
  ./utils/ai_context_adapter.py:278:    print(f"   Context is thin: {is_context_thin(thin_context)}")
  ./utils/ai_context_adapter.py:280:    print(f"   Guard message: {message}")
  ./utils/ai_context_adapter.py:281:    print(f"   Quick replies: {[r['title'] for r in replies]}")
  ./utils/ai_context_adapter.py:284:    print("\n2. Rich Context Test:")
  ./utils/ai_context_adapter.py:297:    print(f"   Context is thin: {is_context_thin(rich_context)}")
  ./utils/ai_context_adapter.py:299:    print(f"   AI format: {ai_format[:150]}...")
  ./utils/ai_context_adapter.py:302:    print("\n3. Response Schema Test:")
  ./utils/ai_context_adapter.py:303:    print(f"   Required fields: {RESPONSE_SCHEMA['required']}")
  ./utils/ai_context_adapter.py:304:    print(f"   Summary type: {RESPONSE_SCHEMA['properties']['summary']['type']}")
  ./utils/ai_context_adapter.py:306:    print("\n✅ Context-driven AI system tested successfully")
  ./utils/message_handlers.py:164:    print("=== ENHANCED MESSAGING TEST ===")
  ./utils/message_handlers.py:176:        print(f"'{expense}' → Category: {cat}, Amount: {amt}")
  ./utils/message_handlers.py:181:    print(f"\nFallback message: {fallback}")
  ./utils/message_handlers.py:187:    print(f"\nUX Metrics: {metrics}")
  ./utils/message_handlers.py:189:    print("✅ Enhanced messaging components tested successfully")
  ./utils/comprehensive_uat_block6.py:576:        print("\n" + "="*80)
  ./utils/comprehensive_uat_block6.py:577:        print("🏆 BLOCK 6 - 3-DAY CHALLENGE: COMPREHENSIVE UAT AUDIT REPORT")
  ./utils/comprehensive_uat_block6.py:578:        print("="*80)
  ./utils/comprehensive_uat_block6.py:581:        print(f"📊 EXECUTION SUMMARY:")
  ./utils/comprehensive_uat_block6.py:582:        print(f"   Total Tests: {summary['total_tests']}")
  ./utils/comprehensive_uat_block6.py:583:        print(f"   Passed: {summary['passed_tests']}")
  ./utils/comprehensive_uat_block6.py:584:        print(f"   Failed: {summary['failed_tests']}")
  ./utils/comprehensive_uat_block6.py:585:        print(f"   Pass Rate: {summary['pass_rate_percent']}%")
  ./utils/comprehensive_uat_block6.py:586:        print(f"   Execution Time: {summary['total_execution_time_ms']:.2f}ms")
  ./utils/comprehensive_uat_block6.py:589:        print(f"\n🚀 DEPLOYMENT READINESS:")
  ./utils/comprehensive_uat_block6.py:590:        print(f"   Ready: {'✅ YES' if deployment['ready_for_deployment'] else '❌ NO'}")
  ./utils/comprehensive_uat_block6.py:591:        print(f"   Performance: {'✅ ACCEPTABLE' if deployment['performance_acceptable'] else '❌ SLOW'}")
  ./utils/comprehensive_uat_block6.py:592:        print(f"   Data Integrity: {'✅ CONFIRMED' if deployment['data_integrity_confirmed'] else '❌ ISSUES'}")
  ./utils/comprehensive_uat_block6.py:595:            print(f"\n⚠️  CRITICAL ISSUES:")
  ./utils/comprehensive_uat_block6.py:597:                print(f"   - {issue['test_name']}: {issue['details']}")
  ./utils/comprehensive_uat_block6.py:599:        print("\n" + "="*80)
  ./utils/context_packet.py:270:    print("=== CONTEXT PACKET SYSTEM TEST ===")
  ./utils/context_packet.py:300:    print(f"Thin context detection: {is_context_thin(thin_context)}")
  ./utils/context_packet.py:301:    print(f"Rich context detection: {is_context_thin(rich_context)}")
  ./utils/context_packet.py:305:    print(f"Thin context reply: {message}")
  ./utils/context_packet.py:306:    print(f"Quick replies: {[r['title'] for r in replies]}")
  ./utils/context_packet.py:310:    print(f"AI context format: {ai_context[:100]}...")
  ./utils/context_packet.py:312:    print("✅ Context packet system tested successfully")
  ./utils/context_integration.py:251:    print("=== CONTEXT INTEGRATION TEST ===")
  ./utils/context_integration.py:255:    print(f"✓ Processor initialized: {type(processor).__name__}")
  ./utils/context_integration.py:259:    print(f"✓ System prompt length: {len(CONTEXT_SYSTEM_PROMPT)} chars")
  ./utils/context_integration.py:260:    print(f"✓ Schema required fields: {RESPONSE_SCHEMA['required']}")
  ./utils/context_integration.py:265:        print(f"✓ Schema generation function: {generate_with_schema.__name__}")
  ./utils/context_integration.py:267:        print(f"⚠ Schema function not available: {e}")
  ./utils/context_integration.py:272:        print(f"✓ Quick reply system: {send_custom_quick_replies.__name__}")
  ./utils/context_integration.py:274:        print(f"⚠ Quick reply system not available: {e}")
  ./utils/context_integration.py:276:    print("\n✅ Context integration system ready for production")
  ./utils/block5_comprehensive_uat.py:49:        print("🏆 BLOCK 5 COMPREHENSIVE END-TO-END UAT")
  ./utils/block5_comprehensive_uat.py:50:        print("🔍 Data Handling • Routing • Processing • Storing • Integrity")
  ./utils/block5_comprehensive_uat.py:51:        print("👥 Existing Users • New Users • Future Users")
  ./utils/block5_comprehensive_uat.py:52:        print("="*100)
  ./utils/block5_comprehensive_uat.py:90:        print("\n🔧 PHASE 1: CORE ENDPOINT FUNCTIONALITY")
  ./utils/block5_comprehensive_uat.py:115:            print(f"   ✅ Endpoint accessible: {response.status_code} in {execution_time:.2f}ms")
  ./utils/block5_comprehensive_uat.py:130:            print(f"   ❌ Endpoint not accessible: {e}")
  ./utils/block5_comprehensive_uat.py:167:            print(f"   ✅ JSON structure valid: {exact_match}")
  ./utils/block5_comprehensive_uat.py:182:            print(f"   ❌ JSON structure invalid: {e}")
  ./utils/block5_comprehensive_uat.py:187:        print("\n🔗 PHASE 2: SYSTEM INTEGRATION")
  ./utils/block5_comprehensive_uat.py:227:            print(f"   ✅ Routing integration: {routes_work}")
  ./utils/block5_comprehensive_uat.py:242:            print(f"   ❌ Routing integration failed: {e}")
  ./utils/block5_comprehensive_uat.py:276:            print(f"   ✅ Middleware compatibility: {middleware_compatible}")
  ./utils/block5_comprehensive_uat.py:291:            print(f"   ❌ Middleware compatibility failed: {e}")
  ./utils/block5_comprehensive_uat.py:296:        print("\n👤 PHASE 3: EXISTING USERS IMPACT")
  ./utils/block5_comprehensive_uat.py:380:            print(f"   ✅ Existing user data integrity: {data_unchanged}")
  ./utils/block5_comprehensive_uat.py:418:                print(f"   ✅ Existing user reports work: {reports_still_work}")
  ./utils/block5_comprehensive_uat.py:433:                print(f"   ❌ Existing user reports failed: {e}")
  ./utils/block5_comprehensive_uat.py:436:            print(f"   ❌ Existing users test failed: {e}")
  ./utils/block5_comprehensive_uat.py:441:        print("\n👶 PHASE 4: NEW USERS IMPACT")
  ./utils/block5_comprehensive_uat.py:498:            print(f"   ✅ New user signup unaffected: {user_created_successfully}")
  ./utils/block5_comprehensive_uat.py:519:            print(f"   ✅ New user demo access: {demo_access_works}")
  ./utils/block5_comprehensive_uat.py:522:            print(f"   ❌ New users test failed: {e}")
  ./utils/block5_comprehensive_uat.py:527:        print("\n🔮 PHASE 5: FUTURE USERS IMPACT")
  ./utils/block5_comprehensive_uat.py:574:            print(f"   ✅ Future user scalability: {scalability_good} ({success_count}/10 success)")
  ./utils/block5_comprehensive_uat.py:589:            print(f"   ❌ Future user scalability failed: {e}")
  ./utils/block5_comprehensive_uat.py:594:        print("\n⚡ PHASE 6: PERFORMANCE & CONCURRENCY")
  ./utils/block5_comprehensive_uat.py:636:            print(f"   ✅ Concurrent access safety: {concurrency_safe}")
  ./utils/block5_comprehensive_uat.py:651:            print(f"   ❌ Concurrent access failed: {e}")
  ./utils/block5_comprehensive_uat.py:656:        print("\n🔒 PHASE 7: DATA INTEGRITY VALIDATION")
  ./utils/block5_comprehensive_uat.py:711:            print(f"   ✅ System data integrity: {data_integrity_intact}")
  ./utils/block5_comprehensive_uat.py:726:            print(f"   ❌ Data integrity test failed: {e}")
  ./utils/block5_comprehensive_uat.py:731:        print("\n🛡️ PHASE 8: SECURITY & ISOLATION")
  ./utils/block5_comprehensive_uat.py:780:            print(f"   ✅ Security compliance: {security_compliant}")
  ./utils/block5_comprehensive_uat.py:783:            print(f"   ❌ Security test failed: {e}")
  ./utils/block5_comprehensive_uat.py:788:        print("\n⚡ PHASE 9: CACHE BEHAVIOR")
  ./utils/block5_comprehensive_uat.py:840:            print(f"   ✅ Cache behavior: {cache_working}")
  ./utils/block5_comprehensive_uat.py:843:            print(f"   ❌ Cache test failed: {e}")
  ./utils/block5_comprehensive_uat.py:864:            print(f"\n🧹 Cleaned up {len(self.test_user_hashes)} test users")
  ./utils/block5_comprehensive_uat.py:867:            print(f"\n⚠️ Cleanup warning: {e}")
  ./utils/acceptance_criteria_validation.py:38:        print("🔍 VALIDATING AGAINST ACCEPTANCE CRITERIA")
  ./utils/acceptance_criteria_validation.py:39:        print("📋 Block 4 Growth Metrics + Block G Guardrails")
  ./utils/acceptance_criteria_validation.py:40:        print("="*80)
  ./utils/acceptance_criteria_validation.py:71:        print("\n1️⃣ VALIDATING DATA ANCHORS (MESSENGER DEMO MODE)")
  ./utils/acceptance_criteria_validation.py:120:            print(f"   ✅ First interaction timestamp: {validation_checks['first_interaction_timestamp']}")
  ./utils/acceptance_criteria_validation.py:121:            print(f"   ✅ Signup source messenger_demo: {validation_checks['signup_source_messenger_demo']}")
  ./utils/acceptance_criteria_validation.py:122:            print(f"   ✅ Timestamp persistence: {validation_checks['timestamp_not_overwritten']}")
  ./utils/acceptance_criteria_validation.py:133:            print(f"   ❌ Data anchors validation failed: {e}")
  ./utils/acceptance_criteria_validation.py:138:        print("\n2️⃣ VALIDATING D1 LOGGED ANALYTICS")
  ./utils/acceptance_criteria_validation.py:202:            print(f"   ✅ Expense logged successfully: {validation_checks['expense_logged_successfully']}")
  ./utils/acceptance_criteria_validation.py:203:            print(f"   ✅ D1 logged flipped: {validation_checks['d1_logged_flipped']}")
  ./utils/acceptance_criteria_validation.py:204:            print(f"   ✅ Same day calculation: {validation_checks['same_day_calculation']}")
  ./utils/acceptance_criteria_validation.py:205:            print(f"   ✅ Idempotency ready: {validation_checks['idempotency_ready']}")
  ./utils/acceptance_criteria_validation.py:216:            print(f"   ❌ D1 logged validation failed: {e}")
  ./utils/acceptance_criteria_validation.py:221:        print("\n3️⃣ VALIDATING D3 COMPLETED ANALYTICS")
  ./utils/acceptance_criteria_validation.py:289:            print(f"   ✅ Three expenses logged: {validation_checks['three_expenses_logged']}")
  ./utils/acceptance_criteria_validation.py:290:            print(f"   ✅ D3 completed flipped: {validation_checks['d3_completed_flipped']}")
  ./utils/acceptance_criteria_validation.py:291:            print(f"   ✅ Within 72h window: {validation_checks['within_72h_window']}")
  ./utils/acceptance_criteria_validation.py:292:            print(f"   ✅ Expense count correct: {validation_checks['expense_count_correct']}")
  ./utils/acceptance_criteria_validation.py:303:            print(f"   ❌ D3 completed validation failed: {e}")
  ./utils/acceptance_criteria_validation.py:308:        print("\n4️⃣ VALIDATING REPORTS REQUESTED ANALYTICS")
  ./utils/acceptance_criteria_validation.py:340:                print(f"   ⚠️ Handler test skipped: {handler_error}")
  ./utils/acceptance_criteria_validation.py:370:            print(f"   ✅ Report generated: {validation_checks['report_generated']}")
  ./utils/acceptance_criteria_validation.py:371:            print(f"   ✅ Counter incremented: {validation_checks['counter_incremented']}")
  ./utils/acceptance_criteria_validation.py:372:            print(f"   ✅ Counter persistence: {validation_checks['counter_persistence']}")
  ./utils/acceptance_criteria_validation.py:373:            print(f"   ✅ Multiple sessions ready: {validation_checks['multiple_sessions_ready']}")
  ./utils/acceptance_criteria_validation.py:384:            print(f"   ❌ Reports requested validation failed: {e}")
  ./utils/acceptance_criteria_validation.py:389:        print("\n5️⃣ VALIDATING SEPARATION OF PURPOSES")
  ./utils/acceptance_criteria_validation.py:425:            print(f"   ✅ Analytics fields exist: {validation_checks['analytics_fields_exist']}")
  ./utils/acceptance_criteria_validation.py:426:            print(f"   ✅ Milestone fields exist: {validation_checks['milestone_fields_exist']}")
  ./utils/acceptance_criteria_validation.py:427:            print(f"   ✅ Fields separated: {validation_checks['fields_separated']}")
  ./utils/acceptance_criteria_validation.py:428:            print(f"   ✅ No analytics→milestone trigger: {validation_checks['no_analytics_milestone_trigger']}")
  ./utils/acceptance_criteria_validation.py:439:            print(f"   ❌ Separation validation failed: {e}")
  ./utils/acceptance_criteria_validation.py:444:        print("\n6️⃣ VALIDATING STREAK INDEPENDENCE")
  ./utils/acceptance_criteria_validation.py:492:            print(f"   ✅ Streak calculated independently: {validation_checks['streak_calculated_independently']}")
  ./utils/acceptance_criteria_validation.py:493:            print(f"   ✅ D1/D3 no effect on streak: {validation_checks['d1_d3_no_effect_on_streak']}")
  ./utils/acceptance_criteria_validation.py:494:            print(f"   ✅ Consecutive days only: {validation_checks['consecutive_days_only']}")
  ./utils/acceptance_criteria_validation.py:495:            print(f"   ✅ Local calendar days: {validation_checks['local_calendar_days']}")
  ./utils/acceptance_criteria_validation.py:506:            print(f"   ❌ Streak independence validation failed: {e}")
  ./utils/acceptance_criteria_validation.py:511:        print("\n7️⃣ VALIDATING DAILY CAP (MILESTONES ONLY)")
  ./utils/acceptance_criteria_validation.py:543:            print(f"   ✅ Daily cap implemented: {validation_checks['daily_cap_implemented']}")
  ./utils/acceptance_criteria_validation.py:544:            print(f"   ✅ Max one milestone per day: {validation_checks['max_one_milestone_per_day']}")
  ./utils/acceptance_criteria_validation.py:545:            print(f"   ✅ Analytics not affected: {validation_checks['analytics_not_affected']}")
  ./utils/acceptance_criteria_validation.py:546:            print(f"   ✅ First milestone priority: {validation_checks['first_milestone_priority']}")
  ./utils/acceptance_criteria_validation.py:557:            print(f"   ❌ Daily cap validation failed: {e}")
  ./utils/acceptance_criteria_validation.py:562:        print("\n8️⃣ VALIDATING TELEMETRY NAMESPACING")
  ./utils/acceptance_criteria_validation.py:593:            print(f"   ✅ Analytics events defined: {validation_checks['analytics_events_defined']}")
  ./utils/acceptance_criteria_validation.py:594:            print(f"   ✅ Milestone events defined: {validation_checks['milestone_events_defined']}")
  ./utils/acceptance_criteria_validation.py:595:            print(f"   ✅ No event overlap: {validation_checks['no_event_overlap']}")
  ./utils/acceptance_criteria_validation.py:596:            print(f"   ✅ Namespacing clear: {validation_checks['namespacing_clear']}")
  ./utils/acceptance_criteria_validation.py:607:            print(f"   ❌ Telemetry namespacing validation failed: {e}")
  ./utils/acceptance_criteria_validation.py:612:        print("\n9️⃣ VALIDATING FEATURE FLAGS")
  ./utils/acceptance_criteria_validation.py:645:            print(f"   ✅ Analytics flag exists: {validation_checks['analytics_flag_exists']}")
  ./utils/acceptance_criteria_validation.py:646:            print(f"   ✅ Milestones flag exists: {validation_checks['milestones_flag_exists']}")
  ./utils/acceptance_criteria_validation.py:647:            print(f"   ✅ Independently toggleable: {validation_checks['independently_toggleable']}")
  ./utils/acceptance_criteria_validation.py:648:            print(f"   ✅ Analytics independent: {validation_checks['analytics_independent']}")
  ./utils/acceptance_criteria_validation.py:659:            print(f"   ❌ Feature flags validation failed: {e}")
  ./utils/acceptance_criteria_validation.py:664:        print("\n🔟 VALIDATING TIMEZONE HANDLING")
  ./utils/acceptance_criteria_validation.py:696:            print(f"   ✅ Asia/Dhaka timezone: {validation_checks['asia_dhaka_timezone']}")
  ./utils/acceptance_criteria_validation.py:697:            print(f"   ✅ Local calendar days: {validation_checks['local_calendar_days']}")
  ./utils/acceptance_criteria_validation.py:698:            print(f"   ✅ Edge case handling: {validation_checks['edge_case_handling']}")
  ./utils/acceptance_criteria_validation.py:699:            print(f"   ✅ Midnight buckets: {validation_checks['midnight_buckets']}")
  ./utils/acceptance_criteria_validation.py:710:            print(f"   ❌ Timezone handling validation failed: {e}")
  ./utils/acceptance_criteria_validation.py:715:        print("\n1️⃣1️⃣ VALIDATING IDEMPOTENCY & CONCURRENCY")
  ./utils/acceptance_criteria_validation.py:742:            print(f"   ✅ D1/D3 once per lifetime: {validation_checks['d1_d3_once_per_lifetime']}")
  ./utils/acceptance_criteria_validation.py:743:            print(f"   ✅ Milestones once per lifetime: {validation_checks['milestones_once_per_lifetime']}")
  ./utils/acceptance_criteria_validation.py:744:            print(f"   ✅ Daily cap enforced: {validation_checks['daily_cap_enforced']}")
  ./utils/acceptance_criteria_validation.py:745:            print(f"   ✅ Concurrent log protection: {validation_checks['concurrent_log_protection']}")
  ./utils/acceptance_criteria_validation.py:756:            print(f"   ❌ Idempotency validation failed: {e}")
  ./utils/acceptance_criteria_validation.py:761:        print("\n1️⃣2️⃣ VALIDATING NON-REGRESSIONS")
  ./utils/acceptance_criteria_validation.py:812:            print(f"   ✅ Expense logging works: {validation_checks['expense_logging_works']}")
  ./utils/acceptance_criteria_validation.py:813:            print(f"   ✅ Latency acceptable: {validation_checks['latency_acceptable']} ({latency:.2f}s)")
  ./utils/acceptance_criteria_validation.py:814:            print(f"   ✅ Report generation works: {validation_checks['report_generation_works']}")
  ./utils/acceptance_criteria_validation.py:815:            print(f"   ✅ Milestone independence: {validation_checks['milestone_independence']}")
  ./utils/acceptance_criteria_validation.py:826:            print(f"   ❌ Non-regressions validation failed: {e}")
  ./utils/acceptance_criteria_validation.py:929:            print(f"\n🧹 Cleaned up {len(self.test_user_hashes)} test users")
  ./utils/acceptance_criteria_validation.py:932:            print(f"\n⚠️ Cleanup warning: {e}")
  ./utils/absolute_final_validator.py:23:        print("🏆 ABSOLUTE FINAL 100% COMPLIANCE ACHIEVEMENT")
  ./utils/absolute_final_validator.py:24:        print("🔧 Definitive Fix with Proper Session Handling")
  ./utils/absolute_final_validator.py:25:        print("="*80)
  ./utils/absolute_final_validator.py:49:            print(f"   📝 Created test user with reports_requested: 0")
  ./utils/absolute_final_validator.py:52:            print(f"   🔄 Testing summary handler...")
  ./utils/absolute_final_validator.py:57:                print(f"   ✅ Summary handler executed successfully: {summary_success}")
  ./utils/absolute_final_validator.py:62:                print(f"   📊 Reports count after summary: {user_after_summary.reports_requested}")
  ./utils/absolute_final_validator.py:65:                print(f"   ❌ Summary handler failed: {e}")
  ./utils/absolute_final_validator.py:70:            print(f"   🔄 Testing insight handler...")
  ./utils/absolute_final_validator.py:75:                print(f"   ✅ Insight handler executed successfully: {insight_success}")
  ./utils/absolute_final_validator.py:80:                print(f"   📊 Reports count after insight: {user_after_insight.reports_requested}")
  ./utils/absolute_final_validator.py:83:                print(f"   ❌ Insight handler failed: {e}")
  ./utils/absolute_final_validator.py:92:            print(f"   🔄 Testing analytics engine directly...")
  ./utils/absolute_final_validator.py:108:                print(f"   ✅ Direct analytics test: {direct_result}, count: {initial_direct_count} → {final_direct_count}")
  ./utils/absolute_final_validator.py:111:                print(f"   ❌ Direct analytics test failed: {e}")
  ./utils/absolute_final_validator.py:124:            print(f"\n   📊 FINAL ASSESSMENT:")
  ./utils/absolute_final_validator.py:125:            print(f"   ✅ Summary handler works: {summary_success}")
  ./utils/absolute_final_validator.py:126:            print(f"   ✅ Insight handler works: {insight_success}")
  ./utils/absolute_final_validator.py:127:            print(f"   ✅ Analytics engine works: {analytics_engine_works}")
  ./utils/absolute_final_validator.py:128:            print(f"   ✅ Final reports count: {final_count}")
  ./utils/absolute_final_validator.py:129:            print(f"   ✅ System functioning: {system_working}")
  ./utils/absolute_final_validator.py:173:            print(f"   ❌ Absolute validation failed: {e}")
  ./utils/absolute_final_validator.py:202:            print(f"\n🧹 Cleaned up {len(self.test_user_hashes)} test users")
  ./utils/absolute_final_validator.py:205:            print(f"\n⚠️ Cleanup warning: {e}")
  ./utils/final_100_percent_validator.py:27:        print("🎯 FINAL 100% COMPLIANCE ACHIEVEMENT")
  ./utils/final_100_percent_validator.py:28:        print("🔧 Ultimate Fix for Insight Handler Signature Issue")
  ./utils/final_100_percent_validator.py:29:        print("="*80)
  ./utils/final_100_percent_validator.py:96:            print(f"   ✅ Summary handler works: {summary_success}")
  ./utils/final_100_percent_validator.py:97:            print(f"   ✅ Insight handler works: {insight_success}")
  ./utils/final_100_percent_validator.py:98:            print(f"   ✅ Summary counter incremented: {summary_counter_incremented}")
  ./utils/final_100_percent_validator.py:99:            print(f"   ✅ Insight counter incremented: {insight_counter_incremented}")
  ./utils/final_100_percent_validator.py:100:            print(f"   ✅ Final reports count: {final_reports_count} (target: ≥2)")
  ./utils/final_100_percent_validator.py:101:            print(f"   ✅ All validations pass: {all_validations_pass}")
  ./utils/final_100_percent_validator.py:136:            print(f"   ❌ Ultimate validation failed: {e}")
  ./utils/final_100_percent_validator.py:173:            print(f"\n🧹 Cleaned up {len(self.test_user_hashes)} test users")
  ./utils/final_100_percent_validator.py:176:            print(f"\n⚠️ Cleanup warning: {e}")
  ./utils/final_compliance_validator.py:38:        print("🎯 FINAL COMPLIANCE VALIDATION - 100% TARGET")
  ./utils/final_compliance_validator.py:39:        print("🔧 Fixing Reports Requested Analytics and Non-Regressions")
  ./utils/final_compliance_validator.py:40:        print("="*80)
  ./utils/final_compliance_validator.py:56:        print("\n1️⃣ ENHANCED REPORTS REQUESTED ANALYTICS VALIDATION")
  ./utils/final_compliance_validator.py:149:            print(f"   ✅ Summary handler works: {validation_checks['summary_handler_works']}")
  ./utils/final_compliance_validator.py:150:            print(f"   ✅ Insight handler works: {validation_checks['insight_handler_works']}")
  ./utils/final_compliance_validator.py:151:            print(f"   ✅ Counter increments: {validation_checks['counter_increments']}")
  ./utils/final_compliance_validator.py:152:            print(f"   ✅ Multiple reports tracked: {validation_checks['multiple_reports_tracked']}")
  ./utils/final_compliance_validator.py:153:            print(f"   ✅ Analytics integration: {validation_checks['analytics_integration']}")
  ./utils/final_compliance_validator.py:154:            print(f"   ✅ Counter persistence: {validation_checks['counter_persistence']}")
  ./utils/final_compliance_validator.py:155:            print(f"   ✅ Telemetry emission: {validation_checks['telemetry_emission']}")
  ./utils/final_compliance_validator.py:166:            print(f"   ❌ Enhanced reports validation failed: {e}")
  ./utils/final_compliance_validator.py:171:        print("\n2️⃣ ENHANCED NON-REGRESSIONS VALIDATION")
  ./utils/final_compliance_validator.py:296:            print(f"   ✅ Expense logging works: {validation_checks['expense_logging_works']}")
  ./utils/final_compliance_validator.py:297:            print(f"   ✅ Expense latency acceptable: {validation_checks['expense_latency_acceptable']} (avg: {avg_latency:.2f}s)")
  ./utils/final_compliance_validator.py:298:            print(f"   ✅ Report generation works: {validation_checks['report_generation_works']}")
  ./utils/final_compliance_validator.py:299:            print(f"   ✅ Report latency acceptable: {validation_checks['report_latency_acceptable']} (avg: {avg_report_latency:.2f}s)")
  ./utils/final_compliance_validator.py:300:            print(f"   ✅ Milestone independence: {validation_checks['milestone_independence']}")
  ./utils/final_compliance_validator.py:301:            print(f"   ✅ Analytics no impact: {validation_checks['analytics_no_impact']}")
  ./utils/final_compliance_validator.py:302:            print(f"   ✅ System stability: {validation_checks['system_stability']}")
  ./utils/final_compliance_validator.py:303:            print(f"   ✅ Data consistency: {validation_checks['data_consistency']}")
  ./utils/final_compliance_validator.py:314:            print(f"   ❌ Enhanced non-regressions validation failed: {e}")
  ./utils/final_compliance_validator.py:319:        print("\n3️⃣ VALIDATING ALL ORIGINAL CRITERIA (NO REGRESSIONS)")
  ./utils/final_compliance_validator.py:357:            print(f"   ✅ {criteria_id}: {description}")
  ./utils/final_compliance_validator.py:441:            print(f"\n🧹 Cleaned up {len(self.test_user_hashes)} test users")
  ./utils/final_compliance_validator.py:444:            print(f"\n⚠️ Cleanup warning: {e}")
