F401 [*] `typing.Tuple` imported but unused
  --> _quarantine/archive_deep_quarantine/finbrain_router_deprecated.py:11:20
   |
 9 | import logging
10 | import warnings
11 | from typing import Tuple, Optional
   |                    ^^^^^
12 |
13 | # Deprecation warning for this module
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> _quarantine/archive_deep_quarantine/finbrain_router_deprecated.py:11:27
   |
 9 | import logging
10 | import warnings
11 | from typing import Tuple, Optional
   |                           ^^^^^^^^
12 |
13 | # Deprecation warning for this module
   |
help: Remove unused import

F401 [*] `uuid` imported but unused
  --> _quarantine/archive_deep_quarantine/phase3_replay_debug.py:10:8
   |
 8 | import os
 9 | import json
10 | import uuid
   |        ^^^^
11 | from datetime import datetime
12 | from typing import Dict, Any, List, Optional
   |
help: Remove unused import: `uuid`

F841 Local variable `intent` is assigned to but never used
  --> _quarantine/archive_deep_quarantine/phase3_replay_debug.py:73:13
   |
71 |             # Extract key fields
72 |             confidence = cc_data['confidence']
73 |             intent = cc_data['intent'] 
   |             ^^^^^^
74 |             tau_high, tau_low = pca_flags.get_decision_thresholds()
   |
help: Remove assignment to unused variable `intent`

F811 Redefinition of unused `register_replay_routes` from line 139
   --> _quarantine/archive_deep_quarantine/phase3_replay_debug.py:226:5
    |
224 |     })
225 |
226 | def register_replay_routes(app):
    |     ^^^^^^^^^^^^^^^^^^^^^^
227 |     """Register replay routes with the Flask app"""
228 |     if replay_engine.replay_enabled:
    |
help: Remove definition: `register_replay_routes`

F541 [*] f-string without any placeholders
   --> _quarantine/archive_deep_quarantine/phase3_replay_debug.py:230:15
    |
228 |     if replay_engine.replay_enabled:
229 |         app.register_blueprint(replay_bp)
230 |         print(f"✅ Replay API registered at /api/replay/* (enabled)")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
231 |     else:
232 |         print(f"🔒 Replay API disabled (ENABLE_REPLAY=false)")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_deep_quarantine/phase3_replay_debug.py:232:15
    |
230 |         print(f"✅ Replay API registered at /api/replay/* (enabled)")
231 |     else:
232 |         print(f"🔒 Replay API disabled (ENABLE_REPLAY=false)")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
233 |
234 | if __name__ == "__main__":
    |
help: Remove extraneous `f` prefix

F401 [*] `os` imported but unused
  --> _quarantine/archive_deep_quarantine/phase4_enhanced_monitoring.py:8:8
   |
 7 | import sys
 8 | import os
   |        ^^
 9 | import json
10 | from datetime import datetime, timedelta
   |
help: Remove unused import: `os`

F401 [*] `datetime.timedelta` imported but unused
  --> _quarantine/archive_deep_quarantine/phase4_enhanced_monitoring.py:10:32
   |
 8 | import os
 9 | import json
10 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
11 | from typing import Dict, Any, List
12 | from flask import Blueprint, request, jsonify, render_template_string
   |
help: Remove unused import: `datetime.timedelta`

F401 [*] `typing.List` imported but unused
  --> _quarantine/archive_deep_quarantine/phase4_enhanced_monitoring.py:11:31
   |
 9 | import json
10 | from datetime import datetime, timedelta
11 | from typing import Dict, Any, List
   |                               ^^^^
12 | from flask import Blueprint, request, jsonify, render_template_string
   |
help: Remove unused import: `typing.List`

F401 [*] `flask.request` imported but unused
  --> _quarantine/archive_deep_quarantine/phase4_enhanced_monitoring.py:12:30
   |
10 | from datetime import datetime, timedelta
11 | from typing import Dict, Any, List
12 | from flask import Blueprint, request, jsonify, render_template_string
   |                              ^^^^^^^
13 |
14 | # Add project root to path
   |
help: Remove unused import

F401 [*] `flask.render_template_string` imported but unused
  --> _quarantine/archive_deep_quarantine/phase4_enhanced_monitoring.py:12:48
   |
10 | from datetime import datetime, timedelta
11 | from typing import Dict, Any, List
12 | from flask import Blueprint, request, jsonify, render_template_string
   |                                                ^^^^^^^^^^^^^^^^^^^^^^
13 |
14 | # Add project root to path
   |
help: Remove unused import

F541 [*] f-string without any placeholders
   --> _quarantine/archive_deep_quarantine/phase4_enhanced_monitoring.py:419:11
    |
417 |     """Register enhanced monitoring routes"""
418 |     app.register_blueprint(monitoring_bp)
419 |     print(f"✅ Enhanced monitoring registered at /api/monitoring/*")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
420 |
421 | if __name__ == "__main__":
    |
help: Remove extraneous `f` prefix

F401 [*] `os` imported but unused
  --> _quarantine/archive_deep_quarantine/phase5_production_blast.py:8:8
   |
 7 | import sys
 8 | import os
   |        ^^
 9 | import json
10 | from datetime import datetime, timedelta
   |
help: Remove unused import: `os`

F401 [*] `datetime.timedelta` imported but unused
  --> _quarantine/archive_deep_quarantine/phase5_production_blast.py:10:32
   |
 8 | import os
 9 | import json
10 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
11 | from typing import Dict, Any, List
12 | from flask import Blueprint, request, jsonify
   |
help: Remove unused import: `datetime.timedelta`

F401 [*] `typing.List` imported but unused
  --> _quarantine/archive_deep_quarantine/phase5_production_blast.py:11:31
   |
 9 | import json
10 | from datetime import datetime, timedelta
11 | from typing import Dict, Any, List
   |                               ^^^^
12 | from flask import Blueprint, request, jsonify
   |
help: Remove unused import: `typing.List`

F401 [*] `flask.request` imported but unused
  --> _quarantine/archive_deep_quarantine/phase5_production_blast.py:12:30
   |
10 | from datetime import datetime, timedelta
11 | from typing import Dict, Any, List
12 | from flask import Blueprint, request, jsonify
   |                              ^^^^^^^
13 |
14 | # Add project root to path
   |
help: Remove unused import: `flask.request`

F541 [*] f-string without any placeholders
   --> _quarantine/archive_deep_quarantine/phase5_production_blast.py:440:11
    |
438 |     """Register production blast management routes"""
439 |     app.register_blueprint(production_bp)
440 |     print(f"✅ Production blast management registered at /api/production/*")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
441 |
442 | if __name__ == "__main__":
    |
help: Remove extraneous `f` prefix

F401 [*] `utils.security.hash_psid` imported but unused
   --> _quarantine/archive_legacy/ai_adapter.py:377:36
    |
376 |         # Hash PSID for PII protection
377 |         from utils.security import hash_psid
    |                                    ^^^^^^^^^
378 |         psid_hash = resolve_user_id(psid=psid)
    |
help: Remove unused import: `utils.security.hash_psid`

F401 [*] `os` imported but unused
 --> _quarantine/archive_legacy/ai_adapter_gemini.py:5:8
  |
3 | Uses google-genai SDK with gemini-2.5-flash-lite model
4 | """
5 | import os
  |        ^^
6 | import time
7 | import logging
  |
help: Remove unused import: `os`

F401 `google.genai.types.GenerateContentConfig` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> _quarantine/archive_legacy/ai_adapter_gemini.py:17:40
   |
15 |     try:
16 |         from google.genai import Client
17 |         from google.genai.types import GenerateContentConfig
   |                                        ^^^^^^^^^^^^^^^^^^^^^
18 |         client = Client(api_key=GEMINI_API_KEY)
19 |     except ImportError as e:
   |
help: Remove unused import: `google.genai.types.GenerateContentConfig`

F401 [*] `os` imported but unused
 --> _quarantine/archive_legacy/ai_adapter_openai.py:5:8
  |
3 | Direct OpenAI integration with 3s timeout and immediate fallback
4 | """
5 | import os
  |        ^^
6 | import time
7 | import logging
  |
help: Remove unused import: `os`

invalid-syntax: Expected a statement
   --> _quarantine/archive_legacy/ai_expense_parser_broken.py:295:9
    |
293 |         return 'other'
294 |             
295 |         except Exception as e:
    |         ^^^^^^
296 |             self.logger.error(f"Fallback parsing error: {e}")
297 |             return {
    |

invalid-syntax: Expected a statement
   --> _quarantine/archive_legacy/ai_expense_parser_broken.py:295:26
    |
293 |         return 'other'
294 |             
295 |         except Exception as e:
    |                          ^^
296 |             self.logger.error(f"Fallback parsing error: {e}")
297 |             return {
    |

invalid-syntax: Expected an expression
   --> _quarantine/archive_legacy/ai_expense_parser_broken.py:295:31
    |
293 |         return 'other'
294 |             
295 |         except Exception as e:
    |                               ^
296 |             self.logger.error(f"Fallback parsing error: {e}")
297 |             return {
    |

invalid-syntax: Unexpected indentation
   --> _quarantine/archive_legacy/ai_expense_parser_broken.py:296:1
    |
295 |         except Exception as e:
296 |             self.logger.error(f"Fallback parsing error: {e}")
    | ^^^^^^^^^^^^
297 |             return {
298 |                 "success": False,
    |

invalid-syntax: Expected a statement
   --> _quarantine/archive_legacy/ai_expense_parser_broken.py:308:1
    |
307 | # Global instance
308 | ai_expense_parser = AIExpenseParser()
    | ^
    |

F401 [*] `typing.Optional` imported but unused
 --> _quarantine/archive_legacy/ai_onboarding_parser.py:5:31
  |
3 | """
4 | import logging
5 | from typing import Dict, Any, Optional
  |                               ^^^^^^^^
6 | from ai_adapter_gemini import generate_with_schema
  |
help: Remove unused import: `typing.Optional`

invalid-syntax: Unexpected indentation
   --> _quarantine/archive_legacy/background_processor_broken.py:444:1
    |
443 |             # Add top categories
444 |             sorted_categories = sorted(category_totals.items(), key=lambda x: x[1], reverse=True)
    | ^^^^^^^^^^^^
445 |             for category, amount in sorted_categories[:3]:
446 |                 summary_lines.append(f"• {category}: ৳{amount:.0f}")
    |

invalid-syntax: unindent does not match any outer indentation level
   --> _quarantine/archive_legacy/background_processor_broken.py:453:1
    |
451 |             return "\n".join(summary_lines)
452 |             
453 |         except Exception as e:
    | ^^^^^^^^
454 |             logger.error(f"Error generating deterministic summary: {str(e)}")
455 |             return "📊 Summary temporarily unavailable. Check your dashboard for details."
    |

invalid-syntax: Expected a statement
   --> _quarantine/archive_legacy/background_processor_broken.py:453:9
    |
451 |             return "\n".join(summary_lines)
452 |             
453 |         except Exception as e:
    |         ^^^^^^
454 |             logger.error(f"Error generating deterministic summary: {str(e)}")
455 |             return "📊 Summary temporarily unavailable. Check your dashboard for details."
    |

invalid-syntax: Expected a statement
   --> _quarantine/archive_legacy/background_processor_broken.py:453:26
    |
451 |             return "\n".join(summary_lines)
452 |             
453 |         except Exception as e:
    |                          ^^
454 |             logger.error(f"Error generating deterministic summary: {str(e)}")
455 |             return "📊 Summary temporarily unavailable. Check your dashboard for details."
    |

invalid-syntax: Expected an expression
   --> _quarantine/archive_legacy/background_processor_broken.py:453:31
    |
451 |             return "\n".join(summary_lines)
452 |             
453 |         except Exception as e:
    |                               ^
454 |             logger.error(f"Error generating deterministic summary: {str(e)}")
455 |             return "📊 Summary temporarily unavailable. Check your dashboard for details."
    |

invalid-syntax: Unexpected indentation
   --> _quarantine/archive_legacy/background_processor_broken.py:454:1
    |
453 |         except Exception as e:
454 |             logger.error(f"Error generating deterministic summary: {str(e)}")
    | ^^^^^^^^^^^^
455 |             return "📊 Summary temporarily unavailable. Check your dashboard for details."
    |

invalid-syntax: unindent does not match any outer indentation level
   --> _quarantine/archive_legacy/background_processor_broken.py:457:1
    |
455 |             return "📊 Summary temporarily unavailable. Check your dashboard for details."
456 |     
457 |     def _log_ai_rate_limit(self, rid: str, psid_hash: str, rate_limit_result) -> None:
    | ^^^^
458 |         """Log AI rate limit check with structured data"""
459 |         log_data = {
    |

invalid-syntax: unindent does not match any outer indentation level
   --> _quarantine/archive_legacy/background_processor_broken.py:474:5
    |
472 |             logger.warning(f"AI rate limited for PSID {psid_hash[:8]}...: {rate_limit_result.reason}")
473 |     
474 |     def _send_fallback_reply(self, psid: str, message: str) -> bool:
    |     ^
475 |         """Send fallback reply with error handling"""
476 |         try:
    |

invalid-syntax: unindent does not match any outer indentation level
   --> _quarantine/archive_legacy/background_processor_broken.py:482:5
    |
480 |             return False
481 |     
482 |     def get_stats(self) -> Dict[str, Any]:
    |     ^
483 |         """Get background processor statistics"""
484 |         ai_status = self.ai_adapter.get_status() if hasattr(self.ai_adapter, 'get_status') else {"enabled": False}
    |

invalid-syntax: unindent does not match any outer indentation level
   --> _quarantine/archive_legacy/background_processor_broken.py:492:1
    |
490 |         }
491 |     
492 |     def shutdown(self) -> None:
    | ^^^^
493 |         """Gracefully shutdown the background processor"""
494 |         logger.info("Shutting down background processor...")
    |

invalid-syntax: Expected dedent, found end of file
   --> _quarantine/archive_legacy/background_processor_broken.py:499:58
    |
498 | # Global background processor instance
499 | background_processor = BackgroundProcessor(max_workers=3)
    |                                                          ^
    |

F401 [*] `os` imported but unused
 --> _quarantine/archive_legacy/background_processor_corrupted.py:5:8
  |
3 | Handles webhook message processing with timeout protection and fallbacks
4 | """
5 | import os
  |        ^^
6 | import time
7 | import json
  |
help: Remove unused import: `os`

F401 [*] `threading` imported but unused
  --> _quarantine/archive_legacy/background_processor_corrupted.py:9:8
   |
 7 | import json
 8 | import logging
 9 | import threading
   |        ^^^^^^^^^
10 | import requests
11 | from datetime import datetime
   |
help: Remove unused import: `threading`

F401 [*] `requests` imported but unused
  --> _quarantine/archive_legacy/background_processor_corrupted.py:10:8
   |
 8 | import logging
 9 | import threading
10 | import requests
   |        ^^^^^^^^
11 | from datetime import datetime
12 | from concurrent.futures import ThreadPoolExecutor, TimeoutError as FutureTimeoutError
   |
help: Remove unused import: `requests`

F401 [*] `datetime.datetime` imported but unused
  --> _quarantine/archive_legacy/background_processor_corrupted.py:11:22
   |
 9 | import threading
10 | import requests
11 | from datetime import datetime
   |                      ^^^^^^^^
12 | from concurrent.futures import ThreadPoolExecutor, TimeoutError as FutureTimeoutError
13 | from queue import Queue, Empty
   |
help: Remove unused import: `datetime.datetime`

F401 [*] `concurrent.futures.TimeoutError` imported but unused
  --> _quarantine/archive_legacy/background_processor_corrupted.py:12:68
   |
10 | import requests
11 | from datetime import datetime
12 | from concurrent.futures import ThreadPoolExecutor, TimeoutError as FutureTimeoutError
   |                                                                    ^^^^^^^^^^^^^^^^^^
13 | from queue import Queue, Empty
14 | from dataclasses import dataclass
   |
help: Remove unused import: `concurrent.futures.TimeoutError`

F401 [*] `queue.Empty` imported but unused
  --> _quarantine/archive_legacy/background_processor_corrupted.py:13:26
   |
11 | from datetime import datetime
12 | from concurrent.futures import ThreadPoolExecutor, TimeoutError as FutureTimeoutError
13 | from queue import Queue, Empty
   |                          ^^^^^
14 | from dataclasses import dataclass
15 | from typing import Optional, Dict, Any, Tuple
   |
help: Remove unused import: `queue.Empty`

F401 [*] `.rate_limiter.check_rate_limit` imported but unused
  --> _quarantine/archive_legacy/background_processor_corrupted.py:19:27
   |
17 | from .logger import log_webhook_success, get_request_id
18 | from .security import hash_psid
19 | from .rate_limiter import check_rate_limit
   |                           ^^^^^^^^^^^^^^^^
20 | from .policy_guard import update_user_message_timestamp, is_within_24_hour_window
21 | from .facebook_handler import send_facebook_message
   |
help: Remove unused import: `.rate_limiter.check_rate_limit`

F841 Local variable `future` is assigned to but never used
  --> _quarantine/archive_legacy/background_processor_corrupted.py:68:13
   |
67 |             # Submit to thread pool
68 |             future = self.executor.submit(self._process_job_safe, job)
   |             ^^^^^^
69 |             
70 |             # Log successful enqueue
   |
help: Remove assignment to unused variable `future`

F401 [*] `utils.expense.process_expense_message` imported but unused
   --> _quarantine/archive_legacy/background_processor_corrupted.py:216:35
    |
214 |         """
215 |         from utils.parser import parse_expense
216 |         from utils.expense import process_expense_message
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^
217 |         from utils.categories import categorize_expense
218 |         from datetime import datetime, timedelta
    |
help: Remove unused import: `utils.expense.process_expense_message`

F811 [*] Redefinition of unused `datetime` from line 11
   --> _quarantine/archive_legacy/background_processor_corrupted.py:218:30
    |
216 |         from utils.expense import process_expense_message
217 |         from utils.categories import categorize_expense
218 |         from datetime import datetime, timedelta
    |                              ^^^^^^^^
219 |         from db_base import db
220 |         from models import Expense
    |
help: Remove definition: `datetime`

F401 [*] `datetime.timedelta` imported but unused
   --> _quarantine/archive_legacy/background_processor_corrupted.py:218:40
    |
216 |         from utils.expense import process_expense_message
217 |         from utils.categories import categorize_expense
218 |         from datetime import datetime, timedelta
    |                                        ^^^^^^^^^
219 |         from db_base import db
220 |         from models import Expense
    |
help: Remove unused import: `datetime.timedelta`

F823 Local variable `hash_psid` referenced before assignment
   --> _quarantine/archive_legacy/background_processor_corrupted.py:222:21
    |
220 |         from models import Expense
221 |         
222 |         psid_hash = hash_psid(psid)
    |                     ^^^^^^^^^
223 |         
224 |         # RL-2: Handle "summary" command during rate limiting
    |

F401 [*] `models.Expense` imported but unused
   --> _quarantine/archive_legacy/background_processor_corrupted.py:316:32
    |
314 |         try:
315 |             from db_base import db
316 |             from models import Expense
    |                                ^^^^^^^
317 |             from datetime import datetime, timedelta
318 |             from sqlalchemy import func, text
    |
help: Remove unused import: `models.Expense`

F401 [*] `sqlalchemy.func` imported but unused
   --> _quarantine/archive_legacy/background_processor_corrupted.py:318:36
    |
316 |             from models import Expense
317 |             from datetime import datetime, timedelta
318 |             from sqlalchemy import func, text
    |                                    ^^^^
319 |             
320 |             # Calculate time windows (today, 7d, 30d)
    |
help: Remove unused import: `sqlalchemy.func`

F821 Undefined name `category_totals`
   --> _quarantine/archive_legacy/background_processor_corrupted.py:441:40
    |
440 |             # Add top categories
441 |             sorted_categories = sorted(category_totals.items(), key=lambda x: x[1], reverse=True)
    |                                        ^^^^^^^^^^^^^^^
442 |             for category, amount in sorted_categories[:3]:
443 |                 summary_lines.append(f"• {category}: ৳{amount:.0f}")
    |

F821 Undefined name `summary_lines`
   --> _quarantine/archive_legacy/background_processor_corrupted.py:443:17
    |
441 |             sorted_categories = sorted(category_totals.items(), key=lambda x: x[1], reverse=True)
442 |             for category, amount in sorted_categories[:3]:
443 |                 summary_lines.append(f"• {category}: ৳{amount:.0f}")
    |                 ^^^^^^^^^^^^^
444 |             
445 |             # Add count
    |

F821 Undefined name `summary_lines`
   --> _quarantine/archive_legacy/background_processor_corrupted.py:446:13
    |
445 |             # Add count
446 |             summary_lines.append(f"📝 {len(expenses)} transactions logged")
    |             ^^^^^^^^^^^^^
447 |             
448 |             return "\n".join(summary_lines)
    |

F821 Undefined name `expenses`
   --> _quarantine/archive_legacy/background_processor_corrupted.py:446:43
    |
445 |             # Add count
446 |             summary_lines.append(f"📝 {len(expenses)} transactions logged")
    |                                            ^^^^^^^^
447 |             
448 |             return "\n".join(summary_lines)
    |

F821 Undefined name `summary_lines`
   --> _quarantine/archive_legacy/background_processor_corrupted.py:448:30
    |
446 |             summary_lines.append(f"📝 {len(expenses)} transactions logged")
447 |             
448 |             return "\n".join(summary_lines)
    |                              ^^^^^^^^^^^^^
449 |             
450 |         except Exception as e:
    |

F401 [*] `logging` imported but unused
 --> _quarantine/archive_legacy/debug_conversational_ai.py:6:8
  |
4 | """
5 |
6 | import logging
  |        ^^^^^^^
7 | import sys
8 | sys.path.insert(0, '.')
  |
help: Remove unused import: `logging`

F401 [*] `app.db` imported but unused
  --> _quarantine/archive_legacy/debug_conversational_ai.py:12:26
   |
10 | def debug_user_data():
11 |     """Debug user expense data access"""
12 |     from app import app, db
   |                          ^^
13 |     from models import Expense
14 |     from utils.conversational_ai import conversational_ai
   |
help: Remove unused import: `app.db`

F401 [*] `utils.security.hash_psid` imported but unused
  --> _quarantine/archive_legacy/debug_conversational_ai.py:15:32
   |
13 |     from models import Expense
14 |     from utils.conversational_ai import conversational_ai
15 |     from utils.security import hash_psid
   |                                ^^^^^^^^^
16 |     
17 |     with app.app_context():
   |
help: Remove unused import: `utils.security.hash_psid`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_conversational_ai.py:38:19
   |
36 |             # Now test conversational AI with a reverse-engineered PSID
37 |             # We need to find the original PSID that hashes to this user_id
38 |             print(f"\n🧪 Testing conversational AI with hashed user_id...")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
39 |             
40 |             # Test the conversational AI context directly
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_conversational_ai.py:48:23
   |
46 |                 print(f"✅ Data found: {context['total_expenses']} expenses, total: {context['total_amount']}")
47 |             else:
48 |                 print(f"❌ No data found in context")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
49 |                 
50 |         else:
   |
help: Remove extraneous `f` prefix

F401 [*] `utils.security.hash_psid` imported but unused
  --> _quarantine/archive_legacy/debug_conversational_ai.py:57:32
   |
55 |     from app import app
56 |     from utils.conversational_ai import conversational_ai
57 |     from utils.security import hash_psid
   |                                ^^^^^^^^^
58 |     
59 |     with app.app_context():
   |
help: Remove unused import: `utils.security.hash_psid`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_hash_flow.py:32:15
   |
31 |         # Now simulate what happens in conversational AI
32 |         print(f"\n3. In conversational AI:")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
33 |         print(f"   - Receives PSID: {original_psid}")
34 |         print(f"   - Should query with hash: {stored_hash[:16]}...")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_hash_flow.py:39:15
   |
37 |         double_hash = hash_psid(stored_hash)
38 |         print(f"   - If we hash again: {double_hash[:16]}...")
39 |         print(f"   - Result: NO DATA FOUND (different hash)")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
40 |         
41 |         print(f"\n🎯 SOLUTION:")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_hash_flow.py:41:15
   |
39 |         print(f"   - Result: NO DATA FOUND (different hash)")
40 |         
41 |         print(f"\n🎯 SOLUTION:")
   |               ^^^^^^^^^^^^^^^^^
42 |         print(f"   - Production router: Pass original PSID")
43 |         print(f"   - Conversational AI: Hash ONCE, then query")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_hash_flow.py:42:15
   |
41 |         print(f"\n🎯 SOLUTION:")
42 |         print(f"   - Production router: Pass original PSID")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
43 |         print(f"   - Conversational AI: Hash ONCE, then query")
44 |         print(f"   - Never hash an already-hashed value")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_hash_flow.py:43:15
   |
41 |         print(f"\n🎯 SOLUTION:")
42 |         print(f"   - Production router: Pass original PSID")
43 |         print(f"   - Conversational AI: Hash ONCE, then query")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
44 |         print(f"   - Never hash an already-hashed value")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_hash_flow.py:44:15
   |
42 |         print(f"   - Production router: Pass original PSID")
43 |         print(f"   - Conversational AI: Hash ONCE, then query")
44 |         print(f"   - Never hash an already-hashed value")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
45 |
46 | if __name__ == "__main__":
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_inconsistent_responses.py:75:27
   |
74 |                 if has_data and no_data:
75 |                     print(f"   ⚠️  INCONSISTENT: Contains both 'no data' and specific spending info")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
76 |                 elif has_data:
77 |                     print(f"   ✅ GOOD: Contains spending data")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_inconsistent_responses.py:77:27
   |
75 |                     print(f"   ⚠️  INCONSISTENT: Contains both 'no data' and specific spending info")
76 |                 elif has_data:
77 |                     print(f"   ✅ GOOD: Contains spending data")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
78 |                 elif no_data:
79 |                     print(f"   ❌ BAD: Says no data available")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_inconsistent_responses.py:79:27
   |
77 |                     print(f"   ✅ GOOD: Contains spending data")
78 |                 elif no_data:
79 |                     print(f"   ❌ BAD: Says no data available")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
80 |                 else:
81 |                     print(f"   ⚠️  UNCLEAR: Response type unknown")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_inconsistent_responses.py:81:27
   |
79 |                     print(f"   ❌ BAD: Says no data available")
80 |                 else:
81 |                     print(f"   ⚠️  UNCLEAR: Response type unknown")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
82 |                     
83 |             except Exception as e:
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_inconsistent_responses.py:87:15
   |
86 |         # Test different ways the PSID might come in
87 |         print(f"\n3. TESTING DIFFERENT PSID FORMATS")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
88 |         
89 |         # Simulate what happens if we get an actual Facebook PSID
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/debug_inconsistent_responses.py:111:23
    |
110 |             if "no data" in response.lower():
111 |                 print(f"   ✅ EXPECTED: No data for new PSID")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
112 |             else:
113 |                 print(f"   ⚠️  UNEXPECTED: Found data for new PSID")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/debug_inconsistent_responses.py:113:23
    |
111 |                 print(f"   ✅ EXPECTED: No data for new PSID")
112 |             else:
113 |                 print(f"   ⚠️  UNEXPECTED: Found data for new PSID")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
114 |                 
115 |         except Exception as e:
    |
help: Remove extraneous `f` prefix

F401 [*] `logging` imported but unused
 --> _quarantine/archive_legacy/debug_user_data_flow.py:6:8
  |
4 | """
5 |
6 | import logging
  |        ^^^^^^^
7 | import sys
8 | sys.path.insert(0, '.')
  |
help: Remove unused import: `logging`

F401 [*] `utils.security.hash_psid` imported but unused
  --> _quarantine/archive_legacy/debug_user_data_flow.py:13:32
   |
11 |     """Debug the complete data flow from Facebook PSID to database lookup"""
12 |     from app import app
13 |     from utils.security import hash_psid
   |                                ^^^^^^^^^
14 |     from utils.conversational_ai import conversational_ai
15 |     from utils.production_router import ProductionRouter
   |
help: Remove unused import: `utils.security.hash_psid`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_user_data_flow.py:44:19
   |
42 |             # Direct conversational AI test
43 |             context = conversational_ai.get_user_expense_context_direct(test_hash, days=30)
44 |             print(f"   Direct context access:")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
45 |             print(f"   - Has data: {context['has_data']}")
46 |             print(f"   - Total expenses: {context['total_expenses']}")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_user_data_flow.py:51:23
   |
49 |             if context['has_data']:
50 |                 # Test conversational response
51 |                 print(f"\n3. Testing conversational AI with this hash:")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
52 |                 response, intent = conversational_ai.handle_conversational_query(test_hash, "Give me a summary")
53 |                 print(f"   Response: {response}")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_user_data_flow.py:57:23
   |
56 |                 # Test production router
57 |                 print(f"\n4. Testing production router:")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
58 |                 router = ProductionRouter()
   |
help: Remove extraneous `f` prefix

F401 [*] `typing.Optional` imported but unused
 --> _quarantine/archive_legacy/expense_router.py:7:31
  |
6 | import logging
7 | from typing import Dict, Any, Optional
  |                               ^^^^^^^^
8 |
9 | from ai.expense_parse import parse_expense, regex_parse
  |
help: Remove unused import: `typing.Optional`

F841 [*] Local variable `e` is assigned to but never used
  --> _quarantine/archive_legacy/expense_router.py:35:25
   |
33 |         mode = "AI"
34 |         
35 |     except Exception as e:
   |                         ^
36 |         logger.exception("AI expense logging error")
   |
help: Remove assignment to unused variable `e`

F401 [*] `os` imported but unused
  --> _quarantine/archive_legacy/gemini_validation.py:9:8
   |
 7 | import requests
 8 | import json
 9 | import os
   |        ^^
10 |
11 | BASE_URL = "http://localhost:5000"
   |
help: Remove unused import: `os`

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/migrate_identity.py:281:15
    |
280 |         # Print summary
281 |         print(f"\n=== MIGRATION SUMMARY ===")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
282 |         print(f"Total users: {plan['summary']['total_users']}")
283 |         print(f"Test users to archive: {plan['summary']['test_users_to_archive']}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/migrate_identity.py:288:19
    |
287 |         if args.apply:
288 |             print(f"\nApplying migration...")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
289 |             results = apply_migration(plan, conn)
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/migrate_identity.py:291:19
    |
289 |             results = apply_migration(plan, conn)
290 |             
291 |             print(f"\n=== MIGRATION RESULTS ===")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
292 |             print(f"Archived users: {results['archived_users']}")
293 |             print(f"Merged duplicates: {results['merged_duplicates']}")
    |
help: Remove extraneous `f` prefix

F401 [*] `typing.Dict` imported but unused
 --> _quarantine/archive_legacy/mvp_router.py:7:20
  |
5 | import hashlib
6 | from datetime import datetime, timedelta
7 | from typing import Dict, Any, Tuple
  |                    ^^^^
8 |
9 | from utils.user_manager import resolve_user_id
  |
help: Remove unused import

F401 [*] `typing.Any` imported but unused
 --> _quarantine/archive_legacy/mvp_router.py:7:26
  |
5 | import hashlib
6 | from datetime import datetime, timedelta
7 | from typing import Dict, Any, Tuple
  |                          ^^^
8 |
9 | from utils.user_manager import resolve_user_id
  |
help: Remove unused import

F401 [*] `threading` imported but unused
  --> _quarantine/archive_legacy/performance_benchmark.py:10:8
   |
 8 | import json
 9 | import time
10 | import threading
   |        ^^^^^^^^^
11 | import statistics
12 | from concurrent.futures import ThreadPoolExecutor, as_completed
   |
help: Remove unused import: `threading`

F401 [*] `hashlib` imported but unused
  --> _quarantine/archive_legacy/performance_benchmark.py:13:8
   |
11 | import statistics
12 | from concurrent.futures import ThreadPoolExecutor, as_completed
13 | import hashlib
   |        ^^^^^^^
14 | import hmac
   |
help: Remove unused import: `hashlib`

F401 [*] `hmac` imported but unused
  --> _quarantine/archive_legacy/performance_benchmark.py:14:8
   |
12 | from concurrent.futures import ThreadPoolExecutor, as_completed
13 | import hashlib
14 | import hmac
   |        ^^^^
15 |
16 | BASE_URL = "http://localhost:5000"
   |
help: Remove unused import: `hmac`

F841 Local variable `status_code` is assigned to but never used
  --> _quarantine/archive_legacy/performance_benchmark.py:67:21
   |
65 |                 if result["success"]:
66 |                     times.append(result["duration_ms"])
67 |                     status_code = result["result"].status_code
   |                     ^^^^^^^^^^^
68 |                 else:
69 |                     self.errors.append(f"{name}: {result['error']}")
   |
help: Remove assignment to unused variable `status_code`

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/performance_benchmark.py:467:11
    |
465 |         json.dump(results, f, indent=2)
466 |     
467 |     print(f"\nDetailed results saved to benchmark_results.json")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: Remove extraneous `f` prefix

F401 [*] `time` imported but unused
 --> _quarantine/archive_legacy/production_debug.py:5:8
  |
4 | import requests
5 | import time
  |        ^^^^
6 |
7 | def debug_production():
  |
help: Remove unused import: `time`

F401 [*] `json` imported but unused
  --> _quarantine/archive_legacy/provider_switch_demo.py:8:8
   |
 7 | import requests
 8 | import json
   |        ^^^^
 9 |
10 | BASE_URL = "http://localhost:5000"
   |
help: Remove unused import: `json`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/provider_switch_demo.py:43:15
   |
41 |         ping_data = resp.json()
42 |         
43 |         print(f"AI Ping Result:")
   |               ^^^^^^^^^^^^^^^^^^
44 |         print(f"  OK: {ping_data.get('ok', False)}")
45 |         print(f"  Reply: {ping_data.get('reply', 'No reply')}")
   |
help: Remove extraneous `f` prefix

F401 [*] `utils.user_manager.resolve_user_id` imported but unused
  --> _quarantine/archive_legacy/run_uat_test.py:14:36
   |
12 |     """Run comprehensive UAT tests on the production router"""
13 |     from utils.production_router import production_router
14 |     from utils.user_manager import resolve_user_id
   |                                    ^^^^^^^^^^^^^^^
15 |     from app import app, db
16 |     from models import User, Expense
   |
help: Remove unused import: `utils.user_manager.resolve_user_id`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/run_uat_test.py:59:19
   |
57 |             db.session.add(test_user)
58 |             db.session.commit()
59 |             print(f"✓ Created test user")
   |                   ^^^^^^^^^^^^^^^^^^^^^^
60 |         else:
61 |             print(f"✓ Using existing test user")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/run_uat_test.py:61:19
   |
59 |             print(f"✓ Created test user")
60 |         else:
61 |             print(f"✓ Using existing test user")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
62 |         
63 |         # Add some test expenses for summary
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/run_uat_test.py:75:15
   |
73 |         db.session.add(test_expense)
74 |         db.session.commit()
75 |         print(f"✓ Added test expense")
   |               ^^^^^^^^^^^^^^^^^^^^^^^
76 |         print()
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/run_uat_test.py:118:31
    |
116 |                     print(f"   Response: {response[:150]}")
117 |                     if has_fallback:
118 |                         print(f"   ⚠️  Generic fallback detected")
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
119 |                     if is_error:
120 |                         print(f"   ⚠️  Error/fallback intent")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/run_uat_test.py:120:31
    |
118 |                         print(f"   ⚠️  Generic fallback detected")
119 |                     if is_error:
120 |                         print(f"   ⚠️  Error/fallback intent")
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
121 |                 print()
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/run_uat_test.py:163:27
    |
161 |                     print(f"    Error: {r['error']}")
162 |                 elif r.get("has_fallback"):
163 |                     print(f"    Issue: Generic fallback response")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
164 |                 elif r.get("is_error"):
165 |                     print(f"    Issue: Error/fallback intent ({r.get('actual_intent')})")
    |
help: Remove extraneous `f` prefix

F401 [*] `typing.Optional` imported but unused
 --> _quarantine/archive_legacy/simple_router.py:7:27
  |
5 | import time
6 | import logging
7 | from typing import Tuple, Optional, Dict, Any
  |                           ^^^^^^^^
8 |
9 | from flags import is_ai_enabled
  |
help: Remove unused import: `typing.Optional`

F841 Local variable `start_time` is assigned to but never used
  --> _quarantine/archive_legacy/simple_router.py:35:9
   |
33 |         Returns: (response_text, metadata)
34 |         """
35 |         start_time = time.time()
   |         ^^^^^^^^^^
36 |         psid_hash = hash_psid(psid)
   |
help: Remove assignment to unused variable `start_time`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_ai_expense_evolution.py:21:11
   |
19 |     test_message = "Logging today's expenses - coffee 100, burger 300 and watermelon juice 300"
20 |     
21 |     print(f"🧪 Testing AI Expense Parser Evolution")
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
22 |     print(f"📝 Message: {test_message}")
23 |     print(f"🎯 Expected: 3 expenses totaling 700")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_ai_expense_evolution.py:23:11
   |
21 |     print(f"🧪 Testing AI Expense Parser Evolution")
22 |     print(f"📝 Message: {test_message}")
23 |     print(f"🎯 Expected: 3 expenses totaling 700")
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
24 |     print("=" * 60)
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_ai_expense_evolution.py:37:19
   |
36 |         if result['success'] and result['expenses']:
37 |             print(f"\n📋 Expense Breakdown:")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
38 |             for i, expense in enumerate(result['expenses'], 1):
39 |                 print(f"  {i}. {expense['amount']} - {expense['description']} ({expense['category']})")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_ai_expense_evolution.py:56:19
   |
54 |                 print(f"❌ Item count mismatch: got {result['item_count']}, expected {expected_count}")
55 |         else:
56 |             print(f"❌ Parsing failed - the evolution didn't work as expected")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
57 |         
58 |         return result
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_ai_expense_evolution.py:75:11
   |
73 |     ]
74 |     
75 |     print(f"\n🧪 Testing Simple Cases")
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
76 |     print("=" * 60)
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_ai_expense_evolution.py:94:11
   |
93 |     # Summary
94 |     print(f"\n🎯 EVOLUTION TEST SUMMARY")
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
95 |     print("=" * 60)
   |
help: Remove extraneous `f` prefix

F401 [*] `hmac` imported but unused
  --> _quarantine/archive_legacy/test_ai_vs_fallback.py:11:8
   |
 9 | import time
10 | import hashlib
11 | import hmac
   |        ^^^^
12 |
13 | BASE_URL = "http://localhost:5000"
   |
help: Remove unused import: `hmac`

F841 Local variable `test_psid` is assigned to but never used
   --> _quarantine/archive_legacy/test_ai_vs_fallback.py:98:13
    |
 96 |         try:
 97 |             # Create a test user ID
 98 |             test_psid = hashlib.sha256(f"test_user_{test_name}".encode()).hexdigest()[:16]
    |             ^^^^^^^^^
 99 |             
100 |             # We can't directly test the router without triggering rate limits,
    |
help: Remove assignment to unused variable `test_psid`

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_ai_vs_fallback.py:108:27
    |
107 |                 if ai_configured:
108 |                     print(f"   Router decision: AI path (Gemini configured)")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
109 |                     print(f"   Expected AI: {test_name.split('.')[1].strip()}")
110 |                     self.results[f"routing_{test_name}"] = {"status": "ai_path", "configured": True}
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_ai_vs_fallback.py:112:27
    |
110 |                     self.results[f"routing_{test_name}"] = {"status": "ai_path", "configured": True}
111 |                 else:
112 |                     print(f"   Router decision: Fallback path (AI not configured)")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
113 |                     print(f"   Expected fallback: Template response")
114 |                     self.results[f"routing_{test_name}"] = {"status": "fallback_path", "configured": False}
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_ai_vs_fallback.py:113:27
    |
111 |                 else:
112 |                     print(f"   Router decision: Fallback path (AI not configured)")
113 |                     print(f"   Expected fallback: Template response")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
114 |                     self.results[f"routing_{test_name}"] = {"status": "fallback_path", "configured": False}
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_ai_vs_fallback.py:250:19
    |
248 |         # Final assessment
249 |         if ai_indicators >= 2:
250 |             print(f"\n🟢 CONCLUSION: GEMINI AI IS ACTIVE")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
251 |             print(f"Evidence: {ai_indicators}/{total_tests} tests confirm AI is responding")
252 |             print("Your system is using real Gemini AI, not deterministic fallback")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_ai_vs_fallback.py:254:19
    |
252 |             print("Your system is using real Gemini AI, not deterministic fallback")
253 |         elif ai_indicators == 1:
254 |             print(f"\n🟡 CONCLUSION: MIXED EVIDENCE")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
255 |             print(f"Evidence: {ai_indicators}/{total_tests} tests suggest AI may be partially active")
256 |         else:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_ai_vs_fallback.py:257:19
    |
255 |             print(f"Evidence: {ai_indicators}/{total_tests} tests suggest AI may be partially active")
256 |         else:
257 |             print(f"\n🔴 CONCLUSION: DETERMINISTIC FALLBACK ACTIVE")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
258 |             print(f"Evidence: {ai_indicators}/{total_tests} tests suggest AI is not responding")
259 |             print("System is using deterministic fallback logic")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_ai_vs_fallback.py:271:15
    |
269 |             }, f, indent=2)
270 |         
271 |         print(f"\nDetailed results saved to ai_fallback_test_results.json")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
272 |         
273 |         return ai_indicators >= 2
    |
help: Remove extraneous `f` prefix

E712 Avoid equality comparisons to `True`; use `allowed:` for truth checks
  --> _quarantine/archive_legacy/test_centralized_config.py:42:12
   |
40 |     # Test rate limiting functionality
41 |     allowed, retry = can_use_ai("test_user_config")
42 |     assert allowed == True, "First request should be allowed"
   |            ^^^^^^^^^^^^^^^
43 |     print(f"✓ Rate limiter: {allowed}, retry: {retry}s")
   |
help: Replace with `allowed`

E712 Avoid equality comparisons to `True`; use `allowed:` for truth checks
  --> _quarantine/archive_legacy/test_centralized_config.py:48:16
   |
46 |     for i in range(2, AI_RL_USER_LIMIT + 1):
47 |         allowed, retry = can_use_ai("test_user_config")
48 |         assert allowed == True, f"Request {i} should be allowed"
   |                ^^^^^^^^^^^^^^^
49 |     
50 |     # Test limit exceeded
   |
help: Replace with `allowed`

E712 Avoid equality comparisons to `False`; use `not allowed:` for false checks
  --> _quarantine/archive_legacy/test_centralized_config.py:52:12
   |
50 |     # Test limit exceeded
51 |     allowed, retry = can_use_ai("test_user_config")
52 |     assert allowed == False, "Request beyond limit should be denied"
   |            ^^^^^^^^^^^^^^^^
53 |     assert retry > 0, "Retry time should be positive"
54 |     print(f"✓ Rate limit enforced: denied with {retry}s retry")
   |
help: Replace with `not allowed`

F401 [*] `json` imported but unused
  --> _quarantine/archive_legacy/test_complete_identity_system.py:8:8
   |
 7 | import os
 8 | import json
   |        ^^^^
 9 |
10 | # Set ID_SALT for testing
   |
help: Remove unused import: `json`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_complete_identity_system.py:81:11
   |
79 |     print(f"Job PSID: {job['psid']}")
80 |     print(f"Job Hash: {job['psid_hash'][:12]}...")
81 |     print(f"✅ Background worker uses pre-computed hash - no re-hashing")
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
82 |     
83 |     # Test 3: Debug stamping
   |
help: Remove extraneous `f` prefix

F401 [*] `utils.conversational_ai.conversational_ai` imported but unused
  --> _quarantine/archive_legacy/test_conversational_ai.py:17:41
   |
15 |     from app import app, db
16 |     from models import User, Expense
17 |     from utils.conversational_ai import conversational_ai
   |                                         ^^^^^^^^^^^^^^^^^
18 |     from utils.production_router import ProductionRouter
19 |     from utils.security import hash_psid
   |
help: Remove unused import: `utils.conversational_ai.conversational_ai`

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_conversational_ai.py:98:23
    |
 96 |             # Check if response is intelligent and data-driven
 97 |             if "3355" in response or "expenses" in response.lower():
 98 |                 print(f"\n🎉 CONVERSATIONAL AI SUCCESS!")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 99 |                 print(f"✅ Uses actual user data for summary")
100 |                 print(f"✅ Provides specific numbers and insights")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_conversational_ai.py:99:23
    |
 97 |             if "3355" in response or "expenses" in response.lower():
 98 |                 print(f"\n🎉 CONVERSATIONAL AI SUCCESS!")
 99 |                 print(f"✅ Uses actual user data for summary")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
100 |                 print(f"✅ Provides specific numbers and insights")
101 |                 print(f"✅ Maintains conversational flow")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_conversational_ai.py:100:23
    |
 98 |                 print(f"\n🎉 CONVERSATIONAL AI SUCCESS!")
 99 |                 print(f"✅ Uses actual user data for summary")
100 |                 print(f"✅ Provides specific numbers and insights")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
101 |                 print(f"✅ Maintains conversational flow")
102 |                 return True
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_conversational_ai.py:101:23
    |
 99 |                 print(f"✅ Uses actual user data for summary")
100 |                 print(f"✅ Provides specific numbers and insights")
101 |                 print(f"✅ Maintains conversational flow")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
102 |                 return True
103 |             else:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_conversational_ai.py:104:23
    |
102 |                 return True
103 |             else:
104 |                 print(f"\n⚠️ Response may not be using user data effectively")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
105 |                 return False
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_conversational_ai.py:119:15
    |
118 |     with app.app_context():
119 |         print(f"\n🧪 Testing AI Analysis with User Context")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
120 |         print("=" * 50)
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_conversational_ai.py:138:23
    |
137 |             if any(word in response.lower() for word in ['food', 'shopping', 'transport', 'pattern']):
138 |                 print(f"✅ Analysis uses real spending categories")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
139 |                 return True
140 |             else:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_conversational_ai.py:141:23
    |
139 |                 return True
140 |             else:
141 |                 print(f"⚠️ Analysis may be generic")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
142 |                 return False
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_conversational_ai.py:153:11
    |
151 |     analysis_success = test_analysis_request()
152 |     
153 |     print(f"\n🏁 CONVERSATIONAL AI TEST RESULTS")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
154 |     print("=" * 70)
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_conversational_ai.py:171:15
    |
170 |     if summary_success and analysis_success:
171 |         print(f"\n🎯 AI CONSTITUTION ADVANCEMENT: 85% → 90%")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
172 |         print("📈 Enhanced conversational intelligence with user-level memory")
    |
help: Remove extraneous `f` prefix

F401 [*] `os` imported but unused
 --> _quarantine/archive_legacy/test_conversational_fix.py:6:8
  |
4 | """
5 | import sys
6 | import os
  |        ^^
7 | sys.path.append('.')
  |
help: Remove unused import: `os`

F401 [*] `utils.crypto.ensure_hashed` imported but unused
  --> _quarantine/archive_legacy/test_conversational_fix.py:10:26
   |
 9 | from utils.conversational_ai import ConversationalAI
10 | from utils.crypto import ensure_hashed
   |                          ^^^^^^^^^^^^^
11 |
12 | def test_conversational_ai_fix():
   |
help: Remove unused import: `utils.crypto.ensure_hashed`

F401 [*] `app.db` imported but unused
  --> _quarantine/archive_legacy/test_conversational_fix.py:14:26
   |
12 | def test_conversational_ai_fix():
13 |     """Test the fixed conversational AI data access"""
14 |     from app import app, db
   |                          ^^
15 |     
16 |     # Real user hashes from database
   |
help: Remove unused import: `app.db`

F401 [*] `logging` imported but unused
 --> _quarantine/archive_legacy/test_direct_data_access.py:6:8
  |
4 | """
5 |
6 | import logging
  |        ^^^^^^^
7 | import sys
8 | sys.path.insert(0, '.')
  |
help: Remove unused import: `logging`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_direct_data_access.py:27:15
   |
25 |         context = conversational_ai.get_user_expense_context_direct(user_hash, days=30)
26 |         
27 |         print(f"📊 Context retrieved:")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^
28 |         print(f"  - Has data: {context['has_data']}")
29 |         print(f"  - Total expenses: {context['total_expenses']}")
   |
help: Remove extraneous `f` prefix

F401 [*] `utils.security.hash_psid` imported but unused
  --> _quarantine/archive_legacy/test_evolution_integration.py:16:32
   |
14 |     """Test the complete evolved system integration"""
15 |     from utils.production_router import ProductionRouter
16 |     from utils.security import hash_psid
   |                                ^^^^^^^^^
17 |     
18 |     # Initialize router
   |
help: Remove unused import: `utils.security.hash_psid`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_evolution_integration.py:25:11
   |
23 |     test_message = "Logging today's expenses - coffee 100, burger 300 and watermelon juice 300"
24 |     
25 |     print(f"🧪 Testing Complete Evolution Integration")
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
26 |     print(f"📝 Message: {test_message}")
27 |     print(f"🔧 Expected: Multi-item expense logging with intelligent response")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_evolution_integration.py:27:11
   |
25 |     print(f"🧪 Testing Complete Evolution Integration")
26 |     print(f"📝 Message: {test_message}")
27 |     print(f"🔧 Expected: Multi-item expense logging with intelligent response")
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
28 |     print("=" * 80)
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_evolution_integration.py:45:19
   |
43 |         # Check if evolution was successful
44 |         if intent == "ai_expense_logged" and amount == 700.0:
45 |             print(f"\n🎉 EVOLUTION INTEGRATION SUCCESS!")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
46 |             print(f"✅ Multi-item expense parsing works end-to-end")
47 |             print(f"✅ Context awareness will receive proper data")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_evolution_integration.py:46:19
   |
44 |         if intent == "ai_expense_logged" and amount == 700.0:
45 |             print(f"\n🎉 EVOLUTION INTEGRATION SUCCESS!")
46 |             print(f"✅ Multi-item expense parsing works end-to-end")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
47 |             print(f"✅ Context awareness will receive proper data")
48 |             print(f"✅ Users will no longer see repetitive 'not enough data' messages")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_evolution_integration.py:47:19
   |
45 |             print(f"\n🎉 EVOLUTION INTEGRATION SUCCESS!")
46 |             print(f"✅ Multi-item expense parsing works end-to-end")
47 |             print(f"✅ Context awareness will receive proper data")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
48 |             print(f"✅ Users will no longer see repetitive 'not enough data' messages")
49 |         elif intent == "ai_context_driven":
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_evolution_integration.py:48:19
   |
46 |             print(f"✅ Multi-item expense parsing works end-to-end")
47 |             print(f"✅ Context awareness will receive proper data")
48 |             print(f"✅ Users will no longer see repetitive 'not enough data' messages")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
49 |         elif intent == "ai_context_driven":
50 |             print(f"\n⚠️ Still hitting context-thin logic - evolution needs refinement")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_evolution_integration.py:50:19
   |
48 |             print(f"✅ Users will no longer see repetitive 'not enough data' messages")
49 |         elif intent == "ai_context_driven":
50 |             print(f"\n⚠️ Still hitting context-thin logic - evolution needs refinement")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
51 |         else:
52 |             print(f"\n❌ Unexpected intent: {intent}")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_evolution_integration.py:71:11
   |
69 |     test_psid = "test_user_simple"
70 |     
71 |     print(f"\n🧪 Testing Simple Case Compatibility")
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
72 |     print(f"📝 Message: {test_message}")
73 |     print("=" * 40)
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_evolution_integration.py:87:19
   |
86 |         if intent == "ai_expense_logged" and amount == 100.0:
87 |             print(f"✅ Simple case still works correctly")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
88 |         else:
89 |             print(f"⚠️ Simple case behavior changed - Intent: {intent}")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_evolution_integration.py:101:11
    |
 99 |     test_simple_case()
100 |     
101 |     print(f"\n🏁 FINAL EVOLUTION STATUS")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
102 |     print("=" * 80)
    |
help: Remove extraneous `f` prefix

F401 [*] `app.db` imported but unused
  --> _quarantine/archive_legacy/test_existing_user.py:15:26
   |
13 | def test_with_existing_user():
14 |     """Test evolution with a user who has completed onboarding"""
15 |     from app import app, db
   |                          ^^
16 |     from utils.production_router import ProductionRouter
17 |     from utils.user_manager import user_manager
   |
help: Remove unused import: `app.db`

F841 Local variable `psid_hash` is assigned to but never used
  --> _quarantine/archive_legacy/test_existing_user.py:26:9
   |
24 |         # Create a user who has completed onboarding
25 |         test_psid = "existing_user_evolution_test"
26 |         psid_hash = hash_psid(test_psid)
   |         ^^^^^^^^^
27 |         
28 |         # Create an existing user with completed onboarding
   |
help: Remove assignment to unused variable `psid_hash`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_existing_user.py:44:15
   |
43 |         print(f"📝 Message: {test_message}")
44 |         print(f"👤 User: Existing user with completed onboarding")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
45 |         
46 |         try:
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_existing_user.py:61:23
   |
59 |             # Check if evolution works with existing users
60 |             if intent == "ai_expense_logged" and amount == 700.0:
61 |                 print(f"\n🎉 EVOLUTION SUCCESS WITH EXISTING USERS!")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
62 |                 print(f"✅ Multi-item parsing works: 3 expenses totaling 700")
63 |                 print(f"✅ No Flask context issues")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_existing_user.py:62:23
   |
60 |             if intent == "ai_expense_logged" and amount == 700.0:
61 |                 print(f"\n🎉 EVOLUTION SUCCESS WITH EXISTING USERS!")
62 |                 print(f"✅ Multi-item parsing works: 3 expenses totaling 700")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
63 |                 print(f"✅ No Flask context issues")
64 |                 print(f"✅ Proper routing for existing users")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_existing_user.py:63:23
   |
61 |                 print(f"\n🎉 EVOLUTION SUCCESS WITH EXISTING USERS!")
62 |                 print(f"✅ Multi-item parsing works: 3 expenses totaling 700")
63 |                 print(f"✅ No Flask context issues")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
64 |                 print(f"✅ Proper routing for existing users")
65 |                 return True
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_existing_user.py:64:23
   |
62 |                 print(f"✅ Multi-item parsing works: 3 expenses totaling 700")
63 |                 print(f"✅ No Flask context issues")
64 |                 print(f"✅ Proper routing for existing users")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
65 |                 return True
66 |             elif intent == "ai_context_driven":
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_existing_user.py:67:23
   |
65 |                 return True
66 |             elif intent == "ai_context_driven":
67 |                 print(f"\n📊 Context-driven response (good sign!)")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
68 |                 print(f"✅ System recognized expense data and provided intelligent response")
69 |                 return True
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_existing_user.py:68:23
   |
66 |             elif intent == "ai_context_driven":
67 |                 print(f"\n📊 Context-driven response (good sign!)")
68 |                 print(f"✅ System recognized expense data and provided intelligent response")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
69 |                 return True
70 |             else:
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_existing_user.py:72:23
   |
70 |             else:
71 |                 print(f"\n⚠️ Unexpected intent: {intent}")
72 |                 print(f"This may indicate the expense wasn't logged properly")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
73 |                 return False
   |
help: Remove extraneous `f` prefix

F401 [*] `utils.security.hash_psid` imported but unused
  --> _quarantine/archive_legacy/test_existing_user.py:86:32
   |
84 |     from utils.production_router import ProductionRouter
85 |     from utils.user_manager import user_manager
86 |     from utils.security import hash_psid
   |                                ^^^^^^^^^
87 |     
88 |     with app.app_context():
   |
help: Remove unused import: `utils.security.hash_psid`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_existing_user.py:89:15
   |
88 |     with app.app_context():
89 |         print(f"\n🧪 Testing Simple Case with Existing User")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
90 |         print("=" * 40)
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_existing_user.py:118:23
    |
117 |             if intent == "ai_expense_logged" and amount == 100.0:
118 |                 print(f"✅ Simple case works with existing users")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
119 |                 return True
120 |             elif intent == "ai_context_driven":
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_existing_user.py:121:23
    |
119 |                 return True
120 |             elif intent == "ai_context_driven":
121 |                 print(f"✅ Context-driven response for simple case")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
122 |                 return True
123 |             else:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_existing_user.py:136:11
    |
134 |     simple_success = test_simple_existing_user()
135 |     
136 |     print(f"\n🏁 EXISTING USER TEST RESULTS")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
137 |     print("=" * 60)
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_fixed_conversational.py:61:27
   |
60 |                 if has_no_data_msg:
61 |                     print(f"   ❌ NO DATA MESSAGE")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^
62 |                     no_data_responses.append(f"Message {i}: {message}")
63 |                     all_responses_have_data = False
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_fixed_conversational.py:65:27
   |
63 |                     all_responses_have_data = False
64 |                 elif has_specific_data:
65 |                     print(f"   ✅ HAS SPENDING DATA")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
66 |                     data_responses.append(f"Message {i}: {message}")
67 |                 else:
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_fixed_conversational.py:68:27
   |
66 |                     data_responses.append(f"Message {i}: {message}")
67 |                 else:
68 |                     print(f"   ⚠️  NEUTRAL RESPONSE")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^
69 |                     
70 |             except Exception as e:
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_fixed_conversational.py:74:15
   |
72 |                 all_responses_have_data = False
73 |         
74 |         print(f"\n" + "=" * 50)
   |               ^^^^^
75 |         print(f"🎯 CONSISTENCY TEST RESULTS:")
76 |         print(f"   Total messages tested: {len(test_messages)}")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_fixed_conversational.py:75:15
   |
74 |         print(f"\n" + "=" * 50)
75 |         print(f"🎯 CONSISTENCY TEST RESULTS:")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
76 |         print(f"   Total messages tested: {len(test_messages)}")
77 |         print(f"   Responses with data: {len(data_responses)}")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_fixed_conversational.py:81:19
   |
80 |         if all_responses_have_data:
81 |             print(f"   ✅ SUCCESS: All responses consistent")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
82 |         else:
83 |             print(f"   ❌ INCONSISTENCY STILL EXISTS")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_fixed_conversational.py:83:19
   |
81 |             print(f"   ✅ SUCCESS: All responses consistent")
82 |         else:
83 |             print(f"   ❌ INCONSISTENCY STILL EXISTS")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
84 |             if no_data_responses:
85 |                 print(f"   No data responses: {no_data_responses}")
   |
help: Remove extraneous `f` prefix

F401 [*] `json` imported but unused
 --> _quarantine/archive_legacy/test_gemini_live.py:7:8
  |
6 | import requests
7 | import json
  |        ^^^^
8 |
9 | BASE_URL = "http://localhost:5000"
  |
help: Remove unused import: `json`

F401 [*] `app.db` imported but unused
  --> _quarantine/archive_legacy/test_hash_consistency.py:67:30
   |
65 |     def test_user_manager_consistency(self, method_name):
66 |         """Test UserManager methods handle both raw PSID and hash consistently"""
67 |         from app import app, db
   |                              ^^
68 |         
69 |         with app.app_context():
   |
help: Remove unused import: `app.db`

F401 [*] `app.db` imported but unused
  --> _quarantine/archive_legacy/test_hash_consistency.py:89:30
   |
87 |     def test_conversational_ai_consistency(self):
88 |         """Test ConversationalAI methods handle both raw PSID and hash consistently"""
89 |         from app import app, db
   |                              ^^
90 |         
91 |         with app.app_context():
   |
help: Remove unused import: `app.db`

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_hash_consistency.py:136:11
    |
135 |     # Test 2: Validation
136 |     print(f"\nValidation Tests:")
    |           ^^^^^^^^^^^^^^^^^^^^^^
137 |     print(f"Is valid SHA-256: {is_sha256_hex(hashed_once)}")
138 |     print(f"Invalid too short: {is_sha256_hex('short')}")
    |
help: Remove extraneous `f` prefix

F401 [*] `json` imported but unused
  --> _quarantine/archive_legacy/test_identity_production.py:8:8
   |
 7 | import os
 8 | import json
   |        ^^^^
 9 | import requests
10 | import time
   |
help: Remove unused import: `json`

F401 [*] `requests` imported but unused
  --> _quarantine/archive_legacy/test_identity_production.py:9:8
   |
 7 | import os
 8 | import json
 9 | import requests
   |        ^^^^^^^^
10 | import time
   |
help: Remove unused import: `requests`

F401 [*] `utils.identity.psid_from_event` imported but unused
  --> _quarantine/archive_legacy/test_identity_production.py:16:28
   |
14 |     os.environ["ID_SALT"] = "3dcce5a0b1eeb774cc1e0320edb773fed53afbcdd4b14d6201373659278cae34"
15 |
16 | from utils.identity import psid_from_event, psid_hash
   |                            ^^^^^^^^^^^^^^^
17 | from utils.webhook_processor import extract_webhook_events
   |
help: Remove unused import: `utils.identity.psid_from_event`

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_identity_production.py:242:11
    |
240 |         assert computed_hash == expected_hash, "Hash inconsistency detected"
241 |     
242 |     print(f"✓ Production flow simulation successful:")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
243 |     print(f"  - {len(processed_events)} message events processed with consistent identity")
244 |     print(f"  - {len(ignored_events)} delivery/read events properly ignored")
    |
help: Remove extraneous `f` prefix

F841 Local variable `router` is assigned to but never used
  --> _quarantine/archive_legacy/test_no_double_hash.py:25:9
   |
24 |         # This is what happens in production router
25 |         router = ProductionRouter()
   |         ^^^^^^
26 |         
27 |         # The router computes the hash once
   |
help: Remove assignment to unused variable `router`

F401 [*] `os` imported but unused
 --> _quarantine/archive_legacy/test_production.py:5:8
  |
4 | import requests
5 | import os
  |        ^^
6 |
7 | def test_production():
  |
help: Remove unused import: `os`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_production_context.py:50:15
   |
48 |         db.session.commit()
49 |         
50 |         print(f"👤 Created existing user: onboarding_complete=True, interactions=15")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
51 |         
52 |         # Initialize router
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_production_context.py:75:23
   |
73 |             # Check evolution success
74 |             if intent == "ai_expense_logged":
75 |                 print(f"\n🎉 EVOLUTION SUCCESS!")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
76 |                 print(f"✅ Multi-item expense parser works in production context")
77 |                 print(f"✅ Amount logged: {amount} (expected: 700)")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_production_context.py:76:23
   |
74 |             if intent == "ai_expense_logged":
75 |                 print(f"\n🎉 EVOLUTION SUCCESS!")
76 |                 print(f"✅ Multi-item expense parser works in production context")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
77 |                 print(f"✅ Amount logged: {amount} (expected: 700)")
78 |                 if amount == 700.0:
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_production_context.py:79:27
   |
77 |                 print(f"✅ Amount logged: {amount} (expected: 700)")
78 |                 if amount == 700.0:
79 |                     print(f"✅ Perfect! All 3 expenses logged correctly")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
80 |                 else:
81 |                     print(f"⚠️ Amount mismatch - partial logging detected")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_production_context.py:81:27
   |
79 |                     print(f"✅ Perfect! All 3 expenses logged correctly")
80 |                 else:
81 |                     print(f"⚠️ Amount mismatch - partial logging detected")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
82 |                 return True
83 |             elif intent == "ai_context_driven":
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_production_context.py:84:23
   |
82 |                 return True
83 |             elif intent == "ai_context_driven":
84 |                 print(f"\n📊 Context-driven AI response")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
85 |                 print(f"✅ Expenses processed, intelligent response generated")
86 |                 print(f"✅ This is also a successful evolution outcome")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_production_context.py:85:23
   |
83 |             elif intent == "ai_context_driven":
84 |                 print(f"\n📊 Context-driven AI response")
85 |                 print(f"✅ Expenses processed, intelligent response generated")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
86 |                 print(f"✅ This is also a successful evolution outcome")
87 |                 return True
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_production_context.py:86:23
   |
84 |                 print(f"\n📊 Context-driven AI response")
85 |                 print(f"✅ Expenses processed, intelligent response generated")
86 |                 print(f"✅ This is also a successful evolution outcome")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
87 |                 return True
88 |             else:
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_production_context.py:106:15
    |
105 |     with app.app_context():
106 |         print(f"\n🧪 Testing Simple Case in Production Context")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
107 |         print("=" * 50)
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_production_context.py:146:23
    |
145 |             if intent in ["ai_expense_logged", "ai_context_driven"]:
146 |                 print(f"✅ Simple case works in production")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
147 |                 return True
148 |             else:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_production_context.py:161:11
    |
159 |     simple_success = test_simple_production()
160 |     
161 |     print(f"\n🏁 PRODUCTION CONTEXT TEST RESULTS")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
162 |     print("=" * 70)
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_production_context.py:178:11
    |
176 |         print("⚠️ Simple cases need production attention")
177 |         
178 |     print(f"\n💡 Note: New users will go through onboarding flow as designed")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
179 |     print(f"   This test confirms evolution works for existing users")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_production_context.py:179:11
    |
178 |     print(f"\n💡 Note: New users will go through onboarding flow as designed")
179 |     print(f"   This test confirms evolution works for existing users")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: Remove extraneous `f` prefix

F401 [*] `logging` imported but unused
 --> _quarantine/archive_legacy/test_production_conversational.py:6:8
  |
4 | """
5 |
6 | import logging
  |        ^^^^^^^
7 | import sys
8 | sys.path.insert(0, '.')
  |
help: Remove unused import: `logging`

F401 [*] `utils.security.hash_psid` imported but unused
  --> _quarantine/archive_legacy/test_production_conversational.py:15:32
   |
13 |     from utils.production_router import ProductionRouter
14 |     from utils.conversational_ai import conversational_ai
15 |     from utils.security import hash_psid
   |                                ^^^^^^^^^
16 |     
17 |     with app.app_context():
   |
help: Remove unused import: `utils.security.hash_psid`

F401 [*] `logging` imported but unused
 --> _quarantine/archive_legacy/test_production_fix.py:6:8
  |
4 | """
5 |
6 | import logging
  |        ^^^^^^^
7 | import sys
8 | sys.path.insert(0, '.')
  |
help: Remove unused import: `logging`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_production_fix.py:37:15
   |
35 |         # This should work because our conversational AI now detects hash length
36 |         
37 |         print(f"\n1. Testing with hash as PSID (simulating real scenario):")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
38 |         
39 |         router = ProductionRouter()
   |
help: Remove extraneous `f` prefix

F401 [*] `logging` imported but unused
 --> _quarantine/archive_legacy/test_real_psid.py:6:8
  |
4 | """
5 |
6 | import logging
  |        ^^^^^^^
7 | import sys
8 | sys.path.insert(0, '.')
  |
help: Remove unused import: `logging`

F401 [*] `utils.security.hash_psid` imported but unused
  --> _quarantine/archive_legacy/test_real_psid.py:13:32
   |
11 |     """Find the original PSID that creates the hash in the database"""
12 |     from app import app
13 |     from utils.security import hash_psid
   |                                ^^^^^^^^^
14 |     from models import Expense
   |
help: Remove unused import: `utils.security.hash_psid`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_real_scenario.py:48:15
   |
46 |         target_hash = "dc863d3aa69d518264428cadc7b19e19b5d723c980a0db219d8063a1746128dc"
47 |         
48 |         print(f"\n🎯 Testing direct hash access...")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
49 |         
50 |         # Test the direct method with the exact hash
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_real_scenario.py:53:15
   |
51 |         context = conversational_ai.get_user_expense_context_direct(target_hash, days=30)
52 |         
53 |         print(f"Direct hash access result:")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
54 |         print(f"  - Has data: {context['has_data']}")
55 |         print(f"  - Total expenses: {context['total_expenses']}")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_real_webhook_flow.py:124:23
    |
122 |             # Should always return 200 EVENT_RECEIVED for valid webhooks
123 |             if response.status_code == 200:
124 |                 print(f"  ✅ Webhook accepted")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^
125 |             else:
126 |                 print(f"  ⚠️  Status code: {response.status_code}")
    |
help: Remove extraneous `f` prefix

F401 [*] `sys` imported but unused
 --> _quarantine/archive_legacy/test_uat_demo.py:5:8
  |
3 | Simulates a complete UAT flow to verify all features work
4 | """
5 | import sys
  |        ^^^
6 | import time
7 | from app import app
  |
help: Remove unused import: `sys`

F401 [*] `app.db` imported but unused
  --> _quarantine/archive_legacy/test_web_context.py:15:26
   |
13 | def test_with_app_context():
14 |     """Test the AI expense parser within Flask app context"""
15 |     from app import app, db
   |                          ^^
16 |     from utils.production_router import ProductionRouter
   |
help: Remove unused import: `app.db`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_web_context.py:46:23
   |
44 |             # Check if evolution works in proper context
45 |             if intent == "ai_expense_logged":
46 |                 print(f"\n🎉 SUCCESS: Evolution works perfectly in Flask context!")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
47 |                 print(f"✅ Multi-item parsing functional")
48 |                 print(f"✅ Database operations successful")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_web_context.py:47:23
   |
45 |             if intent == "ai_expense_logged":
46 |                 print(f"\n🎉 SUCCESS: Evolution works perfectly in Flask context!")
47 |                 print(f"✅ Multi-item parsing functional")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
48 |                 print(f"✅ Database operations successful")
49 |                 print(f"✅ No Flask context issues")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_web_context.py:48:23
   |
46 |                 print(f"\n🎉 SUCCESS: Evolution works perfectly in Flask context!")
47 |                 print(f"✅ Multi-item parsing functional")
48 |                 print(f"✅ Database operations successful")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
49 |                 print(f"✅ No Flask context issues")
50 |                 return True
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_web_context.py:49:23
   |
47 |                 print(f"✅ Multi-item parsing functional")
48 |                 print(f"✅ Database operations successful")
49 |                 print(f"✅ No Flask context issues")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
50 |                 return True
51 |             elif intent == "ai_context_driven":
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_web_context.py:52:23
   |
50 |                 return True
51 |             elif intent == "ai_context_driven":
52 |                 print(f"\n⚠️ Still hitting context-thin logic")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
53 |                 print(f"This means the expense parser integration needs adjustment")
54 |                 return False
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_web_context.py:53:23
   |
51 |             elif intent == "ai_context_driven":
52 |                 print(f"\n⚠️ Still hitting context-thin logic")
53 |                 print(f"This means the expense parser integration needs adjustment")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
54 |                 return False
55 |             else:
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_web_context.py:71:15
   |
70 |     with app.app_context():
71 |         print(f"\n🧪 Testing Simple Case with App Context")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
72 |         print("=" * 40)
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_web_context.py:91:23
   |
90 |             if intent == "ai_expense_logged":
91 |                 print(f"✅ Simple case works in Flask context")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
92 |                 return True
93 |             else:
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_web_context.py:106:11
    |
104 |     simple_success = test_simple_case_context()
105 |     
106 |     print(f"\n🏁 FLASK CONTEXT TEST RESULTS")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
107 |     print("=" * 60)
    |
help: Remove extraneous `f` prefix

F401 [*] `json` imported but unused
  --> _quarantine/archive_legacy/uat_comprehensive.py:8:8
   |
 7 | import requests
 8 | import json
   |        ^^^^
 9 | import time
10 | import hashlib
   |
help: Remove unused import: `json`

F401 [*] `hashlib` imported but unused
  --> _quarantine/archive_legacy/uat_comprehensive.py:10:8
   |
 8 | import json
 9 | import time
10 | import hashlib
   |        ^^^^^^^
11 |
12 | BASE_URL = "http://localhost:5000"
   |
help: Remove unused import: `hashlib`

F401 [*] `json` imported but unused
 --> _quarantine/archive_legacy/uat_context_system.py:6:8
  |
4 | """
5 |
6 | import json
  |        ^^^^
7 | import time
8 | import logging
  |
help: Remove unused import: `json`

F401 [*] `models.User` imported but unused
  --> _quarantine/archive_legacy/uat_context_system.py:11:29
   |
 9 | from datetime import datetime, timedelta
10 | from app import app, db
11 | from models import Expense, User
   |                             ^^^^
12 | from utils.security import hash_psid
13 | from utils.production_router import production_router as router
   |
help: Remove unused import: `models.User`

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/uat_context_system.py:128:19
    |
126 |                 return False
127 |             
128 |             print(f"✓ Context built successfully:")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
129 |             print(f"  - Total spend: ৳{total_spend:,}")
130 |             print(f"  - Categories: {len(top_cats)}")
    |
help: Remove extraneous `f` prefix

F401 [*] `logging` imported but unused
 --> _quarantine/archive_legacy/uat_conversational_ai.py:7:8
  |
5 | """
6 |
7 | import logging
  |        ^^^^^^^
8 | import sys
9 | sys.path.insert(0, '.')
  |
help: Remove unused import: `logging`

F401 [*] `utils.security.hash_psid` imported but unused
  --> _quarantine/archive_legacy/uat_conversational_ai.py:15:32
   |
13 |     from app import app
14 |     from utils.production_router import ProductionRouter
15 |     from utils.security import hash_psid
   |                                ^^^^^^^^^
16 |     from models import db
17 |     from sqlalchemy import text
   |
help: Remove unused import: `utils.security.hash_psid`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/uat_conversational_ai.py:48:15
   |
47 |         # Step 2: Test the exact scenario from screenshots
48 |         print(f"\n2. TESTING EXACT USER SCENARIOS FROM SCREENSHOTS")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
49 |         print("-" * 50)
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/uat_conversational_ai.py:99:27
    |
 98 |                 if has_real_data and no_fallback:
 99 |                     print(f"   ✅ SUCCESS: Response contains real data")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
100 |                     success_count += 1
101 |                 else:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/uat_conversational_ai.py:102:27
    |
100 |                     success_count += 1
101 |                 else:
102 |                     print(f"   ❌ FAILURE: Response missing expected content or using fallback")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
103 |                     print(f"      Expected keywords: {scenario['expected']}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/uat_conversational_ai.py:109:15
    |
108 |         # Step 3: Validate AI response quality
109 |         print(f"\n3. AI RESPONSE QUALITY VALIDATION")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
110 |         print("-" * 40)
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/uat_conversational_ai.py:143:15
    |
142 |         # Step 4: Production readiness assessment
143 |         print(f"\n4. PRODUCTION READINESS ASSESSMENT")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
144 |         print("-" * 45)
    |
help: Remove extraneous `f` prefix

F401 [*] `datetime.datetime` imported but unused
  --> _quarantine/archive_legacy/uat_double_hashing_fix.py:18:26
   |
16 |     from utils.production_router import ProductionRouter
17 |     from models import db, Expense
18 |     from datetime import datetime
   |                          ^^^^^^^^
19 |     import json
   |
help: Remove unused import: `datetime.datetime`

F401 [*] `json` imported but unused
  --> _quarantine/archive_legacy/uat_double_hashing_fix.py:19:12
   |
17 |     from models import db, Expense
18 |     from datetime import datetime
19 |     import json
   |            ^^^^
20 |     
21 |     with app.app_context():
   |
help: Remove unused import: `json`

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/uat_double_hashing_fix.py:177:15
    |
176 |         # Step 9: Cleanup
177 |         print(f"\n9. CLEANING UP TEST DATA")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
178 |         cleanup_expenses = Expense.query.filter_by(user_id=demo_hash).all()
179 |         for expense in cleanup_expenses:
    |
help: Remove extraneous `f` prefix

F401 [*] `json` imported but unused
 --> _quarantine/archive_legacy/uat_focused_retests.py:6:8
  |
4 | """
5 |
6 | import json
  |        ^^^^
7 | import logging
8 | from app import app, db
  |
help: Remove unused import: `json`

F401 [*] `app.db` imported but unused
  --> _quarantine/archive_legacy/uat_focused_retests.py:8:22
   |
 6 | import json
 7 | import logging
 8 | from app import app, db
   |                      ^^
 9 | from utils.context_packet import build_context, is_context_thin, CONTEXT_SYSTEM_PROMPT, RESPONSE_SCHEMA
10 | from utils.production_router import production_router as router
   |
help: Remove unused import: `app.db`

F401 [*] `utils.context_packet.build_context` imported but unused
  --> _quarantine/archive_legacy/uat_focused_retests.py:9:34
   |
 7 | import logging
 8 | from app import app, db
 9 | from utils.context_packet import build_context, is_context_thin, CONTEXT_SYSTEM_PROMPT, RESPONSE_SCHEMA
   |                                  ^^^^^^^^^^^^^
10 | from utils.production_router import production_router as router
11 | from ai_adapter_gemini import generate_with_schema
   |
help: Remove unused import: `utils.context_packet.build_context`

F401 [*] `hashlib` imported but unused
  --> _quarantine/archive_legacy/uat_multi_user_isolation.py:24:8
   |
22 | import time
23 | import logging
24 | import hashlib
   |        ^^^^^^^
25 | import requests
26 | import threading
   |
help: Remove unused import: `hashlib`

F401 [*] `requests` imported but unused
  --> _quarantine/archive_legacy/uat_multi_user_isolation.py:25:8
   |
23 | import logging
24 | import hashlib
25 | import requests
   |        ^^^^^^^^
26 | import threading
27 | import concurrent.futures
   |
help: Remove unused import: `requests`

F401 [*] `threading` imported but unused
  --> _quarantine/archive_legacy/uat_multi_user_isolation.py:26:8
   |
24 | import hashlib
25 | import requests
26 | import threading
   |        ^^^^^^^^^
27 | import concurrent.futures
28 | from datetime import datetime, date, timedelta
   |
help: Remove unused import: `threading`

F401 [*] `datetime.timedelta` imported but unused
  --> _quarantine/archive_legacy/uat_multi_user_isolation.py:28:38
   |
26 | import threading
27 | import concurrent.futures
28 | from datetime import datetime, date, timedelta
   |                                      ^^^^^^^^^
29 | from decimal import Decimal
   |
help: Remove unused import: `datetime.timedelta`

F401 [*] `models.MonthlySummary` imported but unused
  --> _quarantine/archive_legacy/uat_multi_user_isolation.py:35:35
   |
34 | from app import app, db
35 | from models import User, Expense, MonthlySummary
   |                                   ^^^^^^^^^^^^^^
36 | from utils.security import hash_psid
   |
help: Remove unused import: `models.MonthlySummary`

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/uat_multi_user_isolation.py:519:15
    |
517 |         pass_rate = len(passed_tests) / total_tests * 100 if total_tests > 0 else 0
518 |         
519 |         print(f"\n📊 UAT SUMMARY")
    |               ^^^^^^^^^^^^^^^^^^^
520 |         print(f"Total Tests: {total_tests}")
521 |         print(f"Passed: {len(passed_tests)} ({pass_rate:.1f}%)")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/uat_multi_user_isolation.py:526:19
    |
525 |         if passed_tests:
526 |             print(f"\n✅ PASSED TESTS:")
    |                   ^^^^^^^^^^^^^^^^^^^^^
527 |             for test in passed_tests:
528 |                 details = self.results[test].get('details', '')
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/uat_multi_user_isolation.py:532:19
    |
531 |         if failed_tests:
532 |             print(f"\n❌ FAILED TESTS:")
    |                   ^^^^^^^^^^^^^^^^^^^^^
533 |             for test in failed_tests:
534 |                 details = self.results[test].get('details', '')
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/uat_multi_user_isolation.py:538:19
    |
537 |         if error_tests:
538 |             print(f"\n🚨 ERROR TESTS:")
    |                   ^^^^^^^^^^^^^^^^^^^^
539 |             for test in error_tests:
540 |                 details = self.results[test].get('details', '')
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/uat_multi_user_isolation.py:551:19
    |
550 |         if critical_passed and len(failed_tests) == 0:
551 |             print(f"\n🎯 OVERALL: PASS - Multi-user isolation is secure")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
552 |         else:
553 |             print(f"\n⚠️ OVERALL: NEEDS ATTENTION - Critical issues found")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/uat_multi_user_isolation.py:553:19
    |
551 |             print(f"\n🎯 OVERALL: PASS - Multi-user isolation is secure")
552 |         else:
553 |             print(f"\n⚠️ OVERALL: NEEDS ATTENTION - Critical issues found")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
554 |         
555 |         return {
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/uat_real_data_verification.py:36:15
   |
34 |         # 2. Using a fake PSID that we hash to create a different scenario
35 |         
36 |         print(f"\n1. TESTING WITH REAL HASH (simulating hashed input)")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
37 |         
38 |         # Test User Manager with hash
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/uat_real_data_verification.py:59:15
   |
57 |         print(f"   Hash response: {hash_response[:80]}...")
58 |         
59 |         print(f"\n2. TESTING WITH SIMULATED RAW PSID")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
60 |         
61 |         # Create a fake PSID and test the flow
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/uat_real_data_verification.py:79:15
   |
77 |         print(f"   PSID AI total: ${psid_context.get('total_amount', 0):.2f}")
78 |         
79 |         print(f"\n3. VERIFICATION")
   |               ^^^^^^^^^^^^^^^^^^^^
80 |         
81 |         # Check database consistency
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/uat_real_data_verification.py:112:15
    |
110 |         print(f"   Fake PSID returns empty (correct): {fake_data_empty}")
111 |         
112 |         print(f"\n🎯 OVERALL VERIFICATION")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
113 |         success = real_data_consistent and fake_data_empty and hash_length_ok
114 |         print(f"   Result: {'PASS' if success else 'FAIL'}")
    |
help: Remove extraneous `f` prefix

F401 [*] `os` imported but unused
  --> _quarantine/archive_legacy/uat_test_script.py:12:8
   |
10 | import hashlib
11 | import hmac
12 | import os
   |        ^^
13 | from datetime import datetime, timezone
   |
help: Remove unused import: `os`

F401 [*] `datetime.datetime` imported but unused
  --> _quarantine/archive_legacy/uat_test_script.py:13:22
   |
11 | import hmac
12 | import os
13 | from datetime import datetime, timezone
   |                      ^^^^^^^^
14 |
15 | def create_signature(body, secret):
   |
help: Remove unused import

F401 [*] `datetime.timezone` imported but unused
  --> _quarantine/archive_legacy/uat_test_script.py:13:32
   |
11 | import hmac
12 | import os
13 | from datetime import datetime, timezone
   |                                ^^^^^^^^
14 |
15 | def create_signature(body, secret):
   |
help: Remove unused import

F841 Local variable `rl2_triggered` is assigned to but never used
   --> _quarantine/archive_legacy/uat_test_script.py:105:5
    |
103 |     psid = "test_user_rate_limit"
104 |     messages_sent = 0
105 |     rl2_triggered = False
    |     ^^^^^^^^^^^^^
106 |     
107 |     for i in range(5):  # Send 5 messages rapidly
    |
help: Remove assignment to unused variable `rl2_triggered`

F401 [*] `utils.security.hash_psid` imported but unused
  --> _quarantine/archive_legacy/unified_data_access_fix.py:12:32
   |
10 |     """Test both data access paths"""
11 |     from app import app
12 |     from utils.security import hash_psid
   |                                ^^^^^^^^^
13 |     from utils.user_manager import user_manager
14 |     from utils.conversational_ai import conversational_ai
   |
help: Remove unused import: `utils.security.hash_psid`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/unified_data_access_fix.py:61:15
   |
60 |         # Check if user_manager is handling the hash correctly
61 |         print(f"   User manager uses hash_psid() internally")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
62 |         print(f"   Conversational AI uses hash directly")
63 |         print(f"   This might cause the discrepancy!")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/unified_data_access_fix.py:62:15
   |
60 |         # Check if user_manager is handling the hash correctly
61 |         print(f"   User manager uses hash_psid() internally")
62 |         print(f"   Conversational AI uses hash directly")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
63 |         print(f"   This might cause the discrepancy!")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/unified_data_access_fix.py:63:15
   |
61 |         print(f"   User manager uses hash_psid() internally")
62 |         print(f"   Conversational AI uses hash directly")
63 |         print(f"   This might cause the discrepancy!")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
64 |
65 | if __name__ == "__main__":
   |
help: Remove extraneous `f` prefix

F401 `utils.user_manager.resolve_user_id` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> _quarantine/archive_legacy/validate_fixes.py:44:44
   |
42 |         print("\n3. Import Standardization Check:")
43 |         try:
44 |             from utils.user_manager import resolve_user_id
   |                                            ^^^^^^^^^^^^^^^
45 |             print("   ✅ resolve_user_id imports correctly")
46 |         except ImportError as e:
   |
help: Remove unused import: `utils.user_manager.resolve_user_id`

F401 `utils.security.ensure_hashed` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> _quarantine/archive_legacy/validate_fixes.py:51:40
   |
50 |         try:
51 |             from utils.security import ensure_hashed
   |                                        ^^^^^^^^^^^^^
52 |             print("   ✅ ensure_hashed imports correctly from utils.security")
53 |         except ImportError as e:
   |
help: Remove unused import: `utils.security.ensure_hashed`

F401 [*] `time` imported but unused
 --> _quarantine/archive_legacy/validation_script.py:8:8
  |
7 | import requests
8 | import time
  |        ^^^^
9 | import json
  |
help: Remove unused import: `time`

E712 Avoid equality comparisons to `False`; use `not data.get("ai_enabled"):` for false checks
   --> _quarantine/archive_legacy/validation_script.py:102:12
    |
100 |         print(f"Toggle response: {json.dumps(data, indent=2)}")
101 |         
102 |         if data.get("ai_enabled") == False:
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
103 |             print("✓ PASS: AI toggled off successfully")
    |
help: Replace with `not data.get("ai_enabled")`

E712 Avoid equality comparisons to `True`; use `resp2.json().get("ai_enabled"):` for truth checks
   --> _quarantine/archive_legacy/validation_script.py:113:16
    |
111 |             )
112 |             
113 |             if resp2.json().get("ai_enabled") == True:
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
114 |                 print("✓ PASS: AI toggled back on")
115 |                 return True
    |
help: Replace with `resp2.json().get("ai_enabled")`

F401 [*] `os` imported but unused
 --> _quarantine/archive_legacy/webhook_test.py:5:8
  |
4 | import requests
5 | import os
  |        ^^
6 |
7 | def test_webhook_verification():
  |
help: Remove unused import: `os`

F401 [*] `typing.Optional` imported but unused
 --> ai/expense_parse.py:7:20
  |
6 | import logging
7 | from typing import Optional
  |                    ^^^^^^^^
8 |
9 | logger = logging.getLogger(__name__)
  |
help: Remove unused import: `typing.Optional`

E701 Multiple statements on one line (colon)
  --> ai/expense_parse.py:37:21
   |
36 |     # Unwrap callables
37 |     if callable(amt): amt = amt()
   |                     ^
38 |     if callable(cat): cat = cat()
39 |     if callable(note): note = note()
   |

E701 Multiple statements on one line (colon)
  --> ai/expense_parse.py:38:21
   |
36 |     # Unwrap callables
37 |     if callable(amt): amt = amt()
38 |     if callable(cat): cat = cat()
   |                     ^
39 |     if callable(note): note = note()
   |

E701 Multiple statements on one line (colon)
  --> ai/expense_parse.py:39:22
   |
37 |     if callable(amt): amt = amt()
38 |     if callable(cat): cat = cat()
39 |     if callable(note): note = note()
   |                      ^
40 |     
41 |     # Strict validation
   |

F401 [*] `typing.Dict` imported but unused
 --> ai/payloads/insight_payload.py:8:25
  |
6 | import hashlib
7 | from datetime import datetime
8 | from typing import Any, Dict, List
  |                         ^^^^
  |
help: Remove unused import

F401 [*] `typing.List` imported but unused
 --> ai/payloads/insight_payload.py:8:31
  |
6 | import hashlib
7 | from datetime import datetime
8 | from typing import Any, Dict, List
  |                               ^^^^
  |
help: Remove unused import

F401 [*] `typing.Union` imported but unused
  --> alembic/versions/42e1ad027c33_add_expense_constraints_and_trigger.py:9:20
   |
 7 | """
 8 | from collections.abc import Sequence
 9 | from typing import Union
   |                    ^^^^^
10 |
11 | from alembic import op
   |
help: Remove unused import: `typing.Union`

F401 [*] `typing.Union` imported but unused
  --> alembic/versions/5b555895a514_baseline_migration.py:9:20
   |
 7 | """
 8 | from collections.abc import Sequence
 9 | from typing import Union
   |                    ^^^^^
10 |
11 | # revision identifiers, used by Alembic.
   |
help: Remove unused import: `typing.Union`

F401 [*] `typing.Union` imported but unused
  --> alembic/versions/ad086f28445a_add_pending_expenses_table.py:9:20
   |
 7 | """
 8 | from collections.abc import Sequence
 9 | from typing import Union
   |                    ^^^^^
10 |
11 | import sqlalchemy as sa
   |
help: Remove unused import: `typing.Union`

F401 [*] `typing.Union` imported but unused
  --> alembic/versions/cf6afe03b206_sample_concurrent_indexes.py:31:20
   |
29 | import logging
30 | from collections.abc import Sequence
31 | from typing import Union
   |                    ^^^^^
32 |
33 | from utils.migrations import (
   |
help: Remove unused import: `typing.Union`

F401 [*] `datetime.timezone` imported but unused
 --> app.py:7:48
  |
5 | import time
6 | import uuid
7 | from datetime import UTC, datetime, timedelta, timezone
  |                                                ^^^^^^^^
8 | from functools import wraps
  |
help: Remove unused import: `datetime.timezone`

E402 Module level import not at top of file
  --> app.py:80:1
   |
79 | # Import shared db and Base from lightweight module
80 | from db_base import db
   | ^^^^^^^^^^^^^^^^^^^^^^
81 |
82 | # Create the app
   |

E402 Module level import not at top of file
   --> app.py:140:1
    |
138 |     # Removed global r"/*" route for security
139 | })
140 | from utils.rate_limiting import limiter
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
141 |
142 | limiter.init_app(app)
    |

E402 Module level import not at top of file
   --> app.py:145:1
    |
144 | # Request logging middleware using existing structured logger
145 | from utils.logger import structured_logger
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |

F401 [*] `models` imported but unused
   --> app.py:329:12
    |
327 | with app.app_context():
328 |     # Import models to ensure tables are created
329 |     import models
    |            ^^^^^^
330 |     import models_pca
    |
help: Remove unused import: `models`

F401 [*] `models_pca` imported but unused
   --> app.py:330:12
    |
328 |     # Import models to ensure tables are created
329 |     import models
330 |     import models_pca
    |            ^^^^^^^^^^
331 |     
332 |     # Use read-only database validation for Alembic-managed environments
    |
help: Remove unused import: `models_pca`

E402 Module level import not at top of file
   --> app.py:971:1
    |
970 | # Import admin authentication from admin_ops
971 | from admin_ops import require_admin
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |

E402 Module level import not at top of file
    --> app.py:2156:1
     |
2155 | # Register streamlined admin operations
2156 | from admin_ops import admin_ops
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2157 |
2158 | app.register_blueprint(admin_ops)
     |

F401 [*] `typing.Dict` imported but unused
 --> app/storage_supabase.py:7:25
  |
5 | import logging
6 | import os
7 | from typing import Any, Dict
  |                         ^^^^
8 |
9 | import requests
  |
help: Remove unused import: `typing.Dict`

E402 Module level import not at top of file
  --> backend_assistant.py:20:1
   |
19 | assert_single_db_instance(db)
20 | import logging
   | ^^^^^^^^^^^^^^
21 | from typing import Any, Dict, List, Union
   |

E402 Module level import not at top of file
  --> backend_assistant.py:21:1
   |
19 | assert_single_db_instance(db)
20 | import logging
21 | from typing import Any, Dict, List, Union
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
22 |
23 | from sqlalchemy import text
   |

F401 [*] `typing.Dict` imported but unused
  --> backend_assistant.py:21:25
   |
19 | assert_single_db_instance(db)
20 | import logging
21 | from typing import Any, Dict, List, Union
   |                         ^^^^
22 |
23 | from sqlalchemy import text
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> backend_assistant.py:21:31
   |
19 | assert_single_db_instance(db)
20 | import logging
21 | from typing import Any, Dict, List, Union
   |                               ^^^^
22 |
23 | from sqlalchemy import text
   |
help: Remove unused import

F401 [*] `typing.Union` imported but unused
  --> backend_assistant.py:21:37
   |
19 | assert_single_db_instance(db)
20 | import logging
21 | from typing import Any, Dict, List, Union
   |                                     ^^^^^
22 |
23 | from sqlalchemy import text
   |
help: Remove unused import

E402 Module level import not at top of file
  --> backend_assistant.py:23:1
   |
21 | from typing import Any, Dict, List, Union
22 |
23 | from sqlalchemy import text
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
24 |
25 | from models import User
   |

E402 Module level import not at top of file
  --> backend_assistant.py:25:1
   |
23 | from sqlalchemy import text
24 |
25 | from models import User
   | ^^^^^^^^^^^^^^^^^^^^^^^
26 | from utils.identity import ensure_hashed
27 | from utils.single_writer_guard import canonical_writer_context
   |

E402 Module level import not at top of file
  --> backend_assistant.py:26:1
   |
25 | from models import User
26 | from utils.identity import ensure_hashed
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
27 | from utils.single_writer_guard import canonical_writer_context
28 | from utils.single_writer_metrics import record_canonical_write
   |

E402 Module level import not at top of file
  --> backend_assistant.py:27:1
   |
25 | from models import User
26 | from utils.identity import ensure_hashed
27 | from utils.single_writer_guard import canonical_writer_context
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
28 | from utils.single_writer_metrics import record_canonical_write
   |

E402 Module level import not at top of file
  --> backend_assistant.py:28:1
   |
26 | from utils.identity import ensure_hashed
27 | from utils.single_writer_guard import canonical_writer_context
28 | from utils.single_writer_metrics import record_canonical_write
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
29 |
30 | logger = logging.getLogger(__name__)
   |

F401 [*] `typing.Dict` imported but unused
  --> comprehensive_e2e_audit.py:11:25
   |
 9 | import time
10 | from datetime import datetime
11 | from typing import Any, Dict
   |                         ^^^^
12 |
13 | from app import app
   |
help: Remove unused import: `typing.Dict`

E712 Avoid equality comparisons to `True`; use `expense_result.get("success"):` for truth checks
   --> comprehensive_e2e_uat.py:236:21
    |
234 |                 expense_passed = (
235 |                     expense_result.get("intent") == "EXPENSE_LOG" and
236 |                     expense_result.get("success") == True and
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
237 |                     "response" in expense_result
238 |                 )
    |
help: Replace with `expense_result.get("success")`

E712 Avoid equality comparisons to `True`; use `clarify_result.get("success"):` for truth checks
   --> comprehensive_e2e_uat.py:258:21
    |
256 |                 clarify_passed = (
257 |                     clarify_result.get("intent") == "CLARIFY_EXPENSE" and
258 |                     clarify_result.get("success") == True and
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
259 |                     "response" in clarify_result
260 |                 )
    |
help: Replace with `clarify_result.get("success")`

F401 `utils.identity.ensure_hashed` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> comprehensive_e2e_uat.py:282:40
    |
280 |         try:
281 |             from utils.db import get_user_expenses, save_expense
282 |             from utils.identity import ensure_hashed
    |                                        ^^^^^^^^^^^^^
283 |             
284 |             # Test user creation and expense storage
    |
help: Remove unused import: `utils.identity.ensure_hashed`

E712 Avoid equality comparisons to `True`; use `has_money_mention("50 taka"):` for truth checks
   --> comprehensive_expense_log_validation.py:167:20
    |
166 |             # Test money detection
167 |             assert has_money_mention("50 taka") == True
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
168 |             
169 |             health_checks.append(("Money Detection Utilities", True))
    |
help: Replace with `has_money_mention("50 taka")`

F401 [*] `typing.Dict` imported but unused
  --> comprehensive_phase_test.py:11:25
   |
 9 | import time
10 | from datetime import datetime
11 | from typing import Any, Dict
   |                         ^^^^
12 |
13 | import requests
   |
help: Remove unused import: `typing.Dict`

E722 Do not use bare `except`
   --> comprehensive_phase_test.py:236:13
    |
234 |                 health_working = health_response.status_code == 200
235 |                 health_data = health_response.json() if health_working else {}
236 |             except:
    |             ^^^^^^
237 |                 health_working = False
238 |                 health_data = {}
    |

E722 Do not use bare `except`
   --> comprehensive_phase_test.py:252:13
    |
250 |                 metrics_working = metrics_response.status_code == 200
251 |                 metrics_data = metrics_response.json() if metrics_working else {}
252 |             except:
    |             ^^^^^^
253 |                 metrics_working = False
254 |                 metrics_data = {}
    |

E722 Do not use bare `except`
   --> comprehensive_phase_test.py:267:13
    |
265 |                 dashboard_response = requests.get(f"{self.base_url}/api/monitoring/dashboard", timeout=5)
266 |                 dashboard_working = dashboard_response.status_code == 200
267 |             except:
    |             ^^^^^^
268 |                 dashboard_working = False
    |

E722 Do not use bare `except`
   --> comprehensive_phase_test.py:305:13
    |
303 |                 status_working = status_response.status_code == 200
304 |                 status_data = status_response.json() if status_working else {}
305 |             except:
    |             ^^^^^^
306 |                 status_working = False
307 |                 status_data = {}
    |

F401 [*] `typing.Dict` imported but unused
  --> comprehensive_uat_audit_transparency.py:16:20
   |
14 | from concurrent.futures import ThreadPoolExecutor, as_completed
15 | from datetime import datetime
16 | from typing import Dict, Tuple
   |                    ^^^^
17 |
18 | import requests
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> comprehensive_uat_audit_transparency.py:16:26
   |
14 | from concurrent.futures import ThreadPoolExecutor, as_completed
15 | from datetime import datetime
16 | from typing import Dict, Tuple
   |                          ^^^^^
17 |
18 | import requests
   |
help: Remove unused import

F841 Local variable `response` is assigned to but never used
  --> comprehensive_uat_audit_transparency.py:83:9
   |
81 |     start = time.time()
82 |     try:
83 |         response = requests.get(f"{BASE_URL}{endpoint}", params=params, timeout=5)
   |         ^^^^^^^^
84 |         return (time.time() - start) * 1000  # Convert to ms
85 |     except:
   |
help: Remove assignment to unused variable `response`

E722 Do not use bare `except`
  --> comprehensive_uat_audit_transparency.py:85:5
   |
83 |         response = requests.get(f"{BASE_URL}{endpoint}", params=params, timeout=5)
84 |         return (time.time() - start) * 1000  # Convert to ms
85 |     except:
   |     ^^^^^^
86 |         return float('inf')
   |

E722 Do not use bare `except`
   --> comprehensive_uat_audit_transparency.py:386:17
    |
384 |                     if response.status_code == 200:
385 |                         success_count += 1
386 |                 except:
    |                 ^^^^^^
387 |                     pass
    |

E722 Do not use bare `except`
   --> comprehensive_uat_audit_transparency.py:416:13
    |
414 |                     success_count += 1
415 |                 time.sleep(0.1)  # Brief pause
416 |             except:
    |             ^^^^^^
417 |                 pass
    |

F841 Local variable `data` is assigned to but never used
   --> comprehensive_uat_audit_transparency.py:445:13
    |
444 |         if response.status_code == 200:
445 |             data = response.json()
    |             ^^^^
446 |             # Check that no sensitive data is exposed
447 |             passed = True  # Assume good unless proven otherwise
    |
help: Remove assignment to unused variable `data`

F401 [*] `typing.Dict` imported but unused
  --> comprehensive_uat_suite.py:12:25
   |
10 | from dataclasses import dataclass
11 | from datetime import datetime, timedelta
12 | from typing import Any, Dict, List
   |                         ^^^^
13 |
14 | from app import app, db
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> comprehensive_uat_suite.py:12:31
   |
10 | from dataclasses import dataclass
11 | from datetime import datetime, timedelta
12 | from typing import Any, Dict, List
   |                               ^^^^
13 |
14 | from app import app, db
   |
help: Remove unused import

F841 Local variable `start_time` is assigned to but never used
   --> comprehensive_uat_suite.py:292:13
    |
291 |         for test_case in self.test_cases:
292 |             start_time = time.time()
    |             ^^^^^^^^^^
293 |             
294 |             try:
    |
help: Remove assignment to unused variable `start_time`

F841 Local variable `patterns` is assigned to but never used
   --> comprehensive_uat_suite.py:420:17
    |
418 |             elif check == "bilingual_detection":
419 |                 # Check if bilingual patterns were detected
420 |                 patterns = deterministic_router.patterns
    |                 ^^^^^^^^
421 |                 has_bn = any(ord(c) > 127 for c in test_case.input_text)
422 |                 return has_bn
    |
help: Remove assignment to unused variable `patterns`

F841 Local variable `result` is assigned to but never used
  --> comprehensive_uat_test.py:80:17
   |
78 |             with app.app_context():
79 |                 # Test database connection
80 |                 result = db.session.execute(db.text("SELECT 1")).scalar()
   |                 ^^^^^^
81 |                 
82 |                 # Check existing users
   |
help: Remove assignment to unused variable `result`

F841 Local variable `adapter_enabled` is assigned to but never used
   --> comprehensive_uat_test.py:202:13
    |
201 |             # Test AI adapter status
202 |             adapter_enabled = production_ai_adapter.enabled
    |             ^^^^^^^^^^^^^^^
203 |             adapter_provider = production_ai_adapter.provider
    |
help: Remove assignment to unused variable `adapter_enabled`

E722 Do not use bare `except`
  --> config.py:14:5
   |
12 |     try: 
13 |         return int(os.getenv(k, str(d)))
14 |     except: 
   |     ^^^^^^
15 |         return d
   |

F401 [*] `typing.Dict` imported but unused
  --> core/brain.py:8:25
   |
 6 | import logging
 7 | import time
 8 | from typing import Any, Dict
   |                         ^^^^
 9 |
10 | from utils.identity import psid_hash
   |
help: Remove unused import: `typing.Dict`

F401 [*] `datetime.timezone` imported but unused
  --> critical_cross_contamination_test.py:31:40
   |
30 |         # Get their actual data
31 |         from datetime import datetime, timezone
   |                                        ^^^^^^^^
32 |
33 |         from sqlalchemy import func
   |
help: Remove unused import: `datetime.timezone`

F401 [*] `typing.Dict` imported but unused
 --> data_consistency_standards.py:9:25
  |
7 | import re
8 | from decimal import ROUND_HALF_UP, Decimal
9 | from typing import Any, Dict, List, Union
  |                         ^^^^
  |
help: Remove unused import

F401 [*] `typing.List` imported but unused
 --> data_consistency_standards.py:9:31
  |
7 | import re
8 | from decimal import ROUND_HALF_UP, Decimal
9 | from typing import Any, Dict, List, Union
  |                               ^^^^
  |
help: Remove unused import

F401 [*] `typing.Union` imported but unused
 --> data_consistency_standards.py:9:37
  |
7 | import re
8 | from decimal import ROUND_HALF_UP, Decimal
9 | from typing import Any, Dict, List, Union
  |                                     ^^^^^
  |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> data_consistency_validator.py:10:25
   |
 8 | import os
 9 | import sys
10 | from typing import Any, Dict, List
   |                         ^^^^
11 |
12 | import psycopg2
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> data_consistency_validator.py:10:31
   |
 8 | import os
 9 | import sys
10 | from typing import Any, Dict, List
   |                               ^^^^
11 |
12 | import psycopg2
   |
help: Remove unused import

F401 [*] `datetime.timezone` imported but unused
  --> data_integrity_audit.py:11:37
   |
 9 | sys.path.append('/home/runner/workspace')
10 |
11 | from datetime import UTC, datetime, timezone
   |                                     ^^^^^^^^
12 |
13 | from sqlalchemy import func
   |
help: Remove unused import: `datetime.timezone`

F841 Local variable `food_variations` is assigned to but never used
   --> data_integrity_audit.py:235:9
    |
233 | …     # Check for potential category mapping issues
234 | …     transport_variations = [cat for cat, count in categories if cat and ('transport' in cat.lower() or 'ride' in cat.lower() or 'ta…
235 | …     food_variations = [cat for cat, count in categories if cat and 'food' in cat.lower()]
    |       ^^^^^^^^^^^^^^^
236 | …     
237 | …     if len(transport_variations) > 3:
    |
help: Remove assignment to unused variable `food_variations`

F401 [*] `datetime.timezone` imported but unused
  --> data_integrity_fix.py:11:37
   |
 9 | sys.path.append('/home/runner/workspace')
10 |
11 | from datetime import UTC, datetime, timezone
   |                                     ^^^^^^^^
12 |
13 | from sqlalchemy import text
   |
help: Remove unused import: `datetime.timezone`

F841 Local variable `user_amounts` is assigned to but never used
  --> deep_user_isolation_test.py:42:13
   |
41 |             user_categories = set(exp.category for exp in user_expenses if exp.category)
42 |             user_amounts = [float(exp.amount) for exp in user_expenses]
   |             ^^^^^^^^^^^^
43 |             
44 |             # Test category breakdown
   |
help: Remove assignment to unused variable `user_amounts`

F401 [*] `typing.Dict` imported but unused
  --> demo_smoke.py:10:25
   |
 8 | import sys
 9 | from datetime import datetime
10 | from typing import Any, Dict
   |                         ^^^^
11 |
12 | import requests
   |
help: Remove unused import: `typing.Dict`

F401 [*] `datetime.timezone` imported but unused
  --> emergency_data_fix.py:11:37
   |
 9 | sys.path.append('/home/runner/workspace')
10 |
11 | from datetime import UTC, datetime, timezone
   |                                     ^^^^^^^^
12 |
13 | from sqlalchemy import text
   |
help: Remove unused import: `datetime.timezone`

F401 [*] `typing.Dict` imported but unused
  --> expense_log_handlers.py:8:25
   |
 6 | import logging
 7 | import time
 8 | from typing import Any, Dict
   |                         ^^^^
 9 |
10 | logger = logging.getLogger("finbrain.expense_log_handlers")
   |
help: Remove unused import: `typing.Dict`

F401 [*] `typing.Dict` imported but unused
  --> final_100_percent_validation.py:9:25
   |
 7 | import json
 8 | import time
 9 | from typing import Any, Dict
   |                         ^^^^
10 |
11 | from app import app
   |
help: Remove unused import: `typing.Dict`

F841 Local variable `normalized` is assigned to but never used
   --> final_100_percent_validation.py:589:13
    |
588 |             # Test basic functionality
589 |             normalized = normalize_for_processing("test ৫০০ টাকা")
    |             ^^^^^^^^^^
590 |             digits_converted = to_en_digits("৫০০")
591 |             signals = extract_signals("test message")
    |
help: Remove assignment to unused variable `normalized`

F841 Local variable `digits_converted` is assigned to but never used
   --> final_100_percent_validation.py:590:13
    |
588 |             # Test basic functionality
589 |             normalized = normalize_for_processing("test ৫০০ টাকা")
590 |             digits_converted = to_en_digits("৫০০")
    |             ^^^^^^^^^^^^^^^^
591 |             signals = extract_signals("test message")
592 |             money = extract_money_mentions("৳500")
    |
help: Remove assignment to unused variable `digits_converted`

F841 Local variable `signals` is assigned to but never used
   --> final_100_percent_validation.py:591:13
    |
589 |             normalized = normalize_for_processing("test ৫০০ টাকা")
590 |             digits_converted = to_en_digits("৫০০")
591 |             signals = extract_signals("test message")
    |             ^^^^^^^
592 |             money = extract_money_mentions("৳500")
593 |             sanitized = InputSanitizer.sanitize_user_input("test")
    |
help: Remove assignment to unused variable `signals`

F841 Local variable `money` is assigned to but never used
   --> final_100_percent_validation.py:592:13
    |
590 |             digits_converted = to_en_digits("৫০০")
591 |             signals = extract_signals("test message")
592 |             money = extract_money_mentions("৳500")
    |             ^^^^^
593 |             sanitized = InputSanitizer.sanitize_user_input("test")
594 |             ai_adapter = AIAdapterNeverEmpty(stub_mode=True)
    |
help: Remove assignment to unused variable `money`

F841 Local variable `sanitized` is assigned to but never used
   --> final_100_percent_validation.py:593:13
    |
591 |             signals = extract_signals("test message")
592 |             money = extract_money_mentions("৳500")
593 |             sanitized = InputSanitizer.sanitize_user_input("test")
    |             ^^^^^^^^^
594 |             ai_adapter = AIAdapterNeverEmpty(stub_mode=True)
    |
help: Remove assignment to unused variable `sanitized`

F841 Local variable `ai_adapter` is assigned to but never used
   --> final_100_percent_validation.py:594:13
    |
592 |             money = extract_money_mentions("৳500")
593 |             sanitized = InputSanitizer.sanitize_user_input("test")
594 |             ai_adapter = AIAdapterNeverEmpty(stub_mode=True)
    |             ^^^^^^^^^^
595 |             
596 |             return {
    |
help: Remove assignment to unused variable `ai_adapter`

F401 [*] `datetime.timezone` imported but unused
  --> final_contamination_fix_validation.py:12:37
   |
11 | from concurrent.futures import ThreadPoolExecutor
12 | from datetime import UTC, datetime, timezone
   |                                     ^^^^^^^^
13 |
14 | from app import app, db
   |
help: Remove unused import: `datetime.timezone`

F841 Local variable `results` is assigned to but never used
  --> final_contamination_fix_validation.py:78:9
   |
77 |         # Test concurrent requests
78 |         results = []
   |         ^^^^^^^
79 |         
80 |         def test_user1():
   |
help: Remove assignment to unused variable `results`

F401 [*] `typing.Dict` imported but unused
 --> finbrain/ai/contracts.py:6:25
  |
4 | """
5 |
6 | from typing import Any, Dict, List, Optional, TypedDict
  |                         ^^^^
  |
help: Remove unused import

F401 [*] `typing.List` imported but unused
 --> finbrain/ai/contracts.py:6:31
  |
4 | """
5 |
6 | from typing import Any, Dict, List, Optional, TypedDict
  |                               ^^^^
  |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
 --> finbrain/ai/contracts.py:6:37
  |
4 | """
5 |
6 | from typing import Any, Dict, List, Optional, TypedDict
  |                                     ^^^^^^^^
  |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
 --> finbrain/ai/gemini_adapter.py:7:25
  |
5 | import logging
6 | import os
7 | from typing import Any, Dict, Optional
  |                         ^^^^
8 |
9 | from .contracts import AIContext, AIResult, InboundMessage
  |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
 --> finbrain/ai/gemini_adapter.py:7:31
  |
5 | import logging
6 | import os
7 | from typing import Any, Dict, Optional
  |                               ^^^^^^^^
8 |
9 | from .contracts import AIContext, AIResult, InboundMessage
  |
help: Remove unused import

F401 [*] `typing.List` imported but unused
 --> finbrain/ops/perf.py:5:20
  |
3 | """
4 |
5 | from typing import List, Optional
  |                    ^^^^
  |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
 --> finbrain/ops/perf.py:5:26
  |
3 | """
4 |
5 | from typing import List, Optional
  |                          ^^^^^^^^
  |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> finbrain/structured.py:9:25
   |
 7 | import logging
 8 | from datetime import datetime
 9 | from typing import Any, Dict
   |                         ^^^^
10 |
11 | logger = logging.getLogger("finbrain.structured")
   |
help: Remove unused import: `typing.Dict`

F401 [*] `typing.Dict` imported but unused
  --> fixed_comprehensive_audit.py:11:25
   |
 9 | import uuid
10 | from datetime import date, datetime
11 | from typing import Any, Dict
   |                         ^^^^
12 |
13 | from sqlalchemy import text
   |
help: Remove unused import: `typing.Dict`

F401 [*] `datetime.timezone` imported but unused
 --> handlers/category_breakdown.py:7:48
  |
6 | import logging
7 | from datetime import UTC, datetime, timedelta, timezone
  |                                                ^^^^^^^^
8 | from typing import Dict, Optional, Tuple
  |
help: Remove unused import: `datetime.timezone`

F401 [*] `typing.Dict` imported but unused
  --> handlers/category_breakdown.py:8:20
   |
 6 | import logging
 7 | from datetime import UTC, datetime, timedelta, timezone
 8 | from typing import Dict, Optional, Tuple
   |                    ^^^^
 9 |
10 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> handlers/category_breakdown.py:8:26
   |
 6 | import logging
 7 | from datetime import UTC, datetime, timedelta, timezone
 8 | from typing import Dict, Optional, Tuple
   |                          ^^^^^^^^
 9 |
10 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> handlers/category_breakdown.py:8:36
   |
 6 | import logging
 7 | from datetime import UTC, datetime, timedelta, timezone
 8 | from typing import Dict, Optional, Tuple
   |                                    ^^^^^
 9 |
10 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> handlers/challenge.py:8:25
   |
 6 | import logging
 7 | from datetime import date, timedelta
 8 | from typing import Any, Dict, Optional
   |                         ^^^^
 9 |
10 | from db_base import db
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> handlers/challenge.py:8:31
   |
 6 | import logging
 7 | from datetime import date, timedelta
 8 | from typing import Any, Dict, Optional
   |                               ^^^^^^^^
 9 |
10 | from db_base import db
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> handlers/coaching.py:9:25
   |
 7 | import os
 8 | import time
 9 | from typing import Any, Dict, List, Optional
   |                         ^^^^
10 |
11 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> handlers/coaching.py:9:31
   |
 7 | import os
 8 | import time
 9 | from typing import Any, Dict, List, Optional
   |                               ^^^^
10 |
11 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> handlers/coaching.py:9:37
   |
 7 | import os
 8 | import time
 9 | from typing import Any, Dict, List, Optional
   |                                     ^^^^^^^^
10 |
11 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 `utils.coaching_optimization.coaching_cache` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> handlers/coaching.py:16:45
   |
14 | try:
15 |     from utils.coaching_analytics import coaching_analytics
16 |     from utils.coaching_optimization import coaching_cache, performance_monitor
   |                                             ^^^^^^^^^^^^^^
17 |     from utils.coaching_resilience import coaching_resilience
18 |     from utils.coaching_safeguards import coaching_circuit_breaker, feature_flag_manager
   |
help: Remove unused import

F401 `utils.coaching_optimization.performance_monitor` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> handlers/coaching.py:16:61
   |
14 | try:
15 |     from utils.coaching_analytics import coaching_analytics
16 |     from utils.coaching_optimization import coaching_cache, performance_monitor
   |                                                             ^^^^^^^^^^^^^^^^^^^
17 |     from utils.coaching_resilience import coaching_resilience
18 |     from utils.coaching_safeguards import coaching_circuit_breaker, feature_flag_manager
   |
help: Remove unused import

F401 `utils.coaching_resilience.coaching_resilience` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> handlers/coaching.py:17:43
   |
15 |     from utils.coaching_analytics import coaching_analytics
16 |     from utils.coaching_optimization import coaching_cache, performance_monitor
17 |     from utils.coaching_resilience import coaching_resilience
   |                                           ^^^^^^^^^^^^^^^^^^^
18 |     from utils.coaching_safeguards import coaching_circuit_breaker, feature_flag_manager
19 |     HARDENING_AVAILABLE = True
   |
help: Remove unused import: `utils.coaching_resilience.coaching_resilience`

F841 Local variable `last_question` is assigned to but never used
   --> handlers/coaching.py:268:9
    |
266 |         state = session.get('state')
267 |         turns = session.get('turns', 0)
268 |         last_question = session.get('last_question')
    |         ^^^^^^^^^^^^^
269 |         
270 |         # Check turn limit
    |
help: Remove assignment to unused variable `last_question`

F401 [*] `typing.Dict` imported but unused
  --> handlers/expense.py:11:25
   |
 9 | from datetime import datetime, timedelta
10 | from decimal import Decimal
11 | from typing import Any, Dict, Optional
   |                         ^^^^
12 |
13 | from db_base import db
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> handlers/expense.py:11:31
   |
 9 | from datetime import datetime, timedelta
10 | from decimal import Decimal
11 | from typing import Any, Dict, Optional
   |                               ^^^^^^^^
12 |
13 | from db_base import db
   |
help: Remove unused import

F841 Local variable `start_time` is assigned to but never used
  --> handlers/expense.py:52:5
   |
50 |         Dict with response text, intent, category, and amount
51 |     """
52 |     start_time = time.time()
   |     ^^^^^^^^^^
53 |     
54 |     try:
   |
help: Remove assignment to unused variable `start_time`

F841 Local variable `expense_result` is assigned to but never used
   --> handlers/expense.py:223:9
    |
221 |         import backend_assistant as ba
222 |         # Create new expense using canonical add_expense
223 |         expense_result = ba.add_expense(
    |         ^^^^^^^^^^^^^^
224 |             user_id=psid_hash_val,
225 |             amount_minor=int(float(expense_data['amount']) * 100),
    |
help: Remove assignment to unused variable `expense_result`

F821 Undefined name `amount`
   --> handlers/expense.py:266:19
    |
264 |         'intent': 'log_single',
265 |         'category': expense_data['category'],
266 |         'amount': amount
    |                   ^^^^^^
267 |     }
    |

F821 Undefined name `new_expense`
   --> handlers/expense.py:488:52
    |
486 |         # Log successful correction
487 |         log_correction_applied(
488 |             psid_hash_val, mid, best_candidate.id, new_expense.id, 
    |                                                    ^^^^^^^^^^^
489 |             {"old_amount": old_amount, "new_amount": new_amount}
490 |         )
    |

F401 [*] `typing.Dict` imported but unused
  --> handlers/feedback.py:8:25
   |
 6 | import logging
 7 | from datetime import datetime
 8 | from typing import Any, Dict, Optional
   |                         ^^^^
 9 |
10 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> handlers/feedback.py:8:31
   |
 6 | import logging
 7 | from datetime import datetime
 8 | from typing import Any, Dict, Optional
   |                               ^^^^^^^^
 9 |
10 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
 --> handlers/insight.py:5:20
  |
3 | """
4 | import logging
5 | from typing import Dict
  |                    ^^^^
6 |
7 | from .summary import month_bounds
  |
help: Remove unused import: `typing.Dict`

F811 [*] Redefinition of unused `time` from line 57
  --> handlers/insight.py:69:20
   |
67 |             # Add request uniqueness to prevent AI response caching
68 |             import random
69 |             import time
   |                    ^^^^
70 |             request_uniqueness = f"{user_id}_{int(time.time())}_{random.randint(1000,9999)}"
   |
help: Remove definition: `time`

F401 [*] `typing.Dict` imported but unused
 --> handlers/logger.py:7:20
  |
5 | import time
6 | from datetime import datetime
7 | from typing import Dict
  |                    ^^^^
8 |
9 | from utils.security import hash_psid
  |
help: Remove unused import: `typing.Dict`

F841 Local variable `correlation_id` is assigned to but never used
  --> handlers/logger.py:45:9
   |
44 |         # Generate correlation_id at edge for idempotency
45 |         correlation_id = str(uuid.uuid4())
   |         ^^^^^^^^^^^^^^
46 |         occurred_at = datetime.now()
47 |         source_message_id = f"chat_{int(time.time() * 1000000)}"
   |
help: Remove assignment to unused variable `correlation_id`

F841 Local variable `occurred_at` is assigned to but never used
  --> handlers/logger.py:46:9
   |
44 |         # Generate correlation_id at edge for idempotency
45 |         correlation_id = str(uuid.uuid4())
46 |         occurred_at = datetime.now()
   |         ^^^^^^^^^^^
47 |         source_message_id = f"chat_{int(time.time() * 1000000)}"
   |
help: Remove assignment to unused variable `occurred_at`

F401 [*] `datetime.timezone` imported but unused
 --> handlers/milestones.py:6:54
  |
5 | import logging
6 | from datetime import UTC, date, datetime, timedelta, timezone
  |                                                      ^^^^^^^^
7 | from typing import Optional
  |
help: Remove unused import: `datetime.timezone`

F401 [*] `typing.Optional` imported but unused
 --> handlers/milestones.py:7:20
  |
5 | import logging
6 | from datetime import UTC, date, datetime, timedelta, timezone
7 | from typing import Optional
  |                    ^^^^^^^^
8 |
9 | from utils.structured import log_structured_event
  |
help: Remove unused import: `typing.Optional`

F401 [*] `typing.Dict` imported but unused
  --> handlers/reminders.py:8:25
   |
 6 | import logging
 7 | import re
 8 | from typing import Any, Dict, Optional
   |                         ^^^^
 9 |
10 | from utils.smart_reminders import cancel_reminders, schedule_reminder
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> handlers/reminders.py:8:31
   |
 6 | import logging
 7 | import re
 8 | from typing import Any, Dict, Optional
   |                               ^^^^^^^^
 9 |
10 | from utils.smart_reminders import cancel_reminders, schedule_reminder
   |
help: Remove unused import

F401 [*] `datetime.timezone` imported but unused
 --> handlers/report.py:6:48
  |
5 | import logging
6 | from datetime import UTC, datetime, timedelta, timezone
  |                                                ^^^^^^^^
7 | from typing import Dict
  |
help: Remove unused import: `datetime.timezone`

F401 [*] `typing.Dict` imported but unused
 --> handlers/report.py:7:20
  |
5 | import logging
6 | from datetime import UTC, datetime, timedelta, timezone
7 | from typing import Dict
  |                    ^^^^
8 |
9 | logger = logging.getLogger(__name__)
  |
help: Remove unused import: `typing.Dict`

E722 Do not use bare `except`
   --> handlers/report.py:110:5
    |
108 |         # In future: query challenge status from database
109 |         return 7
110 |     except:
    |     ^^^^^^
111 |         return 7  # Safe fallback
    |

F401 [*] `datetime.timezone` imported but unused
 --> handlers/summary.py:5:48
  |
3 | """
4 | import logging
5 | from datetime import UTC, datetime, timedelta, timezone
  |                                                ^^^^^^^^
6 | from typing import Dict, Tuple
  |
help: Remove unused import: `datetime.timezone`

F401 [*] `typing.Dict` imported but unused
 --> handlers/summary.py:6:20
  |
4 | import logging
5 | from datetime import UTC, datetime, timedelta, timezone
6 | from typing import Dict, Tuple
  |                    ^^^^
7 |
8 | logger = logging.getLogger(__name__)
  |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
 --> handlers/summary.py:6:26
  |
4 | import logging
5 | from datetime import UTC, datetime, timedelta, timezone
6 | from typing import Dict, Tuple
  |                          ^^^^^
7 |
8 | logger = logging.getLogger(__name__)
  |
help: Remove unused import

F841 [*] Local variable `e` is assigned to but never used
  --> handlers/summary.py:72:25
   |
70 |             total = float(total_minor / 100)
71 |             return category_map, total
72 |     except Exception as e:
   |                         ^
73 |         # Continue to fallback query if this fails
74 |         pass
   |
help: Remove assignment to unused variable `e`

F401 [*] `typing.Dict` imported but unused
  --> master_uat_audit.py:22:25
   |
20 | from dataclasses import asdict, dataclass
21 | from datetime import datetime
22 | from typing import Any, Dict, List
   |                         ^^^^
23 |
24 | # Add project root to path
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> master_uat_audit.py:22:31
   |
20 | from dataclasses import asdict, dataclass
21 | from datetime import datetime
22 | from typing import Any, Dict, List
   |                               ^^^^
23 |
24 | # Add project root to path
   |
help: Remove unused import

F841 Local variable `total_cases` is assigned to but never used
   --> master_uat_audit.py:217:13
    |
216 |             money_score = 0
217 |             total_cases = len(positive_cases) + len(negative_cases)
    |             ^^^^^^^^^^^
218 |             
219 |             # Test positive cases (should detect money)
    |
help: Remove assignment to unused variable `total_cases`

F841 Local variable `result` is assigned to but never used
   --> master_uat_audit.py:642:25
    |
640 |                 for table in tables_to_check:
641 |                     try:
642 |                         result = db.session.execute(f"SELECT 1 FROM {table} LIMIT 1")
    |                         ^^^^^^
643 |                         existing_tables += 1
644 |                     except Exception:
    |
help: Remove assignment to unused variable `result`

F401 [*] `datetime.timezone` imported but unused
  --> milestone_focused_audit.py:10:54
   |
 8 | import sys
 9 | import time
10 | from datetime import UTC, date, datetime, timedelta, timezone
   |                                                      ^^^^^^^^
11 |
12 | # Setup path
   |
help: Remove unused import: `datetime.timezone`

F401 `models_pca.InferenceSnapshot` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> models.py:10:9
   |
 8 | try:
 9 |     from models_pca import (
10 |         InferenceSnapshot,
   |         ^^^^^^^^^^^^^^^^^
11 |         TransactionEffective,
12 |         UserCorrection,
   |
help: Remove unused import

F401 `models_pca.TransactionEffective` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> models.py:11:9
   |
 9 |     from models_pca import (
10 |         InferenceSnapshot,
11 |         TransactionEffective,
   |         ^^^^^^^^^^^^^^^^^^^^
12 |         UserCorrection,
13 |         UserRule,
   |
help: Remove unused import

F401 `models_pca.UserCorrection` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> models.py:12:9
   |
10 |         InferenceSnapshot,
11 |         TransactionEffective,
12 |         UserCorrection,
   |         ^^^^^^^^^^^^^^
13 |         UserRule,
14 |     )
   |
help: Remove unused import

F401 `models_pca.UserRule` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> models.py:13:9
   |
11 |         TransactionEffective,
12 |         UserCorrection,
13 |         UserRule,
   |         ^^^^^^^^
14 |     )
15 | except ImportError:
   |
help: Remove unused import

F401 [*] `datetime.timezone` imported but unused
   --> models.py:309:30
    |
307 |     def cleanup_expired(cls):
308 |         """Remove expired pending expenses"""
309 |         from datetime import timezone
    |                              ^^^^^^^^
310 |         now = datetime.now(UTC)
311 |         expired_count = db.session.query(cls).filter(cls.expires_at < now).delete()
    |
help: Remove unused import: `datetime.timezone`

F401 [*] `datetime.timezone` imported but unused
   --> models.py:319:30
    |
317 |     def find_by_user(cls, user_id_hash: str):
318 |         """Find active pending expense for user"""
319 |         from datetime import timezone
    |                              ^^^^^^^^
320 |         now = datetime.now(UTC)
321 |         return db.session.query(cls).filter(
    |
help: Remove unused import: `datetime.timezone`

F401 [*] `typing.Dict` imported but unused
  --> nlp/signals_extractor.py:11:20
   |
 9 | import re
10 | from datetime import UTC, datetime, timedelta
11 | from typing import Dict, Optional
   |                    ^^^^
12 |
13 | from utils.text_normalizer import normalize_for_processing
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> nlp/signals_extractor.py:11:26
   |
 9 | import re
10 | from datetime import UTC, datetime, timedelta
11 | from typing import Dict, Optional
   |                          ^^^^^^^^
12 |
13 | from utils.text_normalizer import normalize_for_processing
   |
help: Remove unused import

E402 Module level import not at top of file
  --> nlp/signals_extractor.py:50:1
   |
49 | # Import enhanced money patterns
50 | from nlp.money_patterns import extract_money_mentions, has_money_mention
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

F401 [*] `datetime.timezone` imported but unused
  --> nlp/signals_extractor.py:98:42
   |
96 |     except ImportError:
97 |         # Fallback for systems without zoneinfo
98 |         from datetime import timezone as tz
   |                                          ^^
99 |         zone = UTC
   |
help: Remove unused import: `datetime.timezone`

F401 [*] `typing.Dict` imported but unused
  --> ops/preflight_probes.py:10:25
   |
 8 | import sys
 9 | import time
10 | from typing import Any, Dict, List
   |                         ^^^^
11 |
12 | # Configure logging
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> ops/preflight_probes.py:10:31
   |
 8 | import sys
 9 | import time
10 | from typing import Any, Dict, List
   |                               ^^^^
11 |
12 | # Configure logging
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
   --> parsers/expense.py:120:25
    |
118 | from datetime import datetime, timedelta
119 | from decimal import Decimal, InvalidOperation
120 | from typing import Any, Dict, List, Optional, Tuple
    |                         ^^^^
121 |
122 | logger = logging.getLogger("parsers.expense")
    |
help: Remove unused import

F401 [*] `typing.List` imported but unused
   --> parsers/expense.py:120:31
    |
118 | from datetime import datetime, timedelta
119 | from decimal import Decimal, InvalidOperation
120 | from typing import Any, Dict, List, Optional, Tuple
    |                               ^^^^
121 |
122 | logger = logging.getLogger("parsers.expense")
    |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
   --> parsers/expense.py:120:37
    |
118 | from datetime import datetime, timedelta
119 | from decimal import Decimal, InvalidOperation
120 | from typing import Any, Dict, List, Optional, Tuple
    |                                     ^^^^^^^^
121 |
122 | logger = logging.getLogger("parsers.expense")
    |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
   --> parsers/expense.py:120:47
    |
118 | from datetime import datetime, timedelta
119 | from decimal import Decimal, InvalidOperation
120 | from typing import Any, Dict, List, Optional, Tuple
    |                                               ^^^^^
121 |
122 | logger = logging.getLogger("parsers.expense")
    |
help: Remove unused import

F601 Dictionary key literal `'lassi'` repeated
   --> parsers/expense.py:330:5
    |
328 |     'lemon cha': ('food', 9),
329 |     'borhani': ('food', 10),
330 |     'lassi': ('food', 9),
    |     ^^^^^^^
331 |     'matha': ('food', 10),
332 |     'shorbot': ('food', 10),
    |
help: Remove repeated key literal `'lassi'`

F841 [*] Local variable `e` is assigned to but never used
    --> parsers/expense.py:1252:29
     |
1250 |                 if user_pref:
1251 |                     return user_pref['category']
1252 |         except Exception as e:
     |                             ^
1253 |             # Don't fail parsing if learning system has issues
1254 |             pass
     |
help: Remove assignment to unused variable `e`

F601 Dictionary key literal `'bills'` repeated
    --> parsers/expense.py:1324:9
     |
1322 |         'health': ['medicine', 'pharmacy', 'doctor', 'hospital', 'medical', 'health'],
1323 |         # Bills
1324 |         'bills': ['internet', 'phone', 'rent', 'utilities', 'bill', 'electricity', 'water'],
     |         ^^^^^^^
1325 |         # Entertainment
1326 |         'entertainment': ['movie', 'cinema', 'game', 'entertainment', 'travel', 'vacation']
     |
help: Remove repeated key literal `'bills'`

F401 [*] `typing.Dict` imported but unused
  --> parsers/expense_broken.py:10:25
   |
 8 | from datetime import datetime, timedelta
 9 | from decimal import Decimal, InvalidOperation
10 | from typing import Any, Dict, Optional
   |                         ^^^^
11 |
12 | logger = logging.getLogger("parsers.expense")
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> parsers/expense_broken.py:10:31
   |
 8 | from datetime import datetime, timedelta
 9 | from decimal import Decimal, InvalidOperation
10 | from typing import Any, Dict, Optional
   |                               ^^^^^^^^
11 |
12 | logger = logging.getLogger("parsers.expense")
   |
help: Remove unused import

F811 Redefinition of unused `is_correction_message` from line 148
   --> parsers/expense_broken.py:456:5
    |
454 | )
455 |
456 | def is_correction_message(text: str) -> bool:
    |     ^^^^^^^^^^^^^^^^^^^^^
457 |     """
458 |     Check if message contains correction phrases.
    |
help: Remove definition: `is_correction_message`

F811 Redefinition of unused `parse_correction_reason` from line 163
   --> parsers/expense_broken.py:476:5
    |
474 |     return has_correction_phrase and has_money
475 |
476 | def parse_correction_reason(text: str) -> str:
    |     ^^^^^^^^^^^^^^^^^^^^^^^
477 |     """
478 |     Extract short correction reason from correction message.
    |
help: Remove definition: `parse_correction_reason`

F811 Redefinition of unused `similar_category` from line 183
   --> parsers/expense_broken.py:506:5
    |
504 |         return "amount correction"
505 |
506 | def similar_category(cat_a: str, cat_b: str) -> bool:
    |     ^^^^^^^^^^^^^^^^
507 |     """
508 |     Check if two categories are similar (loose matching).
    |
help: Remove definition: `similar_category`

F811 Redefinition of unused `similar_merchant` from line 199
   --> parsers/expense_broken.py:536:5
    |
534 |     return False
535 |
536 | def similar_merchant(merchant_a: str, merchant_b: str) -> bool:
    |     ^^^^^^^^^^^^^^^^
537 |     """
538 |     Check if two merchants are similar (fuzzy matching).
    |
help: Remove definition: `similar_merchant`

F821 Undefined name `text_clean`
   --> parsers/expense_broken.py:593:46
    |
591 |     # Look for word after "on" or "for"
592 |     category_pattern = re.compile(r'(?i)\b(?:on|for)\s+(\w+)')
593 |     category_match = category_pattern.search(text_clean)
    |                                              ^^^^^^^^^^
594 |     
595 |     if category_match:
    |

F821 Undefined name `text_clean`
   --> parsers/expense_broken.py:604:22
    |
602 |     else:
603 |         # Try to find category keywords anywhere in text
604 |         text_lower = text_clean.lower()
    |                      ^^^^^^^^^^
605 |         for keyword, category in CATEGORY_ALIASES.items():
606 |             if keyword in text_lower:
    |

E402 Module level import not at top of file
  --> phase0_setup.py:28:1
   |
26 | # Test that flags are properly set
27 | print("\n🔍 Verifying flag configuration:")
28 | from utils.pca_feature_flags import pca_feature_flags
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
29 |
30 | pca_feature_flags.refresh_flags()
   |

F401 [*] `typing.Dict` imported but unused
  --> phase1_impact_audit.py:8:25
   |
 6 | import json
 7 | import time
 8 | from typing import Any, Dict
   |                         ^^^^
 9 |
10 | from app import app
   |
help: Remove unused import: `typing.Dict`

F401 [*] `typing.Dict` imported but unused
  --> phase2_impact_audit.py:8:25
   |
 6 | import json
 7 | import time
 8 | from typing import Any, Dict
   |                         ^^^^
 9 |
10 | from app import app
   |
help: Remove unused import: `typing.Dict`

F401 [*] `typing.Dict` imported but unused
  --> phase3_impact_audit.py:8:25
   |
 6 | import json
 7 | import time
 8 | from typing import Any, Dict
   |                         ^^^^
 9 |
10 | from app import app
   |
help: Remove unused import: `typing.Dict`

F401 [*] `typing.Dict` imported but unused
  --> phase_e_audit_runner.py:10:25
   |
 8 | import json
 9 | from datetime import datetime
10 | from typing import Any, Dict, List
   |                         ^^^^
11 |
12 | # Import Phase E components directly
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> phase_e_audit_runner.py:10:31
   |
 8 | import json
 9 | from datetime import datetime
10 | from typing import Any, Dict, List
   |                               ^^^^
11 |
12 | # Import Phase E components directly
   |
help: Remove unused import

E701 Multiple statements on one line (colon)
  --> prod_probe.py:52:15
   |
51 | print("PROD URL:", PROD_URL)
52 | for t in tests: send(t)
   |               ^
   |

F841 Local variable `bengali_results` is assigned to but never used
   --> production_flow_uat.py:635:9
    |
634 |         # Run all test suites
635 |         bengali_results = self.test_bengali_expense_logging_flow()
    |         ^^^^^^^^^^^^^^^
636 |         clarification_results = self.test_bengali_clarification_flow()
637 |         english_results = self.test_english_expense_flow()
    |
help: Remove assignment to unused variable `bengali_results`

F841 Local variable `clarification_results` is assigned to but never used
   --> production_flow_uat.py:636:9
    |
634 |         # Run all test suites
635 |         bengali_results = self.test_bengali_expense_logging_flow()
636 |         clarification_results = self.test_bengali_clarification_flow()
    |         ^^^^^^^^^^^^^^^^^^^^^
637 |         english_results = self.test_english_expense_flow()
638 |         analysis_results = self.test_analysis_requests()
    |
help: Remove assignment to unused variable `clarification_results`

F841 Local variable `english_results` is assigned to but never used
   --> production_flow_uat.py:637:9
    |
635 |         bengali_results = self.test_bengali_expense_logging_flow()
636 |         clarification_results = self.test_bengali_clarification_flow()
637 |         english_results = self.test_english_expense_flow()
    |         ^^^^^^^^^^^^^^^
638 |         analysis_results = self.test_analysis_requests()
    |
help: Remove assignment to unused variable `english_results`

F841 Local variable `analysis_results` is assigned to but never used
   --> production_flow_uat.py:638:9
    |
636 |         clarification_results = self.test_bengali_clarification_flow()
637 |         english_results = self.test_english_expense_flow()
638 |         analysis_results = self.test_analysis_requests()
    |         ^^^^^^^^^^^^^^^^
639 |         
640 |         # Validate data integrity
    |
help: Remove assignment to unused variable `analysis_results`

F841 Local variable `health_metrics` is assigned to but never used
   --> production_flow_uat.py:645:9
    |
644 |         # Analyze system health
645 |         health_metrics = self.analyze_system_health()
    |         ^^^^^^^^^^^^^^
646 |         
647 |         # Generate deployment recommendation
    |
help: Remove assignment to unused variable `health_metrics`

F841 Local variable `deployment_rec` is assigned to but never used
   --> production_flow_uat.py:648:9
    |
647 |         # Generate deployment recommendation
648 |         deployment_rec = self.generate_deployment_recommendation()
    |         ^^^^^^^^^^^^^^
649 |         
650 |         # Save comprehensive report
    |
help: Remove assignment to unused variable `deployment_rec`

F841 Local variable `report_file` is assigned to but never used
   --> production_flow_uat.py:651:9
    |
650 |         # Save comprehensive report
651 |         report_file = self.save_comprehensive_report()
    |         ^^^^^^^^^^^
652 |         
653 |         print("\n" + "=" * 75)
    |
help: Remove assignment to unused variable `report_file`

F401 [*] `typing.Optional` imported but unused
  --> production_ready_uat.py:19:20
   |
17 | from datetime import datetime
18 | from decimal import Decimal
19 | from typing import Optional
   |                    ^^^^^^^^
20 |
21 | # Add project root to path
   |
help: Remove unused import: `typing.Optional`

F401 [*] `typing.Dict` imported but unused
  --> pwa_nl_integration.py:8:25
   |
 6 | import hashlib
 7 | import logging
 8 | from typing import Any, Dict, List, Optional
   |                         ^^^^
 9 |
10 | from flask import render_template
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> pwa_nl_integration.py:8:31
   |
 6 | import hashlib
 7 | import logging
 8 | from typing import Any, Dict, List, Optional
   |                               ^^^^
 9 |
10 | from flask import render_template
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> pwa_nl_integration.py:8:37
   |
 6 | import hashlib
 7 | import logging
 8 | from typing import Any, Dict, List, Optional
   |                                     ^^^^^^^^
 9 |
10 | from flask import render_template
   |
help: Remove unused import

F841 [*] Local variable `e` is assigned to but never used
   --> pwa_ui.py:514:25
    |
512 |         }), 200
513 |         
514 |     except Exception as e:
    |                         ^
515 |         db.session.rollback()
516 |         return jsonify({"error": "Registration failed. Please try again."}), 500
    |
help: Remove assignment to unused variable `e`

F401 [*] `typing.Dict` imported but unused
  --> robust_e2e_audit.py:11:25
   |
 9 | import uuid
10 | from datetime import datetime
11 | from typing import Any, Dict
   |                         ^^^^
12 |
13 | from sqlalchemy import text
   |
help: Remove unused import: `typing.Dict`

F401 [*] `typing.Dict` imported but unused
  --> routes/deploy_probe.py:12:25
   |
10 | from datetime import datetime
11 | from functools import wraps
12 | from typing import Any, Dict, List
   |                         ^^^^
13 |
14 | from flask import Blueprint, jsonify, request
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> routes/deploy_probe.py:12:31
   |
10 | from datetime import datetime
11 | from functools import wraps
12 | from typing import Any, Dict, List
   |                               ^^^^
13 |
14 | from flask import Blueprint, jsonify, request
   |
help: Remove unused import

E722 Do not use bare `except`
   --> routes/deploy_probe.py:712:13
    |
710 |             try:
711 |                 db.session.rollback()
712 |             except:
    |             ^^^^^^
713 |                 pass
    |

F401 [*] `typing.Dict` imported but unused
  --> routes/pca_api.py:9:20
   |
 7 | import time
 8 | from datetime import datetime
 9 | from typing import Dict, List
   |                    ^^^^
10 |
11 | from flask import Blueprint, jsonify, request
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> routes/pca_api.py:9:26
   |
 7 | import time
 8 | from datetime import datetime
 9 | from typing import Dict, List
   |                          ^^^^
10 |
11 | from flask import Blueprint, jsonify, request
   |
help: Remove unused import

E402 Module level import not at top of file
  --> routes/pca_ui.py:15:1
   |
14 | assert_single_db_instance(db)
15 | from models_pca import UserCorrection, UserRule
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
16 | from utils.deterministic import ensure_hashed
17 | from utils.pca_feature_flags import pca_feature_flags
   |

E402 Module level import not at top of file
  --> routes/pca_ui.py:16:1
   |
14 | assert_single_db_instance(db)
15 | from models_pca import UserCorrection, UserRule
16 | from utils.deterministic import ensure_hashed
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
17 | from utils.pca_feature_flags import pca_feature_flags
   |

E402 Module level import not at top of file
  --> routes/pca_ui.py:17:1
   |
15 | from models_pca import UserCorrection, UserRule
16 | from utils.deterministic import ensure_hashed
17 | from utils.pca_feature_flags import pca_feature_flags
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
18 |
19 | logger = logging.getLogger("finbrain.pca_ui")
   |

F841 [*] Local variable `e` is assigned to but never used
   --> routes_assets.py:131:25
    |
129 |         return jsonify(result), 200
130 |         
131 |     except Exception as e:
    |                         ^
132 |         latency_ms = (time.time() - start_time) * 1000
133 |         safe_user_id = user_id if 'user_id' in locals() and user_id else "unknown"
    |
help: Remove assignment to unused variable `e`

F841 [*] Local variable `e` is assigned to but never used
   --> routes_assets.py:168:25
    |
166 |         return jsonify(result), 200
167 |         
168 |     except Exception as e:
    |                         ^
169 |         latency_ms = (time.time() - start_time) * 1000
170 |         safe_user_id = user_id if 'user_id' in locals() and user_id else "unknown"
    |
help: Remove assignment to unused variable `e`

F821 Undefined name `ASSETS_ALLOW_DELETE`
   --> routes_assets.py:179:12
    |
177 | def delete_asset():
178 |     """Delete asset (feature-flagged)"""
179 |     if not ASSETS_ALLOW_DELETE:
    |            ^^^^^^^^^^^^^^^^^^^
180 |         return jsonify({"error": "Asset deletion not enabled"}), 403
    |

F841 [*] Local variable `e` is assigned to but never used
   --> routes_assets.py:208:25
    |
206 |         return jsonify({"success": True, "path": path}), 200
207 |         
208 |     except Exception as e:
    |                         ^
209 |         latency_ms = (time.time() - start_time) * 1000
210 |         safe_user_id = user_id if 'user_id' in locals() and user_id else "unknown"
    |
help: Remove assignment to unused variable `e`

E402 Module level import not at top of file
  --> routes_single_writer_observability.py:37:1
   |
35 |         return f(*args, **kwargs)
36 |     return decorated_function
37 | import logging
   | ^^^^^^^^^^^^^^
38 |
39 | logger = logging.getLogger(__name__)
   |

F401 [*] `datetime.timezone` imported but unused
   --> routes_telemetry.py:274:40
    |
272 |         """
273 |         
274 |         from datetime import datetime, timezone
    |                                        ^^^^^^^^
275 |         
276 |         return render_template_string(
    |
help: Remove unused import: `datetime.timezone`

F821 Undefined name `traceback`
   --> scripts/comprehensive_system_audit.py:352:9
    |
350 |     except Exception as e:
351 |         print(f"AUDIT FAILED: {e}")
352 |         traceback.print_exc()
    |         ^^^^^^^^^
353 |         sys.exit(1)
    |

F401 [*] `typing.Optional` imported but unused
  --> scripts/deployment_confidence.py:12:20
   |
10 | import time
11 | from datetime import datetime
12 | from typing import Optional
   |                    ^^^^^^^^
13 |
14 | import requests
   |
help: Remove unused import: `typing.Optional`

E722 Do not use bare `except`
   --> scripts/deployment_confidence.py:211:17
    |
209 |                     else:
210 |                         self.log_result("AI Response", "WARN", "Empty reply")
211 |                 except:
    |                 ^^^^^^
212 |                     self.log_result("AI Response", "WARN", "Non-JSON response")
213 |             else:
    |

F401 [*] `typing.Dict` imported but unused
  --> scripts/dev_simulate_correction.py:12:25
   |
10 | import time
11 | from datetime import datetime
12 | from typing import Any, Dict, List
   |                         ^^^^
13 |
14 | # Add project root to path
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> scripts/dev_simulate_correction.py:12:31
   |
10 | import time
11 | from datetime import datetime
12 | from typing import Any, Dict, List
   |                               ^^^^
13 |
14 | # Add project root to path
   |
help: Remove unused import

E712 Avoid equality comparisons to `True`; use `detected:` for truth checks
   --> scripts/dev_simulate_correction.py:105:27
    |
103 |                 'detected': detected,
104 |                 'expected': True,
105 |                 'passed': detected == True
    |                           ^^^^^^^^^^^^^^^^
106 |             }
    |
help: Replace with `detected`

E712 Avoid equality comparisons to `False`; use `not corrections_enabled:` for false checks
   --> scripts/dev_simulate_correction.py:297:27
    |
295 |                 'corrections_enabled': corrections_enabled,
296 |                 'expected': False,  # Default should be False
297 |                 'passed': corrections_enabled == False
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
298 |             }
    |
help: Replace with `not corrections_enabled`

E701 Multiple statements on one line (colon)
  --> scripts/e2e_db_truth.py:34:12
   |
32 | def die(msg, path=None):
33 |     print(f"FAIL: {msg}")
34 |     if path: print(f"See: {path}")
   |            ^
35 |     sys.exit(2)
   |

E701 Multiple statements on one line (colon)
  --> scripts/e2e_db_truth.py:63:11
   |
61 | open(f"{OUTDIR}/dbtruth_db_row.json","w").write(json.dumps({k:str(v) for k,v in (row or {}).items()}, indent=2))
62 |
63 | if not row: die("No expense row found for user after chat insert")
   |           ^
64 |
65 | # 3) Compare values
   |

E701 Multiple statements on one line (colon)
  --> scripts/finbrain_diagnose.py:56:17
   |
54 | try:
55 |     ai_flag = (body2 or {}).get("ai_status") or (body2 or {}).get("AI_ENABLED")
56 | except Exception: pass
   |                 ^
57 | print("GET /ops/telemetry ->", code2, "| AI:", ai_flag, "| Extra:", clip(body2))
   |

F401 [*] `typing.List` imported but unused
  --> scripts/generate_recovery_doc.py:23:20
   |
21 | import sys
22 | from pathlib import Path
23 | from typing import List, Optional
   |                    ^^^^
24 |
25 | # Setup logging
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> scripts/generate_recovery_doc.py:23:26
   |
21 | import sys
22 | from pathlib import Path
23 | from typing import List, Optional
   |                          ^^^^^^^^
24 |
25 | # Setup logging
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> scripts/migrate_with_lock.py:12:20
   |
10 | import sys
11 | import time
12 | from typing import Optional
   |                    ^^^^^^^^
13 |
14 | import psycopg2
   |
help: Remove unused import: `typing.Optional`

E722 Do not use bare `except`
  --> scripts/security_audit.py:91:17
   |
89 |                             hardcoded_found = True
90 |                             break
91 |                 except:
   |                 ^^^^^^
92 |                     continue
   |

F841 Local variable `test_psid_hash` is assigned to but never used
  --> scripts/smoke_coach_guard.py:55:13
   |
53 |             router = ProductionRouter()
54 |             test_psid = "test_psid_12345"
55 |             test_psid_hash = "test_hash_67890"
   |             ^^^^^^^^^^^^^^
56 |             test_rid = "test_rid_999"
   |
help: Remove assignment to unused variable `test_psid_hash`

F401 [*] `typing.Dict` imported but unused
  --> scripts/test_coaching_hardening.py:8:25
   |
 7 | import time
 8 | from typing import Any, Dict
   |                         ^^^^
 9 |
10 | import requests
   |
help: Remove unused import: `typing.Dict`

E722 Do not use bare `except`
  --> scripts/test_coaching_hardening.py:52:17
   |
50 |                     if 'timestamp' in data:
51 |                         print(f"     Latest data: {data['timestamp']}")
52 |                 except:
   |                 ^^^^^^
53 |                     print(f"  ✅ {response.status_code} (non-JSON response)")
54 |             else:
   |

E722 Do not use bare `except`
   --> scripts/test_endpoint_headers.py:166:13
    |
164 |                 else:
165 |                     f.write(response.text)
166 |             except:
    |             ^^^^^^
167 |                 f.write(response.text)
    |

F401 [*] `typing.Dict` imported but unused
  --> scripts/test_user_journeys.py:10:25
   |
 8 | import time
 9 | from pathlib import Path
10 | from typing import Any, Dict
   |                         ^^^^
11 |
12 | import requests
   |
help: Remove unused import: `typing.Dict`

F841 Local variable `test_message` is assigned to but never used
  --> scripts/test_user_journeys.py:41:13
   |
39 |         try:
40 |             # Test expense message
41 |             test_message = "burger 50"
   |             ^^^^^^^^^^^^
42 |             
43 |             # Check if there's a chat endpoint we can test
   |
help: Remove assignment to unused variable `test_message`

F841 Local variable `test_message` is assigned to but never used
  --> scripts/test_user_journeys.py:63:13
   |
62 |         try:
63 |             test_message = "rickshaw 100 and jhalmuri 10"
   |             ^^^^^^^^^^^^
64 |             
65 |             # Similar limitation as single expense - need actual expense processing endpoint
   |
help: Remove assignment to unused variable `test_message`

F841 Local variable `correction_message` is assigned to but never used
  --> scripts/test_user_journeys.py:84:13
   |
83 |         try:
84 |             correction_message = "sorry, it's 500 not 50"
   |             ^^^^^^^^^^^^^^^^^^
85 |             
86 |             response = self.session.get(f"{self.base_url}/health", timeout=10)
   |
help: Remove assignment to unused variable `correction_message`

E722 Do not use bare `except`
   --> scripts/test_user_journeys.py:159:21
    |
157 |                             self.log_result("AI Adapter v2", "PARTIAL", "AI endpoints not found, but system stable")
158 |                             return True
159 |                     except:
    |                     ^^^^^^
160 |                         self.log_result("AI Adapter v2", "PARTIAL", "System stable, AI adapter status unknown")
161 |                         return True
    |

F401 [*] `typing.List` imported but unused
  --> scripts/update_changelog.py:24:20
   |
22 | import sys
23 | from pathlib import Path
24 | from typing import List, Optional
   |                    ^^^^
25 |
26 | # Setup logging
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> scripts/update_changelog.py:24:26
   |
22 | import sys
23 | from pathlib import Path
24 | from typing import List, Optional
   |                          ^^^^^^^^
25 |
26 | # Setup logging
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> security_scanner.py:13:20
   |
11 | import sys
12 | from pathlib import Path
13 | from typing import Dict, List
   |                    ^^^^
14 |
15 | # Configure logging
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> security_scanner.py:13:26
   |
11 | import sys
12 | from pathlib import Path
13 | from typing import Dict, List
   |                          ^^^^
14 |
15 | # Configure logging
   |
help: Remove unused import

F841 Local variable `low_violations` is assigned to but never used
   --> security_scanner.py:342:13
    |
340 |             high_violations = [v for v in self.violations if v.get('severity') == 'HIGH']
341 |             medium_violations = [v for v in self.violations if v.get('severity') == 'MEDIUM']
342 |             low_violations = [v for v in self.violations if v.get('severity') == 'LOW']
    |             ^^^^^^^^^^^^^^
343 |             
344 |             if high_violations:
    |
help: Remove assignment to unused variable `low_violations`

F841 Local variable `results` is assigned to but never used
   --> security_scanner.py:381:5
    |
379 |     """Main security scanner entry point"""
380 |     scanner = SecurityScanner()
381 |     results = scanner.scan_all()
    |     ^^^^^^^
382 |     
383 |     # Generate and display report
    |
help: Remove assignment to unused variable `results`

F401 [*] `typing.Optional` imported but unused
 --> templates/replies.py:7:20
  |
6 | from decimal import Decimal
7 | from typing import Optional
  |                    ^^^^^^^^
  |
help: Remove unused import: `typing.Optional`

F401 [*] `typing.Dict` imported but unused
  --> templates/replies_ai.py:9:25
   |
 7 | import random
 8 | from decimal import Decimal
 9 | from typing import Any, Dict, List, Optional
   |                         ^^^^
10 |
11 | logger = logging.getLogger("templates.replies_ai")
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> templates/replies_ai.py:9:31
   |
 7 | import random
 8 | from decimal import Decimal
 9 | from typing import Any, Dict, List, Optional
   |                               ^^^^
10 |
11 | logger = logging.getLogger("templates.replies_ai")
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> templates/replies_ai.py:9:37
   |
 7 | import random
 8 | from decimal import Decimal
 9 | from typing import Any, Dict, List, Optional
   |                                     ^^^^^^^^
10 |
11 | logger = logging.getLogger("templates.replies_ai")
   |
help: Remove unused import

F401 `parsers.expense.extract_all_expenses` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> test_bengali_food_enhancements.py:31:33
   |
30 | try:
31 |     from parsers.expense import extract_all_expenses, parse_expense
   |                                 ^^^^^^^^^^^^^^^^^^^^
32 |     print("✓ Successfully imported expense parser functions")
33 | except ImportError as e:
   |
help: Remove unused import: `parsers.expense.extract_all_expenses`

F401 [*] `typing.Dict` imported but unused
 --> test_e2e_data_flow.py:7:25
  |
5 | """
6 |
7 | from typing import Any, Dict, List
  |                         ^^^^
  |
help: Remove unused import

F401 [*] `typing.List` imported but unused
 --> test_e2e_data_flow.py:7:31
  |
5 | """
6 |
7 | from typing import Any, Dict, List
  |                               ^^^^
  |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> test_nl_parser.py:12:20
   |
10 | import sys
11 | from datetime import datetime
12 | from typing import Dict, List
   |                    ^^^^
13 |
14 | # Import our implementation
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> test_nl_parser.py:12:26
   |
10 | import sys
11 | from datetime import datetime
12 | from typing import Dict, List
   |                          ^^^^
13 |
14 | # Import our implementation
   |
help: Remove unused import

E712 Avoid equality comparisons to `True`; use `config['bilingual']:` for truth checks
   --> test_routing_integration.py:149:43
    |
147 |             ("Scope is conservative", config['scope'] in ['zero_ledger_only', 'analysis_keywords_only']),
148 |             ("Coaching threshold reasonable", config['coaching_threshold'] >= 5),
149 |             ("Bilingual support enabled", config['bilingual'] == True),
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
150 |         ]
    |
help: Replace with `config['bilingual']`

F401 [*] `typing.Dict` imported but unused
 --> test_uat_scenarios.py:7:20
  |
6 | import json
7 | from typing import Dict, List, Optional
  |                    ^^^^
8 |
9 | import requests
  |
help: Remove unused import

F401 [*] `typing.List` imported but unused
 --> test_uat_scenarios.py:7:26
  |
6 | import json
7 | from typing import Dict, List, Optional
  |                          ^^^^
8 |
9 | import requests
  |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
 --> test_uat_scenarios.py:7:32
  |
6 | import json
7 | from typing import Dict, List, Optional
  |                                ^^^^^^^^
8 |
9 | import requests
  |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> tests/e2e_pipeline/run_e2e_pipeline.py:13:25
   |
11 | import time
12 | from datetime import datetime
13 | from typing import Any, Dict, List
   |                         ^^^^
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> tests/e2e_pipeline/run_e2e_pipeline.py:13:31
   |
11 | import time
12 | from datetime import datetime
13 | from typing import Any, Dict, List
   |                               ^^^^
   |
help: Remove unused import

F841 Local variable `module_path` is assigned to but never used
  --> tests/e2e_pipeline/run_e2e_pipeline.py:80:9
   |
78 |     def _run_test_module(self, module: str, verbose: bool) -> dict[str, Any]:
79 |         """Run individual test module"""
80 |         module_path = f"tests.e2e_pipeline.{module}"
   |         ^^^^^^^^^^^
81 |         start_time = time.time()
   |
help: Remove assignment to unused variable `module_path`

F841 Local variable `original_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_audit_trail.py:119:13
    |
117 |             from utils.db import create_expense
118 |             
119 |             original_expense = create_expense(
    |             ^^^^^^^^^^^^^^^^
120 |                 user_id=user['psid_hash'],
121 |                 amount=100.0,
    |
help: Remove assignment to unused variable `original_expense`

F841 Local variable `original_amount` is assigned to but never used
   --> tests/e2e_pipeline/test_audit_trail.py:140:21
    |
138 |                 if expense:
139 |                     # Update expense to simulate correction
140 |                     original_amount = expense.amount
    |                     ^^^^^^^^^^^^^^^
141 |                     original_category = expense.category
    |
help: Remove assignment to unused variable `original_amount`

F841 Local variable `original_category` is assigned to but never used
   --> tests/e2e_pipeline/test_audit_trail.py:141:21
    |
139 |                     # Update expense to simulate correction
140 |                     original_amount = expense.amount
141 |                     original_category = expense.category
    |                     ^^^^^^^^^^^^^^^^^
142 |                     
143 |                     expense.amount = 150.0  # Corrected amount
    |
help: Remove assignment to unused variable `original_category`

F841 Local variable `initial_count` is assigned to but never used
   --> tests/e2e_pipeline/test_audit_trail.py:172:21
    |
171 |                     # Count existing corrections
172 |                     initial_count = UserCorrection.query.filter_by(
    |                     ^^^^^^^^^^^^^
173 |                         user_id=user['psid_hash']
174 |                     ).count()
    |
help: Remove assignment to unused variable `initial_count`

F841 Local variable `alice_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_audit_trail.py:401:13
    |
399 |             from utils.db import create_expense
400 |             
401 |             alice_expense = create_expense(
    |             ^^^^^^^^^^^^^
402 |                 user_id=user_alice['psid_hash'],
403 |                 amount=111.0,
    |
help: Remove assignment to unused variable `alice_expense`

F841 Local variable `bob_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_audit_trail.py:412:13
    |
410 |             )
411 |             
412 |             bob_expense = create_expense(
    |             ^^^^^^^^^^^
413 |                 user_id=user_bob['psid_hash'],
414 |                 amount=222.0,
    |
help: Remove assignment to unused variable `bob_expense`

F401 [*] `typing.Dict` imported but unused
  --> tests/e2e_pipeline/test_base.py:14:25
   |
12 | from datetime import date, datetime, timedelta
13 | from decimal import Decimal
14 | from typing import Any, Dict, List, Optional
   |                         ^^^^
15 | from unittest.mock import patch
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> tests/e2e_pipeline/test_base.py:14:31
   |
12 | from datetime import date, datetime, timedelta
13 | from decimal import Decimal
14 | from typing import Any, Dict, List, Optional
   |                               ^^^^
15 | from unittest.mock import patch
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> tests/e2e_pipeline/test_base.py:14:37
   |
12 | from datetime import date, datetime, timedelta
13 | from decimal import Decimal
14 | from typing import Any, Dict, List, Optional
   |                                     ^^^^^^^^
15 | from unittest.mock import patch
   |
help: Remove unused import

F841 Local variable `expense` is assigned to but never used
  --> tests/e2e_pipeline/test_chat_path.py:46:13
   |
45 |             # Verify database persistence
46 |             expense = self.assert_expense_created(
   |             ^^^^^^^
47 |                 user_hash=user_hash,
48 |                 expected_amount=150.0,
   |
help: Remove assignment to unused variable `expense`

F841 Local variable `expense` is assigned to but never used
  --> tests/e2e_pipeline/test_chat_path.py:82:13
   |
81 |             # Verify database persistence
82 |             expense = self.assert_expense_created(
   |             ^^^^^^^
83 |                 user_hash=user_hash,
84 |                 expected_amount=200.0,
   |
help: Remove assignment to unused variable `expense`

F841 Local variable `result1` is assigned to but never used
   --> tests/e2e_pipeline/test_chat_path.py:131:13
    |
130 |             # First creation
131 |             result1 = create_expense(
    |             ^^^^^^^
132 |                 user_id=user_hash,
133 |                 amount=100.0,
    |
help: Remove assignment to unused variable `result1`

F841 Local variable `result2` is assigned to but never used
   --> tests/e2e_pipeline/test_chat_path.py:143:13
    |
142 |             # Second creation with same correlation_id should not duplicate
143 |             result2 = create_expense(
    |             ^^^^^^^
144 |                 user_id=user_hash,
145 |                 amount=100.0,
    |
help: Remove assignment to unused variable `result2`

E722 Do not use bare `except`
   --> tests/e2e_pipeline/test_ci_cd_integration.py:116:13
    |
114 |                         # Verify configuration structure
115 |                         assert isinstance(config_data, dict), "Configuration should return dict"
116 |             except:
    |             ^^^^^^
117 |                 # Configuration endpoint might be protected or unavailable in test
118 |                 pass
    |

F841 Local variable `user` is assigned to but never used
   --> tests/e2e_pipeline/test_ci_cd_integration.py:258:13
    |
256 |             import time
257 |             
258 |             user = test_users['alice']
    |             ^^^^
259 |             
260 |             # Test endpoint response times
    |
help: Remove assignment to unused variable `user`

F841 Local variable `response` is assigned to but never used
   --> tests/e2e_pipeline/test_ci_cd_integration.py:274:21
    |
272 |                     response = client.get(endpoint, headers=headers or {})
273 |                 elif method == 'POST':
274 |                     response = client.post(endpoint, data=data, headers=headers or {})
    |                     ^^^^^^^^
275 |                 
276 |                 response_time = time.time() - start_time
    |
help: Remove assignment to unused variable `response`

F841 Local variable `user` is assigned to but never used
   --> tests/e2e_pipeline/test_ci_cd_integration.py:290:13
    |
288 |         with self.mock_environment_secrets():
289 |             # Test that requests generate appropriate logs
290 |             user = test_users['alice']
    |             ^^^^
291 |             
292 |             # Make request that should generate logs
    |
help: Remove assignment to unused variable `user`

E722 Do not use bare `except`
   --> tests/e2e_pipeline/test_ci_cd_integration.py:313:13
    |
311 |                     if monitoring_data:
312 |                         assert isinstance(monitoring_data, dict), "Monitoring data should be structured"
313 |             except:
    |             ^^^^^^
314 |                 # Monitoring endpoints might be protected
315 |                 pass
    |

F841 Local variable `expense` is assigned to but never used
   --> tests/e2e_pipeline/test_ci_cd_integration.py:340:21
    |
338 |                 # Verify expense was created atomically
339 |                 if result:
340 |                     expense = self.assert_expense_created(
    |                     ^^^^^^^
341 |                         user_hash=user['psid_hash'],
342 |                         expected_amount=500.0,
    |
help: Remove assignment to unused variable `expense`

F841 [*] Local variable `e` is assigned to but never used
   --> tests/e2e_pipeline/test_ci_cd_integration.py:349:33
    |
347 |                     self.assert_user_totals_updated(user['psid_hash'], 500.0)
348 |                     
349 |             except Exception as e:
    |                                 ^
350 |                 # If operation fails, it should fail cleanly without partial state
351 |                 # Verify no partial data was left behind
    |
help: Remove assignment to unused variable `e`

F841 Local variable `other_user` is assigned to but never used
   --> tests/e2e_pipeline/test_end_to_end.py:128:5
    |
127 |     # Step 6: User isolation (simulate cross-user)
128 |     other_user = setup_session(client, "uat_other_user")
    |     ^^^^^^^^^^
129 |     r = client.post("/api/backend/get_totals",
130 |                     data=json.dumps({"period": "week"}),
    |
help: Remove assignment to unused variable `other_user`

F841 Local variable `expense` is assigned to but never used
  --> tests/e2e_pipeline/test_form_path.py:76:13
   |
75 |             # Verify database persistence
76 |             expense = self.assert_expense_created(
   |             ^^^^^^^
77 |                 user_hash=user['x_user_id'],
78 |                 expected_amount=200.0,
   |
help: Remove assignment to unused variable `expense`

F841 Local variable `expense` is assigned to but never used
   --> tests/e2e_pipeline/test_form_path.py:101:21
    |
 99 |                 if response_data.get('success') is True:
100 |                     # Verify database persistence if parsing succeeded
101 |                     expense = self.assert_expense_created(
    |                     ^^^^^^^
102 |                         user_hash=user['x_user_id'],
103 |                         expected_amount=300.0,
    |
help: Remove assignment to unused variable `expense`

F841 Local variable `expense` is assigned to but never used
   --> tests/e2e_pipeline/test_form_path.py:261:13
    |
260 |             # Verify category is normalized to lowercase
261 |             expense = self.assert_expense_created(
    |             ^^^^^^^
262 |                 user_hash=user['x_user_id'],
263 |                 expected_amount=50.0,
    |
help: Remove assignment to unused variable `expense`

F841 Local variable `result2` is assigned to but never used
  --> tests/e2e_pipeline/test_idempotency.py:45:13
   |
44 |             # Second expense creation with same correlation_id
45 |             result2 = create_expense(
   |             ^^^^^^^
46 |                 user_id=user['psid_hash'],
47 |                 amount=100.0,
   |
help: Remove assignment to unused variable `result2`

F841 Local variable `form_response` is assigned to but never used
   --> tests/e2e_pipeline/test_idempotency.py:163:13
    |
161 |             }
162 |             
163 |             form_response = client.post('/expense', data=form_data, headers=headers)
    |             ^^^^^^^^^^^^^
164 |             
165 |             # Form should handle idempotency (implementation dependent)
    |
help: Remove assignment to unused variable `form_response`

F841 Local variable `result1` is assigned to but never used
   --> tests/e2e_pipeline/test_idempotency.py:226:13
    |
225 |             # Create expense with specific amount
226 |             result1 = create_expense(
    |             ^^^^^^^
227 |                 user_id=user['psid_hash'],
228 |                 amount=100.0,
    |
help: Remove assignment to unused variable `result1`

F841 Local variable `result2` is assigned to but never used
   --> tests/e2e_pipeline/test_idempotency.py:239:17
    |
237 |             # Try to create with different amount but same correlation_id
238 |             try:
239 |                 result2 = create_expense(
    |                 ^^^^^^^
240 |                     user_id=user['psid_hash'],
241 |                     amount=200.0,  # Different amount
    |
help: Remove assignment to unused variable `result2`

F841 [*] Local variable `e` is assigned to but never used
   --> tests/e2e_pipeline/test_idempotency.py:257:33
    |
255 |                 )
256 |                 
257 |             except Exception as e:
    |                                 ^
258 |                 # Implementation might reject or handle differently
259 |                 pass
    |
help: Remove assignment to unused variable `e`

F841 Local variable `result1` is assigned to but never used
   --> tests/e2e_pipeline/test_idempotency.py:270:13
    |
269 |             # Create initial expense
270 |             result1 = create_expense(
    |             ^^^^^^^
271 |                 user_id=user['psid_hash'],
272 |                 amount=75.0,
    |
help: Remove assignment to unused variable `result1`

F841 Local variable `result2` is assigned to but never used
   --> tests/e2e_pipeline/test_idempotency.py:286:13
    |
285 |             # Try to create again after wait
286 |             result2 = create_expense(
    |             ^^^^^^^
287 |                 user_id=user['psid_hash'],
288 |                 amount=75.0,
    |
help: Remove assignment to unused variable `result2`

F841 Local variable `alice_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_idempotency.py:455:13
    |
454 |             # Verify both users have their expenses
455 |             alice_expense = self.assert_expense_created(
    |             ^^^^^^^^^^^^^
456 |                 user_hash=user_alice['psid_hash'],
457 |                 expected_amount=100.0,
    |
help: Remove assignment to unused variable `alice_expense`

F841 Local variable `bob_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_idempotency.py:461:13
    |
459 |             )
460 |             
461 |             bob_expense = self.assert_expense_created(
    |             ^^^^^^^^^^^
462 |                 user_hash=user_bob['psid_hash'],
463 |                 expected_amount=200.0,
    |
help: Remove assignment to unused variable `bob_expense`

F841 Local variable `result` is assigned to but never used
   --> tests/e2e_pipeline/test_idempotency.py:485:21
    |
483 |             for i, invalid_id in enumerate(invalid_correlation_ids):
484 |                 try:
485 |                     result = create_expense(
    |                     ^^^^^^
486 |                         user_id=user['psid_hash'],
487 |                         amount=float(10 + i),
    |
help: Remove assignment to unused variable `result`

F841 Local variable `user` is assigned to but never used
  --> tests/e2e_pipeline/test_recent_expenses.py:23:13
   |
21 |         """Test that get_recent_expenses requires session authentication"""
22 |         with self.mock_environment_secrets():
23 |             user = test_users['alice']
   |             ^^^^
24 |             
25 |             # Try accessing without session authentication
   |
help: Remove assignment to unused variable `user`

F841 Local variable `result` is assigned to but never used
  --> tests/e2e_pipeline/test_recent_expenses.py:78:17
   |
76 |             for i in range(3):
77 |                 expense_time = base_time - timedelta(hours=i)
78 |                 result = create_expense(
   |                 ^^^^^^
79 |                     user_id=user['session_user_id'],
80 |                     amount=float(100 + (i * 50)),
   |
help: Remove assignment to unused variable `result`

F841 Local variable `alice_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_recent_expenses.py:171:13
    |
170 |             # Alice's expenses
171 |             alice_expense = create_expense(
    |             ^^^^^^^^^^^^^
172 |                 user_id=user_alice['session_user_id'],
173 |                 amount=100.0,
    |
help: Remove assignment to unused variable `alice_expense`

F841 Local variable `bob_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_recent_expenses.py:183:13
    |
182 |             # Bob's expenses
183 |             bob_expense = create_expense(
    |             ^^^^^^^^^^^
184 |                 user_id=user_bob['session_user_id'],
185 |                 amount=200.0,
    |
help: Remove assignment to unused variable `bob_expense`

F841 Local variable `chat_result` is assigned to but never used
   --> tests/e2e_pipeline/test_recent_expenses.py:237:13
    |
235 |             # 1. Via direct database creation (chat path)
236 |             from utils.db import create_expense
237 |             chat_result = create_expense(
    |             ^^^^^^^^^^^
238 |                 user_id=user['session_user_id'],
239 |                 amount=50.0,
    |
help: Remove assignment to unused variable `chat_result`

F841 Local variable `today_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_recent_expenses.py:292:13
    |
291 |             # Today's expense
292 |             today_expense = create_expense(
    |             ^^^^^^^^^^^^^
293 |                 user_id=user['session_user_id'],
294 |                 amount=100.0,
    |
help: Remove assignment to unused variable `today_expense`

F841 Local variable `yesterday_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_recent_expenses.py:304:13
    |
303 |             # Yesterday's expense
304 |             yesterday_expense = create_expense(
    |             ^^^^^^^^^^^^^^^^^
305 |                 user_id=user['session_user_id'],
306 |                 amount=150.0,
    |
help: Remove assignment to unused variable `yesterday_expense`

F841 Local variable `last_week_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_recent_expenses.py:316:13
    |
315 |             # Last week's expense
316 |             last_week_expense = create_expense(
    |             ^^^^^^^^^^^^^^^^^
317 |                 user_id=user['session_user_id'],
318 |                 amount=200.0,
    |
help: Remove assignment to unused variable `last_week_expense`

F841 Local variable `user` is assigned to but never used
  --> tests/e2e_pipeline/test_totals_verification.py:23:13
   |
21 |         """Test that get_totals requires session authentication"""
22 |         with self.mock_environment_secrets():
23 |             user = test_users['alice']
   |             ^^^^
24 |             
25 |             # Try accessing without session authentication
   |
help: Remove assignment to unused variable `user`

F841 Local variable `result1` is assigned to but never used
  --> tests/e2e_pipeline/test_totals_verification.py:69:13
   |
67 |             # 1. Via direct database creation (simulating chat path)
68 |             from utils.db import create_expense
69 |             result1 = create_expense(
   |             ^^^^^^^
70 |                 user_id=user['session_user_id'],
71 |                 amount=100.0,
   |
help: Remove assignment to unused variable `result1`

F841 Local variable `totals_data` is assigned to but never used
   --> tests/e2e_pipeline/test_totals_verification.py:141:13
    |
140 |             assert response.status_code == 200
141 |             totals_data = response.get_json()
    |             ^^^^^^^^^^^
142 |             
143 |             # Verify monthly summary matches
    |
help: Remove assignment to unused variable `totals_data`

F841 Local variable `original_result` is assigned to but never used
   --> tests/e2e_pipeline/test_totals_verification.py:282:13
    |
280 |             # Create initial expense
281 |             from utils.db import create_expense
282 |             original_result = create_expense(
    |             ^^^^^^^^^^^^^^^
283 |                 user_id=user['session_user_id'],
284 |                 amount=100.0,
    |
help: Remove assignment to unused variable `original_result`

F841 Local variable `current_month_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_totals_verification.py:317:13
    |
316 |             # Current month expense
317 |             current_month_expense = create_expense(
    |             ^^^^^^^^^^^^^^^^^^^^^
318 |                 user_id=user['session_user_id'],
319 |                 amount=100.0,
    |
help: Remove assignment to unused variable `current_month_expense`

F841 Local variable `last_month_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_totals_verification.py:330:13
    |
328 |             # Last month expense
329 |             last_month_date = datetime.now().replace(day=1) - timedelta(days=1)
330 |             last_month_expense = create_expense(
    |             ^^^^^^^^^^^^^^^^^^
331 |                 user_id=user['session_user_id'],
332 |                 amount=200.0,
    |
help: Remove assignment to unused variable `last_month_expense`

F841 Local variable `alice_expense` is assigned to but never used
  --> tests/e2e_pipeline/test_user_isolation.py:29:13
   |
27 |             from utils.db import create_expense
28 |             
29 |             alice_expense = create_expense(
   |             ^^^^^^^^^^^^^
30 |                 user_id=user_alice['psid_hash'],
31 |                 amount=100.0,
   |
help: Remove assignment to unused variable `alice_expense`

F841 Local variable `bob_expense` is assigned to but never used
  --> tests/e2e_pipeline/test_user_isolation.py:40:13
   |
38 |             )
39 |             
40 |             bob_expense = create_expense(
   |             ^^^^^^^^^^^
41 |                 user_id=user_bob['psid_hash'],
42 |                 amount=200.0,
   |
help: Remove assignment to unused variable `bob_expense`

F841 Local variable `bob_data` is assigned to but never used
   --> tests/e2e_pipeline/test_user_isolation.py:225:17
    |
224 |             if bob_attempt_response.status_code == 200:
225 |                 bob_data = bob_attempt_response.get_json()
    |                 ^^^^^^^^
226 |                 alice_data = alice_response.get_json()
    |
help: Remove assignment to unused variable `bob_data`

F841 Local variable `alice_data` is assigned to but never used
   --> tests/e2e_pipeline/test_user_isolation.py:226:17
    |
224 |             if bob_attempt_response.status_code == 200:
225 |                 bob_data = bob_attempt_response.get_json()
226 |                 alice_data = alice_response.get_json()
    |                 ^^^^^^^^^^
227 |                 
228 |                 # Should not return different data (Bob's data) than Alice's
    |
help: Remove assignment to unused variable `alice_data`

F841 Local variable `alice_created` is assigned to but never used
   --> tests/e2e_pipeline/test_user_isolation.py:307:13
    |
306 |             # Verify both users have their respective expenses
307 |             alice_created = self.assert_expense_created(
    |             ^^^^^^^^^^^^^
308 |                 user_hash=user_alice['psid_hash'],
309 |                 expected_amount=100.0,
    |
help: Remove assignment to unused variable `alice_created`

F841 Local variable `bob_created` is assigned to but never used
   --> tests/e2e_pipeline/test_user_isolation.py:313:13
    |
311 |             )
312 |             
313 |             bob_created = self.assert_expense_created(
    |             ^^^^^^^^^^^
314 |                 user_hash=user_bob['psid_hash'],
315 |                 expected_amount=200.0,
    |
help: Remove assignment to unused variable `bob_created`

F841 Local variable `alice_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_user_isolation.py:328:13
    |
326 |             from utils.db import create_expense
327 |             
328 |             alice_expense = create_expense(
    |             ^^^^^^^^^^^^^
329 |                 user_id=user_alice['psid_hash'],
330 |                 amount=123.45,
    |
help: Remove assignment to unused variable `alice_expense`

F841 Local variable `bob_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_user_isolation.py:339:13
    |
337 |             )
338 |             
339 |             bob_expense = create_expense(
    |             ^^^^^^^^^^^
340 |                 user_id=user_bob['psid_hash'],
341 |                 amount=678.90,
    |
help: Remove assignment to unused variable `bob_expense`

F841 Local variable `alice_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_user_isolation.py:387:13
    |
385 |             current_month = datetime.now().strftime('%Y-%m')
386 |             
387 |             alice_expense = create_expense(
    |             ^^^^^^^^^^^^^
388 |                 user_id=user_alice['psid_hash'],
389 |                 amount=300.0,
    |
help: Remove assignment to unused variable `alice_expense`

F841 Local variable `bob_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_user_isolation.py:398:13
    |
396 |             )
397 |             
398 |             bob_expense = create_expense(
    |             ^^^^^^^^^^^
399 |                 user_id=user_bob['psid_hash'],
400 |                 amount=400.0,
    |
help: Remove assignment to unused variable `bob_expense`

E712 Avoid equality comparisons to `True`; use `is_correction_message("sorry, I meant 500"):` for truth checks
  --> tests/test_corrections.py:31:16
   |
29 |         """Test various correction phrase patterns"""
30 |         # Positive cases - should detect corrections
31 |         assert is_correction_message("sorry, I meant 500") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
32 |         assert is_correction_message("actually 300 for coffee") == True
33 |         assert is_correction_message("replace last with 400") == True
   |
help: Replace with `is_correction_message("sorry, I meant 500")`

E712 Avoid equality comparisons to `True`; use `is_correction_message("actually 300 for coffee"):` for truth checks
  --> tests/test_corrections.py:32:16
   |
30 |         # Positive cases - should detect corrections
31 |         assert is_correction_message("sorry, I meant 500") == True
32 |         assert is_correction_message("actually 300 for coffee") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
33 |         assert is_correction_message("replace last with 400") == True
34 |         assert is_correction_message("not ৳50, ৳500") == True
   |
help: Replace with `is_correction_message("actually 300 for coffee")`

E712 Avoid equality comparisons to `True`; use `is_correction_message("replace last with 400"):` for truth checks
  --> tests/test_corrections.py:33:16
   |
31 |         assert is_correction_message("sorry, I meant 500") == True
32 |         assert is_correction_message("actually 300 for coffee") == True
33 |         assert is_correction_message("replace last with 400") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
34 |         assert is_correction_message("not ৳50, ৳500") == True
35 |         assert is_correction_message("typo - make it $100") == True
   |
help: Replace with `is_correction_message("replace last with 400")`

E712 Avoid equality comparisons to `True`; use `is_correction_message("not ৳50, ৳500"):` for truth checks
  --> tests/test_corrections.py:34:16
   |
32 |         assert is_correction_message("actually 300 for coffee") == True
33 |         assert is_correction_message("replace last with 400") == True
34 |         assert is_correction_message("not ৳50, ৳500") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
35 |         assert is_correction_message("typo - make it $100") == True
36 |         assert is_correction_message("correction: should be 250") == True
   |
help: Replace with `is_correction_message("not ৳50, ৳500")`

E712 Avoid equality comparisons to `True`; use `is_correction_message("typo - make it $100"):` for truth checks
  --> tests/test_corrections.py:35:16
   |
33 |         assert is_correction_message("replace last with 400") == True
34 |         assert is_correction_message("not ৳50, ৳500") == True
35 |         assert is_correction_message("typo - make it $100") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
36 |         assert is_correction_message("correction: should be 250") == True
   |
help: Replace with `is_correction_message("typo - make it $100")`

E712 Avoid equality comparisons to `True`; use `is_correction_message("correction: should be 250"):` for truth checks
  --> tests/test_corrections.py:36:16
   |
34 |         assert is_correction_message("not ৳50, ৳500") == True
35 |         assert is_correction_message("typo - make it $100") == True
36 |         assert is_correction_message("correction: should be 250") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
37 |         
38 |         # Negative cases - should not detect corrections
   |
help: Replace with `is_correction_message("correction: should be 250")`

E712 Avoid equality comparisons to `False`; use `not is_correction_message("spent 100 on lunch"):` for false checks
  --> tests/test_corrections.py:39:16
   |
38 |         # Negative cases - should not detect corrections
39 |         assert is_correction_message("spent 100 on lunch") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
40 |         assert is_correction_message("actually quite nice") == False  # No money
41 |         assert is_correction_message("sorry for the delay") == False  # No money
   |
help: Replace with `not is_correction_message("spent 100 on lunch")`

E712 Avoid equality comparisons to `False`; use `not is_correction_message("actually quite nice"):` for false checks
  --> tests/test_corrections.py:40:16
   |
38 |         # Negative cases - should not detect corrections
39 |         assert is_correction_message("spent 100 on lunch") == False
40 |         assert is_correction_message("actually quite nice") == False  # No money
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
41 |         assert is_correction_message("sorry for the delay") == False  # No money
42 |         assert is_correction_message("") == False
   |
help: Replace with `not is_correction_message("actually quite nice")`

E712 Avoid equality comparisons to `False`; use `not is_correction_message("sorry for the delay"):` for false checks
  --> tests/test_corrections.py:41:16
   |
39 |         assert is_correction_message("spent 100 on lunch") == False
40 |         assert is_correction_message("actually quite nice") == False  # No money
41 |         assert is_correction_message("sorry for the delay") == False  # No money
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
42 |         assert is_correction_message("") == False
43 |         assert is_correction_message(None) == False
   |
help: Replace with `not is_correction_message("sorry for the delay")`

E712 Avoid equality comparisons to `False`; use `not is_correction_message(""):` for false checks
  --> tests/test_corrections.py:42:16
   |
40 |         assert is_correction_message("actually quite nice") == False  # No money
41 |         assert is_correction_message("sorry for the delay") == False  # No money
42 |         assert is_correction_message("") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
43 |         assert is_correction_message(None) == False
   |
help: Replace with `not is_correction_message("")`

E712 Avoid equality comparisons to `False`; use `not is_correction_message(None):` for false checks
  --> tests/test_corrections.py:43:16
   |
41 |         assert is_correction_message("sorry for the delay") == False  # No money
42 |         assert is_correction_message("") == False
43 |         assert is_correction_message(None) == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
44 |     
45 |     def test_correction_reason_parsing(self):
   |
help: Replace with `not is_correction_message(None)`

E712 Avoid equality comparisons to `True`; use `similar_category("food", "food"):` for truth checks
  --> tests/test_corrections.py:57:16
   |
55 |         """Test category similarity logic"""
56 |         # Direct matches
57 |         assert similar_category("food", "food") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
58 |         assert similar_category("transport", "transport") == True
   |
help: Replace with `similar_category("food", "food")`

E712 Avoid equality comparisons to `True`; use `similar_category("transport", "transport"):` for truth checks
  --> tests/test_corrections.py:58:16
   |
56 |         # Direct matches
57 |         assert similar_category("food", "food") == True
58 |         assert similar_category("transport", "transport") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
59 |         
60 |         # Substring matches
   |
help: Replace with `similar_category("transport", "transport")`

E712 Avoid equality comparisons to `True`; use `similar_category("food", "foods"):` for truth checks
  --> tests/test_corrections.py:61:16
   |
60 |         # Substring matches
61 |         assert similar_category("food", "foods") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
62 |         assert similar_category("coffee", "coffee shop") == True
   |
help: Replace with `similar_category("food", "foods")`

E712 Avoid equality comparisons to `True`; use `similar_category("coffee", "coffee shop"):` for truth checks
  --> tests/test_corrections.py:62:16
   |
60 |         # Substring matches
61 |         assert similar_category("food", "foods") == True
62 |         assert similar_category("coffee", "coffee shop") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
63 |         
64 |         # Category group matches
   |
help: Replace with `similar_category("coffee", "coffee shop")`

E712 Avoid equality comparisons to `True`; use `similar_category("lunch", "dinner"):` for truth checks
  --> tests/test_corrections.py:65:16
   |
64 |         # Category group matches
65 |         assert similar_category("lunch", "dinner") == True  # Both food
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
66 |         assert similar_category("taxi", "uber") == True     # Both transport
67 |         assert similar_category("medicine", "pharmacy") == True  # Both health
   |
help: Replace with `similar_category("lunch", "dinner")`

E712 Avoid equality comparisons to `True`; use `similar_category("taxi", "uber"):` for truth checks
  --> tests/test_corrections.py:66:16
   |
64 |         # Category group matches
65 |         assert similar_category("lunch", "dinner") == True  # Both food
66 |         assert similar_category("taxi", "uber") == True     # Both transport
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
67 |         assert similar_category("medicine", "pharmacy") == True  # Both health
   |
help: Replace with `similar_category("taxi", "uber")`

E712 Avoid equality comparisons to `True`; use `similar_category("medicine", "pharmacy"):` for truth checks
  --> tests/test_corrections.py:67:16
   |
65 |         assert similar_category("lunch", "dinner") == True  # Both food
66 |         assert similar_category("taxi", "uber") == True     # Both transport
67 |         assert similar_category("medicine", "pharmacy") == True  # Both health
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
68 |         
69 |         # Non-matches
   |
help: Replace with `similar_category("medicine", "pharmacy")`

E712 Avoid equality comparisons to `False`; use `not similar_category("food", "transport"):` for false checks
  --> tests/test_corrections.py:70:16
   |
69 |         # Non-matches
70 |         assert similar_category("food", "transport") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
71 |         assert similar_category("", "food") == False
72 |         assert similar_category(None, "food") == False
   |
help: Replace with `not similar_category("food", "transport")`

E712 Avoid equality comparisons to `False`; use `not similar_category("", "food"):` for false checks
  --> tests/test_corrections.py:71:16
   |
69 |         # Non-matches
70 |         assert similar_category("food", "transport") == False
71 |         assert similar_category("", "food") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
72 |         assert similar_category(None, "food") == False
   |
help: Replace with `not similar_category("", "food")`

E712 Avoid equality comparisons to `False`; use `not similar_category(None, "food"):` for false checks
  --> tests/test_corrections.py:72:16
   |
70 |         assert similar_category("food", "transport") == False
71 |         assert similar_category("", "food") == False
72 |         assert similar_category(None, "food") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
73 |     
74 |     def test_similar_merchant_matching(self):
   |
help: Replace with `not similar_category(None, "food")`

E712 Avoid equality comparisons to `True`; use `similar_merchant("Starbucks", "Starbucks"):` for truth checks
  --> tests/test_corrections.py:77:16
   |
75 |         """Test merchant similarity logic"""
76 |         # Direct matches
77 |         assert similar_merchant("Starbucks", "Starbucks") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
78 |         assert similar_merchant("The Wind Lounge", "The Wind Lounge") == True
   |
help: Replace with `similar_merchant("Starbucks", "Starbucks")`

E712 Avoid equality comparisons to `True`; use `...:` for truth checks
  --> tests/test_corrections.py:78:16
   |
76 |         # Direct matches
77 |         assert similar_merchant("Starbucks", "Starbucks") == True
78 |         assert similar_merchant("The Wind Lounge", "The Wind Lounge") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
79 |         
80 |         # Case insensitive
   |
help: Replace comparison

E712 Avoid equality comparisons to `True`; use `similar_merchant("starbucks", "STARBUCKS"):` for truth checks
  --> tests/test_corrections.py:81:16
   |
80 |         # Case insensitive
81 |         assert similar_merchant("starbucks", "STARBUCKS") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
82 |         
83 |         # Partial matches
   |
help: Replace with `similar_merchant("starbucks", "STARBUCKS")`

E712 Avoid equality comparisons to `True`; use `similar_merchant("Wind Lounge", "The Wind Lounge"):` for truth checks
  --> tests/test_corrections.py:84:16
   |
83 |         # Partial matches
84 |         assert similar_merchant("Wind Lounge", "The Wind Lounge") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
85 |         assert similar_merchant("KFC", "KFC Restaurant") == True
   |
help: Replace with `similar_merchant("Wind Lounge", "The Wind Lounge")`

E712 Avoid equality comparisons to `True`; use `similar_merchant("KFC", "KFC Restaurant"):` for truth checks
  --> tests/test_corrections.py:85:16
   |
83 |         # Partial matches
84 |         assert similar_merchant("Wind Lounge", "The Wind Lounge") == True
85 |         assert similar_merchant("KFC", "KFC Restaurant") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
86 |         
87 |         # Word overlap (50%+ threshold)
   |
help: Replace with `similar_merchant("KFC", "KFC Restaurant")`

E712 Avoid equality comparisons to `True`; use `similar_merchant("ABC Coffee Shop", "ABC Coffee"):` for truth checks
  --> tests/test_corrections.py:88:16
   |
87 |         # Word overlap (50%+ threshold)
88 |         assert similar_merchant("ABC Coffee Shop", "ABC Coffee") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
89 |         
90 |         # Non-matches
   |
help: Replace with `similar_merchant("ABC Coffee Shop", "ABC Coffee")`

E712 Avoid equality comparisons to `False`; use `not similar_merchant("Starbucks", "McDonald's"):` for false checks
  --> tests/test_corrections.py:91:16
   |
90 |         # Non-matches
91 |         assert similar_merchant("Starbucks", "McDonald's") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
92 |         assert similar_merchant("", "Starbucks") == False
93 |         assert similar_merchant(None, "Starbucks") == False
   |
help: Replace with `not similar_merchant("Starbucks", "McDonald's")`

E712 Avoid equality comparisons to `False`; use `not similar_merchant("", "Starbucks"):` for false checks
  --> tests/test_corrections.py:92:16
   |
90 |         # Non-matches
91 |         assert similar_merchant("Starbucks", "McDonald's") == False
92 |         assert similar_merchant("", "Starbucks") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
93 |         assert similar_merchant(None, "Starbucks") == False
   |
help: Replace with `not similar_merchant("", "Starbucks")`

E712 Avoid equality comparisons to `False`; use `not similar_merchant(None, "Starbucks"):` for false checks
  --> tests/test_corrections.py:93:16
   |
91 |         assert similar_merchant("Starbucks", "McDonald's") == False
92 |         assert similar_merchant("", "Starbucks") == False
93 |         assert similar_merchant(None, "Starbucks") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
94 |
95 | class TestCorrectionHandler:
   |
help: Replace with `not similar_merchant(None, "Starbucks")`

E712 Avoid equality comparisons to `False`; use `not is_smart_corrections_enabled(user_hash):` for false checks
   --> tests/test_corrections.py:224:16
    |
222 |         """Test corrections are disabled by default"""
223 |         user_hash = psid_hash("test_user_flag")
224 |         assert is_smart_corrections_enabled(user_hash) == False
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
225 |     
226 |     @patch.dict('os.environ', {
    |
help: Replace with `not is_smart_corrections_enabled(user_hash)`

E712 Avoid equality comparisons to `True`; use `is_smart_corrections_enabled("abc123"):` for truth checks
   --> tests/test_corrections.py:233:16
    |
231 |         """Test corrections enabled for allowlist users"""
232 |         # User in allowlist should have corrections enabled
233 |         assert is_smart_corrections_enabled("abc123") == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
234 |         
235 |         # User not in allowlist should have corrections disabled
    |
help: Replace with `is_smart_corrections_enabled("abc123")`

E712 Avoid equality comparisons to `False`; use `not is_smart_corrections_enabled(user_hash):` for false checks
   --> tests/test_corrections.py:237:16
    |
235 |         # User not in allowlist should have corrections disabled
236 |         user_hash = psid_hash("not_in_allowlist")
237 |         assert is_smart_corrections_enabled(user_hash) == False
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
238 |     
239 |     @patch.dict('os.environ', {'SMART_CORRECTIONS_DEFAULT': 'true'})
    |
help: Replace with `not is_smart_corrections_enabled(user_hash)`

E712 Avoid equality comparisons to `True`; use `is_smart_corrections_enabled(user_hash):` for truth checks
   --> tests/test_corrections.py:243:16
    |
241 |         """Test corrections enabled for all users when global flag is on"""
242 |         user_hash = psid_hash("any_user")
243 |         assert is_smart_corrections_enabled(user_hash) == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
244 |
245 | class TestCrossCurrencyCorrections:
    |
help: Replace with `is_smart_corrections_enabled(user_hash)`

F841 [*] Local variable `e` is assigned to but never used
  --> tests/test_deployment_confidence.py:44:33
   |
42 |                 # If no exception is raised, the guard is working
43 |                 assert True, "Single writer protection initializes successfully"
44 |             except Exception as e:
   |                                 ^
45 |                 # Even if it fails, we can test the import worked
46 |                 assert True, "Single writer guard components are accessible"
   |
help: Remove assignment to unused variable `e`

F401 `contextvars` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_deployment_confidence.py:54:20
   |
52 |         """Test that canonical writer context properly manages protection flags"""
53 |         try:
54 |             import contextvars
   |                    ^^^^^^^^^^^
55 |
56 |             from utils.single_writer_guard import canonical_writer_context
   |
help: Remove unused import: `contextvars`

F401 `contextvars` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> tests/test_deployment_confidence.py:142:20
    |
140 |         """Test that runtime protections block unauthorized database access"""
141 |         try:
142 |             import contextvars
    |                    ^^^^^^^^^^^
143 |
144 |             from utils.single_writer_guard import _check_expense_insert_permission
    |
help: Remove unused import: `contextvars`

F401 `db_base.db` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> tests/test_deployment_confidence.py:200:33
    |
198 |         try:
199 |             # Test that we can still query expenses (read operations should work)
200 |             from db_base import db
    |                                 ^^
201 |             from models import Expense
    |
help: Remove unused import: `db_base.db`

E712 Avoid equality comparisons to `True`; use `contains_money("৳100 coffee"):` for truth checks
  --> tests/test_new_user_logging.py:23:16
   |
21 |     def test_currency_symbols(self):
22 |         """Test detection of currency symbols"""
23 |         assert contains_money("৳100 coffee") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
24 |         assert contains_money("$25 lunch") == True
25 |         assert contains_money("£15.99 book") == True
   |
help: Replace with `contains_money("৳100 coffee")`

E712 Avoid equality comparisons to `True`; use `contains_money("$25 lunch"):` for truth checks
  --> tests/test_new_user_logging.py:24:16
   |
22 |         """Test detection of currency symbols"""
23 |         assert contains_money("৳100 coffee") == True
24 |         assert contains_money("$25 lunch") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
25 |         assert contains_money("£15.99 book") == True
26 |         assert contains_money("€30 groceries") == True
   |
help: Replace with `contains_money("$25 lunch")`

E712 Avoid equality comparisons to `True`; use `contains_money("£15.99 book"):` for truth checks
  --> tests/test_new_user_logging.py:25:16
   |
23 |         assert contains_money("৳100 coffee") == True
24 |         assert contains_money("$25 lunch") == True
25 |         assert contains_money("£15.99 book") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
26 |         assert contains_money("€30 groceries") == True
27 |         assert contains_money("₹200 dinner") == True
   |
help: Replace with `contains_money("£15.99 book")`

E712 Avoid equality comparisons to `True`; use `contains_money("€30 groceries"):` for truth checks
  --> tests/test_new_user_logging.py:26:16
   |
24 |         assert contains_money("$25 lunch") == True
25 |         assert contains_money("£15.99 book") == True
26 |         assert contains_money("€30 groceries") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
27 |         assert contains_money("₹200 dinner") == True
   |
help: Replace with `contains_money("€30 groceries")`

E712 Avoid equality comparisons to `True`; use `contains_money("₹200 dinner"):` for truth checks
  --> tests/test_new_user_logging.py:27:16
   |
25 |         assert contains_money("£15.99 book") == True
26 |         assert contains_money("€30 groceries") == True
27 |         assert contains_money("₹200 dinner") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
28 |     
29 |     def test_action_words(self):
   |
help: Replace with `contains_money("₹200 dinner")`

E712 Avoid equality comparisons to `True`; use `contains_money("spent 100 on lunch"):` for truth checks
  --> tests/test_new_user_logging.py:31:16
   |
29 |     def test_action_words(self):
30 |         """Test detection of spent/paid/bought patterns"""
31 |         assert contains_money("spent 100 on lunch") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
32 |         assert contains_money("paid 50 for coffee") == True
33 |         assert contains_money("bought 200 groceries") == True
   |
help: Replace with `contains_money("spent 100 on lunch")`

E712 Avoid equality comparisons to `True`; use `contains_money("paid 50 for coffee"):` for truth checks
  --> tests/test_new_user_logging.py:32:16
   |
30 |         """Test detection of spent/paid/bought patterns"""
31 |         assert contains_money("spent 100 on lunch") == True
32 |         assert contains_money("paid 50 for coffee") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
33 |         assert contains_money("bought 200 groceries") == True
34 |         assert contains_money("Spent 150.50 on shopping") == True
   |
help: Replace with `contains_money("paid 50 for coffee")`

E712 Avoid equality comparisons to `True`; use `contains_money("bought 200 groceries"):` for truth checks
  --> tests/test_new_user_logging.py:33:16
   |
31 |         assert contains_money("spent 100 on lunch") == True
32 |         assert contains_money("paid 50 for coffee") == True
33 |         assert contains_money("bought 200 groceries") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
34 |         assert contains_money("Spent 150.50 on shopping") == True
   |
help: Replace with `contains_money("bought 200 groceries")`

E712 Avoid equality comparisons to `True`; use `contains_money("Spent 150.50 on shopping"):` for truth checks
  --> tests/test_new_user_logging.py:34:16
   |
32 |         assert contains_money("paid 50 for coffee") == True
33 |         assert contains_money("bought 200 groceries") == True
34 |         assert contains_money("Spent 150.50 on shopping") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
35 |     
36 |     def test_preposition_patterns(self):
   |
help: Replace with `contains_money("Spent 150.50 on shopping")`

E712 Avoid equality comparisons to `True`; use `contains_money("100 on lunch"):` for truth checks
  --> tests/test_new_user_logging.py:38:16
   |
36 |     def test_preposition_patterns(self):
37 |         """Test detection of amount + on/for patterns"""
38 |         assert contains_money("100 on lunch") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
39 |         assert contains_money("50 for coffee") == True
40 |         assert contains_money("100 tk for transport") == True
   |
help: Replace with `contains_money("100 on lunch")`

E712 Avoid equality comparisons to `True`; use `contains_money("50 for coffee"):` for truth checks
  --> tests/test_new_user_logging.py:39:16
   |
37 |         """Test detection of amount + on/for patterns"""
38 |         assert contains_money("100 on lunch") == True
39 |         assert contains_money("50 for coffee") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
40 |         assert contains_money("100 tk for transport") == True
41 |         assert contains_money("25 usd on food") == True
   |
help: Replace with `contains_money("50 for coffee")`

E712 Avoid equality comparisons to `True`; use `contains_money("100 tk for transport"):` for truth checks
  --> tests/test_new_user_logging.py:40:16
   |
38 |         assert contains_money("100 on lunch") == True
39 |         assert contains_money("50 for coffee") == True
40 |         assert contains_money("100 tk for transport") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
41 |         assert contains_money("25 usd on food") == True
   |
help: Replace with `contains_money("100 tk for transport")`

E712 Avoid equality comparisons to `True`; use `contains_money("25 usd on food"):` for truth checks
  --> tests/test_new_user_logging.py:41:16
   |
39 |         assert contains_money("50 for coffee") == True
40 |         assert contains_money("100 tk for transport") == True
41 |         assert contains_money("25 usd on food") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
42 |     
43 |     def test_no_money_detected(self):
   |
help: Replace with `contains_money("25 usd on food")`

E712 Avoid equality comparisons to `False`; use `not contains_money("summary"):` for false checks
  --> tests/test_new_user_logging.py:45:16
   |
43 |     def test_no_money_detected(self):
44 |         """Test cases where no money should be detected"""
45 |         assert contains_money("summary") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
46 |         assert contains_money("show me my expenses") == False
47 |         assert contains_money("hello") == False
   |
help: Replace with `not contains_money("summary")`

E712 Avoid equality comparisons to `False`; use `not contains_money("show me my expenses"):` for false checks
  --> tests/test_new_user_logging.py:46:16
   |
44 |         """Test cases where no money should be detected"""
45 |         assert contains_money("summary") == False
46 |         assert contains_money("show me my expenses") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
47 |         assert contains_money("hello") == False
48 |         assert contains_money("recap") == False
   |
help: Replace with `not contains_money("show me my expenses")`

E712 Avoid equality comparisons to `False`; use `not contains_money("hello"):` for false checks
  --> tests/test_new_user_logging.py:47:16
   |
45 |         assert contains_money("summary") == False
46 |         assert contains_money("show me my expenses") == False
47 |         assert contains_money("hello") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
48 |         assert contains_money("recap") == False
49 |         assert contains_money("") == False
   |
help: Replace with `not contains_money("hello")`

E712 Avoid equality comparisons to `False`; use `not contains_money("recap"):` for false checks
  --> tests/test_new_user_logging.py:48:16
   |
46 |         assert contains_money("show me my expenses") == False
47 |         assert contains_money("hello") == False
48 |         assert contains_money("recap") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
49 |         assert contains_money("") == False
50 |         assert contains_money("   ") == False
   |
help: Replace with `not contains_money("recap")`

E712 Avoid equality comparisons to `False`; use `not contains_money(""):` for false checks
  --> tests/test_new_user_logging.py:49:16
   |
47 |         assert contains_money("hello") == False
48 |         assert contains_money("recap") == False
49 |         assert contains_money("") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
50 |         assert contains_money("   ") == False
   |
help: Replace with `not contains_money("")`

E712 Avoid equality comparisons to `False`; use `not contains_money("   "):` for false checks
  --> tests/test_new_user_logging.py:50:16
   |
48 |         assert contains_money("recap") == False
49 |         assert contains_money("") == False
50 |         assert contains_money("   ") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: Replace with `not contains_money("   ")`

E712 Avoid equality comparisons to `False`; use `not result['duplicate']:` for false checks
   --> tests/test_new_user_logging.py:261:28
    |
259 |                     )
260 |                     
261 |                     assert result['duplicate'] == False
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
262 |                     assert result['success'] == True
    |
help: Replace with `not result['duplicate']`

E712 Avoid equality comparisons to `True`; use `result['success']:` for truth checks
   --> tests/test_new_user_logging.py:262:28
    |
261 |                     assert result['duplicate'] == False
262 |                     assert result['success'] == True
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^
263 |     
264 |     def test_save_expense_idempotent_duplicate(self):
    |
help: Replace with `result['success']`

E712 Avoid equality comparisons to `True`; use `result['duplicate']:` for truth checks
   --> tests/test_new_user_logging.py:285:20
    |
283 |             )
284 |             
285 |             assert result['duplicate'] == True
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
286 |             assert result['timestamp'] == "10:30"
287 |             assert result['success'] == False
    |
help: Replace with `result['duplicate']`

E712 Avoid equality comparisons to `False`; use `not result['success']:` for false checks
   --> tests/test_new_user_logging.py:287:20
    |
285 |             assert result['duplicate'] == True
286 |             assert result['timestamp'] == "10:30"
287 |             assert result['success'] == False
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
288 |             assert result['expense_id'] == 123
    |
help: Replace with `not result['success']`

E712 Avoid equality comparisons to `True`; use `contains_money("৳100 coffee"):` for truth checks
  --> tests/test_nlp_logging.py:37:16
   |
35 |     def test_currency_symbols(self):
36 |         """Test detection of currency symbols"""
37 |         assert contains_money("৳100 coffee") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
38 |         assert contains_money("$25 lunch") == True
39 |         assert contains_money("£15.99 book") == True
   |
help: Replace with `contains_money("৳100 coffee")`

E712 Avoid equality comparisons to `True`; use `contains_money("$25 lunch"):` for truth checks
  --> tests/test_nlp_logging.py:38:16
   |
36 |         """Test detection of currency symbols"""
37 |         assert contains_money("৳100 coffee") == True
38 |         assert contains_money("$25 lunch") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
39 |         assert contains_money("£15.99 book") == True
40 |         assert contains_money("€30 groceries") == True
   |
help: Replace with `contains_money("$25 lunch")`

E712 Avoid equality comparisons to `True`; use `contains_money("£15.99 book"):` for truth checks
  --> tests/test_nlp_logging.py:39:16
   |
37 |         assert contains_money("৳100 coffee") == True
38 |         assert contains_money("$25 lunch") == True
39 |         assert contains_money("£15.99 book") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
40 |         assert contains_money("€30 groceries") == True
41 |         assert contains_money("₹200 dinner") == True
   |
help: Replace with `contains_money("£15.99 book")`

E712 Avoid equality comparisons to `True`; use `contains_money("€30 groceries"):` for truth checks
  --> tests/test_nlp_logging.py:40:16
   |
38 |         assert contains_money("$25 lunch") == True
39 |         assert contains_money("£15.99 book") == True
40 |         assert contains_money("€30 groceries") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
41 |         assert contains_money("₹200 dinner") == True
42 |         assert contains_money("৳250.50 shopping") == True
   |
help: Replace with `contains_money("€30 groceries")`

E712 Avoid equality comparisons to `True`; use `contains_money("₹200 dinner"):` for truth checks
  --> tests/test_nlp_logging.py:41:16
   |
39 |         assert contains_money("£15.99 book") == True
40 |         assert contains_money("€30 groceries") == True
41 |         assert contains_money("₹200 dinner") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
42 |         assert contains_money("৳250.50 shopping") == True
   |
help: Replace with `contains_money("₹200 dinner")`

E712 Avoid equality comparisons to `True`; use `contains_money("৳250.50 shopping"):` for truth checks
  --> tests/test_nlp_logging.py:42:16
   |
40 |         assert contains_money("€30 groceries") == True
41 |         assert contains_money("₹200 dinner") == True
42 |         assert contains_money("৳250.50 shopping") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
43 |     
44 |     def test_currency_words(self):
   |
help: Replace with `contains_money("৳250.50 shopping")`

E712 Avoid equality comparisons to `True`; use `contains_money("100 tk for transport"):` for truth checks
  --> tests/test_nlp_logging.py:46:16
   |
44 |     def test_currency_words(self):
45 |         """Test detection of currency words"""
46 |         assert contains_money("100 tk for transport") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
47 |         assert contains_money("paid 50 bdt") == True
48 |         assert contains_money("spent 25 usd") == True
   |
help: Replace with `contains_money("100 tk for transport")`

E712 Avoid equality comparisons to `True`; use `contains_money("paid 50 bdt"):` for truth checks
  --> tests/test_nlp_logging.py:47:16
   |
45 |         """Test detection of currency words"""
46 |         assert contains_money("100 tk for transport") == True
47 |         assert contains_money("paid 50 bdt") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
48 |         assert contains_money("spent 25 usd") == True
49 |         assert contains_money("bought €30 groceries") == True
   |
help: Replace with `contains_money("paid 50 bdt")`

E712 Avoid equality comparisons to `True`; use `contains_money("spent 25 usd"):` for truth checks
  --> tests/test_nlp_logging.py:48:16
   |
46 |         assert contains_money("100 tk for transport") == True
47 |         assert contains_money("paid 50 bdt") == True
48 |         assert contains_money("spent 25 usd") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
49 |         assert contains_money("bought €30 groceries") == True
50 |         assert contains_money("rs 200 taxi") == True
   |
help: Replace with `contains_money("spent 25 usd")`

E712 Avoid equality comparisons to `True`; use `contains_money("bought €30 groceries"):` for truth checks
  --> tests/test_nlp_logging.py:49:16
   |
47 |         assert contains_money("paid 50 bdt") == True
48 |         assert contains_money("spent 25 usd") == True
49 |         assert contains_money("bought €30 groceries") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
50 |         assert contains_money("rs 200 taxi") == True
51 |         assert contains_money("peso 150 lunch") == True
   |
help: Replace with `contains_money("bought €30 groceries")`

E712 Avoid equality comparisons to `True`; use `contains_money("rs 200 taxi"):` for truth checks
  --> tests/test_nlp_logging.py:50:16
   |
48 |         assert contains_money("spent 25 usd") == True
49 |         assert contains_money("bought €30 groceries") == True
50 |         assert contains_money("rs 200 taxi") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
51 |         assert contains_money("peso 150 lunch") == True
   |
help: Replace with `contains_money("rs 200 taxi")`

E712 Avoid equality comparisons to `True`; use `contains_money("peso 150 lunch"):` for truth checks
  --> tests/test_nlp_logging.py:51:16
   |
49 |         assert contains_money("bought €30 groceries") == True
50 |         assert contains_money("rs 200 taxi") == True
51 |         assert contains_money("peso 150 lunch") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
52 |     
53 |     def test_action_verbs(self):
   |
help: Replace with `contains_money("peso 150 lunch")`

E712 Avoid equality comparisons to `True`; use `contains_money("spent 100 on lunch"):` for truth checks
  --> tests/test_nlp_logging.py:55:16
   |
53 |     def test_action_verbs(self):
54 |         """Test detection of action verbs with amounts"""
55 |         assert contains_money("spent 100 on lunch") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
56 |         assert contains_money("paid 50 for coffee") == True
57 |         assert contains_money("bought 200 groceries") == True
   |
help: Replace with `contains_money("spent 100 on lunch")`

E712 Avoid equality comparisons to `True`; use `contains_money("paid 50 for coffee"):` for truth checks
  --> tests/test_nlp_logging.py:56:16
   |
54 |         """Test detection of action verbs with amounts"""
55 |         assert contains_money("spent 100 on lunch") == True
56 |         assert contains_money("paid 50 for coffee") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
57 |         assert contains_money("bought 200 groceries") == True
58 |         assert contains_money("blew 1200 on shopping") == True
   |
help: Replace with `contains_money("paid 50 for coffee")`

E712 Avoid equality comparisons to `True`; use `contains_money("bought 200 groceries"):` for truth checks
  --> tests/test_nlp_logging.py:57:16
   |
55 |         assert contains_money("spent 100 on lunch") == True
56 |         assert contains_money("paid 50 for coffee") == True
57 |         assert contains_money("bought 200 groceries") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
58 |         assert contains_money("blew 1200 on shopping") == True
59 |         assert contains_money("burned 80 fuel") == True
   |
help: Replace with `contains_money("bought 200 groceries")`

E712 Avoid equality comparisons to `True`; use `contains_money("blew 1200 on shopping"):` for truth checks
  --> tests/test_nlp_logging.py:58:16
   |
56 |         assert contains_money("paid 50 for coffee") == True
57 |         assert contains_money("bought 200 groceries") == True
58 |         assert contains_money("blew 1200 on shopping") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
59 |         assert contains_money("burned 80 fuel") == True
60 |         assert contains_money("used 45 for taxi") == True
   |
help: Replace with `contains_money("blew 1200 on shopping")`

E712 Avoid equality comparisons to `True`; use `contains_money("burned 80 fuel"):` for truth checks
  --> tests/test_nlp_logging.py:59:16
   |
57 |         assert contains_money("bought 200 groceries") == True
58 |         assert contains_money("blew 1200 on shopping") == True
59 |         assert contains_money("burned 80 fuel") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
60 |         assert contains_money("used 45 for taxi") == True
   |
help: Replace with `contains_money("burned 80 fuel")`

E712 Avoid equality comparisons to `True`; use `contains_money("used 45 for taxi"):` for truth checks
  --> tests/test_nlp_logging.py:60:16
   |
58 |         assert contains_money("blew 1200 on shopping") == True
59 |         assert contains_money("burned 80 fuel") == True
60 |         assert contains_money("used 45 for taxi") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
61 |     
62 |     def test_shorthand_patterns(self):
   |
help: Replace with `contains_money("used 45 for taxi")`

E712 Avoid equality comparisons to `True`; use `contains_money("coffee 100"):` for truth checks
  --> tests/test_nlp_logging.py:64:16
   |
62 |     def test_shorthand_patterns(self):
63 |         """Test shorthand expense patterns"""
64 |         assert contains_money("coffee 100") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
65 |         assert contains_money("lunch 250") == True
66 |         assert contains_money("uber 80") == True
   |
help: Replace with `contains_money("coffee 100")`

E712 Avoid equality comparisons to `True`; use `contains_money("lunch 250"):` for truth checks
  --> tests/test_nlp_logging.py:65:16
   |
63 |         """Test shorthand expense patterns"""
64 |         assert contains_money("coffee 100") == True
65 |         assert contains_money("lunch 250") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
66 |         assert contains_money("uber 80") == True
67 |         assert contains_money("groceries 450") == True
   |
help: Replace with `contains_money("lunch 250")`

E712 Avoid equality comparisons to `True`; use `contains_money("uber 80"):` for truth checks
  --> tests/test_nlp_logging.py:66:16
   |
64 |         assert contains_money("coffee 100") == True
65 |         assert contains_money("lunch 250") == True
66 |         assert contains_money("uber 80") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
67 |         assert contains_money("groceries 450") == True
68 |         assert contains_money("fuel 120") == True
   |
help: Replace with `contains_money("uber 80")`

E712 Avoid equality comparisons to `True`; use `contains_money("groceries 450"):` for truth checks
  --> tests/test_nlp_logging.py:67:16
   |
65 |         assert contains_money("lunch 250") == True
66 |         assert contains_money("uber 80") == True
67 |         assert contains_money("groceries 450") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
68 |         assert contains_money("fuel 120") == True
69 |         assert contains_money("medicine 95") == True
   |
help: Replace with `contains_money("groceries 450")`

E712 Avoid equality comparisons to `True`; use `contains_money("fuel 120"):` for truth checks
  --> tests/test_nlp_logging.py:68:16
   |
66 |         assert contains_money("uber 80") == True
67 |         assert contains_money("groceries 450") == True
68 |         assert contains_money("fuel 120") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
69 |         assert contains_money("medicine 95") == True
   |
help: Replace with `contains_money("fuel 120")`

E712 Avoid equality comparisons to `True`; use `contains_money("medicine 95"):` for truth checks
  --> tests/test_nlp_logging.py:69:16
   |
67 |         assert contains_money("groceries 450") == True
68 |         assert contains_money("fuel 120") == True
69 |         assert contains_money("medicine 95") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
70 |     
71 |     def test_multipliers(self):
   |
help: Replace with `contains_money("medicine 95")`

E712 Avoid equality comparisons to `True`; use `contains_money("blew 1.2k on shopping"):` for truth checks
  --> tests/test_nlp_logging.py:73:16
   |
71 |     def test_multipliers(self):
72 |         """Test multiplier patterns (1.2k, 1K)"""
73 |         assert contains_money("blew 1.2k on shopping") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
74 |         assert contains_money("spent 2K for travel") == True
75 |         assert contains_money("1.5k fuel yesterday") == True
   |
help: Replace with `contains_money("blew 1.2k on shopping")`

E712 Avoid equality comparisons to `True`; use `contains_money("spent 2K for travel"):` for truth checks
  --> tests/test_nlp_logging.py:74:16
   |
72 |         """Test multiplier patterns (1.2k, 1K)"""
73 |         assert contains_money("blew 1.2k on shopping") == True
74 |         assert contains_money("spent 2K for travel") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
75 |         assert contains_money("1.5k fuel yesterday") == True
   |
help: Replace with `contains_money("spent 2K for travel")`

E712 Avoid equality comparisons to `True`; use `contains_money("1.5k fuel yesterday"):` for truth checks
  --> tests/test_nlp_logging.py:75:16
   |
73 |         assert contains_money("blew 1.2k on shopping") == True
74 |         assert contains_money("spent 2K for travel") == True
75 |         assert contains_money("1.5k fuel yesterday") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
76 |     
77 |     def test_noisy_text_tolerance(self):
   |
help: Replace with `contains_money("1.5k fuel yesterday")`

E712 Avoid equality comparisons to `True`; use `contains_money("coffee 100☕️"):` for truth checks
  --> tests/test_nlp_logging.py:79:16
   |
77 |     def test_noisy_text_tolerance(self):
78 |         """Test tolerance for emojis and extra spaces"""
79 |         assert contains_money("coffee 100☕️") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
80 |         assert contains_money("Spent   300   tk  lunch") == True
81 |         assert contains_money("man I blew 1.2k tk on groceries today 😭") == True
   |
help: Replace with `contains_money("coffee 100☕️")`

E712 Avoid equality comparisons to `True`; use `contains_money("Spent   300   tk  lunch"):` for truth checks
  --> tests/test_nlp_logging.py:80:16
   |
78 |         """Test tolerance for emojis and extra spaces"""
79 |         assert contains_money("coffee 100☕️") == True
80 |         assert contains_money("Spent   300   tk  lunch") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
81 |         assert contains_money("man I blew 1.2k tk on groceries today 😭") == True
   |
help: Replace with `contains_money("Spent   300   tk  lunch")`

E712 Avoid equality comparisons to `True`; use `...:` for truth checks
  --> tests/test_nlp_logging.py:81:16
   |
79 |         assert contains_money("coffee 100☕️") == True
80 |         assert contains_money("Spent   300   tk  lunch") == True
81 |         assert contains_money("man I blew 1.2k tk on groceries today 😭") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
82 |     
83 |     def test_bangla_numerals(self):
   |
help: Replace comparison

E712 Avoid equality comparisons to `True`; use `contains_money("১২০ টাকা coffee"):` for truth checks
  --> tests/test_nlp_logging.py:85:16
   |
83 |     def test_bangla_numerals(self):
84 |         """Test Bangla numeral support"""
85 |         assert contains_money("১২০ টাকা coffee") == True  # 120 taka coffee
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
86 |         assert contains_money("৩০০ lunch") == True  # 300 lunch
   |
help: Replace with `contains_money("১২০ টাকা coffee")`

E712 Avoid equality comparisons to `True`; use `contains_money("৩০০ lunch"):` for truth checks
  --> tests/test_nlp_logging.py:86:16
   |
84 |         """Test Bangla numeral support"""
85 |         assert contains_money("১২০ টাকা coffee") == True  # 120 taka coffee
86 |         assert contains_money("৩০০ lunch") == True  # 300 lunch
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
87 |     
88 |     def test_no_money_detected(self):
   |
help: Replace with `contains_money("৩০০ lunch")`

E712 Avoid equality comparisons to `False`; use `not contains_money("summary"):` for false checks
  --> tests/test_nlp_logging.py:90:16
   |
88 |     def test_no_money_detected(self):
89 |         """Test cases where no money should be detected"""
90 |         assert contains_money("summary") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
91 |         assert contains_money("show me my expenses") == False
92 |         assert contains_money("hello") == False
   |
help: Replace with `not contains_money("summary")`

E712 Avoid equality comparisons to `False`; use `not contains_money("show me my expenses"):` for false checks
  --> tests/test_nlp_logging.py:91:16
   |
89 |         """Test cases where no money should be detected"""
90 |         assert contains_money("summary") == False
91 |         assert contains_money("show me my expenses") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
92 |         assert contains_money("hello") == False
93 |         assert contains_money("recap") == False
   |
help: Replace with `not contains_money("show me my expenses")`

E712 Avoid equality comparisons to `False`; use `not contains_money("hello"):` for false checks
  --> tests/test_nlp_logging.py:92:16
   |
90 |         assert contains_money("summary") == False
91 |         assert contains_money("show me my expenses") == False
92 |         assert contains_money("hello") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
93 |         assert contains_money("recap") == False
94 |         assert contains_money("how are you") == False
   |
help: Replace with `not contains_money("hello")`

E712 Avoid equality comparisons to `False`; use `not contains_money("recap"):` for false checks
  --> tests/test_nlp_logging.py:93:16
   |
91 |         assert contains_money("show me my expenses") == False
92 |         assert contains_money("hello") == False
93 |         assert contains_money("recap") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
94 |         assert contains_money("how are you") == False
95 |         assert contains_money("") == False
   |
help: Replace with `not contains_money("recap")`

E712 Avoid equality comparisons to `False`; use `not contains_money("how are you"):` for false checks
  --> tests/test_nlp_logging.py:94:16
   |
92 |         assert contains_money("hello") == False
93 |         assert contains_money("recap") == False
94 |         assert contains_money("how are you") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
95 |         assert contains_money("") == False
96 |         assert contains_money("   ") == False
   |
help: Replace with `not contains_money("how are you")`

E712 Avoid equality comparisons to `False`; use `not contains_money(""):` for false checks
  --> tests/test_nlp_logging.py:95:16
   |
93 |         assert contains_money("recap") == False
94 |         assert contains_money("how are you") == False
95 |         assert contains_money("") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
96 |         assert contains_money("   ") == False
   |
help: Replace with `not contains_money("")`

E712 Avoid equality comparisons to `False`; use `not contains_money("   "):` for false checks
  --> tests/test_nlp_logging.py:96:16
   |
94 |         assert contains_money("how are you") == False
95 |         assert contains_money("") == False
96 |         assert contains_money("   ") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
97 |
98 | class TestEnhancedParser:
   |
help: Replace with `not contains_money("   ")`

E712 Avoid equality comparisons to `False`; use `not is_smart_nlp_enabled():` for false checks
   --> tests/test_nlp_logging.py:223:16
    |
221 |         """Test that feature flags default to False for safety"""
222 |         # Should be False by default (safety first)
223 |         assert is_smart_nlp_enabled() == False
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
224 |         assert is_smart_tone_enabled() == False
    |
help: Replace with `not is_smart_nlp_enabled()`

E712 Avoid equality comparisons to `False`; use `not is_smart_tone_enabled():` for false checks
   --> tests/test_nlp_logging.py:224:16
    |
222 |         # Should be False by default (safety first)
223 |         assert is_smart_nlp_enabled() == False
224 |         assert is_smart_tone_enabled() == False
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
225 |     
226 |     def test_allowlist_functionality(self):
    |
help: Replace with `not is_smart_tone_enabled()`

E712 Avoid equality comparisons to `False`; use `not is_smart_nlp_enabled(test_psid_hash):` for false checks
   --> tests/test_nlp_logging.py:231:16
    |
230 |         # Without allowlist, should be False
231 |         assert is_smart_nlp_enabled(test_psid_hash) == False
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
232 |         
233 |         # Add to allowlist via environment variable simulation
    |
help: Replace with `not is_smart_nlp_enabled(test_psid_hash)`

E712 Avoid equality comparisons to `True`; use `is_smart_nlp_enabled(test_psid_hash):` for truth checks
   --> tests/test_nlp_logging.py:238:16
    |
237 |         # Should now be True for this user
238 |         assert is_smart_nlp_enabled(test_psid_hash) == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
239 |         
240 |         # Clean up
    |
help: Replace with `is_smart_nlp_enabled(test_psid_hash)`

F821 Undefined name `upsert_expense_idempotent`
   --> tests/test_nlp_logging.py:282:30
    |
280 |                     mock_summary.query.filter_by.return_value.first.return_value = None
281 |                     
282 |                     result = upsert_expense_idempotent(fresh_psid_hash, mid, test_payload)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^
283 |                     
284 |                     assert result['duplicate'] == False
    |

E712 Avoid equality comparisons to `False`; use `not result['duplicate']:` for false checks
   --> tests/test_nlp_logging.py:284:28
    |
282 |                     result = upsert_expense_idempotent(fresh_psid_hash, mid, test_payload)
283 |                     
284 |                     assert result['duplicate'] == False
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
285 |                     assert result['success'] == True
286 |                     assert result['amount'] == 100.0
    |
help: Replace with `not result['duplicate']`

E712 Avoid equality comparisons to `True`; use `result['success']:` for truth checks
   --> tests/test_nlp_logging.py:285:28
    |
284 |                     assert result['duplicate'] == False
285 |                     assert result['success'] == True
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^
286 |                     assert result['amount'] == 100.0
287 |                     assert result['currency'] == 'BDT'
    |
help: Replace with `result['success']`

F821 Undefined name `upsert_expense_idempotent`
   --> tests/test_nlp_logging.py:303:22
    |
301 |             mock_db.session.query.return_value.filter_by.return_value.first.return_value = mock_existing
302 |             
303 |             result = upsert_expense_idempotent(fresh_psid_hash, mid, test_payload)
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^
304 |             
305 |             assert result['duplicate'] == True
    |

E712 Avoid equality comparisons to `True`; use `result['duplicate']:` for truth checks
   --> tests/test_nlp_logging.py:305:20
    |
303 |             result = upsert_expense_idempotent(fresh_psid_hash, mid, test_payload)
304 |             
305 |             assert result['duplicate'] == True
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
306 |             assert result['idempotent'] == True
307 |             assert result['timestamp'] == "10:30"
    |
help: Replace with `result['duplicate']`

E712 Avoid equality comparisons to `True`; use `result['idempotent']:` for truth checks
   --> tests/test_nlp_logging.py:306:20
    |
305 |             assert result['duplicate'] == True
306 |             assert result['idempotent'] == True
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
307 |             assert result['timestamp'] == "10:30"
308 |             assert result['success'] == False
    |
help: Replace with `result['idempotent']`

E712 Avoid equality comparisons to `False`; use `not result['success']:` for false checks
   --> tests/test_nlp_logging.py:308:20
    |
306 |             assert result['idempotent'] == True
307 |             assert result['timestamp'] == "10:30"
308 |             assert result['success'] == False
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
309 |             assert result['expense_id'] == 123
    |
help: Replace with `not result['success']`

E712 Avoid equality comparisons to `True`; use `contains_money(text):` for truth checks
   --> tests/test_nlp_logging.py:332:16
    |
331 |         # Step 1: Money detection
332 |         assert contains_money(text) == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
333 |         
334 |         # Step 2: Parsing
    |
help: Replace with `contains_money(text)`

F821 Undefined name `upsert_expense_idempotent`
   --> tests/test_nlp_logging.py:362:30
    |
360 |                     }
361 |                     
362 |                     result = upsert_expense_idempotent(
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^
363 |                         fresh_user_setup['psid_hash'], 
364 |                         fresh_user_setup['mid'], 
    |

E712 Avoid equality comparisons to `True`; use `result['success']:` for truth checks
   --> tests/test_nlp_logging.py:368:28
    |
366 |                     )
367 |                     
368 |                     assert result['success'] == True
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^
369 |                     assert result['duplicate'] == False
    |
help: Replace with `result['success']`

E712 Avoid equality comparisons to `False`; use `not result['duplicate']:` for false checks
   --> tests/test_nlp_logging.py:369:28
    |
368 |                     assert result['success'] == True
369 |                     assert result['duplicate'] == False
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
370 |
371 | class TestParameterizedModes:
    |
help: Replace with `not result['duplicate']`

E712 Avoid equality comparisons to `True`; use `money_detected:` for truth checks
   --> tests/test_nlp_logging.py:392:20
    |
391 |         if expected_intent == "LOG":
392 |             assert money_detected == True
    |                    ^^^^^^^^^^^^^^^^^^^^^^
393 |             
394 |             parsed = parse_expense(text, datetime.utcnow())
    |
help: Replace with `money_detected`

E712 Avoid equality comparisons to `False`; use `not money_detected:` for false checks
   --> tests/test_nlp_logging.py:400:20
    |
399 |         elif expected_intent == "SUMMARY":
400 |             assert money_detected == False
    |                    ^^^^^^^^^^^^^^^^^^^^^^^
401 |
402 | class TestTelemetrySystem:
    |
help: Replace with `not money_detected`

E712 Avoid equality comparisons to `True`; use `contains_money("spent 100 on lunch"):` for truth checks
   --> tests/test_nlp_logging.py:452:16
    |
450 |     # Test 1: Money detection works
451 |     try:
452 |         assert contains_money("spent 100 on lunch") == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
453 |         assert contains_money("summary") == False
454 |         acceptance_results.append(("Money detection", True))
    |
help: Replace with `contains_money("spent 100 on lunch")`

E712 Avoid equality comparisons to `False`; use `not contains_money("summary"):` for false checks
   --> tests/test_nlp_logging.py:453:16
    |
451 |     try:
452 |         assert contains_money("spent 100 on lunch") == True
453 |         assert contains_money("summary") == False
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
454 |         acceptance_results.append(("Money detection", True))
455 |         print("✅ Money detection: PASS")
    |
help: Replace with `not contains_money("summary")`

E712 Avoid equality comparisons to `False`; use `not is_smart_nlp_enabled():` for false checks
   --> tests/test_nlp_logging.py:474:16
    |
472 |     # Test 3: Feature flags default to safe values
473 |     try:
474 |         assert is_smart_nlp_enabled() == False  # Safe default
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
475 |         acceptance_results.append(("Feature flag safety", True))
476 |         print("✅ Feature flag safety: PASS")
    |
help: Replace with `not is_smart_nlp_enabled()`

F811 [*] Redefinition of unused `hashlib` from line 6
  --> tests/test_pca_comprehensive_uat.py:20:8
   |
18 | os.environ['USE_PRECEDENCE'] = 'true'
19 |
20 | import hashlib
   |        ^^^^^^^
21 |
22 | from app import app
   |
help: Remove definition: `hashlib`

F841 Local variable `correction_a` is assigned to but never used
  --> tests/test_pca_comprehensive_uat.py:57:9
   |
55 |         """A1: User A correction → User B unaffected"""
56 |         # User A makes a correction
57 |         correction_a = {
   |         ^^^^^^^^^^^^
58 |             'tx_id': 'tx_shared_001',
59 |             'category': 'entertainment',
   |
help: Remove assignment to unused variable `correction_a`

F841 Local variable `original_mode` is assigned to but never used
   --> tests/test_pca_comprehensive_uat.py:251:9
    |
249 |         """D2: Each flag flips cleanly mid-session"""
250 |         # Test mode switching
251 |         original_mode = pca_feature_flags.mode
    |         ^^^^^^^^^^^^^
252 |         
253 |         # Switch to SHADOW mode
    |
help: Remove assignment to unused variable `original_mode`

F841 Local variable `result_rule` is assigned to but never used
   --> tests/test_pca_comprehensive_uat.py:345:13
    |
343 |             mock_db.session.query.return_value.filter_by.return_value.order_by.return_value.first.return_value = None  # No correction
344 |             
345 |             result_rule = precedence_engine.get_effective_view(
    |             ^^^^^^^^^^^
346 |                 user_id=self.user_a,
347 |                 tx_id='precedence_rule',
    |
help: Remove assignment to unused variable `result_rule`

F841 Local variable `result` is assigned to but never used
   --> tests/test_pca_comprehensive_uat.py:392:13
    |
390 |             mock_db.session.query.return_value.filter_by.return_value.order_by.return_value.first.return_value = None  # No correction
391 |             
392 |             result = precedence_engine.get_effective_view(
    |             ^^^^^^
393 |                 user_id=self.user_a,
394 |                 tx_id='conflict_resolution',
    |
help: Remove assignment to unused variable `result`

F841 Local variable `result` is assigned to but never used
   --> tests/test_pca_comprehensive_uat.py:411:13
    |
409 |             start_time = time.time()
410 |             
411 |             result = precedence_engine.get_effective_view(
    |             ^^^^^^
412 |                 user_id=self.user_a,
413 |                 tx_id=f'perf_test_{i}',
    |
help: Remove assignment to unused variable `result`

F841 Local variable `decision` is assigned to but never used
   --> tests/test_pca_comprehensive_uat.py:449:17
    |
447 |                 ask_once_count += 1
448 |             else:
449 |                 decision = "RAW_ONLY"
    |                 ^^^^^^^^
450 |                 raw_only_count += 1
    |
help: Remove assignment to unused variable `decision`

F841 Local variable `snapshot_created` is assigned to but never used
   --> tests/test_pca_end_to_end.py:327:9
    |
325 |         ttl_days = 90
326 |         current_time = datetime.now()
327 |         snapshot_created = current_time  # Mock snapshot creation
    |         ^^^^^^^^^^^^^^^^
328 |         ttl_compliant = True  # Mock TTL compliance check
    |
help: Remove assignment to unused variable `snapshot_created`

E712 Avoid equality comparisons to `True`; use `status['master_flag']:` for truth checks
   --> tests/test_pca_phase1_uat.py:329:16
    |
327 |         status = self.flags.get_status()
328 |         
329 |         assert status['master_flag'] == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
330 |         assert status['mode'] == 'ON'
331 |         assert status['overlay_active'] == True
    |
help: Replace with `status['master_flag']`

E712 Avoid equality comparisons to `True`; use `status['overlay_active']:` for truth checks
   --> tests/test_pca_phase1_uat.py:331:16
    |
329 |         assert status['master_flag'] == True
330 |         assert status['mode'] == 'ON'
331 |         assert status['overlay_active'] == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
332 |         assert status['features']['audit_ui'] == True
    |
help: Replace with `status['overlay_active']`

E712 Avoid equality comparisons to `True`; use `status['features']['audit_ui']:` for truth checks
   --> tests/test_pca_phase1_uat.py:332:16
    |
330 |         assert status['mode'] == 'ON'
331 |         assert status['overlay_active'] == True
332 |         assert status['features']['audit_ui'] == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
333 |         
334 |         print("✅ E2: Flag status correctly reported for monitoring")
    |
help: Replace with `status['features']['audit_ui']`

E712 Avoid equality comparisons to `True`; use `data['success']:` for truth checks
  --> tests/test_pca_phase2_integration.py:64:16
   |
62 |         assert response.status_code == 200
63 |         data = response.get_json()
64 |         assert data['success'] == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^
65 |         assert 'rule_id' in data
66 |         assert 'preview_count' in data
   |
help: Replace with `data['success']`

E712 Avoid equality comparisons to `True`; use `data['success']:` for truth checks
  --> tests/test_pca_phase2_integration.py:84:16
   |
82 |         assert response.status_code == 200
83 |         data = response.get_json()
84 |         assert data['success'] == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^
85 |         assert 'correction_id' in data
   |
help: Replace with `data['success']`

E712 Avoid equality comparisons to `True`; use `multi_item_parser.detect_multi_item(text):` for truth checks
   --> tests/test_pca_phase2_integration.py:177:16
    |
176 |         # Test detection
177 |         assert multi_item_parser.detect_multi_item(text) == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
178 |         
179 |         # Test parsing
    |
help: Replace with `multi_item_parser.detect_multi_item(text)`

E712 Avoid equality comparisons to `True`; use `pca_feature_flags.is_shadow_mode():` for truth checks
   --> tests/test_pca_phase2_integration.py:210:16
    |
208 |         pca_feature_flags.refresh_flags()
209 |         
210 |         assert pca_feature_flags.is_shadow_mode() == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
211 |         assert pca_feature_flags.is_overlay_active() == False
    |
help: Replace with `pca_feature_flags.is_shadow_mode()`

E712 Avoid equality comparisons to `False`; use `not pca_feature_flags.is_overlay_active():` for false checks
   --> tests/test_pca_phase2_integration.py:211:16
    |
210 |         assert pca_feature_flags.is_shadow_mode() == True
211 |         assert pca_feature_flags.is_overlay_active() == False
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
212 |         
213 |         # API should still work but not write to DB
    |
help: Replace with `not pca_feature_flags.is_overlay_active()`

E712 Avoid equality comparisons to `True`; use `pca_feature_flags.is_dryrun_mode():` for truth checks
   --> tests/test_pca_phase2_integration.py:235:16
    |
233 |         pca_feature_flags.refresh_flags()
234 |         
235 |         assert pca_feature_flags.is_dryrun_mode() == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
236 |         assert pca_feature_flags.is_overlay_active() == False
    |
help: Replace with `pca_feature_flags.is_dryrun_mode()`

E712 Avoid equality comparisons to `False`; use `not pca_feature_flags.is_overlay_active():` for false checks
   --> tests/test_pca_phase2_integration.py:236:16
    |
235 |         assert pca_feature_flags.is_dryrun_mode() == True
236 |         assert pca_feature_flags.is_overlay_active() == False
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
237 |         
238 |         # Should not create overlays
    |
help: Replace with `not pca_feature_flags.is_overlay_active()`

E712 Avoid equality comparisons to `True`; use `pca_feature_flags.is_overlay_active():` for truth checks
   --> tests/test_pca_phase2_integration.py:252:16
    |
250 |         pca_feature_flags.refresh_flags()
251 |         
252 |         assert pca_feature_flags.is_overlay_active() == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
253 |         assert pca_feature_flags.should_enable_rules() == True
254 |         assert pca_feature_flags.should_show_audit_ui() == True
    |
help: Replace with `pca_feature_flags.is_overlay_active()`

E712 Avoid equality comparisons to `True`; use `pca_feature_flags.should_enable_rules():` for truth checks
   --> tests/test_pca_phase2_integration.py:253:16
    |
252 |         assert pca_feature_flags.is_overlay_active() == True
253 |         assert pca_feature_flags.should_enable_rules() == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
254 |         assert pca_feature_flags.should_show_audit_ui() == True
    |
help: Replace with `pca_feature_flags.should_enable_rules()`

E712 Avoid equality comparisons to `True`; use `pca_feature_flags.should_show_audit_ui():` for truth checks
   --> tests/test_pca_phase2_integration.py:254:16
    |
252 |         assert pca_feature_flags.is_overlay_active() == True
253 |         assert pca_feature_flags.should_enable_rules() == True
254 |         assert pca_feature_flags.should_show_audit_ui() == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
255 |         
256 |         print("✅ D3: ON mode allows full overlay operations")
    |
help: Replace with `pca_feature_flags.should_show_audit_ui()`

F841 Local variable `expected_codes` is assigned to but never used
   --> tests/test_restart_reconciliation.py:353:17
    |
351 |                 available = response.status_code != 404
352 |                 status_msg = "✅ Available" if available else "❌ Not Found"
353 |                 expected_codes = [401, 403, 200] if endpoint != '/health' else [200]
    |                 ^^^^^^^^^^^^^^
354 |                 
355 |                 print(f"{endpoint} ({method}): {status_msg} (HTTP {response.status_code})")
    |
help: Remove assignment to unused variable `expected_codes`

F841 [*] Local variable `e` is assigned to but never used
   --> tests/test_single_writer_enforcement.py:114:33
    |
112 |                         pass  # Module doesn't exist, that's fine
113 |                         
114 |             except Exception as e:
    |                                 ^
115 |                 # If we can't check a module, that's okay
116 |                 pass
    |
help: Remove assignment to unused variable `e`

F401 `db_base.db` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> tests/test_single_writer_enforcement.py:163:33
    |
161 |         # This test verifies that database-level protections are in place
162 |         try:
163 |             from db_base import db
    |                                 ^^
164 |             from models import Expense
    |
help: Remove unused import: `db_base.db`

F401 `models.Expense` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> tests/test_single_writer_enforcement.py:164:32
    |
162 |         try:
163 |             from db_base import db
164 |             from models import Expense
    |                                ^^^^^^^
165 |             
166 |             # This should be prevented by database constraints or application logic
    |
help: Remove unused import: `models.Expense`

F841 Local variable `mock_db` is assigned to but never used
   --> tests/test_single_writer_enforcement.py:252:59
    |
250 |                     # This should raise a ValueError due to missing required fields
251 |                     # We're not actually calling it with a real DB, just testing validation
252 |                     with patch('backend_assistant.db') as mock_db:
    |                                                           ^^^^^^^
253 |                         add_expense(**test_case)
254 |                         pytest.fail(f"Should have raised error for invalid parameters: {test_case}")
    |
help: Remove assignment to unused variable `mock_db`

F841 Local variable `non_fallback_cases` is assigned to but never used
  --> tests/test_smart_corrections.py:93:9
   |
92 |         # These should NOT trigger fallback (not corrections)
93 |         non_fallback_cases = [
   |         ^^^^^^^^^^^^^^^^^^
94 |             "spent 500",           # Not a correction
95 |             "500 for coffee",      # Not a correction
   |
help: Remove assignment to unused variable `non_fallback_cases`

E712 Avoid equality comparisons to `True`; use `feature_enabled(test_psid, "SMART_NLP_ROUTING"):` for truth checks
  --> tests/test_stabilization.py:42:16
   |
41 |         # All feature flags should always return True
42 |         assert feature_enabled(test_psid, "SMART_NLP_ROUTING") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
43 |         assert feature_enabled(test_psid, "SMART_CORRECTIONS") == True
44 |         assert feature_enabled(test_psid, "SMART_NLP_TONE") == True
   |
help: Replace with `feature_enabled(test_psid, "SMART_NLP_ROUTING")`

E712 Avoid equality comparisons to `True`; use `feature_enabled(test_psid, "SMART_CORRECTIONS"):` for truth checks
  --> tests/test_stabilization.py:43:16
   |
41 |         # All feature flags should always return True
42 |         assert feature_enabled(test_psid, "SMART_NLP_ROUTING") == True
43 |         assert feature_enabled(test_psid, "SMART_CORRECTIONS") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
44 |         assert feature_enabled(test_psid, "SMART_NLP_TONE") == True
   |
help: Replace with `feature_enabled(test_psid, "SMART_CORRECTIONS")`

E712 Avoid equality comparisons to `True`; use `feature_enabled(test_psid, "SMART_NLP_TONE"):` for truth checks
  --> tests/test_stabilization.py:44:16
   |
42 |         assert feature_enabled(test_psid, "SMART_NLP_ROUTING") == True
43 |         assert feature_enabled(test_psid, "SMART_CORRECTIONS") == True
44 |         assert feature_enabled(test_psid, "SMART_NLP_TONE") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
45 |         
46 |         # Generic feature_enabled should always return True
   |
help: Replace with `feature_enabled(test_psid, "SMART_NLP_TONE")`

E712 Avoid equality comparisons to `True`; use `feature_enabled("any_psid", "any_feature"):` for truth checks
  --> tests/test_stabilization.py:47:16
   |
46 |         # Generic feature_enabled should always return True
47 |         assert feature_enabled("any_psid", "any_feature") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
48 |         
49 |         print("✅ Feature flags always return True")
   |
help: Replace with `feature_enabled("any_psid", "any_feature")`

E712 Avoid equality comparisons to `True`; use `is_correction_message(correction_text):` for truth checks
   --> tests/test_stabilization.py:149:20
    |
148 |             # Check correction detection
149 |             assert is_correction_message(correction_text) == True
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
150 |             
151 |             # Handle correction
    |
help: Replace with `is_correction_message(correction_text)`

E712 Avoid equality comparisons to `True`; use `money_detected:` for truth checks
   --> tests/test_stabilization.py:202:16
    |
200 |         # This should always use enhanced detection, no legacy fallback
201 |         money_detected = contains_money_with_correction_fallback(test_text, psid_hash)
202 |         assert money_detected == True
    |                ^^^^^^^^^^^^^^^^^^^^^^
203 |         
204 |         print("✅ Router uses enhanced money detection (no legacy_money_detected)")
    |
help: Replace with `money_detected`

E712 Avoid equality comparisons to `True`; use `feature_enabled("any_psid", "any_feature"):` for truth checks
   --> tests/test_stabilization.py:242:12
    |
241 |     # 2. Feature flags always return True
242 |     assert feature_enabled("any_psid", "any_feature") == True
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
243 |     print("   ✅ No legacy_money_detected logs (always AI routing)")
    |
help: Replace with `feature_enabled("any_psid", "any_feature")`

E712 Avoid equality comparisons to `True`; use `is_correction_message("sorry I meant 500"):` for truth checks
   --> tests/test_stabilization.py:251:12
    |
250 |     # 4. Correction detection
251 |     assert is_correction_message("sorry I meant 500") == True
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
252 |     print("   ✅ CORRECTION_APPLIED emitted and summaries exclude superseded rows")
    |
help: Replace with `is_correction_message("sorry I meant 500")`

F401 [*] `typing.Dict` imported but unused
  --> tools/migrate_assets_supabase.py:12:25
   |
10 | import time
11 | from pathlib import Path
12 | from typing import Any, Dict
   |                         ^^^^
13 |
14 | import requests
   |
help: Remove unused import: `typing.Dict`

F401 [*] `typing.Optional` imported but unused
  --> uat_comprehensive_e2e.py:20:20
   |
18 | from datetime import datetime
19 | from decimal import Decimal
20 | from typing import Optional
   |                    ^^^^^^^^
21 |
22 | # Add project root to path
   |
help: Remove unused import: `typing.Optional`

F841 Local variable `expenses` is assigned to but never used
   --> uat_comprehensive_e2e.py:210:17
    |
209 |                 # Test parsing still works after sanitization
210 |                 expenses = extract_all_expenses(sanitized, datetime.now())
    |                 ^^^^^^^^
211 |                 
212 |                 # Check that malicious content is removed/escaped
    |
help: Remove assignment to unused variable `expenses`

F841 Local variable `invalid_amount` is assigned to but never used
   --> uat_comprehensive_e2e.py:762:25
    |
760 |                     from decimal import InvalidOperation
761 |                     try:
762 |                         invalid_amount = Decimal("invalid_amount")  # This should fail
    |                         ^^^^^^^^^^^^^^
763 |                         validation_tests.append(False)  # Should have failed to convert
764 |                     except (ValueError, InvalidOperation):
    |
help: Remove assignment to unused variable `invalid_amount`

E722 Do not use bare `except`
   --> uat_comprehensive_e2e.py:844:17
    |
842 |                     db.session.commit()
843 |                     
844 |                 except:
    |                 ^^^^^^
845 |                     # Rollback should occur automatically
846 |                     db.session.rollback()
    |

E722 Do not use bare `except`
   --> uat_comprehensive_e2e.py:870:17
    |
868 |                     self.test_expense_ids.append(large_amount_expense.id)
869 |                     constraint_tests.append(True)  # Should succeed
870 |                 except:
    |                 ^^^^^^
871 |                     constraint_tests.append(False)
    |

F401 [*] `typing.Dict` imported but unused
  --> uat_e2e_framework.py:12:25
   |
10 | import uuid
11 | from datetime import datetime
12 | from typing import Any, Dict, List
   |                         ^^^^
13 |
14 | from db_base import db
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> uat_e2e_framework.py:12:31
   |
10 | import uuid
11 | from datetime import datetime
12 | from typing import Any, Dict, List
   |                               ^^^^
13 |
14 | from db_base import db
   |
help: Remove unused import

F821 Undefined name `i`
   --> uat_e2e_framework.py:537:63
    |
535 |             batch_results = []
536 |             for text in batch_inputs:
537 |                 result = parse_nl_expense(text, f"batch_test_{i}")
    |                                                               ^
538 |                 batch_results.append(result.success)
539 |             end_time = time.time()
    |

E712 Avoid equality comparisons to `False`; use `not clarifiers_enabled:` for false checks
  --> uat_phase0_clarifier_config.py:55:17
   |
53 |             self.log_result(
54 |                 "Config Loading - Clarifiers Disabled",
55 |                 clarifiers_enabled == False,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
56 |                 f"clarifiers_enabled={clarifiers_enabled}"
57 |             )
   |
help: Replace with `not clarifiers_enabled`

F841 Local variable `mode_check` is assigned to but never used
  --> uat_phase0_clarifier_config.py:73:13
   |
71 |         try:
72 |             # Test mode requirements for clarifiers
73 |             mode_check = pca_flags.mode.value in ['DRYRUN', 'ON']
   |             ^^^^^^^^^^
74 |             enable_flag = pca_flags.enable_clarifiers
75 |             kill_switch = pca_flags.global_kill_switch
   |
help: Remove assignment to unused variable `mode_check`

E712 Avoid equality comparisons to `False`; use `not should_enable:` for false checks
  --> uat_phase0_clarifier_config.py:82:17
   |
80 |             self.log_result(
81 |                 "Flag Safety - Clarifier Gating",
82 |                 should_enable == False,
   |                 ^^^^^^^^^^^^^^^^^^^^^^
83 |                 f"mode={pca_flags.mode.value}, enable_flag={enable_flag}, kill_switch={kill_switch}, result={should_enable}"
84 |             )
   |
help: Replace with `not should_enable`

E712 Avoid equality comparisons to `False`; use `not status.get('clarifiers_enabled'):` for false checks
   --> uat_phase0_clarifier_config.py:119:17
    |
117 |             # Verify clarifiers disabled in status
118 |             clarifiers_disabled = (
119 |                 status.get('clarifiers_enabled') == False and
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
120 |                 status.get('enable_clarifiers_flag') == False
121 |             )
    |
help: Replace with `not status.get('clarifiers_enabled')`

E712 Avoid equality comparisons to `False`; use `not status.get('enable_clarifiers_flag'):` for false checks
   --> uat_phase0_clarifier_config.py:120:17
    |
118 |             clarifiers_disabled = (
119 |                 status.get('clarifiers_enabled') == False and
120 |                 status.get('enable_clarifiers_flag') == False
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
121 |             )
    |
help: Replace with `not status.get('enable_clarifiers_flag')`

F841 Local variable `has_recent` is assigned to but never used
  --> uat_phase1_cc_persistence.py:97:17
   |
96 |                 has_data = total_count > 0
97 |                 has_recent = recent_count > 0
   |                 ^^^^^^^^^^
98 |                 has_users = unique_users > 0
   |
help: Remove assignment to unused variable `has_recent`

E722 Do not use bare `except`
   --> uat_phase1_cc_persistence.py:151:21
    |
149 |                         if slots_json:
150 |                             json.loads(json.dumps(slots_json))  # Validate JSON
151 |                     except:
    |                     ^^^^^^
152 |                         compliance_issues.append("invalid slots_json format")
    |

F401 [*] `typing.List` imported but unused
  --> ui_guardrails_validation.py:10:20
   |
 8 | import re
 9 | import subprocess
10 | from typing import List, Tuple
   |                    ^^^^
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> ui_guardrails_validation.py:10:26
   |
 8 | import re
 9 | import subprocess
10 | from typing import List, Tuple
   |                          ^^^^^
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> utils/absolute_final_validator.py:9:25
   |
 7 | import time
 8 | from datetime import datetime
 9 | from typing import Any, Dict
   |                         ^^^^
10 |
11 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `typing.Dict`

F401 [*] `typing.Dict` imported but unused
  --> utils/acceptance_criteria_validation.py:10:25
   |
 8 | from dataclasses import dataclass
 9 | from datetime import datetime
10 | from typing import Any, Dict, List
   |                         ^^^^
11 |
12 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/acceptance_criteria_validation.py:10:31
   |
 8 | from dataclasses import dataclass
 9 | from datetime import datetime
10 | from typing import Any, Dict, List
   |                               ^^^^
11 |
12 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> utils/aggregation_cache.py:9:20
   |
 7 | from collections import defaultdict
 8 | from datetime import datetime, timedelta
 9 | from typing import Dict, Optional
   |                    ^^^^
10 |
11 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/aggregation_cache.py:9:26
   |
 7 | from collections import defaultdict
 8 | from datetime import datetime, timedelta
 9 | from typing import Dict, Optional
   |                          ^^^^^^^^
10 |
11 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> utils/ai_adapter_never_empty.py:10:25
   |
 8 | import time
 9 | from dataclasses import dataclass
10 | from typing import Any, Dict
   |                         ^^^^
11 |
12 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `typing.Dict`

F401 [*] `typing.Dict` imported but unused
  --> utils/ai_adapter_v2.py:9:25
   |
 7 | import os
 8 | import time
 9 | from typing import Any, Dict
   |                         ^^^^
10 |
11 | import requests
   |
help: Remove unused import: `typing.Dict`

E402 Module level import not at top of file
  --> utils/ai_adapter_v2.py:36:1
   |
35 | # Global AI timeout metrics
36 | import threading
   | ^^^^^^^^^^^^^^^^
37 |
38 | AI_TIMEOUT_COUNTER = 0
   |

E722 Do not use bare `except`
   --> utils/ai_adapter_v2.py:662:29
    |
660 | …                         else:
661 | …                             raise json_error
662 | …                     except:
    |                       ^^^^^^
663 | …                         # If all repair attempts fail, create minimal valid response
664 | …                         ai_response = {
    |

F401 [*] `typing.Dict` imported but unused
 --> utils/ai_contamination_monitor.py:7:25
  |
5 | import logging
6 | from datetime import datetime
7 | from typing import Any, Dict
  |                         ^^^^
8 |
9 | logger = logging.getLogger(__name__)
  |
help: Remove unused import: `typing.Dict`

F401 [*] `typing.Dict` imported but unused
  --> utils/ai_context_adapter.py:8:25
   |
 6 | import json
 7 | import logging
 8 | from typing import Any, Dict, Optional
   |                         ^^^^
 9 |
10 | from utils.context_packet import (
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/ai_context_adapter.py:8:31
   |
 6 | import json
 7 | import logging
 8 | from typing import Any, Dict, Optional
   |                               ^^^^^^^^
 9 |
10 | from utils.context_packet import (
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> utils/ai_expense_parser.py:9:25
   |
 7 | import logging
 8 | import re
 9 | from typing import Any, Dict
   |                         ^^^^
10 |
11 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `typing.Dict`

F401 [*] `typing.Optional` imported but unused
 --> utils/ai_faq_classifier.py:7:20
  |
6 | import logging
7 | from typing import Optional
  |                    ^^^^^^^^
8 |
9 | logger = logging.getLogger(__name__)
  |
help: Remove unused import: `typing.Optional`

F401 [*] `datetime.timezone` imported but unused
  --> utils/ai_limiter.py:10:48
   |
 8 | from collections import defaultdict, deque
 9 | from dataclasses import dataclass
10 | from datetime import UTC, datetime, timedelta, timezone
   |                                                ^^^^^^^^
11 | from typing import Any, Dict, List, Optional
   |
help: Remove unused import: `datetime.timezone`

F401 [*] `typing.Dict` imported but unused
  --> utils/ai_limiter.py:11:25
   |
 9 | from dataclasses import dataclass
10 | from datetime import UTC, datetime, timedelta, timezone
11 | from typing import Any, Dict, List, Optional
   |                         ^^^^
12 |
13 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/ai_limiter.py:11:31
   |
 9 | from dataclasses import dataclass
10 | from datetime import UTC, datetime, timedelta, timezone
11 | from typing import Any, Dict, List, Optional
   |                               ^^^^
12 |
13 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/ai_limiter.py:11:37
   |
 9 | from dataclasses import dataclass
10 | from datetime import UTC, datetime, timedelta, timezone
11 | from typing import Any, Dict, List, Optional
   |                                     ^^^^^^^^
12 |
13 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

E402 Module level import not at top of file
  --> utils/ai_limiter.py:16:1
   |
15 | # Configuration from centralized config
16 | from config import AI_RL_GLOBAL_LIMIT, AI_RL_USER_LIMIT
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
17 |
18 | AI_ENABLED = os.environ.get("AI_ENABLED", "false").lower() == "true"
   |

F401 [*] `typing.Dict` imported but unused
 --> utils/ai_onboarding_system.py:5:25
  |
3 | """
4 | import logging
5 | from typing import Any, Dict, Tuple
  |                         ^^^^
6 |
7 | from ai_adapter_gemini import generate_with_schema
  |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
 --> utils/ai_onboarding_system.py:5:31
  |
3 | """
4 | import logging
5 | from typing import Any, Dict, Tuple
  |                               ^^^^^
6 |
7 | from ai_adapter_gemini import generate_with_schema
  |
help: Remove unused import

F401 [*] `datetime.timezone` imported but unused
  --> utils/ai_rate_limiter.py:10:37
   |
 8 | import time
 9 | from dataclasses import dataclass
10 | from datetime import UTC, datetime, timezone
   |                                     ^^^^^^^^
11 | from typing import Dict, List, Optional
   |
help: Remove unused import: `datetime.timezone`

F401 [*] `typing.Dict` imported but unused
  --> utils/ai_rate_limiter.py:11:20
   |
 9 | from dataclasses import dataclass
10 | from datetime import UTC, datetime, timezone
11 | from typing import Dict, List, Optional
   |                    ^^^^
12 |
13 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/ai_rate_limiter.py:11:26
   |
 9 | from dataclasses import dataclass
10 | from datetime import UTC, datetime, timezone
11 | from typing import Dict, List, Optional
   |                          ^^^^
12 |
13 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/ai_rate_limiter.py:11:32
   |
 9 | from dataclasses import dataclass
10 | from datetime import UTC, datetime, timezone
11 | from typing import Dict, List, Optional
   |                                ^^^^^^^^
12 |
13 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> utils/ai_resilience.py:12:25
   |
10 | from dataclasses import dataclass
11 | from enum import Enum
12 | from typing import Any, Dict
   |                         ^^^^
13 |
14 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `typing.Dict`

F401 [*] `typing.Optional` imported but unused
  --> utils/alembic_checker.py:9:20
   |
 7 | import os
 8 | import sys
 9 | from typing import Optional, Tuple
   |                    ^^^^^^^^
10 |
11 | from sqlalchemy import create_engine, text
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/alembic_checker.py:9:30
   |
 7 | import os
 8 | import sys
 9 | from typing import Optional, Tuple
   |                              ^^^^^
10 |
11 | from sqlalchemy import create_engine, text
   |
help: Remove unused import

F401 [*] `typing.Set` imported but unused
 --> utils/allowlist.py:6:20
  |
4 | """
5 | import os
6 | from typing import Set
  |                    ^^^
7 |
8 | # Load dev PSIDs from environment variable (comma-separated)
  |
help: Remove unused import: `typing.Set`

F401 [*] `typing.Dict` imported but unused
  --> utils/analytics_engine.py:11:25
   |
 9 | import os
10 | from datetime import datetime
11 | from typing import Any, Dict
   |                         ^^^^
12 |
13 | from db_base import db
   |
help: Remove unused import: `typing.Dict`

F401 [*] `typing.Dict` imported but unused
  --> utils/background_processor.py:12:25
   |
10 | from datetime import datetime
11 | from queue import Queue
12 | from typing import Any, Dict, Optional, Tuple
   |                         ^^^^
13 |
14 | from utils.production_router import production_router
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/background_processor.py:12:31
   |
10 | from datetime import datetime
11 | from queue import Queue
12 | from typing import Any, Dict, Optional, Tuple
   |                               ^^^^^^^^
13 |
14 | from utils.production_router import production_router
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/background_processor.py:12:41
   |
10 | from datetime import datetime
11 | from queue import Queue
12 | from typing import Any, Dict, Optional, Tuple
   |                                         ^^^^^
13 |
14 | from utils.production_router import production_router
   |
help: Remove unused import

F841 Local variable `future` is assigned to but never used
  --> utils/background_processor.py:89:13
   |
87 |             )
88 |             
89 |             future = self.executor.submit(self._process_job_safe, job)
   |             ^^^^^^
90 |             
91 |             psid_hash = resolve_user_id(psid=psid)
   |
help: Remove assignment to unused variable `future`

F841 Local variable `future` is assigned to but never used
   --> utils/background_processor.py:106:13
    |
105 |         try:
106 |             future = self.executor.submit(self._process_job_safe, job)
    |             ^^^^^^
107 |             logger.info(f"Request {rid}: Web message queued for background processing")
108 |             return {"ok": True, "rid": rid}
    |
help: Remove assignment to unused variable `future`

F841 Local variable `job_channel` is assigned to but never used
   --> utils/background_processor.py:179:21
    |
177 |                     job_text = job.get("text") if isinstance(job, dict) else job.text
178 |                     job_rid = job.get("rid") if isinstance(job, dict) else job.rid
179 |                     job_channel = job.get("channel", "messenger") if isinstance(job, dict) else "messenger"
    |                     ^^^^^^^^^^^
180 |                     
181 |                     # CRITICAL: router needs user_id_hash for data processing, but we preserve original PSID for messaging
    |
help: Remove assignment to unused variable `job_channel`

F401 [*] `datetime.timezone` imported but unused
 --> utils/background_processor_rl2.py:8:48
  |
6 | import logging
7 | import time
8 | from datetime import UTC, datetime, timedelta, timezone
  |                                                ^^^^^^^^
9 | from typing import Optional, Tuple
  |
help: Remove unused import: `datetime.timezone`

F401 [*] `typing.Optional` imported but unused
  --> utils/background_processor_rl2.py:9:20
   |
 7 | import time
 8 | from datetime import UTC, datetime, timedelta, timezone
 9 | from typing import Optional, Tuple
   |                    ^^^^^^^^
10 |
11 | from utils.categories import categorize_expense
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/background_processor_rl2.py:9:30
   |
 7 | import time
 8 | from datetime import UTC, datetime, timedelta, timezone
 9 | from typing import Optional, Tuple
   |                              ^^^^^
10 |
11 | from utils.categories import categorize_expense
   |
help: Remove unused import

E722 Do not use bare `except`
   --> utils/background_processor_rl2.py:196:17
    |
194 |                 try:
195 |                     db.session.rollback()
196 |                 except:
    |                 ^^^^^^
197 |                     pass
    |

F401 [*] `typing.Dict` imported but unused
  --> utils/basic_alerts.py:12:20
   |
10 | from collections import deque
11 | from datetime import datetime
12 | from typing import Dict
   |                    ^^^^
13 |
14 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `typing.Dict`

E722 Do not use bare `except`
   --> utils/basic_alerts.py:138:9
    |
136 |                 "severity": "error"
137 |             })
138 |         except:
    |         ^^^^^^
139 |             pass  # Don't break if structured logging fails
    |

F401 [*] `typing.Dict` imported but unused
  --> utils/block5_comprehensive_uat.py:14:25
   |
12 | from dataclasses import asdict, dataclass
13 | from datetime import datetime, timedelta
14 | from typing import Any, Dict, List
   |                         ^^^^
15 |
16 | import requests
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/block5_comprehensive_uat.py:14:31
   |
12 | from dataclasses import asdict, dataclass
13 | from datetime import datetime, timedelta
14 | from typing import Any, Dict, List
   |                               ^^^^
15 |
16 | import requests
   |
help: Remove unused import

F841 Local variable `first_time` is assigned to but never used
   --> utils/block5_comprehensive_uat.py:792:13
    |
790 |             # First request (cache miss)
791 |             first_response = requests.get(f"{self.base_url}/api/preview/report")
792 |             first_time = time.time()
    |             ^^^^^^^^^^
793 |             
794 |             # Second request (should be fast if cached properly)
    |
help: Remove assignment to unused variable `first_time`

F401 [*] `typing.Dict` imported but unused
 --> utils/canonical_command.py:9:25
  |
7 | from dataclasses import asdict, dataclass
8 | from enum import Enum
9 | from typing import Any, Dict, List, Optional
  |                         ^^^^
  |
help: Remove unused import

F401 [*] `typing.List` imported but unused
 --> utils/canonical_command.py:9:31
  |
7 | from dataclasses import asdict, dataclass
8 | from enum import Enum
9 | from typing import Any, Dict, List, Optional
  |                               ^^^^
  |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
 --> utils/canonical_command.py:9:37
  |
7 | from dataclasses import asdict, dataclass
8 | from enum import Enum
9 | from typing import Any, Dict, List, Optional
  |                                     ^^^^^^^^
  |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> utils/captcha.py:8:20
   |
 6 | import random
 7 | import time
 8 | from typing import Dict, Tuple
   |                    ^^^^
 9 |
10 | from flask import session
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/captcha.py:8:26
   |
 6 | import random
 7 | import time
 8 | from typing import Dict, Tuple
   |                          ^^^^^
 9 |
10 | from flask import session
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> utils/ci_invariant_enforcement.py:12:20
   |
10 | import sys
11 | from pathlib import Path
12 | from typing import Dict, List
   |                    ^^^^
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/ci_invariant_enforcement.py:12:26
   |
10 | import sys
11 | from pathlib import Path
12 | from typing import Dict, List
   |                          ^^^^
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> utils/circuit_breaker.py:8:25
   |
 6 | from dataclasses import dataclass
 7 | from enum import Enum
 8 | from typing import Any, Dict, Optional
   |                         ^^^^
 9 |
10 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/circuit_breaker.py:8:31
   |
 6 | from dataclasses import dataclass
 7 | from enum import Enum
 8 | from typing import Any, Dict, Optional
   |                               ^^^^^^^^
 9 |
10 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> utils/clarifier_validator.py:8:25
   |
 6 | import logging
 7 | import re
 8 | from typing import Any, Dict, List, Tuple
   |                         ^^^^
 9 |
10 | logger = logging.getLogger("finbrain.clarifier")
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/clarifier_validator.py:8:31
   |
 6 | import logging
 7 | import re
 8 | from typing import Any, Dict, List, Tuple
   |                               ^^^^
 9 |
10 | logger = logging.getLogger("finbrain.clarifier")
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/clarifier_validator.py:8:37
   |
 6 | import logging
 7 | import re
 8 | from typing import Any, Dict, List, Tuple
   |                                     ^^^^^
 9 |
10 | logger = logging.getLogger("finbrain.clarifier")
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> utils/coaching_analytics.py:11:25
   |
 9 | from collections import defaultdict, deque
10 | from datetime import datetime
11 | from typing import Any, Dict, List, Optional
   |                         ^^^^
12 |
13 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/coaching_analytics.py:11:31
   |
 9 | from collections import defaultdict, deque
10 | from datetime import datetime
11 | from typing import Any, Dict, List, Optional
   |                               ^^^^
12 |
13 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/coaching_analytics.py:11:37
   |
 9 | from collections import defaultdict, deque
10 | from datetime import datetime
11 | from typing import Any, Dict, List, Optional
   |                                     ^^^^^^^^
12 |
13 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F841 Local variable `error_event` is assigned to but never used
   --> utils/coaching_analytics.py:154:13
    |
152 |             self.metrics['error_counts'][error_type] += 1
153 |             
154 |             error_event = {
    |             ^^^^^^^^^^^
155 |                 'timestamp': time.time(),
156 |                 'type': error_type,
    |
help: Remove assignment to unused variable `error_event`

F841 Local variable `current_time` is assigned to but never used
   --> utils/coaching_analytics.py:248:13
    |
246 |         """Generate coaching effectiveness analysis"""
247 |         try:
248 |             current_time = time.time()
    |             ^^^^^^^^^^^^
249 |             
250 |             # Analyze conversion funnel
    |
help: Remove assignment to unused variable `current_time`

E722 Do not use bare `except`
   --> utils/coaching_analytics.py:297:9
    |
295 |             recent_times = list(self.metrics['response_times'])[-50:]  # Last 50 operations
296 |             self.health_metrics['avg_response_time_ms'] = sum(recent_times) / len(recent_times)
297 |         except:
    |         ^^^^^^
298 |             pass
    |

E722 Do not use bare `except`
   --> utils/coaching_analytics.py:308:9
    |
306 |                                    if current_time - s['timestamp'] <= 3600])
307 |             self.health_metrics['error_rate_1h'] = recent_errors / max(recent_operations, 1) * 100
308 |         except:
    |         ^^^^^^
309 |             pass
    |

E722 Do not use bare `except`
   --> utils/coaching_analytics.py:320:9
    |
318 |             else:
319 |                 return 'healthy'
320 |         except:
    |         ^^^^^^
321 |             return 'unknown'
    |

F401 [*] `typing.Dict` imported but unused
  --> utils/coaching_optimization.py:11:25
   |
 9 | from collections import OrderedDict
10 | from datetime import datetime
11 | from typing import Any, Dict, List, Optional, Tuple
   |                         ^^^^
12 |
13 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/coaching_optimization.py:11:31
   |
 9 | from collections import OrderedDict
10 | from datetime import datetime
11 | from typing import Any, Dict, List, Optional, Tuple
   |                               ^^^^
12 |
13 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/coaching_optimization.py:11:37
   |
 9 | from collections import OrderedDict
10 | from datetime import datetime
11 | from typing import Any, Dict, List, Optional, Tuple
   |                                     ^^^^^^^^
12 |
13 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/coaching_optimization.py:11:47
   |
 9 | from collections import OrderedDict
10 | from datetime import datetime
11 | from typing import Any, Dict, List, Optional, Tuple
   |                                               ^^^^^
12 |
13 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

E722 Do not use bare `except`
   --> utils/coaching_optimization.py:416:13
    |
414 |                 coaching_cache.cleanup_expired_entries()
415 |                 cleanup_stats['items_cleaned'] += 10  # Estimate
416 |             except:
    |             ^^^^^^
417 |                 pass
    |

E722 Do not use bare `except`
   --> utils/coaching_optimization.py:439:17
    |
437 |                             metric_list.pop(0)
438 |                             cleanup_stats['items_cleaned'] += 1
439 |                 except:
    |                 ^^^^^^
440 |                     pass
    |

F401 [*] `typing.Dict` imported but unused
  --> utils/coaching_resilience.py:9:25
   |
 7 | import os
 8 | import time
 9 | from typing import Any, Dict, Optional, Tuple
   |                         ^^^^
10 |
11 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/coaching_resilience.py:9:31
   |
 7 | import os
 8 | import time
 9 | from typing import Any, Dict, Optional, Tuple
   |                               ^^^^^^^^
10 |
11 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/coaching_resilience.py:9:41
   |
 7 | import os
 8 | import time
 9 | from typing import Any, Dict, Optional, Tuple
   |                                         ^^^^^
10 |
11 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

E722 Do not use bare `except`
   --> utils/coaching_resilience.py:216:21
    |
214 |                         from utils.session import delete_coaching_session
215 |                         delete_coaching_session(psid_hash)
216 |                     except:
    |                     ^^^^^^
217 |                         pass  # Even clearing failed, but we don't crash
218 |                     return None
    |

F401 [*] `typing.Dict` imported but unused
  --> utils/coaching_safeguards.py:12:25
   |
10 | from datetime import datetime
11 | from enum import Enum
12 | from typing import Any, Dict, List, Optional
   |                         ^^^^
13 |
14 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/coaching_safeguards.py:12:31
   |
10 | from datetime import datetime
11 | from enum import Enum
12 | from typing import Any, Dict, List, Optional
   |                               ^^^^
13 |
14 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/coaching_safeguards.py:12:37
   |
10 | from datetime import datetime
11 | from enum import Enum
12 | from typing import Any, Dict, List, Optional
   |                                     ^^^^^^^^
13 |
14 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

E722 Do not use bare `except`
   --> utils/coaching_safeguards.py:525:9
    |
523 |             from utils.coaching_safeguards import coaching_circuit_breaker
524 |             coaching_circuit_breaker.force_open(f"Emergency disable: {reason}")
525 |         except:
    |         ^^^^^^
526 |             pass
    |

F401 [*] `typing.Dict` imported but unused
  --> utils/cold_start_mitigation.py:10:25
   |
 8 | import time
 9 | from datetime import datetime
10 | from typing import Any, Dict
   |                         ^^^^
11 |
12 | import requests
   |
help: Remove unused import: `typing.Dict`

F401 [*] `typing.Dict` imported but unused
  --> utils/comprehensive_uat.py:13:25
   |
11 | from dataclasses import dataclass
12 | from datetime import date, datetime, timedelta
13 | from typing import Any, Dict, List, Optional
   |                         ^^^^
14 |
15 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/comprehensive_uat.py:13:31
   |
11 | from dataclasses import dataclass
12 | from datetime import date, datetime, timedelta
13 | from typing import Any, Dict, List, Optional
   |                               ^^^^
14 |
15 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/comprehensive_uat.py:13:37
   |
11 | from dataclasses import dataclass
12 | from datetime import date, datetime, timedelta
13 | from typing import Any, Dict, List, Optional
   |                                     ^^^^^^^^
14 |
15 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

E712 Avoid equality comparisons to `True`; use `user.d1_logged:` for truth checks
   --> utils/comprehensive_uat.py:494:51
    |
492 |             # Validate D1 activation if expected
493 |             if scenario.expected_behavior.get("d1_logged"):
494 |                 validation_results["d1_logged"] = user.d1_logged == True
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^
495 |             
496 |             # Validate D3 completion if expected  
    |
help: Replace with `user.d1_logged`

E712 Avoid equality comparisons to `True`; use `user.d3_completed:` for truth checks
   --> utils/comprehensive_uat.py:498:54
    |
496 |             # Validate D3 completion if expected  
497 |             if scenario.expected_behavior.get("d3_completed"):
498 |                 validation_results["d3_completed"] = user.d3_completed == True
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
499 |             
500 |             # Validate signup source if expected
    |
help: Replace with `user.d3_completed`

F401 [*] `typing.Dict` imported but unused
  --> utils/comprehensive_uat_block6.py:11:25
   |
 9 | import uuid
10 | from datetime import date, datetime, timedelta
11 | from typing import Any, Dict
   |                         ^^^^
12 |
13 | from app import app, db
   |
help: Remove unused import: `typing.Dict`

F841 Local variable `result` is assigned to but never used
   --> utils/comprehensive_uat_block6.py:226:9
    |
225 |         # Start challenge
226 |         result = handle_challenge_start(user_hash)
    |         ^^^^^^
227 |         post_start_state = self.capture_user_state(user_hash)
    |
help: Remove assignment to unused variable `result`

F841 Local variable `result2` is assigned to but never used
   --> utils/comprehensive_uat_block6.py:242:9
    |
241 |         # Test 2: Idempotency check
242 |         result2 = handle_challenge_start(user_hash)
    |         ^^^^^^^
243 |         post_idempotent_state = self.capture_user_state(user_hash)
    |
help: Remove assignment to unused variable `result2`

F841 Local variable `original_start` is assigned to but never used
   --> utils/comprehensive_uat_block6.py:313:9
    |
311 |         phase3_start = time.time()
312 |         user = db.session.query(User).filter_by(user_id_hash=user_hash).first()
313 |         original_start = user.challenge_start_date
    |         ^^^^^^^^^^^^^^
314 |         user.challenge_start_date = date.today() - timedelta(days=1)  # Yesterday
315 |         user.challenge_end_date = date.today() + timedelta(days=1)    # Tomorrow
    |
help: Remove assignment to unused variable `original_start`

F841 Local variable `existing_lifecycle_results` is assigned to but never used
   --> utils/comprehensive_uat_block6.py:463:9
    |
461 |         existing_user = self.create_test_user("existing", "scenario1")
462 |         existing_data_results = self.test_data_handling_integrity(existing_user)
463 |         existing_lifecycle_results = self.test_challenge_lifecycle(existing_user)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
464 |         existing_passed = all(existing_data_results['integrity_checks'].values())
465 |         self.log_test_result("Existing User Data Handling", existing_passed, f"User: {existing_user[:8]}")
    |
help: Remove assignment to unused variable `existing_lifecycle_results`

F841 Local variable `new_lifecycle_results` is assigned to but never used
   --> utils/comprehensive_uat_block6.py:471:9
    |
469 |         new_user = self.create_test_user("new", "scenario1")
470 |         new_data_results = self.test_data_handling_integrity(new_user)
471 |         new_lifecycle_results = self.test_challenge_lifecycle(new_user)
    |         ^^^^^^^^^^^^^^^^^^^^^
472 |         new_passed = all(new_data_results['integrity_checks'].values())
473 |         self.log_test_result("New User Data Handling", new_passed, f"User: {new_user[:8]}")
    |
help: Remove assignment to unused variable `new_lifecycle_results`

F841 Local variable `edge_lifecycle_results` is assigned to but never used
   --> utils/comprehensive_uat_block6.py:479:9
    |
477 |         edge_user = self.create_test_user("edge", "scenario1")
478 |         edge_data_results = self.test_data_handling_integrity(edge_user)
479 |         edge_lifecycle_results = self.test_challenge_lifecycle(edge_user)
    |         ^^^^^^^^^^^^^^^^^^^^^^
480 |         edge_passed = all(edge_data_results['integrity_checks'].values())
481 |         self.log_test_result("Edge Case User Handling", edge_passed, f"User: {edge_user[:8]}")
    |
help: Remove assignment to unused variable `edge_lifecycle_results`

F401 [*] `typing.Dict` imported but unused
 --> utils/context_integration.py:7:25
  |
6 | import logging
7 | from typing import Any, Dict
  |                         ^^^^
8 |
9 | from sqlalchemy.orm import Session
  |
help: Remove unused import: `typing.Dict`

F821 Undefined name `generate_with_schema`
  --> utils/context_integration.py:90:25
   |
88 |             full_user_text = f"Question: {text}\n\n{ai_context}"
89 |             
90 |             ai_result = generate_with_schema(
   |                         ^^^^^^^^^^^^^^^^^^^^
91 |                 user_text=full_user_text,
92 |                 system_prompt=CONTEXT_SYSTEM_PROMPT,
   |

F821 Undefined name `generate_with_schema`
   --> utils/context_integration.py:272:48
    |
270 |     try:
271 |         # Use production AI adapter instead
272 |         print(f"✓ Schema generation function: {generate_with_schema.__name__}")
    |                                                ^^^^^^^^^^^^^^^^^^^^
273 |     except ImportError as e:
274 |         print(f"⚠ Schema function not available: {e}")
    |

F401 [*] `typing.Dict` imported but unused
  --> utils/context_packet.py:8:25
   |
 6 | import logging
 7 | from datetime import datetime, timedelta
 8 | from typing import Any, Dict, List, Optional, Tuple
   |                         ^^^^
 9 |
10 | from sqlalchemy.orm import Session
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/context_packet.py:8:31
   |
 6 | import logging
 7 | from datetime import datetime, timedelta
 8 | from typing import Any, Dict, List, Optional, Tuple
   |                               ^^^^
 9 |
10 | from sqlalchemy.orm import Session
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/context_packet.py:8:37
   |
 6 | import logging
 7 | from datetime import datetime, timedelta
 8 | from typing import Any, Dict, List, Optional, Tuple
   |                                     ^^^^^^^^
 9 |
10 | from sqlalchemy.orm import Session
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/context_packet.py:8:47
   |
 6 | import logging
 7 | from datetime import datetime, timedelta
 8 | from typing import Any, Dict, List, Optional, Tuple
   |                                               ^^^^^
 9 |
10 | from sqlalchemy.orm import Session
   |
help: Remove unused import

F841 Local variable `now` is assigned to but never used
  --> utils/context_packet.py:31:9
   |
29 |     try:
30 |         user_hash = psid_hash(psid)
31 |         now = datetime.utcnow()
   |         ^^^
32 |         
33 |         # Get 30-day and previous 30-day spending by category
   |
help: Remove assignment to unused variable `now`

F401 [*] `typing.Dict` imported but unused
  --> utils/conversational_ai.py:8:25
   |
 6 | import logging
 7 | from datetime import datetime, timedelta
 8 | from typing import Any, Dict, List, Tuple
   |                         ^^^^
 9 |
10 | from utils.identity import psid_hash
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/conversational_ai.py:8:31
   |
 6 | import logging
 7 | from datetime import datetime, timedelta
 8 | from typing import Any, Dict, List, Tuple
   |                               ^^^^
 9 |
10 | from utils.identity import psid_hash
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/conversational_ai.py:8:37
   |
 6 | import logging
 7 | from datetime import datetime, timedelta
 8 | from typing import Any, Dict, List, Tuple
   |                                     ^^^^^
 9 |
10 | from utils.identity import psid_hash
   |
help: Remove unused import

F821 Undefined name `generate_with_schema`
   --> utils/conversational_ai.py:149:21
    |
148 |         # Generate AI response with user context
149 |         ai_result = generate_with_schema(
    |                     ^^^^^^^^^^^^^^^^^^^^
150 |             user_text=user_message,
151 |             system_prompt=summary_prompt,
    |

F841 Local variable `message_lower` is assigned to but never used
   --> utils/conversational_ai.py:260:9
    |
258 |     def handle_conversational_query(self, psid_or_hash: str, user_message: str) -> tuple[str, str]:
259 |         """Handle conversational queries using user-level memory (legacy method for backwards compatibility)"""
260 |         message_lower = user_message.lower()
    |         ^^^^^^^^^^^^^
261 |         
262 |         # Determine if we have a PSID or hash (hash length is 64 chars)
    |
help: Remove assignment to unused variable `message_lower`

F841 Local variable `analysis_prompt` is assigned to but never used
   --> utils/conversational_ai.py:279:9
    |
278 |         # Build analysis-focused prompt
279 |         analysis_prompt = f"""Analyze the user's spending patterns and provide insights.
    |         ^^^^^^^^^^^^^^^
280 |
281 | {self._build_context_summary(context)}
    |
help: Remove assignment to unused variable `analysis_prompt`

F841 Local variable `contextual_prompt` is assigned to but never used
   --> utils/conversational_ai.py:391:9
    |
389 |         context = self.get_user_expense_context_direct(psid_hash, days=7)  # Recent week
390 |         
391 |         contextual_prompt = f"""Respond to the user query using their expense context for personalization.
    |         ^^^^^^^^^^^^^^^^^
392 |
393 | {self._build_context_summary(context) if context['has_data'] else 'User is new to expense tracking'}
    |
help: Remove assignment to unused variable `contextual_prompt`

F401 [*] `typing.Dict` imported but unused
  --> utils/data_integrity_check.py:25:25
   |
23 | from dataclasses import asdict, dataclass
24 | from datetime import datetime
25 | from typing import Any, Dict, List
   |                         ^^^^
26 |
27 | from sqlalchemy import text
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/data_integrity_check.py:25:31
   |
23 | from dataclasses import asdict, dataclass
24 | from datetime import datetime
25 | from typing import Any, Dict, List
   |                               ^^^^
26 |
27 | from sqlalchemy import text
   |
help: Remove unused import

F841 Local variable `amount` is assigned to but never used
   --> utils/data_integrity_check.py:549:17
    |
547 |                 expense_id = row[1]
548 |                 superseded_by = row[2]
549 |                 amount = row[3]
    |                 ^^^^^^
550 |                 affected_users.append(f"{user_hash[:8]}... expense_id:{expense_id} superseded_by:{superseded_by} (missing)")
    |
help: Remove assignment to unused variable `amount`

F401 [*] `typing.Dict` imported but unused
  --> utils/database_backup.py:11:25
   |
 9 | import os
10 | from datetime import datetime
11 | from typing import Any, Dict, List
   |                         ^^^^
12 |
13 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/database_backup.py:11:31
   |
 9 | import os
10 | from datetime import datetime
11 | from typing import Any, Dict, List
   |                               ^^^^
12 |
13 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

E722 Do not use bare `except`
   --> utils/database_backup.py:256:9
    |
254 |                 'used_bytes': total_bytes - free_bytes
255 |             }
256 |         except:
    |         ^^^^^^
257 |             return {'free_bytes': -1, 'total_bytes': -1, 'used_bytes': -1}
    |

F401 [*] `typing.Dict` imported but unused
  --> utils/database_backup_v2.py:10:25
   |
 8 | import os
 9 | from datetime import datetime
10 | from typing import Any, Dict, List
   |                         ^^^^
11 |
12 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/database_backup_v2.py:10:31
   |
 8 | import os
 9 | from datetime import datetime
10 | from typing import Any, Dict, List
   |                               ^^^^
11 |
12 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F821 Undefined name `amount`
  --> utils/db.py:64:30
   |
62 |         MIN_AMOUNT = 0.01
63 |         
64 |         amount_float = float(amount)
   |                              ^^^^^^
65 |         if amount_float > MAX_AMOUNT:
66 |             raise ValueError(f"Amount {amount_float} exceeds maximum allowed value of ৳{MAX_AMOUNT:,.2f}")
   |

F821 Undefined name `amount`
  --> utils/db.py:77:65
   |
76 |         # Trace the write operation
77 |         trace_event("record_expense", user_id=user_hash, amount=amount, category=category, path="write")
   |                                                                 ^^^^^^
78 |         current_date = date.today()
79 |         current_time = datetime.now().time()
   |

F821 Undefined name `category`
  --> utils/db.py:77:82
   |
76 |         # Trace the write operation
77 |         trace_event("record_expense", user_id=user_hash, amount=amount, category=category, path="write")
   |                                                                                  ^^^^^^^^
78 |         current_date = date.today()
79 |         current_time = datetime.now().time()
   |

F821 Undefined name `description`
  --> utils/db.py:86:31
   |
84 |         expense.user_id = user_hash
85 |         expense.user_id_hash = user_hash  # Ensure both fields are set for data integrity
86 |         expense.description = description
   |                               ^^^^^^^^^^^
87 |         expense.amount = amount
88 |         expense.category = category
   |

F821 Undefined name `amount`
  --> utils/db.py:87:26
   |
85 |         expense.user_id_hash = user_hash  # Ensure both fields are set for data integrity
86 |         expense.description = description
87 |         expense.amount = amount
   |                          ^^^^^^
88 |         expense.category = category
89 |         expense.date = current_date
   |

F821 Undefined name `category`
  --> utils/db.py:88:28
   |
86 |         expense.description = description
87 |         expense.amount = amount
88 |         expense.category = category
   |                            ^^^^^^^^
89 |         expense.date = current_date
90 |         expense.time = current_time
   |

F821 Undefined name `unique_id`
  --> utils/db.py:92:29
   |
90 |         expense.time = current_time
91 |         expense.month = current_month
92 |         expense.unique_id = unique_id
   |                             ^^^^^^^^^
93 |         expense.platform = platform
94 |         expense.original_message = original_message
   |

F821 Undefined name `original_message`
  --> utils/db.py:94:36
   |
92 |         expense.unique_id = unique_id
93 |         expense.platform = platform
94 |         expense.original_message = original_message
   |                                    ^^^^^^^^^^^^^^^^
95 |         expense.mid = mid
   |

F821 Undefined name `mid`
  --> utils/db.py:95:23
   |
93 |         expense.platform = platform
94 |         expense.original_message = original_message
95 |         expense.mid = mid
   |                       ^^^
96 |         
97 |         db_session.session.add(expense)
   |

F821 Undefined name `amount`
   --> utils/db.py:102:70
    |
100 |         user = get_or_create_user(user_hash, platform, db_session)
101 |         if user:
102 |             user.total_expenses = float(user.total_expenses) + float(amount)
    |                                                                      ^^^^^^
103 |             user.expense_count += 1
104 |             user.last_interaction = datetime.utcnow()
    |

F821 Undefined name `amount`
   --> utils/db.py:116:44
    |
114 |             monthly_summary.user_id_hash = user_hash
115 |             monthly_summary.month = current_month
116 |             monthly_summary.total_amount = amount
    |                                            ^^^^^^
117 |             monthly_summary.expense_count = 1
118 |             monthly_summary.categories = {category: float(amount)}
    |

F821 Undefined name `category`
   --> utils/db.py:118:43
    |
116 |             monthly_summary.total_amount = amount
117 |             monthly_summary.expense_count = 1
118 |             monthly_summary.categories = {category: float(amount)}
    |                                           ^^^^^^^^
119 |             db_session.session.add(monthly_summary)
120 |         else:
    |

F821 Undefined name `amount`
   --> utils/db.py:118:59
    |
116 |             monthly_summary.total_amount = amount
117 |             monthly_summary.expense_count = 1
118 |             monthly_summary.categories = {category: float(amount)}
    |                                                           ^^^^^^
119 |             db_session.session.add(monthly_summary)
120 |         else:
    |

F821 Undefined name `amount`
   --> utils/db.py:121:88
    |
119 |             db_session.session.add(monthly_summary)
120 |         else:
121 |             monthly_summary.total_amount = float(monthly_summary.total_amount) + float(amount)
    |                                                                                        ^^^^^^
122 |             monthly_summary.expense_count += 1
    |

F821 Undefined name `category`
   --> utils/db.py:126:24
    |
124 |             # Update category breakdown
125 |             categories = monthly_summary.categories or {}
126 |             categories[category] = categories.get(category, 0) + float(amount)
    |                        ^^^^^^^^
127 |             monthly_summary.categories = categories
128 |             monthly_summary.updated_at = datetime.utcnow()
    |

F821 Undefined name `category`
   --> utils/db.py:126:51
    |
124 |             # Update category breakdown
125 |             categories = monthly_summary.categories or {}
126 |             categories[category] = categories.get(category, 0) + float(amount)
    |                                                   ^^^^^^^^
127 |             monthly_summary.categories = categories
128 |             monthly_summary.updated_at = datetime.utcnow()
    |

F821 Undefined name `amount`
   --> utils/db.py:126:72
    |
124 |             # Update category breakdown
125 |             categories = monthly_summary.categories or {}
126 |             categories[category] = categories.get(category, 0) + float(amount)
    |                                                                        ^^^^^^
127 |             monthly_summary.categories = categories
128 |             monthly_summary.updated_at = datetime.utcnow()
    |

F821 Undefined name `amount`
   --> utils/db.py:145:30
    |
143 |             TelemetryTracker.track_expense_logged(
144 |                 user_id_hash=user_hash,
145 |                 amount=float(amount),
    |                              ^^^^^^
146 |                 category=category,
147 |                 source=source
    |

F821 Undefined name `category`
   --> utils/db.py:146:26
    |
144 |                 user_id_hash=user_hash,
145 |                 amount=float(amount),
146 |                 category=category,
    |                          ^^^^^^^^
147 |                 source=source
148 |             )
    |

F821 Undefined name `amount`
   --> utils/db.py:156:52
    |
154 |         try:
155 |             from utils.lightweight_analytics import track_expense_success
156 |             track_expense_success(user_hash, float(amount), category)
    |                                                    ^^^^^^
157 |         except Exception as e:
158 |             # Fail-safe: analytics errors never break expense logging
    |

F821 Undefined name `category`
   --> utils/db.py:156:61
    |
154 |         try:
155 |             from utils.lightweight_analytics import track_expense_success
156 |             track_expense_success(user_hash, float(amount), category)
    |                                                             ^^^^^^^^
157 |         except Exception as e:
158 |             # Fail-safe: analytics errors never break expense logging
    |

F401 [*] `typing.Dict` imported but unused
  --> utils/deployment_confidence_validator.py:15:20
   |
13 | import sys
14 | import time
15 | from typing import Dict
   |                    ^^^^
16 |
17 | import requests
   |
help: Remove unused import: `typing.Dict`

E722 Do not use bare `except`
   --> utils/deployment_confidence_validator.py:102:21
    |
100 |                         if "Authentication required" in error_data.get('error', ''):
101 |                             details += " (Correct auth error message)"
102 |                     except:
    |                     ^^^^^^
103 |                         pass
104 |                 else:
    |

F401 [*] `typing.Dict` imported but unused
  --> utils/deployment_monitor.py:9:20
   |
 7 | import time
 8 | from datetime import datetime
 9 | from typing import Dict, List
   |                    ^^^^
10 |
11 | from sqlalchemy import text
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/deployment_monitor.py:9:26
   |
 7 | import time
 8 | from datetime import datetime
 9 | from typing import Dict, List
   |                          ^^^^
10 |
11 | from sqlalchemy import text
   |
help: Remove unused import

E712 Avoid equality comparisons to `False`; use `not r.get('no_duplication'):` for false checks
   --> utils/deployment_monitor.py:241:16
    |
239 |         duplication_users = [
240 |             r for r in user_results['test_details'] 
241 |             if r.get('no_duplication') == False
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
242 |         ]
243 |         if len(duplication_users) > 0:
    |
help: Replace with `not r.get('no_duplication')`

F401 [*] `typing.Optional` imported but unused
 --> utils/dispatcher.py:5:20
  |
3 | """
4 | import logging
5 | from typing import Optional, Tuple
  |                    ^^^^^^^^
6 |
7 | from handlers.insight import handle_insight
  |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
 --> utils/dispatcher.py:5:30
  |
3 | """
4 | import logging
5 | from typing import Optional, Tuple
  |                              ^^^^^
6 |
7 | from handlers.insight import handle_insight
  |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
 --> utils/engagement.py:7:25
  |
5 | import logging
6 | from datetime import datetime, timedelta
7 | from typing import Any, Dict, Optional
  |                         ^^^^
8 |
9 | logger = logging.getLogger(__name__)
  |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
 --> utils/engagement.py:7:31
  |
5 | import logging
6 | from datetime import datetime, timedelta
7 | from typing import Any, Dict, Optional
  |                               ^^^^^^^^
8 |
9 | logger = logging.getLogger(__name__)
  |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> utils/enhanced_uat.py:10:25
   |
 8 | from dataclasses import dataclass
 9 | from datetime import date, datetime, timedelta
10 | from typing import Any, Dict, List, Optional
   |                         ^^^^
11 |
12 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/enhanced_uat.py:10:31
   |
 8 | from dataclasses import dataclass
 9 | from datetime import date, datetime, timedelta
10 | from typing import Any, Dict, List, Optional
   |                               ^^^^
11 |
12 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/enhanced_uat.py:10:37
   |
 8 | from dataclasses import dataclass
 9 | from datetime import date, datetime, timedelta
10 | from typing import Any, Dict, List, Optional
   |                                     ^^^^^^^^
11 |
12 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> utils/error_responses.py:8:25
   |
 6 | import logging
 7 | import uuid
 8 | from typing import Any, Dict, List, Optional
   |                         ^^^^
 9 |
10 | from flask import g, request
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/error_responses.py:8:31
   |
 6 | import logging
 7 | import uuid
 8 | from typing import Any, Dict, List, Optional
   |                               ^^^^
 9 |
10 | from flask import g, request
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/error_responses.py:8:37
   |
 6 | import logging
 7 | import uuid
 8 | from typing import Any, Dict, List, Optional
   |                                     ^^^^^^^^
 9 |
10 | from flask import g, request
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
 --> utils/expense_ambiguity.py:7:25
  |
6 | import logging
7 | from typing import Any, Dict, List
  |                         ^^^^
8 |
9 | logger = logging.getLogger(__name__)
  |
help: Remove unused import

F401 [*] `typing.List` imported but unused
 --> utils/expense_ambiguity.py:7:31
  |
6 | import logging
7 | from typing import Any, Dict, List
  |                               ^^^^
8 |
9 | logger = logging.getLogger(__name__)
  |
help: Remove unused import

F401 [*] `datetime.timezone` imported but unused
 --> utils/expense_clarification.py:8:48
  |
6 | import logging
7 | import time
8 | from datetime import UTC, datetime, timedelta, timezone
  |                                                ^^^^^^^^
9 | from typing import Any, Dict, List, Optional
  |
help: Remove unused import: `datetime.timezone`

F401 [*] `typing.Dict` imported but unused
  --> utils/expense_clarification.py:9:25
   |
 7 | import time
 8 | from datetime import UTC, datetime, timedelta, timezone
 9 | from typing import Any, Dict, List, Optional
   |                         ^^^^
10 |
11 | from utils.brand_normalizer import normalize
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/expense_clarification.py:9:31
   |
 7 | import time
 8 | from datetime import UTC, datetime, timedelta, timezone
 9 | from typing import Any, Dict, List, Optional
   |                               ^^^^
10 |
11 | from utils.brand_normalizer import normalize
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/expense_clarification.py:9:37
   |
 7 | import time
 8 | from datetime import UTC, datetime, timedelta, timezone
 9 | from typing import Any, Dict, List, Optional
   |                                     ^^^^^^^^
10 |
11 | from utils.brand_normalizer import normalize
   |
help: Remove unused import

F841 Local variable `expense_result` is assigned to but never used
   --> utils/expense_clarification.py:314:17
    |
313 |                 # Call add_expense to persist the clarified expense
314 |                 expense_result = add_expense(
    |                 ^^^^^^^^^^^^^^
315 |                     user_id=user_hash,
316 |                     amount_minor=int(amount * 100),  # Convert to minor units (cents)
    |
help: Remove assignment to unused variable `expense_result`

F401 [*] `typing.Dict` imported but unused
  --> utils/expense_editor.py:10:25
   |
 8 | import uuid
 9 | from datetime import datetime, timedelta
10 | from typing import Any, Dict, List, Optional
   |                         ^^^^
11 |
12 | from flask import request
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/expense_editor.py:10:31
   |
 8 | import uuid
 9 | from datetime import datetime, timedelta
10 | from typing import Any, Dict, List, Optional
   |                               ^^^^
11 |
12 | from flask import request
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/expense_editor.py:10:37
   |
 8 | import uuid
 9 | from datetime import datetime, timedelta
10 | from typing import Any, Dict, List, Optional
   |                                     ^^^^^^^^
11 |
12 | from flask import request
   |
help: Remove unused import

E722 Do not use bare `except`
   --> utils/expense_editor.py:222:9
    |
220 |                 "endpoint": request.endpoint
221 |             }
222 |         except:
    |         ^^^^^^
223 |             return {"error": "Could not capture client info"}
    |

F401 [*] `typing.Dict` imported but unused
  --> utils/expense_learning.py:8:25
   |
 6 | import logging
 7 | from datetime import datetime
 8 | from typing import Any, Dict, List, Optional
   |                         ^^^^
 9 |
10 | from db_base import db
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/expense_learning.py:8:31
   |
 6 | import logging
 7 | from datetime import datetime
 8 | from typing import Any, Dict, List, Optional
   |                               ^^^^
 9 |
10 | from db_base import db
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/expense_learning.py:8:37
   |
 6 | import logging
 7 | from datetime import datetime
 8 | from typing import Any, Dict, List, Optional
   |                                     ^^^^^^^^
 9 |
10 | from db_base import db
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/expense_repair.py:8:20
   |
 6 | import logging
 7 | import re
 8 | from typing import Optional, Tuple
   |                    ^^^^^^^^
 9 |
10 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/expense_repair.py:8:30
   |
 6 | import logging
 7 | import re
 8 | from typing import Optional, Tuple
   |                              ^^^^^
 9 |
10 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
 --> utils/faq_map.py:3:20
  |
1 | # utils/faq_map.py
2 | import re
3 | from typing import Optional
  |                    ^^^^^^^^
4 |
5 | FAQ_JSON = {
  |
help: Remove unused import: `typing.Optional`

F401 [*] `typing.Optional` imported but unused
  --> utils/feature_flags.py:8:20
   |
 6 | import logging
 7 | import os
 8 | from typing import Optional
   |                    ^^^^^^^^
 9 |
10 | logger = logging.getLogger("finbrain.feature_flags")
   |
help: Remove unused import: `typing.Optional`

E402 Module level import not at top of file
  --> utils/feature_flags.py:14:1
   |
12 | # PHASE 7: Import unified flags system
13 | # Import centralized config for backward compatibility
14 | from utils.config import FEATURE_FLAGS_VERSION
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
15 | from utils.flags import unified_flags
   |

E402 Module level import not at top of file
  --> utils/feature_flags.py:15:1
   |
13 | # Import centralized config for backward compatibility
14 | from utils.config import FEATURE_FLAGS_VERSION
15 | from utils.flags import unified_flags
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

F401 [*] `typing.Dict` imported but unused
  --> utils/feedback_context.py:10:20
   |
 8 | import time
 9 | from datetime import datetime, timedelta
10 | from typing import Dict, Optional
   |                    ^^^^
11 |
12 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/feedback_context.py:10:26
   |
 8 | import time
 9 | from datetime import datetime, timedelta
10 | from typing import Dict, Optional
   |                          ^^^^^^^^
11 |
12 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> utils/final_100_percent_validator.py:8:25
   |
 6 | import logging
 7 | from datetime import datetime
 8 | from typing import Any, Dict
   |                         ^^^^
 9 |
10 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `typing.Dict`

F401 [*] `typing.Dict` imported but unused
  --> utils/final_compliance_validator.py:10:25
   |
 8 | from dataclasses import dataclass
 9 | from datetime import datetime
10 | from typing import Any, Dict, List
   |                         ^^^^
11 |
12 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/final_compliance_validator.py:10:31
   |
 8 | from dataclasses import dataclass
 9 | from datetime import datetime
10 | from typing import Any, Dict, List
   |                               ^^^^
11 |
12 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F841 Local variable `summary_counter_incremented` is assigned to but never used
  --> utils/final_compliance_validator.py:97:17
   |
95 |                 logger.warning(f"Summary handler test: {summary_error}")
96 |                 summary_success = False
97 |                 summary_counter_incremented = False
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
98 |             
99 |             try:
   |
help: Remove assignment to unused variable `summary_counter_incremented`

F841 Local variable `insight_counter_incremented` is assigned to but never used
   --> utils/final_compliance_validator.py:111:17
    |
109 |                 logger.warning(f"Insight handler test: {insight_error}")
110 |                 insight_success = False
111 |                 insight_counter_incremented = False
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
112 |             
113 |             # Final counter check
    |
help: Remove assignment to unused variable `insight_counter_incremented`

F401 [*] `typing.Optional` imported but unused
  --> utils/flags.py:9:20
   |
 7 | import os
 8 | from enum import Enum
 9 | from typing import Optional
   |                    ^^^^^^^^
10 |
11 | logger = logging.getLogger("finbrain.unified_flags")
   |
help: Remove unused import: `typing.Optional`

F401 [*] `typing.Dict` imported but unused
  --> utils/gap_fix_flags.py:8:25
   |
 6 | import logging
 7 | import os
 8 | from typing import Any, Dict
   |                         ^^^^
 9 |
10 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `typing.Dict`

F401 [*] `typing.Dict` imported but unused
  --> utils/ghost_elimination.py:19:25
   |
17 | from enum import Enum
18 | from pathlib import Path
19 | from typing import Any, Dict, List, Optional
   |                         ^^^^
20 |
21 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/ghost_elimination.py:19:31
   |
17 | from enum import Enum
18 | from pathlib import Path
19 | from typing import Any, Dict, List, Optional
   |                               ^^^^
20 |
21 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/ghost_elimination.py:19:37
   |
17 | from enum import Enum
18 | from pathlib import Path
19 | from typing import Any, Dict, List, Optional
   |                                     ^^^^^^^^
20 |
21 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> utils/guest_tokens.py:13:25
   |
11 | import secrets
12 | import time
13 | from typing import Any, Dict, Optional, Tuple
   |                         ^^^^
14 |
15 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/guest_tokens.py:13:31
   |
11 | import secrets
12 | import time
13 | from typing import Any, Dict, Optional, Tuple
   |                               ^^^^^^^^
14 |
15 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/guest_tokens.py:13:41
   |
11 | import secrets
12 | import time
13 | from typing import Any, Dict, Optional, Tuple
   |                                         ^^^^^
14 |
15 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F841 Local variable `used_tokens_key` is assigned to but never used
   --> utils/guest_tokens.py:161:9
    |
159 |         # For now, use simple in-memory tracking
160 |         # In production, implement with Redis with expiry
161 |         used_tokens_key = "used_guest_tokens"
    |         ^^^^^^^^^^^^^^^
162 |         
163 |         # Simple implementation - in production use proper cache
    |
help: Remove assignment to unused variable `used_tokens_key`

F401 [*] `typing.Dict` imported but unused
  --> utils/hash_migration.py:12:25
   |
10 | import hashlib
11 | import logging
12 | from typing import Any, Dict, List, Optional
   |                         ^^^^
13 |
14 | from sqlalchemy.orm import Session
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/hash_migration.py:12:31
   |
10 | import hashlib
11 | import logging
12 | from typing import Any, Dict, List, Optional
   |                               ^^^^
13 |
14 | from sqlalchemy.orm import Session
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/hash_migration.py:12:37
   |
10 | import hashlib
11 | import logging
12 | from typing import Any, Dict, List, Optional
   |                                     ^^^^^^^^
13 |
14 | from sqlalchemy.orm import Session
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> utils/input_sanitizer.py:9:25
   |
 7 | import html
 8 | import re
 9 | from typing import Any, Dict
   |                         ^^^^
10 |
11 | # Control character patterns (C0 and C1 control blocks)
   |
help: Remove unused import: `typing.Dict`

F401 [*] `typing.Dict` imported but unused
  --> utils/integrity_alerts.py:13:25
   |
11 | from email.mime.multipart import MimeMultipart
12 | from email.mime.text import MimeText
13 | from typing import Any, Dict
   |                         ^^^^
14 |
15 | import requests
   |
help: Remove unused import: `typing.Dict`

F841 Local variable `report` is assigned to but never used
   --> utils/integrity_alerts.py:153:9
    |
151 |         alert_email_from = os.getenv('ALERT_EMAIL_FROM', smtp_user)
152 |         
153 |         report = alert_data['report']
    |         ^^^^^^
154 |         
155 |         # Create email
    |
help: Remove assignment to unused variable `report`

F401 [*] `typing.Dict` imported but unused
  --> utils/integrity_scheduler.py:9:25
   |
 7 | import os
 8 | from datetime import datetime
 9 | from typing import Any, Dict, Optional
   |                         ^^^^
10 |
11 | from apscheduler.executors.pool import ThreadPoolExecutor
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/integrity_scheduler.py:9:31
   |
 7 | import os
 8 | from datetime import datetime
 9 | from typing import Any, Dict, Optional
   |                               ^^^^^^^^
10 |
11 | from apscheduler.executors.pool import ThreadPoolExecutor
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
 --> utils/intent_router.py:7:20
  |
6 | import re
7 | from typing import Optional
  |                    ^^^^^^^^
  |
help: Remove unused import: `typing.Optional`

F401 [*] `typing.Dict` imported but unused
  --> utils/job_processor.py:9:25
   |
 7 | import time
 8 | from datetime import datetime
 9 | from typing import Any, Dict, Optional
   |                         ^^^^
10 |
11 | from .circuit_breaker import circuit_breaker
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/job_processor.py:9:31
   |
 7 | import time
 8 | from datetime import datetime
 9 | from typing import Any, Dict, Optional
   |                               ^^^^^^^^
10 |
11 | from .circuit_breaker import circuit_breaker
   |
help: Remove unused import

F401 `sentry_sdk` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> utils/job_processor.py:36:20
   |
34 |         """Initialize Sentry if configured"""
35 |         try:
36 |             import sentry_sdk
   |                    ^^^^^^^^^^
37 |             sentry_dsn = os.getenv('SENTRY_DSN')
38 |             if sentry_dsn:
   |
help: Remove unused import: `sentry_sdk`

F401 [*] `typing.Dict` imported but unused
  --> utils/job_queue.py:9:40
   |
 7 | import time
 8 | import uuid
 9 | from typing import TYPE_CHECKING, Any, Dict, List, Optional
   |                                        ^^^^
10 |
11 | if TYPE_CHECKING:
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/job_queue.py:9:46
   |
 7 | import time
 8 | import uuid
 9 | from typing import TYPE_CHECKING, Any, Dict, List, Optional
   |                                              ^^^^
10 |
11 | if TYPE_CHECKING:
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/job_queue.py:9:52
   |
 7 | import time
 8 | import uuid
 9 | from typing import TYPE_CHECKING, Any, Dict, List, Optional
   |                                                    ^^^^^^^^
10 |
11 | if TYPE_CHECKING:
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> utils/lightweight_analytics.py:12:25
   |
10 | from collections import defaultdict, deque
11 | from datetime import date, datetime
12 | from typing import Any, Dict
   |                         ^^^^
13 |
14 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `typing.Dict`

F841 [*] Local variable `e` is assigned to but never used
   --> utils/lightweight_analytics.py:187:29
    |
185 |             log_structured_event(f"ANALYTICS_{event_name}", analytics_data)
186 |             
187 |         except Exception as e:
    |                             ^
188 |             # Use basic logging as fallback
189 |             logger.info(f"ANALYTICS_{event_name} {json.dumps(data)}")
    |
help: Remove assignment to unused variable `e`

F841 [*] Local variable `e` is assigned to but never used
   --> utils/logger.py:153:29
    |
151 |             return response
152 |             
153 |         except Exception as e:
    |                             ^
154 |             # Calculate duration even for errors
155 |             duration_ms = (time.time() - g.request_start_time) * 1000
    |
help: Remove assignment to unused variable `e`

F401 [*] `typing.Dict` imported but unused
 --> utils/message_handlers.py:7:25
  |
6 | import logging
7 | from typing import Any, Dict
  |                         ^^^^
8 |
9 | from limiter import can_use_ai
  |
help: Remove unused import: `typing.Dict`

F401 [*] `typing.Dict` imported but unused
  --> utils/migrations.py:15:25
   |
14 | import logging
15 | from typing import Any, Dict, List, Optional
   |                         ^^^^
16 |
17 | from sqlalchemy import text
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/migrations.py:15:31
   |
14 | import logging
15 | from typing import Any, Dict, List, Optional
   |                               ^^^^
16 |
17 | from sqlalchemy import text
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/migrations.py:15:37
   |
14 | import logging
15 | from typing import Any, Dict, List, Optional
   |                                     ^^^^^^^^
16 |
17 | from sqlalchemy import text
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> utils/milestone_engine.py:11:25
   |
 9 | import os
10 | from datetime import date, datetime
11 | from typing import Any, Dict, Optional
   |                         ^^^^
12 |
13 | from db_base import db
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/milestone_engine.py:11:31
   |
 9 | import os
10 | from datetime import date, datetime
11 | from typing import Any, Dict, Optional
   |                               ^^^^^^^^
12 |
13 | from db_base import db
   |
help: Remove unused import

F841 Local variable `today` is assigned to but never used
   --> utils/milestone_engine.py:286:13
    |
285 |         try:
286 |             today = today_local()
    |             ^^^^^
287 |             can_fire_today = self._can_fire_milestone_today(user)
    |
help: Remove assignment to unused variable `today`

F401 [*] `typing.Dict` imported but unused
  --> utils/multi_item_parser.py:8:25
   |
 6 | import logging
 7 | import re
 8 | from typing import Any, Dict, List
   |                         ^^^^
 9 |
10 | from utils.canonical_command import CanonicalCommand, CCSlots
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/multi_item_parser.py:8:31
   |
 6 | import logging
 7 | import re
 8 | from typing import Any, Dict, List
   |                               ^^^^
 9 |
10 | from utils.canonical_command import CanonicalCommand, CCSlots
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/nl_expense_parser.py:9:20
   |
 7 | import re
 8 | from dataclasses import dataclass
 9 | from typing import Optional
   |                    ^^^^^^^^
10 |
11 | from parsers.expense import (
   |
help: Remove unused import: `typing.Optional`

F841 Local variable `expense_data` is assigned to but never used
   --> utils/nl_expense_parser.py:246:13
    |
244 |         try:
245 |             # Create a simple expense data structure to reuse existing AI infrastructure
246 |             expense_data = {
    |             ^^^^^^^^^^^^
247 |                 'expenses': [{'category': 'other', 'total': 0, 'percentage': 100}],
248 |                 'total_amount': 0,
    |
help: Remove assignment to unused variable `expense_data`

F401 [*] `typing.Dict` imported but unused
  --> utils/optimized_uat.py:10:25
   |
 8 | from dataclasses import dataclass
 9 | from datetime import datetime
10 | from typing import Any, Dict, List, Optional
   |                         ^^^^
11 |
12 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/optimized_uat.py:10:31
   |
 8 | from dataclasses import dataclass
 9 | from datetime import datetime
10 | from typing import Any, Dict, List, Optional
   |                               ^^^^
11 |
12 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/optimized_uat.py:10:37
   |
 8 | from dataclasses import dataclass
 9 | from datetime import datetime
10 | from typing import Any, Dict, List, Optional
   |                                     ^^^^^^^^
11 |
12 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F841 Local variable `success` is assigned to but never used
   --> utils/optimized_uat.py:326:17
    |
324 |                 # Bulletproof fallback
325 |                 result = {"success": True, "fallback": True, "amount": scenario.test_data["expense_amount"]}
326 |                 success = True
    |                 ^^^^^^^
327 |             
328 |             return AuditTrail(
    |
help: Remove assignment to unused variable `success`

F841 Local variable `handler_success` is assigned to but never used
   --> utils/optimized_uat.py:391:17
    |
389 |                 logger.warning(f"Handler test error, implementing bulletproof fallback: {test_error}")
390 |                 result = {"success": True, "fallback": True}
391 |                 handler_success = True
    |                 ^^^^^^^^^^^^^^^
392 |             
393 |             return AuditTrail(
    |
help: Remove assignment to unused variable `handler_success`

F841 Local variable `all_checks_pass` is assigned to but never used
   --> utils/optimized_uat.py:435:13
    |
433 |             }
434 |             
435 |             all_checks_pass = all(framework_checks.values())
    |             ^^^^^^^^^^^^^^^
436 |             
437 |             return AuditTrail(
    |
help: Remove assignment to unused variable `all_checks_pass`

F841 Local variable `all_behaviors_validated` is assigned to but never used
   --> utils/optimized_uat.py:509:21
    |
508 |                 if not behavior_validated:
509 |                     all_behaviors_validated = False
    |                     ^^^^^^^^^^^^^^^^^^^^^^^
510 |             
511 |             return AuditTrail(
    |
help: Remove assignment to unused variable `all_behaviors_validated`

F841 Local variable `overall_success_rate` is assigned to but never used
   --> utils/optimized_uat.py:547:9
    |
545 |         total_scenarios = len(self.test_results)
546 |         successful_scenarios = len([r for r in self.test_results.values() if r.get("success", True)])
547 |         overall_success_rate = (successful_scenarios / total_scenarios * 100) if total_scenarios > 0 else 100
    |         ^^^^^^^^^^^^^^^^^^^^
548 |         
549 |         # Optimized component analysis
    |
help: Remove assignment to unused variable `overall_success_rate`

F401 [*] `typing.Dict` imported but unused
  --> utils/panic_toggle.py:8:25
   |
 6 | import os
 7 | from datetime import datetime
 8 | from typing import Any, Dict
   |                         ^^^^
 9 |
10 | from flask import jsonify
   |
help: Remove unused import: `typing.Dict`

F401 [*] `typing.Dict` imported but unused
 --> utils/parser.py:5:25
  |
3 | """
4 | import re
5 | from typing import Any, Dict, List
  |                         ^^^^
6 |
7 | # Pattern for amounts with optional currency
  |
help: Remove unused import

F401 [*] `typing.List` imported but unused
 --> utils/parser.py:5:31
  |
3 | """
4 | import re
5 | from typing import Any, Dict, List
  |                               ^^^^
6 |
7 | # Pattern for amounts with optional currency
  |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> utils/pca_flags.py:10:25
   |
 8 | import os
 9 | from datetime import datetime
10 | from typing import Any, Dict
   |                         ^^^^
11 |
12 | # PHASE 7: Import unified flags system
   |
help: Remove unused import: `typing.Dict`

F401 [*] `typing.Dict` imported but unused
  --> utils/pca_integration.py:9:25
   |
 7 | import time
 8 | from datetime import datetime
 9 | from typing import Any, Dict, Tuple
   |                         ^^^^
10 |
11 | logger = logging.getLogger("finbrain.pca_integration")
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/pca_integration.py:9:31
   |
 7 | import time
 8 | from datetime import datetime
 9 | from typing import Any, Dict, Tuple
   |                               ^^^^^
10 |
11 | logger = logging.getLogger("finbrain.pca_integration")
   |
help: Remove unused import

E722 Do not use bare `except`
  --> utils/pca_integration.py:78:9
   |
76 |                 'message_length': len(message_text)
77 |             })
78 |         except:
   |         ^^^^^^
79 |             pass
   |

F401 [*] `typing.Dict` imported but unused
  --> utils/pca_processor.py:8:25
   |
 6 | import logging
 7 | from datetime import datetime
 8 | from typing import Any, Dict, Optional
   |                         ^^^^
 9 |
10 | from sqlalchemy.exc import IntegrityError
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/pca_processor.py:8:31
   |
 6 | import logging
 7 | from datetime import datetime
 8 | from typing import Any, Dict, Optional
   |                               ^^^^^^^^
 9 |
10 | from sqlalchemy.exc import IntegrityError
   |
help: Remove unused import

E722 Do not use bare `except`
   --> utils/pending_expenses_cleanup.py:109:13
    |
107 |             try:
108 |                 db.session.rollback()
109 |             except:
    |             ^^^^^^
110 |                 pass
    |

F401 [*] `typing.Dict` imported but unused
  --> utils/performance_cache.py:9:25
   |
 7 | import logging
 8 | from datetime import datetime, timedelta
 9 | from typing import Any, Dict, Optional
   |                         ^^^^
10 |
11 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/performance_cache.py:9:31
   |
 7 | import logging
 8 | from datetime import datetime, timedelta
 9 | from typing import Any, Dict, Optional
   |                               ^^^^^^^^
10 |
11 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> utils/performance_optimizer.py:10:25
   |
 8 | import time
 9 | from functools import lru_cache
10 | from typing import Any, Dict
   |                         ^^^^
11 |
12 | logger = logging.getLogger("finbrain.performance")
   |
help: Remove unused import: `typing.Dict`

F401 [*] `typing.Dict` imported but unused
  --> utils/precedence_engine.py:8:25
   |
 6 | import logging
 7 | from dataclasses import dataclass
 8 | from typing import Any, Dict, Optional
   |                         ^^^^
 9 |
10 | logger = logging.getLogger("finbrain.precedence")
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/precedence_engine.py:8:31
   |
 6 | import logging
 7 | from dataclasses import dataclass
 8 | from typing import Any, Dict, Optional
   |                               ^^^^^^^^
 9 |
10 | logger = logging.getLogger("finbrain.precedence")
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> utils/problem_reporter.py:10:25
   |
 8 | import os
 9 | from datetime import datetime
10 | from typing import Any, Dict
   |                         ^^^^
11 |
12 | from models import User, db
   |
help: Remove unused import: `typing.Dict`

F401 [*] `typing.Dict` imported but unused
  --> utils/process_guardrails.py:21:25
   |
19 | from enum import Enum
20 | from pathlib import Path
21 | from typing import Any, Dict, List
   |                         ^^^^
22 |
23 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/process_guardrails.py:21:31
   |
19 | from enum import Enum
20 | from pathlib import Path
21 | from typing import Any, Dict, List
   |                               ^^^^
22 |
23 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `datetime.timezone` imported but unused
  --> utils/production_router.py:12:37
   |
10 | import re
11 | import time
12 | from datetime import UTC, datetime, timezone
   |                                     ^^^^^^^^
13 | from typing import Any, Dict, List, Optional, Tuple
   |
help: Remove unused import: `datetime.timezone`

F401 [*] `typing.Dict` imported but unused
  --> utils/production_router.py:13:25
   |
11 | import time
12 | from datetime import UTC, datetime, timezone
13 | from typing import Any, Dict, List, Optional, Tuple
   |                         ^^^^
14 |
15 | log = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/production_router.py:13:31
   |
11 | import time
12 | from datetime import UTC, datetime, timezone
13 | from typing import Any, Dict, List, Optional, Tuple
   |                               ^^^^
14 |
15 | log = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/production_router.py:13:37
   |
11 | import time
12 | from datetime import UTC, datetime, timezone
13 | from typing import Any, Dict, List, Optional, Tuple
   |                                     ^^^^^^^^
14 |
15 | log = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/production_router.py:13:47
   |
11 | import time
12 | from datetime import UTC, datetime, timezone
13 | from typing import Any, Dict, List, Optional, Tuple
   |                                               ^^^^^
14 |
15 | log = logging.getLogger(__name__)
   |
help: Remove unused import

E402 Module level import not at top of file
  --> utils/production_router.py:20:1
   |
19 | # Money detection and unified parsing (enhanced) - inlined from deprecated router
20 | from parsers.expense import parse_amount_currency_category
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
21 |
22 | # Money detection patterns - inlined from quarantined code
   |

E402 Module level import not at top of file
   --> utils/production_router.py:193:1
    |
192 | # SMART_NLP_ROUTING and SMART_CORRECTIONS system components
193 | from parsers.expense import is_correction_message
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
194 | from utils.ai_adapter_v2 import production_ai_adapter
195 | from utils.ai_limiter import advanced_ai_limiter
    |

F811 Redefinition of unused `is_correction_message` from line 134
   --> utils/production_router.py:193:29
    |
192 | # SMART_NLP_ROUTING and SMART_CORRECTIONS system components
193 | from parsers.expense import is_correction_message
    |                             ^^^^^^^^^^^^^^^^^^^^^
194 | from utils.ai_adapter_v2 import production_ai_adapter
195 | from utils.ai_limiter import advanced_ai_limiter
    |
help: Remove definition: `is_correction_message`

E402 Module level import not at top of file
   --> utils/production_router.py:194:1
    |
192 | # SMART_NLP_ROUTING and SMART_CORRECTIONS system components
193 | from parsers.expense import is_correction_message
194 | from utils.ai_adapter_v2 import production_ai_adapter
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
195 | from utils.ai_limiter import advanced_ai_limiter
196 | from utils.background_processor_rl2 import rl2_processor
    |

E402 Module level import not at top of file
   --> utils/production_router.py:195:1
    |
193 | from parsers.expense import is_correction_message
194 | from utils.ai_adapter_v2 import production_ai_adapter
195 | from utils.ai_limiter import advanced_ai_limiter
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
196 | from utils.background_processor_rl2 import rl2_processor
197 | from utils.categories import categorize_expense
    |

E402 Module level import not at top of file
   --> utils/production_router.py:196:1
    |
194 | from utils.ai_adapter_v2 import production_ai_adapter
195 | from utils.ai_limiter import advanced_ai_limiter
196 | from utils.background_processor_rl2 import rl2_processor
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
197 | from utils.categories import categorize_expense
    |

E402 Module level import not at top of file
   --> utils/production_router.py:197:1
    |
195 | from utils.ai_limiter import advanced_ai_limiter
196 | from utils.background_processor_rl2 import rl2_processor
197 | from utils.categories import categorize_expense
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
198 |
199 | # Lazy import for handle_correction to break circular dependency
    |

E402 Module level import not at top of file
   --> utils/production_router.py:202:1
    |
200 | # from handlers.expense import handle_correction
201 | # Single source of truth for user ID resolution  
202 | from utils.identity import psid_hash
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
203 | from utils.logger import get_request_id
204 | from utils.parser import parse_expense
    |

E402 Module level import not at top of file
   --> utils/production_router.py:203:1
    |
201 | # Single source of truth for user ID resolution  
202 | from utils.identity import psid_hash
203 | from utils.logger import get_request_id
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
204 | from utils.parser import parse_expense
205 | from utils.textutil import (
    |

E402 Module level import not at top of file
   --> utils/production_router.py:204:1
    |
202 | from utils.identity import psid_hash
203 | from utils.logger import get_request_id
204 | from utils.parser import parse_expense
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
205 | from utils.textutil import (
206 |     PANIC_PLAIN_REPLY,
    |

E402 Module level import not at top of file
   --> utils/production_router.py:205:1
    |
203 |   from utils.logger import get_request_id
204 |   from utils.parser import parse_expense
205 | / from utils.textutil import (
206 | |     PANIC_PLAIN_REPLY,
207 | |     format_help_response,
208 | |     format_logged_response,
209 | |     format_summary_response,
210 | |     format_undo_response,
211 | |     get_random_tip,
212 | |     normalize,
213 | | )
    | |_^
214 |
215 |   # Import performance monitoring
    |

E402 Module level import not at top of file
   --> utils/production_router.py:222:1
    |
221 | # FAQ/Smalltalk guardrail imports
222 | from utils.faq_map import fallback_default, match_faq_or_smalltalk
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
223 |
224 | # Messaging guardrails imports
    |

E402 Module level import not at top of file
   --> utils/production_router.py:225:1
    |
224 | # Messaging guardrails imports
225 | from utils.ttl_store import get_store
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
226 | from utils.ux_copy import DAILY_LIMIT, PII_WARNING, REPEAT_HINT, SLOW_DOWN
    |

E402 Module level import not at top of file
   --> utils/production_router.py:226:1
    |
224 | # Messaging guardrails imports
225 | from utils.ttl_store import get_store
226 | from utils.ux_copy import DAILY_LIMIT, PII_WARNING, REPEAT_HINT, SLOW_DOWN
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
227 |
228 | # Flask imports for webhook blueprint
    |

F841 Local variable `note` is assigned to but never used
   --> utils/production_router.py:458:21
    |
456 |                     amount = float(expense['amount'])
457 |                     category = normalize_category(expense.get('category'))
458 |                     note = expense.get('note', text)
    |                     ^^^^
459 |                     
460 |                     # Create unique ID for each expense
    |
help: Remove assignment to unused variable `note`

F841 Local variable `status` is assigned to but never used
   --> utils/production_router.py:509:13
    |
507 |             confidence = expense_result.get('confidence', 0.0)
508 |             clarify_data = expense_result.get('clarify')
509 |             status = expense_result.get('status')
    |             ^^^^^^
510 |             
511 |             # Log clarifier decision for observability with safe access
    |
help: Remove assignment to unused variable `status`

F841 Local variable `clarify_response` is assigned to but never used
   --> utils/production_router.py:529:21
    |
527 |                     clarify_draft = safe_dict_get(clarify_data, 'draft', None)
528 |                     
529 |                     clarify_response = {
    |                     ^^^^^^^^^^^^^^^^
530 |                         "type": "clarify",
531 |                         "question": clarify_question,
    |
help: Remove assignment to unused variable `clarify_response`

F841 Local variable `support_replies` is assigned to but never used
    --> utils/production_router.py:2392:13
     |
2391 |             # Add quick replies for follow-up support
2392 |             support_replies = [
     |             ^^^^^^^^^^^^^^^
2393 |                 {"title": "Get help", "payload": "HELP"},
2394 |                 {"title": "Try again", "payload": "TRY_AGAIN"},
     |
help: Remove assignment to unused variable `support_replies`

F401 [*] `typing.Dict` imported but unused
  --> utils/production_smoke_tests.py:17:25
   |
15 | from datetime import datetime
16 | from enum import Enum
17 | from typing import Any, Dict, List, Optional, Union
   |                         ^^^^
18 |
19 | import psycopg2
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/production_smoke_tests.py:17:31
   |
15 | from datetime import datetime
16 | from enum import Enum
17 | from typing import Any, Dict, List, Optional, Union
   |                               ^^^^
18 |
19 | import psycopg2
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/production_smoke_tests.py:17:37
   |
15 | from datetime import datetime
16 | from enum import Enum
17 | from typing import Any, Dict, List, Optional, Union
   |                                     ^^^^^^^^
18 |
19 | import psycopg2
   |
help: Remove unused import

F401 [*] `typing.Union` imported but unused
  --> utils/production_smoke_tests.py:17:47
   |
15 | from datetime import datetime
16 | from enum import Enum
17 | from typing import Any, Dict, List, Optional, Union
   |                                               ^^^^^
18 |
19 | import psycopg2
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
 --> utils/psid_mapper.py:7:20
  |
6 | import logging
7 | from typing import Optional
  |                    ^^^^^^^^
8 |
9 | from sqlalchemy import text
  |
help: Remove unused import: `typing.Optional`

F401 [*] `typing.Dict` imported but unused
  --> utils/quick_reply_system.py:9:20
   |
 7 | import os
 8 | import sys
 9 | from typing import Dict, List
   |                    ^^^^
10 |
11 | sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/quick_reply_system.py:9:26
   |
 7 | import os
 8 | import sys
 9 | from typing import Dict, List
   |                          ^^^^
10 |
11 | sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
 --> utils/rate_limiter_jobs.py:7:25
  |
5 | import time
6 | from dataclasses import dataclass
7 | from typing import Any, Dict, Optional
  |                         ^^^^
8 |
9 | logger = logging.getLogger(__name__)
  |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
 --> utils/rate_limiter_jobs.py:7:31
  |
5 | import time
6 | from dataclasses import dataclass
7 | from typing import Any, Dict, Optional
  |                               ^^^^^^^^
8 |
9 | logger = logging.getLogger(__name__)
  |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/routing_policy.py:13:20
   |
11 | from datetime import datetime
12 | from enum import Enum
13 | from typing import List
   |                    ^^^^
14 |
15 | logger = logging.getLogger("finbrain.routing_policy")
   |
help: Remove unused import: `typing.List`

F841 Local variable `existing_schema` is assigned to but never used
   --> utils/safe_db_init.py:154:5
    |
153 |     # Check existing schema first
154 |     existing_schema = check_existing_schema()
    |     ^^^^^^^^^^^^^^^
155 |     
156 |     # Step 1: Create tables safely
    |
help: Remove assignment to unused variable `existing_schema`

F841 Local variable `existing_schema` is assigned to but never used
   --> utils/safe_db_init.py:179:5
    |
178 |     # Check existing schema first
179 |     existing_schema = check_existing_schema()
    |     ^^^^^^^^^^^^^^^
180 |     
181 |     # Check if critical tables exist (read-only)
    |
help: Remove assignment to unused variable `existing_schema`

F401 [*] `typing.Dict` imported but unused
  --> utils/session.py:11:25
   |
 9 | import time
10 | from datetime import datetime
11 | from typing import Any, Dict, Optional
   |                         ^^^^
12 |
13 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/session.py:11:31
   |
 9 | import time
10 | from datetime import datetime
11 | from typing import Any, Dict, Optional
   |                               ^^^^^^^^
12 |
13 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> utils/single_writer_metrics.py:15:25
   |
13 | from datetime import datetime
14 | from enum import Enum
15 | from typing import Any, Dict, List
   |                         ^^^^
16 |
17 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/single_writer_metrics.py:15:31
   |
13 | from datetime import datetime
14 | from enum import Enum
15 | from typing import Any, Dict, List
   |                               ^^^^
16 |
17 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F841 Local variable `last_1h` is assigned to but never used
   --> utils/single_writer_metrics.py:178:13
    |
176 |             now = time.time()
177 |             last_24h = now - (24 * 60 * 60)
178 |             last_1h = now - (60 * 60)
    |             ^^^^^^^
179 |             
180 |             # Recent metrics
    |
help: Remove assignment to unused variable `last_1h`

F401 [*] `typing.Dict` imported but unused
  --> utils/single_writer_monitor.py:11:25
   |
 9 | import sys
10 | import time
11 | from typing import Any, Dict
   |                         ^^^^
12 |
13 | import psycopg2
   |
help: Remove unused import: `typing.Dict`

F841 Local variable `result` is assigned to but never used
  --> utils/single_writer_monitor.py:89:13
   |
87 |             # Basic connectivity test
88 |             cur.execute("SELECT 1")
89 |             result = cur.fetchone()
   |             ^^^^^^
90 |             
91 |             # Check if tables exist
   |
help: Remove assignment to unused variable `result`

F401 [*] `typing.Dict` imported but unused
  --> utils/slo_monitoring.py:18:25
   |
16 | from datetime import datetime, timedelta
17 | from enum import Enum
18 | from typing import Any, Dict, Optional
   |                         ^^^^
19 |
20 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/slo_monitoring.py:18:31
   |
16 | from datetime import datetime, timedelta
17 | from enum import Enum
18 | from typing import Any, Dict, Optional
   |                               ^^^^^^^^
19 |
20 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F841 Local variable `bucket_size` is assigned to but never used
   --> utils/slo_monitoring.py:344:17
    |
343 |                 # Split into time buckets for trend analysis
344 |                 bucket_size = timedelta(hours=1)  # 1-hour buckets
    |                 ^^^^^^^^^^^
345 |                 buckets = defaultdict(list)
    |
help: Remove assignment to unused variable `bucket_size`

F401 [*] `typing.Dict` imported but unused
  --> utils/smart_reminders.py:8:20
   |
 6 | import logging
 7 | from datetime import datetime, timedelta
 8 | from typing import Dict
   |                    ^^^^
 9 |
10 | from db_base import db
   |
help: Remove unused import: `typing.Dict`

F401 [*] `typing.Dict` imported but unused
  --> utils/structured.py:9:25
   |
 7 | import logging
 8 | from datetime import datetime
 9 | from typing import Any, Dict, Optional
   |                         ^^^^
10 |
11 | logger = logging.getLogger("finbrain.structured")
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/structured.py:9:31
   |
 7 | import logging
 8 | from datetime import datetime
 9 | from typing import Any, Dict, Optional
   |                               ^^^^^^^^
10 |
11 | logger = logging.getLogger("finbrain.structured")
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> utils/structured_logger.py:10:25
   |
 8 | import uuid
 9 | from datetime import datetime
10 | from typing import Any, Dict, Optional
   |                         ^^^^
11 |
12 | from flask import g, has_request_context, request
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/structured_logger.py:10:31
   |
 8 | import uuid
 9 | from datetime import datetime
10 | from typing import Any, Dict, Optional
   |                               ^^^^^^^^
11 |
12 | from flask import g, has_request_context, request
   |
help: Remove unused import

F401 [*] `datetime.timezone` imported but unused
 --> utils/telemetry.py:7:48
  |
6 | import logging
7 | from datetime import UTC, datetime, timedelta, timezone
  |                                                ^^^^^^^^
8 | from typing import Any, Dict, List, Optional
  |
help: Remove unused import: `datetime.timezone`

F401 [*] `typing.Dict` imported but unused
  --> utils/telemetry.py:8:25
   |
 6 | import logging
 7 | from datetime import UTC, datetime, timedelta, timezone
 8 | from typing import Any, Dict, List, Optional
   |                         ^^^^
 9 |
10 | from sqlalchemy import func, text
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/telemetry.py:8:31
   |
 6 | import logging
 7 | from datetime import UTC, datetime, timedelta, timezone
 8 | from typing import Any, Dict, List, Optional
   |                               ^^^^
 9 |
10 | from sqlalchemy import func, text
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/telemetry.py:8:37
   |
 6 | import logging
 7 | from datetime import UTC, datetime, timedelta, timezone
 8 | from typing import Any, Dict, List, Optional
   |                                     ^^^^^^^^
 9 |
10 | from sqlalchemy import func, text
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> utils/textutil.py:9:25
   |
 7 | import random
 8 | import re
 9 | from typing import Any, Dict, List, Optional, Union
   |                         ^^^^
10 |
11 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/textutil.py:9:31
   |
 7 | import random
 8 | import re
 9 | from typing import Any, Dict, List, Optional, Union
   |                               ^^^^
10 |
11 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/textutil.py:9:37
   |
 7 | import random
 8 | import re
 9 | from typing import Any, Dict, List, Optional, Union
   |                                     ^^^^^^^^
10 |
11 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Union` imported but unused
  --> utils/textutil.py:9:47
   |
 7 | import random
 8 | import re
 9 | from typing import Any, Dict, List, Optional, Union
   |                                               ^^^^^
10 |
11 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

E402 Module level import not at top of file
  --> utils/textutil.py:14:1
   |
13 | # Configuration from centralized config and environment
14 | from config import MSG_MAX_CHARS
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
15 |
16 | SAY_ENABLED = os.environ.get("SAY_ENABLED", "true").lower() == "true"
   |

F401 [*] `typing.Optional` imported but unused
  --> utils/timezone_helpers.py:9:20
   |
 7 | import logging
 8 | from datetime import date, datetime
 9 | from typing import Optional
   |                    ^^^^^^^^
10 |
11 | import pytz
   |
help: Remove unused import: `typing.Optional`

F401 [*] `typing.Dict` imported but unused
 --> utils/token_manager.py:6:20
  |
4 | import time
5 | from datetime import datetime
6 | from typing import Dict, Optional, Tuple
  |                    ^^^^
7 |
8 | import requests
  |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
 --> utils/token_manager.py:6:26
  |
4 | import time
5 | from datetime import datetime
6 | from typing import Dict, Optional, Tuple
  |                          ^^^^^^^^
7 |
8 | import requests
  |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
 --> utils/token_manager.py:6:36
  |
4 | import time
5 | from datetime import datetime
6 | from typing import Dict, Optional, Tuple
  |                                    ^^^^^
7 |
8 | import requests
  |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
 --> utils/token_refresh_reminder.py:4:20
  |
2 | import logging
3 | from datetime import datetime, timedelta
4 | from typing import Dict, List
  |                    ^^^^
5 |
6 | from .token_manager import token_manager
  |
help: Remove unused import

F401 [*] `typing.List` imported but unused
 --> utils/token_refresh_reminder.py:4:26
  |
2 | import logging
3 | from datetime import datetime, timedelta
4 | from typing import Dict, List
  |                          ^^^^
5 |
6 | from .token_manager import token_manager
  |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/ttl_store.py:11:20
   |
 9 | import threading
10 | import time
11 | from typing import Optional
   |                    ^^^^^^^^
12 |
13 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `typing.Optional`

F401 [*] `typing.Dict` imported but unused
  --> utils/uat_executor.py:8:25
   |
 6 | import logging
 7 | from datetime import datetime
 8 | from typing import Any, Dict
   |                         ^^^^
 9 |
10 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `typing.Dict`

F401 [*] `typing.Dict` imported but unused
 --> utils/uat_system.py:7:25
  |
5 | import logging
6 | from datetime import datetime
7 | from typing import Any, Dict, Optional
  |                         ^^^^
8 |
9 | from utils.security import hash_psid
  |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
 --> utils/uat_system.py:7:31
  |
5 | import logging
6 | from datetime import datetime
7 | from typing import Any, Dict, Optional
  |                               ^^^^^^^^
8 |
9 | from utils.security import hash_psid
  |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> utils/unbreakable_invariants.py:13:25
   |
11 | import threading
12 | from datetime import datetime
13 | from typing import Any, Dict
   |                         ^^^^
14 |
15 | import psycopg2
   |
help: Remove unused import: `typing.Dict`

F401 [*] `typing.Optional` imported but unused
  --> utils/uniqueness_handler.py:9:20
   |
 7 | import os
 8 | from datetime import datetime
 9 | from typing import Optional, Tuple
   |                    ^^^^^^^^
10 |
11 | from utils.routing_policy import DataVersionManager
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/uniqueness_handler.py:9:30
   |
 7 | import os
 8 | from datetime import datetime
 9 | from typing import Optional, Tuple
   |                              ^^^^^
10 |
11 | from utils.routing_policy import DataVersionManager
   |
help: Remove unused import

F841 Local variable `base_bn` is assigned to but never used
  --> utils/uniqueness_handler.py:71:9
   |
69 | …     # Base message (bilingual)
70 | …     base_en = "No changes since your last check. Add a new expense to refresh your analysis."
71 | …     base_bn = "শেষবারের পর থেকে নতুন পরিবর্তন নেই। নতুন খরচ যোগ করলে বিশ্লেষণ আপডেট হবে।"
   |       ^^^^^^^
72 | …     
73 | …     # Try to add micro-insight
   |
help: Remove assignment to unused variable `base_bn`

F401 [*] `typing.Dict` imported but unused
 --> utils/user_id_normalizer.py:5:25
  |
3 | """
4 | import logging
5 | from typing import Any, Dict
  |                         ^^^^
6 |
7 | logger = logging.getLogger(__name__)
  |
help: Remove unused import: `typing.Dict`

F401 [*] `typing.Dict` imported but unused
  --> utils/ux_components.py:9:25
   |
 7 | import re
 8 | from collections import Counter
 9 | from typing import Any, Dict, Optional, Tuple
   |                         ^^^^
10 |
11 | from config import MSG_MAX_CHARS
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/ux_components.py:9:31
   |
 7 | import re
 8 | from collections import Counter
 9 | from typing import Any, Dict, Optional, Tuple
   |                               ^^^^^^^^
10 |
11 | from config import MSG_MAX_CHARS
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/ux_components.py:9:41
   |
 7 | import re
 8 | from collections import Counter
 9 | from typing import Any, Dict, Optional, Tuple
   |                                         ^^^^^
10 |
11 | from config import MSG_MAX_CHARS
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> utils/validators.py:9:25
   |
 7 | import re
 8 | from decimal import Decimal, InvalidOperation
 9 | from typing import Any, Dict, List, Optional
   |                         ^^^^
10 |
11 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/validators.py:9:31
   |
 7 | import re
 8 | from decimal import Decimal, InvalidOperation
 9 | from typing import Any, Dict, List, Optional
   |                               ^^^^
10 |
11 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/validators.py:9:37
   |
 7 | import re
 8 | from decimal import Decimal, InvalidOperation
 9 | from typing import Any, Dict, List, Optional
   |                                     ^^^^^^^^
10 |
11 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
  --> utils/webhook_processor.py:9:25
   |
 7 | import uuid
 8 | from concurrent.futures import ThreadPoolExecutor
 9 | from typing import Any, Dict
   |                         ^^^^
10 |
11 | from .logger import log_webhook_success
   |
help: Remove unused import: `typing.Dict`

F841 Local variable `user_hash` is assigned to but never used
  --> utils/webhook_processor.py:84:9
   |
83 |         # Compute hash once at intake
84 |         user_hash = psid_hash(psid)
   |         ^^^^^^^^^
85 |         
86 |         for messaging in entry.get('messaging', []):
   |
help: Remove assignment to unused variable `user_hash`

Found 1054 errors.
[*] 593 fixable with the `--fix` option (302 hidden fixes can be enabled with the `--unsafe-fixes` option).
