F401 [*] `typing.Tuple` imported but unused
  --> _quarantine/archive_deep_quarantine/finbrain_router_deprecated.py:11:20
   |
 9 | import logging
10 | import warnings
11 | from typing import Tuple, Optional
   |                    ^^^^^
12 |
13 | # Deprecation warning for this module
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> _quarantine/archive_deep_quarantine/finbrain_router_deprecated.py:11:27
   |
 9 | import logging
10 | import warnings
11 | from typing import Tuple, Optional
   |                           ^^^^^^^^
12 |
13 | # Deprecation warning for this module
   |
help: Remove unused import

F401 [*] `uuid` imported but unused
  --> _quarantine/archive_deep_quarantine/phase3_replay_debug.py:10:8
   |
 8 | import os
 9 | import json
10 | import uuid
   |        ^^^^
11 | from datetime import datetime
12 | from typing import Dict, Any, List, Optional
   |
help: Remove unused import: `uuid`

F841 Local variable `intent` is assigned to but never used
  --> _quarantine/archive_deep_quarantine/phase3_replay_debug.py:73:13
   |
71 |             # Extract key fields
72 |             confidence = cc_data['confidence']
73 |             intent = cc_data['intent'] 
   |             ^^^^^^
74 |             tau_high, tau_low = pca_flags.get_decision_thresholds()
   |
help: Remove assignment to unused variable `intent`

F811 Redefinition of unused `register_replay_routes` from line 139
   --> _quarantine/archive_deep_quarantine/phase3_replay_debug.py:226:5
    |
224 |     })
225 |
226 | def register_replay_routes(app):
    |     ^^^^^^^^^^^^^^^^^^^^^^
227 |     """Register replay routes with the Flask app"""
228 |     if replay_engine.replay_enabled:
    |
help: Remove definition: `register_replay_routes`

F541 [*] f-string without any placeholders
   --> _quarantine/archive_deep_quarantine/phase3_replay_debug.py:230:15
    |
228 |     if replay_engine.replay_enabled:
229 |         app.register_blueprint(replay_bp)
230 |         print(f"✅ Replay API registered at /api/replay/* (enabled)")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
231 |     else:
232 |         print(f"🔒 Replay API disabled (ENABLE_REPLAY=false)")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_deep_quarantine/phase3_replay_debug.py:232:15
    |
230 |         print(f"✅ Replay API registered at /api/replay/* (enabled)")
231 |     else:
232 |         print(f"🔒 Replay API disabled (ENABLE_REPLAY=false)")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
233 |
234 | if __name__ == "__main__":
    |
help: Remove extraneous `f` prefix

F401 [*] `os` imported but unused
  --> _quarantine/archive_deep_quarantine/phase4_enhanced_monitoring.py:8:8
   |
 7 | import sys
 8 | import os
   |        ^^
 9 | import json
10 | from datetime import datetime, timedelta
   |
help: Remove unused import: `os`

F401 [*] `datetime.timedelta` imported but unused
  --> _quarantine/archive_deep_quarantine/phase4_enhanced_monitoring.py:10:32
   |
 8 | import os
 9 | import json
10 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
11 | from typing import Dict, Any, List
12 | from flask import Blueprint, request, jsonify, render_template_string
   |
help: Remove unused import: `datetime.timedelta`

F401 [*] `typing.List` imported but unused
  --> _quarantine/archive_deep_quarantine/phase4_enhanced_monitoring.py:11:31
   |
 9 | import json
10 | from datetime import datetime, timedelta
11 | from typing import Dict, Any, List
   |                               ^^^^
12 | from flask import Blueprint, request, jsonify, render_template_string
   |
help: Remove unused import: `typing.List`

F401 [*] `flask.request` imported but unused
  --> _quarantine/archive_deep_quarantine/phase4_enhanced_monitoring.py:12:30
   |
10 | from datetime import datetime, timedelta
11 | from typing import Dict, Any, List
12 | from flask import Blueprint, request, jsonify, render_template_string
   |                              ^^^^^^^
13 |
14 | # Add project root to path
   |
help: Remove unused import

F401 [*] `flask.render_template_string` imported but unused
  --> _quarantine/archive_deep_quarantine/phase4_enhanced_monitoring.py:12:48
   |
10 | from datetime import datetime, timedelta
11 | from typing import Dict, Any, List
12 | from flask import Blueprint, request, jsonify, render_template_string
   |                                                ^^^^^^^^^^^^^^^^^^^^^^
13 |
14 | # Add project root to path
   |
help: Remove unused import

F541 [*] f-string without any placeholders
   --> _quarantine/archive_deep_quarantine/phase4_enhanced_monitoring.py:419:11
    |
417 |     """Register enhanced monitoring routes"""
418 |     app.register_blueprint(monitoring_bp)
419 |     print(f"✅ Enhanced monitoring registered at /api/monitoring/*")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
420 |
421 | if __name__ == "__main__":
    |
help: Remove extraneous `f` prefix

F401 [*] `os` imported but unused
  --> _quarantine/archive_deep_quarantine/phase5_production_blast.py:8:8
   |
 7 | import sys
 8 | import os
   |        ^^
 9 | import json
10 | from datetime import datetime, timedelta
   |
help: Remove unused import: `os`

F401 [*] `datetime.timedelta` imported but unused
  --> _quarantine/archive_deep_quarantine/phase5_production_blast.py:10:32
   |
 8 | import os
 9 | import json
10 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
11 | from typing import Dict, Any, List
12 | from flask import Blueprint, request, jsonify
   |
help: Remove unused import: `datetime.timedelta`

F401 [*] `typing.List` imported but unused
  --> _quarantine/archive_deep_quarantine/phase5_production_blast.py:11:31
   |
 9 | import json
10 | from datetime import datetime, timedelta
11 | from typing import Dict, Any, List
   |                               ^^^^
12 | from flask import Blueprint, request, jsonify
   |
help: Remove unused import: `typing.List`

F401 [*] `flask.request` imported but unused
  --> _quarantine/archive_deep_quarantine/phase5_production_blast.py:12:30
   |
10 | from datetime import datetime, timedelta
11 | from typing import Dict, Any, List
12 | from flask import Blueprint, request, jsonify
   |                              ^^^^^^^
13 |
14 | # Add project root to path
   |
help: Remove unused import: `flask.request`

F541 [*] f-string without any placeholders
   --> _quarantine/archive_deep_quarantine/phase5_production_blast.py:440:11
    |
438 |     """Register production blast management routes"""
439 |     app.register_blueprint(production_bp)
440 |     print(f"✅ Production blast management registered at /api/production/*")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
441 |
442 | if __name__ == "__main__":
    |
help: Remove extraneous `f` prefix

F401 [*] `utils.security.hash_psid` imported but unused
   --> _quarantine/archive_legacy/ai_adapter.py:377:36
    |
376 |         # Hash PSID for PII protection
377 |         from utils.security import hash_psid
    |                                    ^^^^^^^^^
378 |         psid_hash = resolve_user_id(psid=psid)
    |
help: Remove unused import: `utils.security.hash_psid`

F401 [*] `os` imported but unused
 --> _quarantine/archive_legacy/ai_adapter_gemini.py:5:8
  |
3 | Uses google-genai SDK with gemini-2.5-flash-lite model
4 | """
5 | import os
  |        ^^
6 | import time
7 | import logging
  |
help: Remove unused import: `os`

F401 `google.genai.types.GenerateContentConfig` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> _quarantine/archive_legacy/ai_adapter_gemini.py:17:40
   |
15 |     try:
16 |         from google.genai import Client
17 |         from google.genai.types import GenerateContentConfig
   |                                        ^^^^^^^^^^^^^^^^^^^^^
18 |         client = Client(api_key=GEMINI_API_KEY)
19 |     except ImportError as e:
   |
help: Remove unused import: `google.genai.types.GenerateContentConfig`

F401 [*] `os` imported but unused
 --> _quarantine/archive_legacy/ai_adapter_openai.py:5:8
  |
3 | Direct OpenAI integration with 3s timeout and immediate fallback
4 | """
5 | import os
  |        ^^
6 | import time
7 | import logging
  |
help: Remove unused import: `os`

invalid-syntax: Expected a statement
   --> _quarantine/archive_legacy/ai_expense_parser_broken.py:295:9
    |
293 |         return 'other'
294 |             
295 |         except Exception as e:
    |         ^^^^^^
296 |             self.logger.error(f"Fallback parsing error: {e}")
297 |             return {
    |

invalid-syntax: Expected a statement
   --> _quarantine/archive_legacy/ai_expense_parser_broken.py:295:26
    |
293 |         return 'other'
294 |             
295 |         except Exception as e:
    |                          ^^
296 |             self.logger.error(f"Fallback parsing error: {e}")
297 |             return {
    |

invalid-syntax: Expected an expression
   --> _quarantine/archive_legacy/ai_expense_parser_broken.py:295:31
    |
293 |         return 'other'
294 |             
295 |         except Exception as e:
    |                               ^
296 |             self.logger.error(f"Fallback parsing error: {e}")
297 |             return {
    |

invalid-syntax: Unexpected indentation
   --> _quarantine/archive_legacy/ai_expense_parser_broken.py:296:1
    |
295 |         except Exception as e:
296 |             self.logger.error(f"Fallback parsing error: {e}")
    | ^^^^^^^^^^^^
297 |             return {
298 |                 "success": False,
    |

invalid-syntax: Expected a statement
   --> _quarantine/archive_legacy/ai_expense_parser_broken.py:308:1
    |
307 | # Global instance
308 | ai_expense_parser = AIExpenseParser()
    | ^
    |

F401 [*] `typing.Optional` imported but unused
 --> _quarantine/archive_legacy/ai_onboarding_parser.py:5:31
  |
3 | """
4 | import logging
5 | from typing import Dict, Any, Optional
  |                               ^^^^^^^^
6 | from ai_adapter_gemini import generate_with_schema
  |
help: Remove unused import: `typing.Optional`

invalid-syntax: Unexpected indentation
   --> _quarantine/archive_legacy/background_processor_broken.py:444:1
    |
443 |             # Add top categories
444 |             sorted_categories = sorted(category_totals.items(), key=lambda x: x[1], reverse=True)
    | ^^^^^^^^^^^^
445 |             for category, amount in sorted_categories[:3]:
446 |                 summary_lines.append(f"• {category}: ৳{amount:.0f}")
    |

invalid-syntax: unindent does not match any outer indentation level
   --> _quarantine/archive_legacy/background_processor_broken.py:453:1
    |
451 |             return "\n".join(summary_lines)
452 |             
453 |         except Exception as e:
    | ^^^^^^^^
454 |             logger.error(f"Error generating deterministic summary: {str(e)}")
455 |             return "📊 Summary temporarily unavailable. Check your dashboard for details."
    |

invalid-syntax: Expected a statement
   --> _quarantine/archive_legacy/background_processor_broken.py:453:9
    |
451 |             return "\n".join(summary_lines)
452 |             
453 |         except Exception as e:
    |         ^^^^^^
454 |             logger.error(f"Error generating deterministic summary: {str(e)}")
455 |             return "📊 Summary temporarily unavailable. Check your dashboard for details."
    |

invalid-syntax: Expected a statement
   --> _quarantine/archive_legacy/background_processor_broken.py:453:26
    |
451 |             return "\n".join(summary_lines)
452 |             
453 |         except Exception as e:
    |                          ^^
454 |             logger.error(f"Error generating deterministic summary: {str(e)}")
455 |             return "📊 Summary temporarily unavailable. Check your dashboard for details."
    |

invalid-syntax: Expected an expression
   --> _quarantine/archive_legacy/background_processor_broken.py:453:31
    |
451 |             return "\n".join(summary_lines)
452 |             
453 |         except Exception as e:
    |                               ^
454 |             logger.error(f"Error generating deterministic summary: {str(e)}")
455 |             return "📊 Summary temporarily unavailable. Check your dashboard for details."
    |

invalid-syntax: Unexpected indentation
   --> _quarantine/archive_legacy/background_processor_broken.py:454:1
    |
453 |         except Exception as e:
454 |             logger.error(f"Error generating deterministic summary: {str(e)}")
    | ^^^^^^^^^^^^
455 |             return "📊 Summary temporarily unavailable. Check your dashboard for details."
    |

invalid-syntax: unindent does not match any outer indentation level
   --> _quarantine/archive_legacy/background_processor_broken.py:457:1
    |
455 |             return "📊 Summary temporarily unavailable. Check your dashboard for details."
456 |     
457 |     def _log_ai_rate_limit(self, rid: str, psid_hash: str, rate_limit_result) -> None:
    | ^^^^
458 |         """Log AI rate limit check with structured data"""
459 |         log_data = {
    |

invalid-syntax: unindent does not match any outer indentation level
   --> _quarantine/archive_legacy/background_processor_broken.py:474:5
    |
472 |             logger.warning(f"AI rate limited for PSID {psid_hash[:8]}...: {rate_limit_result.reason}")
473 |     
474 |     def _send_fallback_reply(self, psid: str, message: str) -> bool:
    |     ^
475 |         """Send fallback reply with error handling"""
476 |         try:
    |

invalid-syntax: unindent does not match any outer indentation level
   --> _quarantine/archive_legacy/background_processor_broken.py:482:5
    |
480 |             return False
481 |     
482 |     def get_stats(self) -> Dict[str, Any]:
    |     ^
483 |         """Get background processor statistics"""
484 |         ai_status = self.ai_adapter.get_status() if hasattr(self.ai_adapter, 'get_status') else {"enabled": False}
    |

invalid-syntax: unindent does not match any outer indentation level
   --> _quarantine/archive_legacy/background_processor_broken.py:492:1
    |
490 |         }
491 |     
492 |     def shutdown(self) -> None:
    | ^^^^
493 |         """Gracefully shutdown the background processor"""
494 |         logger.info("Shutting down background processor...")
    |

invalid-syntax: Expected dedent, found end of file
   --> _quarantine/archive_legacy/background_processor_broken.py:499:58
    |
498 | # Global background processor instance
499 | background_processor = BackgroundProcessor(max_workers=3)
    |                                                          ^
    |

F401 [*] `os` imported but unused
 --> _quarantine/archive_legacy/background_processor_corrupted.py:5:8
  |
3 | Handles webhook message processing with timeout protection and fallbacks
4 | """
5 | import os
  |        ^^
6 | import time
7 | import json
  |
help: Remove unused import: `os`

F401 [*] `threading` imported but unused
  --> _quarantine/archive_legacy/background_processor_corrupted.py:9:8
   |
 7 | import json
 8 | import logging
 9 | import threading
   |        ^^^^^^^^^
10 | import requests
11 | from datetime import datetime
   |
help: Remove unused import: `threading`

F401 [*] `requests` imported but unused
  --> _quarantine/archive_legacy/background_processor_corrupted.py:10:8
   |
 8 | import logging
 9 | import threading
10 | import requests
   |        ^^^^^^^^
11 | from datetime import datetime
12 | from concurrent.futures import ThreadPoolExecutor, TimeoutError as FutureTimeoutError
   |
help: Remove unused import: `requests`

F401 [*] `datetime.datetime` imported but unused
  --> _quarantine/archive_legacy/background_processor_corrupted.py:11:22
   |
 9 | import threading
10 | import requests
11 | from datetime import datetime
   |                      ^^^^^^^^
12 | from concurrent.futures import ThreadPoolExecutor, TimeoutError as FutureTimeoutError
13 | from queue import Queue, Empty
   |
help: Remove unused import: `datetime.datetime`

F401 [*] `concurrent.futures.TimeoutError` imported but unused
  --> _quarantine/archive_legacy/background_processor_corrupted.py:12:68
   |
10 | import requests
11 | from datetime import datetime
12 | from concurrent.futures import ThreadPoolExecutor, TimeoutError as FutureTimeoutError
   |                                                                    ^^^^^^^^^^^^^^^^^^
13 | from queue import Queue, Empty
14 | from dataclasses import dataclass
   |
help: Remove unused import: `concurrent.futures.TimeoutError`

F401 [*] `queue.Empty` imported but unused
  --> _quarantine/archive_legacy/background_processor_corrupted.py:13:26
   |
11 | from datetime import datetime
12 | from concurrent.futures import ThreadPoolExecutor, TimeoutError as FutureTimeoutError
13 | from queue import Queue, Empty
   |                          ^^^^^
14 | from dataclasses import dataclass
15 | from typing import Optional, Dict, Any, Tuple
   |
help: Remove unused import: `queue.Empty`

F401 [*] `.rate_limiter.check_rate_limit` imported but unused
  --> _quarantine/archive_legacy/background_processor_corrupted.py:19:27
   |
17 | from .logger import log_webhook_success, get_request_id
18 | from .security import hash_psid
19 | from .rate_limiter import check_rate_limit
   |                           ^^^^^^^^^^^^^^^^
20 | from .policy_guard import update_user_message_timestamp, is_within_24_hour_window
21 | from .facebook_handler import send_facebook_message
   |
help: Remove unused import: `.rate_limiter.check_rate_limit`

F841 Local variable `future` is assigned to but never used
  --> _quarantine/archive_legacy/background_processor_corrupted.py:68:13
   |
67 |             # Submit to thread pool
68 |             future = self.executor.submit(self._process_job_safe, job)
   |             ^^^^^^
69 |             
70 |             # Log successful enqueue
   |
help: Remove assignment to unused variable `future`

F401 [*] `utils.expense.process_expense_message` imported but unused
   --> _quarantine/archive_legacy/background_processor_corrupted.py:216:35
    |
214 |         """
215 |         from utils.parser import parse_expense
216 |         from utils.expense import process_expense_message
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^
217 |         from utils.categories import categorize_expense
218 |         from datetime import datetime, timedelta
    |
help: Remove unused import: `utils.expense.process_expense_message`

F811 [*] Redefinition of unused `datetime` from line 11
   --> _quarantine/archive_legacy/background_processor_corrupted.py:218:30
    |
216 |         from utils.expense import process_expense_message
217 |         from utils.categories import categorize_expense
218 |         from datetime import datetime, timedelta
    |                              ^^^^^^^^
219 |         from db_base import db
220 |         from models import Expense
    |
help: Remove definition: `datetime`

F401 [*] `datetime.timedelta` imported but unused
   --> _quarantine/archive_legacy/background_processor_corrupted.py:218:40
    |
216 |         from utils.expense import process_expense_message
217 |         from utils.categories import categorize_expense
218 |         from datetime import datetime, timedelta
    |                                        ^^^^^^^^^
219 |         from db_base import db
220 |         from models import Expense
    |
help: Remove unused import: `datetime.timedelta`

F823 Local variable `hash_psid` referenced before assignment
   --> _quarantine/archive_legacy/background_processor_corrupted.py:222:21
    |
220 |         from models import Expense
221 |         
222 |         psid_hash = hash_psid(psid)
    |                     ^^^^^^^^^
223 |         
224 |         # RL-2: Handle "summary" command during rate limiting
    |

F401 [*] `models.Expense` imported but unused
   --> _quarantine/archive_legacy/background_processor_corrupted.py:316:32
    |
314 |         try:
315 |             from db_base import db
316 |             from models import Expense
    |                                ^^^^^^^
317 |             from datetime import datetime, timedelta
318 |             from sqlalchemy import func, text
    |
help: Remove unused import: `models.Expense`

F401 [*] `sqlalchemy.func` imported but unused
   --> _quarantine/archive_legacy/background_processor_corrupted.py:318:36
    |
316 |             from models import Expense
317 |             from datetime import datetime, timedelta
318 |             from sqlalchemy import func, text
    |                                    ^^^^
319 |             
320 |             # Calculate time windows (today, 7d, 30d)
    |
help: Remove unused import: `sqlalchemy.func`

F821 Undefined name `category_totals`
   --> _quarantine/archive_legacy/background_processor_corrupted.py:441:40
    |
440 |             # Add top categories
441 |             sorted_categories = sorted(category_totals.items(), key=lambda x: x[1], reverse=True)
    |                                        ^^^^^^^^^^^^^^^
442 |             for category, amount in sorted_categories[:3]:
443 |                 summary_lines.append(f"• {category}: ৳{amount:.0f}")
    |

F821 Undefined name `summary_lines`
   --> _quarantine/archive_legacy/background_processor_corrupted.py:443:17
    |
441 |             sorted_categories = sorted(category_totals.items(), key=lambda x: x[1], reverse=True)
442 |             for category, amount in sorted_categories[:3]:
443 |                 summary_lines.append(f"• {category}: ৳{amount:.0f}")
    |                 ^^^^^^^^^^^^^
444 |             
445 |             # Add count
    |

F821 Undefined name `summary_lines`
   --> _quarantine/archive_legacy/background_processor_corrupted.py:446:13
    |
445 |             # Add count
446 |             summary_lines.append(f"📝 {len(expenses)} transactions logged")
    |             ^^^^^^^^^^^^^
447 |             
448 |             return "\n".join(summary_lines)
    |

F821 Undefined name `expenses`
   --> _quarantine/archive_legacy/background_processor_corrupted.py:446:43
    |
445 |             # Add count
446 |             summary_lines.append(f"📝 {len(expenses)} transactions logged")
    |                                            ^^^^^^^^
447 |             
448 |             return "\n".join(summary_lines)
    |

F821 Undefined name `summary_lines`
   --> _quarantine/archive_legacy/background_processor_corrupted.py:448:30
    |
446 |             summary_lines.append(f"📝 {len(expenses)} transactions logged")
447 |             
448 |             return "\n".join(summary_lines)
    |                              ^^^^^^^^^^^^^
449 |             
450 |         except Exception as e:
    |

F401 [*] `logging` imported but unused
 --> _quarantine/archive_legacy/debug_conversational_ai.py:6:8
  |
4 | """
5 |
6 | import logging
  |        ^^^^^^^
7 | import sys
8 | sys.path.insert(0, '.')
  |
help: Remove unused import: `logging`

F401 [*] `app.db` imported but unused
  --> _quarantine/archive_legacy/debug_conversational_ai.py:12:26
   |
10 | def debug_user_data():
11 |     """Debug user expense data access"""
12 |     from app import app, db
   |                          ^^
13 |     from models import Expense
14 |     from utils.conversational_ai import conversational_ai
   |
help: Remove unused import: `app.db`

F401 [*] `utils.security.hash_psid` imported but unused
  --> _quarantine/archive_legacy/debug_conversational_ai.py:15:32
   |
13 |     from models import Expense
14 |     from utils.conversational_ai import conversational_ai
15 |     from utils.security import hash_psid
   |                                ^^^^^^^^^
16 |     
17 |     with app.app_context():
   |
help: Remove unused import: `utils.security.hash_psid`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_conversational_ai.py:38:19
   |
36 |             # Now test conversational AI with a reverse-engineered PSID
37 |             # We need to find the original PSID that hashes to this user_id
38 |             print(f"\n🧪 Testing conversational AI with hashed user_id...")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
39 |             
40 |             # Test the conversational AI context directly
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_conversational_ai.py:48:23
   |
46 |                 print(f"✅ Data found: {context['total_expenses']} expenses, total: {context['total_amount']}")
47 |             else:
48 |                 print(f"❌ No data found in context")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
49 |                 
50 |         else:
   |
help: Remove extraneous `f` prefix

F401 [*] `utils.security.hash_psid` imported but unused
  --> _quarantine/archive_legacy/debug_conversational_ai.py:57:32
   |
55 |     from app import app
56 |     from utils.conversational_ai import conversational_ai
57 |     from utils.security import hash_psid
   |                                ^^^^^^^^^
58 |     
59 |     with app.app_context():
   |
help: Remove unused import: `utils.security.hash_psid`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_hash_flow.py:32:15
   |
31 |         # Now simulate what happens in conversational AI
32 |         print(f"\n3. In conversational AI:")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
33 |         print(f"   - Receives PSID: {original_psid}")
34 |         print(f"   - Should query with hash: {stored_hash[:16]}...")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_hash_flow.py:39:15
   |
37 |         double_hash = hash_psid(stored_hash)
38 |         print(f"   - If we hash again: {double_hash[:16]}...")
39 |         print(f"   - Result: NO DATA FOUND (different hash)")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
40 |         
41 |         print(f"\n🎯 SOLUTION:")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_hash_flow.py:41:15
   |
39 |         print(f"   - Result: NO DATA FOUND (different hash)")
40 |         
41 |         print(f"\n🎯 SOLUTION:")
   |               ^^^^^^^^^^^^^^^^^
42 |         print(f"   - Production router: Pass original PSID")
43 |         print(f"   - Conversational AI: Hash ONCE, then query")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_hash_flow.py:42:15
   |
41 |         print(f"\n🎯 SOLUTION:")
42 |         print(f"   - Production router: Pass original PSID")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
43 |         print(f"   - Conversational AI: Hash ONCE, then query")
44 |         print(f"   - Never hash an already-hashed value")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_hash_flow.py:43:15
   |
41 |         print(f"\n🎯 SOLUTION:")
42 |         print(f"   - Production router: Pass original PSID")
43 |         print(f"   - Conversational AI: Hash ONCE, then query")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
44 |         print(f"   - Never hash an already-hashed value")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_hash_flow.py:44:15
   |
42 |         print(f"   - Production router: Pass original PSID")
43 |         print(f"   - Conversational AI: Hash ONCE, then query")
44 |         print(f"   - Never hash an already-hashed value")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
45 |
46 | if __name__ == "__main__":
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_inconsistent_responses.py:75:27
   |
74 |                 if has_data and no_data:
75 |                     print(f"   ⚠️  INCONSISTENT: Contains both 'no data' and specific spending info")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
76 |                 elif has_data:
77 |                     print(f"   ✅ GOOD: Contains spending data")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_inconsistent_responses.py:77:27
   |
75 |                     print(f"   ⚠️  INCONSISTENT: Contains both 'no data' and specific spending info")
76 |                 elif has_data:
77 |                     print(f"   ✅ GOOD: Contains spending data")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
78 |                 elif no_data:
79 |                     print(f"   ❌ BAD: Says no data available")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_inconsistent_responses.py:79:27
   |
77 |                     print(f"   ✅ GOOD: Contains spending data")
78 |                 elif no_data:
79 |                     print(f"   ❌ BAD: Says no data available")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
80 |                 else:
81 |                     print(f"   ⚠️  UNCLEAR: Response type unknown")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_inconsistent_responses.py:81:27
   |
79 |                     print(f"   ❌ BAD: Says no data available")
80 |                 else:
81 |                     print(f"   ⚠️  UNCLEAR: Response type unknown")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
82 |                     
83 |             except Exception as e:
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_inconsistent_responses.py:87:15
   |
86 |         # Test different ways the PSID might come in
87 |         print(f"\n3. TESTING DIFFERENT PSID FORMATS")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
88 |         
89 |         # Simulate what happens if we get an actual Facebook PSID
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/debug_inconsistent_responses.py:111:23
    |
110 |             if "no data" in response.lower():
111 |                 print(f"   ✅ EXPECTED: No data for new PSID")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
112 |             else:
113 |                 print(f"   ⚠️  UNEXPECTED: Found data for new PSID")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/debug_inconsistent_responses.py:113:23
    |
111 |                 print(f"   ✅ EXPECTED: No data for new PSID")
112 |             else:
113 |                 print(f"   ⚠️  UNEXPECTED: Found data for new PSID")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
114 |                 
115 |         except Exception as e:
    |
help: Remove extraneous `f` prefix

F401 [*] `logging` imported but unused
 --> _quarantine/archive_legacy/debug_user_data_flow.py:6:8
  |
4 | """
5 |
6 | import logging
  |        ^^^^^^^
7 | import sys
8 | sys.path.insert(0, '.')
  |
help: Remove unused import: `logging`

F401 [*] `utils.security.hash_psid` imported but unused
  --> _quarantine/archive_legacy/debug_user_data_flow.py:13:32
   |
11 |     """Debug the complete data flow from Facebook PSID to database lookup"""
12 |     from app import app
13 |     from utils.security import hash_psid
   |                                ^^^^^^^^^
14 |     from utils.conversational_ai import conversational_ai
15 |     from utils.production_router import ProductionRouter
   |
help: Remove unused import: `utils.security.hash_psid`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_user_data_flow.py:44:19
   |
42 |             # Direct conversational AI test
43 |             context = conversational_ai.get_user_expense_context_direct(test_hash, days=30)
44 |             print(f"   Direct context access:")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
45 |             print(f"   - Has data: {context['has_data']}")
46 |             print(f"   - Total expenses: {context['total_expenses']}")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_user_data_flow.py:51:23
   |
49 |             if context['has_data']:
50 |                 # Test conversational response
51 |                 print(f"\n3. Testing conversational AI with this hash:")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
52 |                 response, intent = conversational_ai.handle_conversational_query(test_hash, "Give me a summary")
53 |                 print(f"   Response: {response}")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/debug_user_data_flow.py:57:23
   |
56 |                 # Test production router
57 |                 print(f"\n4. Testing production router:")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
58 |                 router = ProductionRouter()
   |
help: Remove extraneous `f` prefix

F401 [*] `typing.Optional` imported but unused
 --> _quarantine/archive_legacy/expense_router.py:7:31
  |
6 | import logging
7 | from typing import Dict, Any, Optional
  |                               ^^^^^^^^
8 |
9 | from ai.expense_parse import parse_expense, regex_parse
  |
help: Remove unused import: `typing.Optional`

F841 [*] Local variable `e` is assigned to but never used
  --> _quarantine/archive_legacy/expense_router.py:35:25
   |
33 |         mode = "AI"
34 |         
35 |     except Exception as e:
   |                         ^
36 |         logger.exception("AI expense logging error")
   |
help: Remove assignment to unused variable `e`

F401 [*] `os` imported but unused
  --> _quarantine/archive_legacy/gemini_validation.py:9:8
   |
 7 | import requests
 8 | import json
 9 | import os
   |        ^^
10 |
11 | BASE_URL = "http://localhost:5000"
   |
help: Remove unused import: `os`

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/migrate_identity.py:281:15
    |
280 |         # Print summary
281 |         print(f"\n=== MIGRATION SUMMARY ===")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
282 |         print(f"Total users: {plan['summary']['total_users']}")
283 |         print(f"Test users to archive: {plan['summary']['test_users_to_archive']}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/migrate_identity.py:288:19
    |
287 |         if args.apply:
288 |             print(f"\nApplying migration...")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
289 |             results = apply_migration(plan, conn)
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/migrate_identity.py:291:19
    |
289 |             results = apply_migration(plan, conn)
290 |             
291 |             print(f"\n=== MIGRATION RESULTS ===")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
292 |             print(f"Archived users: {results['archived_users']}")
293 |             print(f"Merged duplicates: {results['merged_duplicates']}")
    |
help: Remove extraneous `f` prefix

F401 [*] `typing.Dict` imported but unused
 --> _quarantine/archive_legacy/mvp_router.py:7:20
  |
5 | import hashlib
6 | from datetime import datetime, timedelta
7 | from typing import Dict, Any, Tuple
  |                    ^^^^
8 |
9 | from utils.user_manager import resolve_user_id
  |
help: Remove unused import

F401 [*] `typing.Any` imported but unused
 --> _quarantine/archive_legacy/mvp_router.py:7:26
  |
5 | import hashlib
6 | from datetime import datetime, timedelta
7 | from typing import Dict, Any, Tuple
  |                          ^^^
8 |
9 | from utils.user_manager import resolve_user_id
  |
help: Remove unused import

F401 [*] `threading` imported but unused
  --> _quarantine/archive_legacy/performance_benchmark.py:10:8
   |
 8 | import json
 9 | import time
10 | import threading
   |        ^^^^^^^^^
11 | import statistics
12 | from concurrent.futures import ThreadPoolExecutor, as_completed
   |
help: Remove unused import: `threading`

F401 [*] `hashlib` imported but unused
  --> _quarantine/archive_legacy/performance_benchmark.py:13:8
   |
11 | import statistics
12 | from concurrent.futures import ThreadPoolExecutor, as_completed
13 | import hashlib
   |        ^^^^^^^
14 | import hmac
   |
help: Remove unused import: `hashlib`

F401 [*] `hmac` imported but unused
  --> _quarantine/archive_legacy/performance_benchmark.py:14:8
   |
12 | from concurrent.futures import ThreadPoolExecutor, as_completed
13 | import hashlib
14 | import hmac
   |        ^^^^
15 |
16 | BASE_URL = "http://localhost:5000"
   |
help: Remove unused import: `hmac`

F841 Local variable `status_code` is assigned to but never used
  --> _quarantine/archive_legacy/performance_benchmark.py:67:21
   |
65 |                 if result["success"]:
66 |                     times.append(result["duration_ms"])
67 |                     status_code = result["result"].status_code
   |                     ^^^^^^^^^^^
68 |                 else:
69 |                     self.errors.append(f"{name}: {result['error']}")
   |
help: Remove assignment to unused variable `status_code`

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/performance_benchmark.py:467:11
    |
465 |         json.dump(results, f, indent=2)
466 |     
467 |     print(f"\nDetailed results saved to benchmark_results.json")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: Remove extraneous `f` prefix

F401 [*] `time` imported but unused
 --> _quarantine/archive_legacy/production_debug.py:5:8
  |
4 | import requests
5 | import time
  |        ^^^^
6 |
7 | def debug_production():
  |
help: Remove unused import: `time`

F401 [*] `json` imported but unused
  --> _quarantine/archive_legacy/provider_switch_demo.py:8:8
   |
 7 | import requests
 8 | import json
   |        ^^^^
 9 |
10 | BASE_URL = "http://localhost:5000"
   |
help: Remove unused import: `json`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/provider_switch_demo.py:43:15
   |
41 |         ping_data = resp.json()
42 |         
43 |         print(f"AI Ping Result:")
   |               ^^^^^^^^^^^^^^^^^^
44 |         print(f"  OK: {ping_data.get('ok', False)}")
45 |         print(f"  Reply: {ping_data.get('reply', 'No reply')}")
   |
help: Remove extraneous `f` prefix

F401 [*] `utils.user_manager.resolve_user_id` imported but unused
  --> _quarantine/archive_legacy/run_uat_test.py:14:36
   |
12 |     """Run comprehensive UAT tests on the production router"""
13 |     from utils.production_router import production_router
14 |     from utils.user_manager import resolve_user_id
   |                                    ^^^^^^^^^^^^^^^
15 |     from app import app, db
16 |     from models import User, Expense
   |
help: Remove unused import: `utils.user_manager.resolve_user_id`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/run_uat_test.py:59:19
   |
57 |             db.session.add(test_user)
58 |             db.session.commit()
59 |             print(f"✓ Created test user")
   |                   ^^^^^^^^^^^^^^^^^^^^^^
60 |         else:
61 |             print(f"✓ Using existing test user")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/run_uat_test.py:61:19
   |
59 |             print(f"✓ Created test user")
60 |         else:
61 |             print(f"✓ Using existing test user")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
62 |         
63 |         # Add some test expenses for summary
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/run_uat_test.py:75:15
   |
73 |         db.session.add(test_expense)
74 |         db.session.commit()
75 |         print(f"✓ Added test expense")
   |               ^^^^^^^^^^^^^^^^^^^^^^^
76 |         print()
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/run_uat_test.py:118:31
    |
116 |                     print(f"   Response: {response[:150]}")
117 |                     if has_fallback:
118 |                         print(f"   ⚠️  Generic fallback detected")
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
119 |                     if is_error:
120 |                         print(f"   ⚠️  Error/fallback intent")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/run_uat_test.py:120:31
    |
118 |                         print(f"   ⚠️  Generic fallback detected")
119 |                     if is_error:
120 |                         print(f"   ⚠️  Error/fallback intent")
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
121 |                 print()
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/run_uat_test.py:163:27
    |
161 |                     print(f"    Error: {r['error']}")
162 |                 elif r.get("has_fallback"):
163 |                     print(f"    Issue: Generic fallback response")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
164 |                 elif r.get("is_error"):
165 |                     print(f"    Issue: Error/fallback intent ({r.get('actual_intent')})")
    |
help: Remove extraneous `f` prefix

F401 [*] `typing.Optional` imported but unused
 --> _quarantine/archive_legacy/simple_router.py:7:27
  |
5 | import time
6 | import logging
7 | from typing import Tuple, Optional, Dict, Any
  |                           ^^^^^^^^
8 |
9 | from flags import is_ai_enabled
  |
help: Remove unused import: `typing.Optional`

F841 Local variable `start_time` is assigned to but never used
  --> _quarantine/archive_legacy/simple_router.py:35:9
   |
33 |         Returns: (response_text, metadata)
34 |         """
35 |         start_time = time.time()
   |         ^^^^^^^^^^
36 |         psid_hash = hash_psid(psid)
   |
help: Remove assignment to unused variable `start_time`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_ai_expense_evolution.py:21:11
   |
19 |     test_message = "Logging today's expenses - coffee 100, burger 300 and watermelon juice 300"
20 |     
21 |     print(f"🧪 Testing AI Expense Parser Evolution")
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
22 |     print(f"📝 Message: {test_message}")
23 |     print(f"🎯 Expected: 3 expenses totaling 700")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_ai_expense_evolution.py:23:11
   |
21 |     print(f"🧪 Testing AI Expense Parser Evolution")
22 |     print(f"📝 Message: {test_message}")
23 |     print(f"🎯 Expected: 3 expenses totaling 700")
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
24 |     print("=" * 60)
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_ai_expense_evolution.py:37:19
   |
36 |         if result['success'] and result['expenses']:
37 |             print(f"\n📋 Expense Breakdown:")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
38 |             for i, expense in enumerate(result['expenses'], 1):
39 |                 print(f"  {i}. {expense['amount']} - {expense['description']} ({expense['category']})")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_ai_expense_evolution.py:56:19
   |
54 |                 print(f"❌ Item count mismatch: got {result['item_count']}, expected {expected_count}")
55 |         else:
56 |             print(f"❌ Parsing failed - the evolution didn't work as expected")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
57 |         
58 |         return result
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_ai_expense_evolution.py:75:11
   |
73 |     ]
74 |     
75 |     print(f"\n🧪 Testing Simple Cases")
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
76 |     print("=" * 60)
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_ai_expense_evolution.py:94:11
   |
93 |     # Summary
94 |     print(f"\n🎯 EVOLUTION TEST SUMMARY")
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
95 |     print("=" * 60)
   |
help: Remove extraneous `f` prefix

F401 [*] `hmac` imported but unused
  --> _quarantine/archive_legacy/test_ai_vs_fallback.py:11:8
   |
 9 | import time
10 | import hashlib
11 | import hmac
   |        ^^^^
12 |
13 | BASE_URL = "http://localhost:5000"
   |
help: Remove unused import: `hmac`

F841 Local variable `test_psid` is assigned to but never used
   --> _quarantine/archive_legacy/test_ai_vs_fallback.py:98:13
    |
 96 |         try:
 97 |             # Create a test user ID
 98 |             test_psid = hashlib.sha256(f"test_user_{test_name}".encode()).hexdigest()[:16]
    |             ^^^^^^^^^
 99 |             
100 |             # We can't directly test the router without triggering rate limits,
    |
help: Remove assignment to unused variable `test_psid`

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_ai_vs_fallback.py:108:27
    |
107 |                 if ai_configured:
108 |                     print(f"   Router decision: AI path (Gemini configured)")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
109 |                     print(f"   Expected AI: {test_name.split('.')[1].strip()}")
110 |                     self.results[f"routing_{test_name}"] = {"status": "ai_path", "configured": True}
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_ai_vs_fallback.py:112:27
    |
110 |                     self.results[f"routing_{test_name}"] = {"status": "ai_path", "configured": True}
111 |                 else:
112 |                     print(f"   Router decision: Fallback path (AI not configured)")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
113 |                     print(f"   Expected fallback: Template response")
114 |                     self.results[f"routing_{test_name}"] = {"status": "fallback_path", "configured": False}
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_ai_vs_fallback.py:113:27
    |
111 |                 else:
112 |                     print(f"   Router decision: Fallback path (AI not configured)")
113 |                     print(f"   Expected fallback: Template response")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
114 |                     self.results[f"routing_{test_name}"] = {"status": "fallback_path", "configured": False}
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_ai_vs_fallback.py:250:19
    |
248 |         # Final assessment
249 |         if ai_indicators >= 2:
250 |             print(f"\n🟢 CONCLUSION: GEMINI AI IS ACTIVE")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
251 |             print(f"Evidence: {ai_indicators}/{total_tests} tests confirm AI is responding")
252 |             print("Your system is using real Gemini AI, not deterministic fallback")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_ai_vs_fallback.py:254:19
    |
252 |             print("Your system is using real Gemini AI, not deterministic fallback")
253 |         elif ai_indicators == 1:
254 |             print(f"\n🟡 CONCLUSION: MIXED EVIDENCE")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
255 |             print(f"Evidence: {ai_indicators}/{total_tests} tests suggest AI may be partially active")
256 |         else:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_ai_vs_fallback.py:257:19
    |
255 |             print(f"Evidence: {ai_indicators}/{total_tests} tests suggest AI may be partially active")
256 |         else:
257 |             print(f"\n🔴 CONCLUSION: DETERMINISTIC FALLBACK ACTIVE")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
258 |             print(f"Evidence: {ai_indicators}/{total_tests} tests suggest AI is not responding")
259 |             print("System is using deterministic fallback logic")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_ai_vs_fallback.py:271:15
    |
269 |             }, f, indent=2)
270 |         
271 |         print(f"\nDetailed results saved to ai_fallback_test_results.json")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
272 |         
273 |         return ai_indicators >= 2
    |
help: Remove extraneous `f` prefix

E712 Avoid equality comparisons to `True`; use `allowed:` for truth checks
  --> _quarantine/archive_legacy/test_centralized_config.py:42:12
   |
40 |     # Test rate limiting functionality
41 |     allowed, retry = can_use_ai("test_user_config")
42 |     assert allowed == True, "First request should be allowed"
   |            ^^^^^^^^^^^^^^^
43 |     print(f"✓ Rate limiter: {allowed}, retry: {retry}s")
   |
help: Replace with `allowed`

E712 Avoid equality comparisons to `True`; use `allowed:` for truth checks
  --> _quarantine/archive_legacy/test_centralized_config.py:48:16
   |
46 |     for i in range(2, AI_RL_USER_LIMIT + 1):
47 |         allowed, retry = can_use_ai("test_user_config")
48 |         assert allowed == True, f"Request {i} should be allowed"
   |                ^^^^^^^^^^^^^^^
49 |     
50 |     # Test limit exceeded
   |
help: Replace with `allowed`

E712 Avoid equality comparisons to `False`; use `not allowed:` for false checks
  --> _quarantine/archive_legacy/test_centralized_config.py:52:12
   |
50 |     # Test limit exceeded
51 |     allowed, retry = can_use_ai("test_user_config")
52 |     assert allowed == False, "Request beyond limit should be denied"
   |            ^^^^^^^^^^^^^^^^
53 |     assert retry > 0, "Retry time should be positive"
54 |     print(f"✓ Rate limit enforced: denied with {retry}s retry")
   |
help: Replace with `not allowed`

F401 [*] `json` imported but unused
  --> _quarantine/archive_legacy/test_complete_identity_system.py:8:8
   |
 7 | import os
 8 | import json
   |        ^^^^
 9 |
10 | # Set ID_SALT for testing
   |
help: Remove unused import: `json`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_complete_identity_system.py:81:11
   |
79 |     print(f"Job PSID: {job['psid']}")
80 |     print(f"Job Hash: {job['psid_hash'][:12]}...")
81 |     print(f"✅ Background worker uses pre-computed hash - no re-hashing")
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
82 |     
83 |     # Test 3: Debug stamping
   |
help: Remove extraneous `f` prefix

F401 [*] `utils.conversational_ai.conversational_ai` imported but unused
  --> _quarantine/archive_legacy/test_conversational_ai.py:17:41
   |
15 |     from app import app, db
16 |     from models import User, Expense
17 |     from utils.conversational_ai import conversational_ai
   |                                         ^^^^^^^^^^^^^^^^^
18 |     from utils.production_router import ProductionRouter
19 |     from utils.security import hash_psid
   |
help: Remove unused import: `utils.conversational_ai.conversational_ai`

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_conversational_ai.py:98:23
    |
 96 |             # Check if response is intelligent and data-driven
 97 |             if "3355" in response or "expenses" in response.lower():
 98 |                 print(f"\n🎉 CONVERSATIONAL AI SUCCESS!")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 99 |                 print(f"✅ Uses actual user data for summary")
100 |                 print(f"✅ Provides specific numbers and insights")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_conversational_ai.py:99:23
    |
 97 |             if "3355" in response or "expenses" in response.lower():
 98 |                 print(f"\n🎉 CONVERSATIONAL AI SUCCESS!")
 99 |                 print(f"✅ Uses actual user data for summary")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
100 |                 print(f"✅ Provides specific numbers and insights")
101 |                 print(f"✅ Maintains conversational flow")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_conversational_ai.py:100:23
    |
 98 |                 print(f"\n🎉 CONVERSATIONAL AI SUCCESS!")
 99 |                 print(f"✅ Uses actual user data for summary")
100 |                 print(f"✅ Provides specific numbers and insights")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
101 |                 print(f"✅ Maintains conversational flow")
102 |                 return True
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_conversational_ai.py:101:23
    |
 99 |                 print(f"✅ Uses actual user data for summary")
100 |                 print(f"✅ Provides specific numbers and insights")
101 |                 print(f"✅ Maintains conversational flow")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
102 |                 return True
103 |             else:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_conversational_ai.py:104:23
    |
102 |                 return True
103 |             else:
104 |                 print(f"\n⚠️ Response may not be using user data effectively")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
105 |                 return False
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_conversational_ai.py:119:15
    |
118 |     with app.app_context():
119 |         print(f"\n🧪 Testing AI Analysis with User Context")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
120 |         print("=" * 50)
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_conversational_ai.py:138:23
    |
137 |             if any(word in response.lower() for word in ['food', 'shopping', 'transport', 'pattern']):
138 |                 print(f"✅ Analysis uses real spending categories")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
139 |                 return True
140 |             else:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_conversational_ai.py:141:23
    |
139 |                 return True
140 |             else:
141 |                 print(f"⚠️ Analysis may be generic")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
142 |                 return False
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_conversational_ai.py:153:11
    |
151 |     analysis_success = test_analysis_request()
152 |     
153 |     print(f"\n🏁 CONVERSATIONAL AI TEST RESULTS")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
154 |     print("=" * 70)
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_conversational_ai.py:171:15
    |
170 |     if summary_success and analysis_success:
171 |         print(f"\n🎯 AI CONSTITUTION ADVANCEMENT: 85% → 90%")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
172 |         print("📈 Enhanced conversational intelligence with user-level memory")
    |
help: Remove extraneous `f` prefix

F401 [*] `os` imported but unused
 --> _quarantine/archive_legacy/test_conversational_fix.py:6:8
  |
4 | """
5 | import sys
6 | import os
  |        ^^
7 | sys.path.append('.')
  |
help: Remove unused import: `os`

F401 [*] `utils.crypto.ensure_hashed` imported but unused
  --> _quarantine/archive_legacy/test_conversational_fix.py:10:26
   |
 9 | from utils.conversational_ai import ConversationalAI
10 | from utils.crypto import ensure_hashed
   |                          ^^^^^^^^^^^^^
11 |
12 | def test_conversational_ai_fix():
   |
help: Remove unused import: `utils.crypto.ensure_hashed`

F401 [*] `app.db` imported but unused
  --> _quarantine/archive_legacy/test_conversational_fix.py:14:26
   |
12 | def test_conversational_ai_fix():
13 |     """Test the fixed conversational AI data access"""
14 |     from app import app, db
   |                          ^^
15 |     
16 |     # Real user hashes from database
   |
help: Remove unused import: `app.db`

F401 [*] `logging` imported but unused
 --> _quarantine/archive_legacy/test_direct_data_access.py:6:8
  |
4 | """
5 |
6 | import logging
  |        ^^^^^^^
7 | import sys
8 | sys.path.insert(0, '.')
  |
help: Remove unused import: `logging`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_direct_data_access.py:27:15
   |
25 |         context = conversational_ai.get_user_expense_context_direct(user_hash, days=30)
26 |         
27 |         print(f"📊 Context retrieved:")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^
28 |         print(f"  - Has data: {context['has_data']}")
29 |         print(f"  - Total expenses: {context['total_expenses']}")
   |
help: Remove extraneous `f` prefix

F401 [*] `utils.security.hash_psid` imported but unused
  --> _quarantine/archive_legacy/test_evolution_integration.py:16:32
   |
14 |     """Test the complete evolved system integration"""
15 |     from utils.production_router import ProductionRouter
16 |     from utils.security import hash_psid
   |                                ^^^^^^^^^
17 |     
18 |     # Initialize router
   |
help: Remove unused import: `utils.security.hash_psid`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_evolution_integration.py:25:11
   |
23 |     test_message = "Logging today's expenses - coffee 100, burger 300 and watermelon juice 300"
24 |     
25 |     print(f"🧪 Testing Complete Evolution Integration")
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
26 |     print(f"📝 Message: {test_message}")
27 |     print(f"🔧 Expected: Multi-item expense logging with intelligent response")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_evolution_integration.py:27:11
   |
25 |     print(f"🧪 Testing Complete Evolution Integration")
26 |     print(f"📝 Message: {test_message}")
27 |     print(f"🔧 Expected: Multi-item expense logging with intelligent response")
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
28 |     print("=" * 80)
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_evolution_integration.py:45:19
   |
43 |         # Check if evolution was successful
44 |         if intent == "ai_expense_logged" and amount == 700.0:
45 |             print(f"\n🎉 EVOLUTION INTEGRATION SUCCESS!")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
46 |             print(f"✅ Multi-item expense parsing works end-to-end")
47 |             print(f"✅ Context awareness will receive proper data")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_evolution_integration.py:46:19
   |
44 |         if intent == "ai_expense_logged" and amount == 700.0:
45 |             print(f"\n🎉 EVOLUTION INTEGRATION SUCCESS!")
46 |             print(f"✅ Multi-item expense parsing works end-to-end")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
47 |             print(f"✅ Context awareness will receive proper data")
48 |             print(f"✅ Users will no longer see repetitive 'not enough data' messages")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_evolution_integration.py:47:19
   |
45 |             print(f"\n🎉 EVOLUTION INTEGRATION SUCCESS!")
46 |             print(f"✅ Multi-item expense parsing works end-to-end")
47 |             print(f"✅ Context awareness will receive proper data")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
48 |             print(f"✅ Users will no longer see repetitive 'not enough data' messages")
49 |         elif intent == "ai_context_driven":
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_evolution_integration.py:48:19
   |
46 |             print(f"✅ Multi-item expense parsing works end-to-end")
47 |             print(f"✅ Context awareness will receive proper data")
48 |             print(f"✅ Users will no longer see repetitive 'not enough data' messages")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
49 |         elif intent == "ai_context_driven":
50 |             print(f"\n⚠️ Still hitting context-thin logic - evolution needs refinement")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_evolution_integration.py:50:19
   |
48 |             print(f"✅ Users will no longer see repetitive 'not enough data' messages")
49 |         elif intent == "ai_context_driven":
50 |             print(f"\n⚠️ Still hitting context-thin logic - evolution needs refinement")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
51 |         else:
52 |             print(f"\n❌ Unexpected intent: {intent}")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_evolution_integration.py:71:11
   |
69 |     test_psid = "test_user_simple"
70 |     
71 |     print(f"\n🧪 Testing Simple Case Compatibility")
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
72 |     print(f"📝 Message: {test_message}")
73 |     print("=" * 40)
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_evolution_integration.py:87:19
   |
86 |         if intent == "ai_expense_logged" and amount == 100.0:
87 |             print(f"✅ Simple case still works correctly")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
88 |         else:
89 |             print(f"⚠️ Simple case behavior changed - Intent: {intent}")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_evolution_integration.py:101:11
    |
 99 |     test_simple_case()
100 |     
101 |     print(f"\n🏁 FINAL EVOLUTION STATUS")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
102 |     print("=" * 80)
    |
help: Remove extraneous `f` prefix

F401 [*] `app.db` imported but unused
  --> _quarantine/archive_legacy/test_existing_user.py:15:26
   |
13 | def test_with_existing_user():
14 |     """Test evolution with a user who has completed onboarding"""
15 |     from app import app, db
   |                          ^^
16 |     from utils.production_router import ProductionRouter
17 |     from utils.user_manager import user_manager
   |
help: Remove unused import: `app.db`

F841 Local variable `psid_hash` is assigned to but never used
  --> _quarantine/archive_legacy/test_existing_user.py:26:9
   |
24 |         # Create a user who has completed onboarding
25 |         test_psid = "existing_user_evolution_test"
26 |         psid_hash = hash_psid(test_psid)
   |         ^^^^^^^^^
27 |         
28 |         # Create an existing user with completed onboarding
   |
help: Remove assignment to unused variable `psid_hash`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_existing_user.py:44:15
   |
43 |         print(f"📝 Message: {test_message}")
44 |         print(f"👤 User: Existing user with completed onboarding")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
45 |         
46 |         try:
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_existing_user.py:61:23
   |
59 |             # Check if evolution works with existing users
60 |             if intent == "ai_expense_logged" and amount == 700.0:
61 |                 print(f"\n🎉 EVOLUTION SUCCESS WITH EXISTING USERS!")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
62 |                 print(f"✅ Multi-item parsing works: 3 expenses totaling 700")
63 |                 print(f"✅ No Flask context issues")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_existing_user.py:62:23
   |
60 |             if intent == "ai_expense_logged" and amount == 700.0:
61 |                 print(f"\n🎉 EVOLUTION SUCCESS WITH EXISTING USERS!")
62 |                 print(f"✅ Multi-item parsing works: 3 expenses totaling 700")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
63 |                 print(f"✅ No Flask context issues")
64 |                 print(f"✅ Proper routing for existing users")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_existing_user.py:63:23
   |
61 |                 print(f"\n🎉 EVOLUTION SUCCESS WITH EXISTING USERS!")
62 |                 print(f"✅ Multi-item parsing works: 3 expenses totaling 700")
63 |                 print(f"✅ No Flask context issues")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
64 |                 print(f"✅ Proper routing for existing users")
65 |                 return True
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_existing_user.py:64:23
   |
62 |                 print(f"✅ Multi-item parsing works: 3 expenses totaling 700")
63 |                 print(f"✅ No Flask context issues")
64 |                 print(f"✅ Proper routing for existing users")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
65 |                 return True
66 |             elif intent == "ai_context_driven":
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_existing_user.py:67:23
   |
65 |                 return True
66 |             elif intent == "ai_context_driven":
67 |                 print(f"\n📊 Context-driven response (good sign!)")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
68 |                 print(f"✅ System recognized expense data and provided intelligent response")
69 |                 return True
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_existing_user.py:68:23
   |
66 |             elif intent == "ai_context_driven":
67 |                 print(f"\n📊 Context-driven response (good sign!)")
68 |                 print(f"✅ System recognized expense data and provided intelligent response")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
69 |                 return True
70 |             else:
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_existing_user.py:72:23
   |
70 |             else:
71 |                 print(f"\n⚠️ Unexpected intent: {intent}")
72 |                 print(f"This may indicate the expense wasn't logged properly")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
73 |                 return False
   |
help: Remove extraneous `f` prefix

F401 [*] `utils.security.hash_psid` imported but unused
  --> _quarantine/archive_legacy/test_existing_user.py:86:32
   |
84 |     from utils.production_router import ProductionRouter
85 |     from utils.user_manager import user_manager
86 |     from utils.security import hash_psid
   |                                ^^^^^^^^^
87 |     
88 |     with app.app_context():
   |
help: Remove unused import: `utils.security.hash_psid`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_existing_user.py:89:15
   |
88 |     with app.app_context():
89 |         print(f"\n🧪 Testing Simple Case with Existing User")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
90 |         print("=" * 40)
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_existing_user.py:118:23
    |
117 |             if intent == "ai_expense_logged" and amount == 100.0:
118 |                 print(f"✅ Simple case works with existing users")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
119 |                 return True
120 |             elif intent == "ai_context_driven":
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_existing_user.py:121:23
    |
119 |                 return True
120 |             elif intent == "ai_context_driven":
121 |                 print(f"✅ Context-driven response for simple case")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
122 |                 return True
123 |             else:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_existing_user.py:136:11
    |
134 |     simple_success = test_simple_existing_user()
135 |     
136 |     print(f"\n🏁 EXISTING USER TEST RESULTS")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
137 |     print("=" * 60)
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_fixed_conversational.py:61:27
   |
60 |                 if has_no_data_msg:
61 |                     print(f"   ❌ NO DATA MESSAGE")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^
62 |                     no_data_responses.append(f"Message {i}: {message}")
63 |                     all_responses_have_data = False
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_fixed_conversational.py:65:27
   |
63 |                     all_responses_have_data = False
64 |                 elif has_specific_data:
65 |                     print(f"   ✅ HAS SPENDING DATA")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
66 |                     data_responses.append(f"Message {i}: {message}")
67 |                 else:
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_fixed_conversational.py:68:27
   |
66 |                     data_responses.append(f"Message {i}: {message}")
67 |                 else:
68 |                     print(f"   ⚠️  NEUTRAL RESPONSE")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^
69 |                     
70 |             except Exception as e:
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_fixed_conversational.py:74:15
   |
72 |                 all_responses_have_data = False
73 |         
74 |         print(f"\n" + "=" * 50)
   |               ^^^^^
75 |         print(f"🎯 CONSISTENCY TEST RESULTS:")
76 |         print(f"   Total messages tested: {len(test_messages)}")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_fixed_conversational.py:75:15
   |
74 |         print(f"\n" + "=" * 50)
75 |         print(f"🎯 CONSISTENCY TEST RESULTS:")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
76 |         print(f"   Total messages tested: {len(test_messages)}")
77 |         print(f"   Responses with data: {len(data_responses)}")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_fixed_conversational.py:81:19
   |
80 |         if all_responses_have_data:
81 |             print(f"   ✅ SUCCESS: All responses consistent")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
82 |         else:
83 |             print(f"   ❌ INCONSISTENCY STILL EXISTS")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_fixed_conversational.py:83:19
   |
81 |             print(f"   ✅ SUCCESS: All responses consistent")
82 |         else:
83 |             print(f"   ❌ INCONSISTENCY STILL EXISTS")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
84 |             if no_data_responses:
85 |                 print(f"   No data responses: {no_data_responses}")
   |
help: Remove extraneous `f` prefix

F401 [*] `json` imported but unused
 --> _quarantine/archive_legacy/test_gemini_live.py:7:8
  |
6 | import requests
7 | import json
  |        ^^^^
8 |
9 | BASE_URL = "http://localhost:5000"
  |
help: Remove unused import: `json`

F401 [*] `app.db` imported but unused
  --> _quarantine/archive_legacy/test_hash_consistency.py:67:30
   |
65 |     def test_user_manager_consistency(self, method_name):
66 |         """Test UserManager methods handle both raw PSID and hash consistently"""
67 |         from app import app, db
   |                              ^^
68 |         
69 |         with app.app_context():
   |
help: Remove unused import: `app.db`

F401 [*] `app.db` imported but unused
  --> _quarantine/archive_legacy/test_hash_consistency.py:89:30
   |
87 |     def test_conversational_ai_consistency(self):
88 |         """Test ConversationalAI methods handle both raw PSID and hash consistently"""
89 |         from app import app, db
   |                              ^^
90 |         
91 |         with app.app_context():
   |
help: Remove unused import: `app.db`

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_hash_consistency.py:136:11
    |
135 |     # Test 2: Validation
136 |     print(f"\nValidation Tests:")
    |           ^^^^^^^^^^^^^^^^^^^^^^
137 |     print(f"Is valid SHA-256: {is_sha256_hex(hashed_once)}")
138 |     print(f"Invalid too short: {is_sha256_hex('short')}")
    |
help: Remove extraneous `f` prefix

F401 [*] `json` imported but unused
  --> _quarantine/archive_legacy/test_identity_production.py:8:8
   |
 7 | import os
 8 | import json
   |        ^^^^
 9 | import requests
10 | import time
   |
help: Remove unused import: `json`

F401 [*] `requests` imported but unused
  --> _quarantine/archive_legacy/test_identity_production.py:9:8
   |
 7 | import os
 8 | import json
 9 | import requests
   |        ^^^^^^^^
10 | import time
   |
help: Remove unused import: `requests`

F401 [*] `utils.identity.psid_from_event` imported but unused
  --> _quarantine/archive_legacy/test_identity_production.py:16:28
   |
14 |     os.environ["ID_SALT"] = "3dcce5a0b1eeb774cc1e0320edb773fed53afbcdd4b14d6201373659278cae34"
15 |
16 | from utils.identity import psid_from_event, psid_hash
   |                            ^^^^^^^^^^^^^^^
17 | from utils.webhook_processor import extract_webhook_events
   |
help: Remove unused import: `utils.identity.psid_from_event`

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_identity_production.py:242:11
    |
240 |         assert computed_hash == expected_hash, "Hash inconsistency detected"
241 |     
242 |     print(f"✓ Production flow simulation successful:")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
243 |     print(f"  - {len(processed_events)} message events processed with consistent identity")
244 |     print(f"  - {len(ignored_events)} delivery/read events properly ignored")
    |
help: Remove extraneous `f` prefix

F841 Local variable `router` is assigned to but never used
  --> _quarantine/archive_legacy/test_no_double_hash.py:25:9
   |
24 |         # This is what happens in production router
25 |         router = ProductionRouter()
   |         ^^^^^^
26 |         
27 |         # The router computes the hash once
   |
help: Remove assignment to unused variable `router`

F401 [*] `os` imported but unused
 --> _quarantine/archive_legacy/test_production.py:5:8
  |
4 | import requests
5 | import os
  |        ^^
6 |
7 | def test_production():
  |
help: Remove unused import: `os`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_production_context.py:50:15
   |
48 |         db.session.commit()
49 |         
50 |         print(f"👤 Created existing user: onboarding_complete=True, interactions=15")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
51 |         
52 |         # Initialize router
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_production_context.py:75:23
   |
73 |             # Check evolution success
74 |             if intent == "ai_expense_logged":
75 |                 print(f"\n🎉 EVOLUTION SUCCESS!")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
76 |                 print(f"✅ Multi-item expense parser works in production context")
77 |                 print(f"✅ Amount logged: {amount} (expected: 700)")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_production_context.py:76:23
   |
74 |             if intent == "ai_expense_logged":
75 |                 print(f"\n🎉 EVOLUTION SUCCESS!")
76 |                 print(f"✅ Multi-item expense parser works in production context")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
77 |                 print(f"✅ Amount logged: {amount} (expected: 700)")
78 |                 if amount == 700.0:
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_production_context.py:79:27
   |
77 |                 print(f"✅ Amount logged: {amount} (expected: 700)")
78 |                 if amount == 700.0:
79 |                     print(f"✅ Perfect! All 3 expenses logged correctly")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
80 |                 else:
81 |                     print(f"⚠️ Amount mismatch - partial logging detected")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_production_context.py:81:27
   |
79 |                     print(f"✅ Perfect! All 3 expenses logged correctly")
80 |                 else:
81 |                     print(f"⚠️ Amount mismatch - partial logging detected")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
82 |                 return True
83 |             elif intent == "ai_context_driven":
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_production_context.py:84:23
   |
82 |                 return True
83 |             elif intent == "ai_context_driven":
84 |                 print(f"\n📊 Context-driven AI response")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
85 |                 print(f"✅ Expenses processed, intelligent response generated")
86 |                 print(f"✅ This is also a successful evolution outcome")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_production_context.py:85:23
   |
83 |             elif intent == "ai_context_driven":
84 |                 print(f"\n📊 Context-driven AI response")
85 |                 print(f"✅ Expenses processed, intelligent response generated")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
86 |                 print(f"✅ This is also a successful evolution outcome")
87 |                 return True
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_production_context.py:86:23
   |
84 |                 print(f"\n📊 Context-driven AI response")
85 |                 print(f"✅ Expenses processed, intelligent response generated")
86 |                 print(f"✅ This is also a successful evolution outcome")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
87 |                 return True
88 |             else:
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_production_context.py:106:15
    |
105 |     with app.app_context():
106 |         print(f"\n🧪 Testing Simple Case in Production Context")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
107 |         print("=" * 50)
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_production_context.py:146:23
    |
145 |             if intent in ["ai_expense_logged", "ai_context_driven"]:
146 |                 print(f"✅ Simple case works in production")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
147 |                 return True
148 |             else:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_production_context.py:161:11
    |
159 |     simple_success = test_simple_production()
160 |     
161 |     print(f"\n🏁 PRODUCTION CONTEXT TEST RESULTS")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
162 |     print("=" * 70)
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_production_context.py:178:11
    |
176 |         print("⚠️ Simple cases need production attention")
177 |         
178 |     print(f"\n💡 Note: New users will go through onboarding flow as designed")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
179 |     print(f"   This test confirms evolution works for existing users")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_production_context.py:179:11
    |
178 |     print(f"\n💡 Note: New users will go through onboarding flow as designed")
179 |     print(f"   This test confirms evolution works for existing users")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: Remove extraneous `f` prefix

F401 [*] `logging` imported but unused
 --> _quarantine/archive_legacy/test_production_conversational.py:6:8
  |
4 | """
5 |
6 | import logging
  |        ^^^^^^^
7 | import sys
8 | sys.path.insert(0, '.')
  |
help: Remove unused import: `logging`

F401 [*] `utils.security.hash_psid` imported but unused
  --> _quarantine/archive_legacy/test_production_conversational.py:15:32
   |
13 |     from utils.production_router import ProductionRouter
14 |     from utils.conversational_ai import conversational_ai
15 |     from utils.security import hash_psid
   |                                ^^^^^^^^^
16 |     
17 |     with app.app_context():
   |
help: Remove unused import: `utils.security.hash_psid`

F401 [*] `logging` imported but unused
 --> _quarantine/archive_legacy/test_production_fix.py:6:8
  |
4 | """
5 |
6 | import logging
  |        ^^^^^^^
7 | import sys
8 | sys.path.insert(0, '.')
  |
help: Remove unused import: `logging`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_production_fix.py:37:15
   |
35 |         # This should work because our conversational AI now detects hash length
36 |         
37 |         print(f"\n1. Testing with hash as PSID (simulating real scenario):")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
38 |         
39 |         router = ProductionRouter()
   |
help: Remove extraneous `f` prefix

F401 [*] `logging` imported but unused
 --> _quarantine/archive_legacy/test_real_psid.py:6:8
  |
4 | """
5 |
6 | import logging
  |        ^^^^^^^
7 | import sys
8 | sys.path.insert(0, '.')
  |
help: Remove unused import: `logging`

F401 [*] `utils.security.hash_psid` imported but unused
  --> _quarantine/archive_legacy/test_real_psid.py:13:32
   |
11 |     """Find the original PSID that creates the hash in the database"""
12 |     from app import app
13 |     from utils.security import hash_psid
   |                                ^^^^^^^^^
14 |     from models import Expense
   |
help: Remove unused import: `utils.security.hash_psid`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_real_scenario.py:48:15
   |
46 |         target_hash = "dc863d3aa69d518264428cadc7b19e19b5d723c980a0db219d8063a1746128dc"
47 |         
48 |         print(f"\n🎯 Testing direct hash access...")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
49 |         
50 |         # Test the direct method with the exact hash
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_real_scenario.py:53:15
   |
51 |         context = conversational_ai.get_user_expense_context_direct(target_hash, days=30)
52 |         
53 |         print(f"Direct hash access result:")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
54 |         print(f"  - Has data: {context['has_data']}")
55 |         print(f"  - Total expenses: {context['total_expenses']}")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_real_webhook_flow.py:124:23
    |
122 |             # Should always return 200 EVENT_RECEIVED for valid webhooks
123 |             if response.status_code == 200:
124 |                 print(f"  ✅ Webhook accepted")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^
125 |             else:
126 |                 print(f"  ⚠️  Status code: {response.status_code}")
    |
help: Remove extraneous `f` prefix

F401 [*] `sys` imported but unused
 --> _quarantine/archive_legacy/test_uat_demo.py:5:8
  |
3 | Simulates a complete UAT flow to verify all features work
4 | """
5 | import sys
  |        ^^^
6 | import time
7 | from app import app
  |
help: Remove unused import: `sys`

F401 [*] `app.db` imported but unused
  --> _quarantine/archive_legacy/test_web_context.py:15:26
   |
13 | def test_with_app_context():
14 |     """Test the AI expense parser within Flask app context"""
15 |     from app import app, db
   |                          ^^
16 |     from utils.production_router import ProductionRouter
   |
help: Remove unused import: `app.db`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_web_context.py:46:23
   |
44 |             # Check if evolution works in proper context
45 |             if intent == "ai_expense_logged":
46 |                 print(f"\n🎉 SUCCESS: Evolution works perfectly in Flask context!")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
47 |                 print(f"✅ Multi-item parsing functional")
48 |                 print(f"✅ Database operations successful")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_web_context.py:47:23
   |
45 |             if intent == "ai_expense_logged":
46 |                 print(f"\n🎉 SUCCESS: Evolution works perfectly in Flask context!")
47 |                 print(f"✅ Multi-item parsing functional")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
48 |                 print(f"✅ Database operations successful")
49 |                 print(f"✅ No Flask context issues")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_web_context.py:48:23
   |
46 |                 print(f"\n🎉 SUCCESS: Evolution works perfectly in Flask context!")
47 |                 print(f"✅ Multi-item parsing functional")
48 |                 print(f"✅ Database operations successful")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
49 |                 print(f"✅ No Flask context issues")
50 |                 return True
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_web_context.py:49:23
   |
47 |                 print(f"✅ Multi-item parsing functional")
48 |                 print(f"✅ Database operations successful")
49 |                 print(f"✅ No Flask context issues")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
50 |                 return True
51 |             elif intent == "ai_context_driven":
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_web_context.py:52:23
   |
50 |                 return True
51 |             elif intent == "ai_context_driven":
52 |                 print(f"\n⚠️ Still hitting context-thin logic")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
53 |                 print(f"This means the expense parser integration needs adjustment")
54 |                 return False
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_web_context.py:53:23
   |
51 |             elif intent == "ai_context_driven":
52 |                 print(f"\n⚠️ Still hitting context-thin logic")
53 |                 print(f"This means the expense parser integration needs adjustment")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
54 |                 return False
55 |             else:
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_web_context.py:71:15
   |
70 |     with app.app_context():
71 |         print(f"\n🧪 Testing Simple Case with App Context")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
72 |         print("=" * 40)
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/test_web_context.py:91:23
   |
90 |             if intent == "ai_expense_logged":
91 |                 print(f"✅ Simple case works in Flask context")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
92 |                 return True
93 |             else:
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/test_web_context.py:106:11
    |
104 |     simple_success = test_simple_case_context()
105 |     
106 |     print(f"\n🏁 FLASK CONTEXT TEST RESULTS")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
107 |     print("=" * 60)
    |
help: Remove extraneous `f` prefix

F401 [*] `json` imported but unused
  --> _quarantine/archive_legacy/uat_comprehensive.py:8:8
   |
 7 | import requests
 8 | import json
   |        ^^^^
 9 | import time
10 | import hashlib
   |
help: Remove unused import: `json`

F401 [*] `hashlib` imported but unused
  --> _quarantine/archive_legacy/uat_comprehensive.py:10:8
   |
 8 | import json
 9 | import time
10 | import hashlib
   |        ^^^^^^^
11 |
12 | BASE_URL = "http://localhost:5000"
   |
help: Remove unused import: `hashlib`

F401 [*] `json` imported but unused
 --> _quarantine/archive_legacy/uat_context_system.py:6:8
  |
4 | """
5 |
6 | import json
  |        ^^^^
7 | import time
8 | import logging
  |
help: Remove unused import: `json`

F401 [*] `models.User` imported but unused
  --> _quarantine/archive_legacy/uat_context_system.py:11:29
   |
 9 | from datetime import datetime, timedelta
10 | from app import app, db
11 | from models import Expense, User
   |                             ^^^^
12 | from utils.security import hash_psid
13 | from utils.production_router import production_router as router
   |
help: Remove unused import: `models.User`

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/uat_context_system.py:128:19
    |
126 |                 return False
127 |             
128 |             print(f"✓ Context built successfully:")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
129 |             print(f"  - Total spend: ৳{total_spend:,}")
130 |             print(f"  - Categories: {len(top_cats)}")
    |
help: Remove extraneous `f` prefix

F401 [*] `logging` imported but unused
 --> _quarantine/archive_legacy/uat_conversational_ai.py:7:8
  |
5 | """
6 |
7 | import logging
  |        ^^^^^^^
8 | import sys
9 | sys.path.insert(0, '.')
  |
help: Remove unused import: `logging`

F401 [*] `utils.security.hash_psid` imported but unused
  --> _quarantine/archive_legacy/uat_conversational_ai.py:15:32
   |
13 |     from app import app
14 |     from utils.production_router import ProductionRouter
15 |     from utils.security import hash_psid
   |                                ^^^^^^^^^
16 |     from models import db
17 |     from sqlalchemy import text
   |
help: Remove unused import: `utils.security.hash_psid`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/uat_conversational_ai.py:48:15
   |
47 |         # Step 2: Test the exact scenario from screenshots
48 |         print(f"\n2. TESTING EXACT USER SCENARIOS FROM SCREENSHOTS")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
49 |         print("-" * 50)
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/uat_conversational_ai.py:99:27
    |
 98 |                 if has_real_data and no_fallback:
 99 |                     print(f"   ✅ SUCCESS: Response contains real data")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
100 |                     success_count += 1
101 |                 else:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/uat_conversational_ai.py:102:27
    |
100 |                     success_count += 1
101 |                 else:
102 |                     print(f"   ❌ FAILURE: Response missing expected content or using fallback")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
103 |                     print(f"      Expected keywords: {scenario['expected']}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/uat_conversational_ai.py:109:15
    |
108 |         # Step 3: Validate AI response quality
109 |         print(f"\n3. AI RESPONSE QUALITY VALIDATION")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
110 |         print("-" * 40)
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/uat_conversational_ai.py:143:15
    |
142 |         # Step 4: Production readiness assessment
143 |         print(f"\n4. PRODUCTION READINESS ASSESSMENT")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
144 |         print("-" * 45)
    |
help: Remove extraneous `f` prefix

F401 [*] `datetime.datetime` imported but unused
  --> _quarantine/archive_legacy/uat_double_hashing_fix.py:18:26
   |
16 |     from utils.production_router import ProductionRouter
17 |     from models import db, Expense
18 |     from datetime import datetime
   |                          ^^^^^^^^
19 |     import json
   |
help: Remove unused import: `datetime.datetime`

F401 [*] `json` imported but unused
  --> _quarantine/archive_legacy/uat_double_hashing_fix.py:19:12
   |
17 |     from models import db, Expense
18 |     from datetime import datetime
19 |     import json
   |            ^^^^
20 |     
21 |     with app.app_context():
   |
help: Remove unused import: `json`

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/uat_double_hashing_fix.py:177:15
    |
176 |         # Step 9: Cleanup
177 |         print(f"\n9. CLEANING UP TEST DATA")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
178 |         cleanup_expenses = Expense.query.filter_by(user_id=demo_hash).all()
179 |         for expense in cleanup_expenses:
    |
help: Remove extraneous `f` prefix

F401 [*] `json` imported but unused
 --> _quarantine/archive_legacy/uat_focused_retests.py:6:8
  |
4 | """
5 |
6 | import json
  |        ^^^^
7 | import logging
8 | from app import app, db
  |
help: Remove unused import: `json`

F401 [*] `app.db` imported but unused
  --> _quarantine/archive_legacy/uat_focused_retests.py:8:22
   |
 6 | import json
 7 | import logging
 8 | from app import app, db
   |                      ^^
 9 | from utils.context_packet import build_context, is_context_thin, CONTEXT_SYSTEM_PROMPT, RESPONSE_SCHEMA
10 | from utils.production_router import production_router as router
   |
help: Remove unused import: `app.db`

F401 [*] `utils.context_packet.build_context` imported but unused
  --> _quarantine/archive_legacy/uat_focused_retests.py:9:34
   |
 7 | import logging
 8 | from app import app, db
 9 | from utils.context_packet import build_context, is_context_thin, CONTEXT_SYSTEM_PROMPT, RESPONSE_SCHEMA
   |                                  ^^^^^^^^^^^^^
10 | from utils.production_router import production_router as router
11 | from ai_adapter_gemini import generate_with_schema
   |
help: Remove unused import: `utils.context_packet.build_context`

F401 [*] `hashlib` imported but unused
  --> _quarantine/archive_legacy/uat_multi_user_isolation.py:24:8
   |
22 | import time
23 | import logging
24 | import hashlib
   |        ^^^^^^^
25 | import requests
26 | import threading
   |
help: Remove unused import: `hashlib`

F401 [*] `requests` imported but unused
  --> _quarantine/archive_legacy/uat_multi_user_isolation.py:25:8
   |
23 | import logging
24 | import hashlib
25 | import requests
   |        ^^^^^^^^
26 | import threading
27 | import concurrent.futures
   |
help: Remove unused import: `requests`

F401 [*] `threading` imported but unused
  --> _quarantine/archive_legacy/uat_multi_user_isolation.py:26:8
   |
24 | import hashlib
25 | import requests
26 | import threading
   |        ^^^^^^^^^
27 | import concurrent.futures
28 | from datetime import datetime, date, timedelta
   |
help: Remove unused import: `threading`

F401 [*] `datetime.timedelta` imported but unused
  --> _quarantine/archive_legacy/uat_multi_user_isolation.py:28:38
   |
26 | import threading
27 | import concurrent.futures
28 | from datetime import datetime, date, timedelta
   |                                      ^^^^^^^^^
29 | from decimal import Decimal
   |
help: Remove unused import: `datetime.timedelta`

F401 [*] `models.MonthlySummary` imported but unused
  --> _quarantine/archive_legacy/uat_multi_user_isolation.py:35:35
   |
34 | from app import app, db
35 | from models import User, Expense, MonthlySummary
   |                                   ^^^^^^^^^^^^^^
36 | from utils.security import hash_psid
   |
help: Remove unused import: `models.MonthlySummary`

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/uat_multi_user_isolation.py:519:15
    |
517 |         pass_rate = len(passed_tests) / total_tests * 100 if total_tests > 0 else 0
518 |         
519 |         print(f"\n📊 UAT SUMMARY")
    |               ^^^^^^^^^^^^^^^^^^^
520 |         print(f"Total Tests: {total_tests}")
521 |         print(f"Passed: {len(passed_tests)} ({pass_rate:.1f}%)")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/uat_multi_user_isolation.py:526:19
    |
525 |         if passed_tests:
526 |             print(f"\n✅ PASSED TESTS:")
    |                   ^^^^^^^^^^^^^^^^^^^^^
527 |             for test in passed_tests:
528 |                 details = self.results[test].get('details', '')
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/uat_multi_user_isolation.py:532:19
    |
531 |         if failed_tests:
532 |             print(f"\n❌ FAILED TESTS:")
    |                   ^^^^^^^^^^^^^^^^^^^^^
533 |             for test in failed_tests:
534 |                 details = self.results[test].get('details', '')
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/uat_multi_user_isolation.py:538:19
    |
537 |         if error_tests:
538 |             print(f"\n🚨 ERROR TESTS:")
    |                   ^^^^^^^^^^^^^^^^^^^^
539 |             for test in error_tests:
540 |                 details = self.results[test].get('details', '')
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/uat_multi_user_isolation.py:551:19
    |
550 |         if critical_passed and len(failed_tests) == 0:
551 |             print(f"\n🎯 OVERALL: PASS - Multi-user isolation is secure")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
552 |         else:
553 |             print(f"\n⚠️ OVERALL: NEEDS ATTENTION - Critical issues found")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/uat_multi_user_isolation.py:553:19
    |
551 |             print(f"\n🎯 OVERALL: PASS - Multi-user isolation is secure")
552 |         else:
553 |             print(f"\n⚠️ OVERALL: NEEDS ATTENTION - Critical issues found")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
554 |         
555 |         return {
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/uat_real_data_verification.py:36:15
   |
34 |         # 2. Using a fake PSID that we hash to create a different scenario
35 |         
36 |         print(f"\n1. TESTING WITH REAL HASH (simulating hashed input)")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
37 |         
38 |         # Test User Manager with hash
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/uat_real_data_verification.py:59:15
   |
57 |         print(f"   Hash response: {hash_response[:80]}...")
58 |         
59 |         print(f"\n2. TESTING WITH SIMULATED RAW PSID")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
60 |         
61 |         # Create a fake PSID and test the flow
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/uat_real_data_verification.py:79:15
   |
77 |         print(f"   PSID AI total: ${psid_context.get('total_amount', 0):.2f}")
78 |         
79 |         print(f"\n3. VERIFICATION")
   |               ^^^^^^^^^^^^^^^^^^^^
80 |         
81 |         # Check database consistency
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> _quarantine/archive_legacy/uat_real_data_verification.py:112:15
    |
110 |         print(f"   Fake PSID returns empty (correct): {fake_data_empty}")
111 |         
112 |         print(f"\n🎯 OVERALL VERIFICATION")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
113 |         success = real_data_consistent and fake_data_empty and hash_length_ok
114 |         print(f"   Result: {'PASS' if success else 'FAIL'}")
    |
help: Remove extraneous `f` prefix

F401 [*] `os` imported but unused
  --> _quarantine/archive_legacy/uat_test_script.py:12:8
   |
10 | import hashlib
11 | import hmac
12 | import os
   |        ^^
13 | from datetime import datetime, timezone
   |
help: Remove unused import: `os`

F401 [*] `datetime.datetime` imported but unused
  --> _quarantine/archive_legacy/uat_test_script.py:13:22
   |
11 | import hmac
12 | import os
13 | from datetime import datetime, timezone
   |                      ^^^^^^^^
14 |
15 | def create_signature(body, secret):
   |
help: Remove unused import

F401 [*] `datetime.timezone` imported but unused
  --> _quarantine/archive_legacy/uat_test_script.py:13:32
   |
11 | import hmac
12 | import os
13 | from datetime import datetime, timezone
   |                                ^^^^^^^^
14 |
15 | def create_signature(body, secret):
   |
help: Remove unused import

F841 Local variable `rl2_triggered` is assigned to but never used
   --> _quarantine/archive_legacy/uat_test_script.py:105:5
    |
103 |     psid = "test_user_rate_limit"
104 |     messages_sent = 0
105 |     rl2_triggered = False
    |     ^^^^^^^^^^^^^
106 |     
107 |     for i in range(5):  # Send 5 messages rapidly
    |
help: Remove assignment to unused variable `rl2_triggered`

F401 [*] `utils.security.hash_psid` imported but unused
  --> _quarantine/archive_legacy/unified_data_access_fix.py:12:32
   |
10 |     """Test both data access paths"""
11 |     from app import app
12 |     from utils.security import hash_psid
   |                                ^^^^^^^^^
13 |     from utils.user_manager import user_manager
14 |     from utils.conversational_ai import conversational_ai
   |
help: Remove unused import: `utils.security.hash_psid`

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/unified_data_access_fix.py:61:15
   |
60 |         # Check if user_manager is handling the hash correctly
61 |         print(f"   User manager uses hash_psid() internally")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
62 |         print(f"   Conversational AI uses hash directly")
63 |         print(f"   This might cause the discrepancy!")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/unified_data_access_fix.py:62:15
   |
60 |         # Check if user_manager is handling the hash correctly
61 |         print(f"   User manager uses hash_psid() internally")
62 |         print(f"   Conversational AI uses hash directly")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
63 |         print(f"   This might cause the discrepancy!")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> _quarantine/archive_legacy/unified_data_access_fix.py:63:15
   |
61 |         print(f"   User manager uses hash_psid() internally")
62 |         print(f"   Conversational AI uses hash directly")
63 |         print(f"   This might cause the discrepancy!")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
64 |
65 | if __name__ == "__main__":
   |
help: Remove extraneous `f` prefix

F401 `utils.user_manager.resolve_user_id` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> _quarantine/archive_legacy/validate_fixes.py:44:44
   |
42 |         print("\n3. Import Standardization Check:")
43 |         try:
44 |             from utils.user_manager import resolve_user_id
   |                                            ^^^^^^^^^^^^^^^
45 |             print("   ✅ resolve_user_id imports correctly")
46 |         except ImportError as e:
   |
help: Remove unused import: `utils.user_manager.resolve_user_id`

F401 `utils.security.ensure_hashed` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> _quarantine/archive_legacy/validate_fixes.py:51:40
   |
50 |         try:
51 |             from utils.security import ensure_hashed
   |                                        ^^^^^^^^^^^^^
52 |             print("   ✅ ensure_hashed imports correctly from utils.security")
53 |         except ImportError as e:
   |
help: Remove unused import: `utils.security.ensure_hashed`

F401 [*] `time` imported but unused
 --> _quarantine/archive_legacy/validation_script.py:8:8
  |
7 | import requests
8 | import time
  |        ^^^^
9 | import json
  |
help: Remove unused import: `time`

E712 Avoid equality comparisons to `False`; use `not data.get("ai_enabled"):` for false checks
   --> _quarantine/archive_legacy/validation_script.py:102:12
    |
100 |         print(f"Toggle response: {json.dumps(data, indent=2)}")
101 |         
102 |         if data.get("ai_enabled") == False:
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
103 |             print("✓ PASS: AI toggled off successfully")
    |
help: Replace with `not data.get("ai_enabled")`

E712 Avoid equality comparisons to `True`; use `resp2.json().get("ai_enabled"):` for truth checks
   --> _quarantine/archive_legacy/validation_script.py:113:16
    |
111 |             )
112 |             
113 |             if resp2.json().get("ai_enabled") == True:
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
114 |                 print("✓ PASS: AI toggled back on")
115 |                 return True
    |
help: Replace with `resp2.json().get("ai_enabled")`

F401 [*] `os` imported but unused
 --> _quarantine/archive_legacy/webhook_test.py:5:8
  |
4 | import requests
5 | import os
  |        ^^
6 |
7 | def test_webhook_verification():
  |
help: Remove unused import: `os`

E701 Multiple statements on one line (colon)
  --> ai/expense_parse.py:37:21
   |
36 |     # Unwrap callables
37 |     if callable(amt): amt = amt()
   |                     ^
38 |     if callable(cat): cat = cat()
39 |     if callable(note): note = note()
   |

E701 Multiple statements on one line (colon)
  --> ai/expense_parse.py:38:21
   |
36 |     # Unwrap callables
37 |     if callable(amt): amt = amt()
38 |     if callable(cat): cat = cat()
   |                     ^
39 |     if callable(note): note = note()
   |

E701 Multiple statements on one line (colon)
  --> ai/expense_parse.py:39:22
   |
37 |     if callable(amt): amt = amt()
38 |     if callable(cat): cat = cat()
39 |     if callable(note): note = note()
   |                      ^
40 |     
41 |     # Strict validation
   |

E402 Module level import not at top of file
  --> app.py:79:1
   |
78 | # Import shared db and Base from lightweight module
79 | from db_base import db
   | ^^^^^^^^^^^^^^^^^^^^^^
80 |
81 | # Create the app
   |

E402 Module level import not at top of file
   --> app.py:139:1
    |
137 |     # Removed global r"/*" route for security
138 | })
139 | from utils.rate_limiting import limiter
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
140 | limiter.init_app(app)
    |

E402 Module level import not at top of file
   --> app.py:143:1
    |
142 | # Request logging middleware using existing structured logger
143 | from utils.logger import structured_logger
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
144 |
145 | @app.before_request
    |

F401 [*] `flask.url_for` imported but unused
   --> app.py:149:71
    |
147 |     """Capture request start time, generate request_id, set user context, and enforce subdomain auth"""
148 |     import os
149 |     from flask import request, jsonify, after_this_request, redirect, url_for
    |                                                                       ^^^^^^^
150 |     from auth_helpers import get_user_id_from_session, get_subdomain, is_protected_subdomain, validate_return_to_url
151 |     from urllib.parse import quote
    |
help: Remove unused import: `flask.url_for`

F401 [*] `auth_helpers.validate_return_to_url` imported but unused
   --> app.py:150:95
    |
148 |     import os
149 |     from flask import request, jsonify, after_this_request, redirect, url_for
150 |     from auth_helpers import get_user_id_from_session, get_subdomain, is_protected_subdomain, validate_return_to_url
    |                                                                                               ^^^^^^^^^^^^^^^^^^^^^^
151 |     from urllib.parse import quote
    |
help: Remove unused import: `auth_helpers.validate_return_to_url`

E402 Module level import not at top of file
   --> app.py:953:1
    |
952 | # Import admin authentication from admin_ops
953 | from admin_ops import require_admin
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
954 |
955 | # Diagnostic helper functions
    |

F401 [*] `datetime.timedelta` imported but unused
    --> app.py:1430:40
     |
1428 |     try:
1429 |         from models import User, Expense
1430 |         from datetime import datetime, timedelta
     |                                        ^^^^^^^^^
1431 |         
1432 |         # Find user by PSID hash
     |
help: Remove unused import: `datetime.timedelta`

F541 [*] f-string without any placeholders
    --> app.py:1666:16
     |
1664 |       except Exception as e:
1665 |           logger.error(f"User insights error: {str(e)}")
1666 |           return f"""
     |  ________________^
1667 | |         <!DOCTYPE html>
1668 | |         <html lang="en" data-bs-theme="dark">
1669 | |         <head>
1670 | |             <meta charset="UTF-8">
1671 | |             <meta name="viewport" content="width=device-width, initial-scale=1.0">
1672 | |             <title>Insights Error - finbrain Admin</title>
1673 | |             <link href="https://cdn.replit.com/agent/bootstrap-agent-dark-theme.min.css" rel="stylesheet">
1674 | |         </head>
1675 | |         <body>
1676 | |             <div class="container mt-4">
1677 | |                 <div class="alert alert-danger">
1678 | |                     <h4>Error Loading Insights</h4>
1679 | |                     <p>An error occurred while generating user insights. Please try again later.</p>
1680 | |                     <a href="/admin" class="btn btn-primary">Back to Admin Dashboard</a>
1681 | |                 </div>
1682 | |             </div>
1683 | |         </body>
1684 | |         </html>
1685 | |         """, 500
     | |___________^
1686 |
1687 |   @app.route("/ops/pca/status")
     |
help: Remove extraneous `f` prefix

E402 Module level import not at top of file
    --> app.py:2132:1
     |
2131 | # Register streamlined admin operations
2132 | from admin_ops import admin_ops
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2133 | app.register_blueprint(admin_ops)
     |

F401 [*] `os` imported but unused
 --> app_coaching_endpoints.py:6:8
  |
4 | """
5 |
6 | import os
  |        ^^
7 | import json
8 | from datetime import datetime
  |
help: Remove unused import: `os`

F401 [*] `json` imported but unused
 --> app_coaching_endpoints.py:7:8
  |
6 | import os
7 | import json
  |        ^^^^
8 | from datetime import datetime
9 | from flask import Blueprint, jsonify, request
  |
help: Remove unused import: `json`

F401 `utils.coaching_resilience.coaching_resilience` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> app_coaching_endpoints.py:19:43
   |
17 |     from utils.coaching_optimization import performance_monitor, coaching_cache, memory_optimizer
18 |     from utils.coaching_safeguards import coaching_circuit_breaker, health_checker, feature_flag_manager
19 |     from utils.coaching_resilience import coaching_resilience
   |                                           ^^^^^^^^^^^^^^^^^^^
20 |     COACHING_MONITORING_AVAILABLE = True
21 | except ImportError as e:
   |
help: Remove unused import: `utils.coaching_resilience.coaching_resilience`

F401 [*] `json` imported but unused
  --> backend_assistant.py:14:8
   |
12 | """
13 |
14 | import json
   |        ^^^^
15 | from datetime import datetime, timedelta
16 | from db_base import db
   |
help: Remove unused import: `json`

E402 Module level import not at top of file
  --> backend_assistant.py:19:1
   |
17 | from utils.db_guard import assert_single_db_instance
18 | assert_single_db_instance(db)
19 | from models import Expense, User
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
20 | from sqlalchemy import text, and_, func
21 | from typing import Dict, List, Optional, Union, Any
   |

F401 [*] `models.Expense` imported but unused
  --> backend_assistant.py:19:20
   |
17 | from utils.db_guard import assert_single_db_instance
18 | assert_single_db_instance(db)
19 | from models import Expense, User
   |                    ^^^^^^^
20 | from sqlalchemy import text, and_, func
21 | from typing import Dict, List, Optional, Union, Any
   |
help: Remove unused import: `models.Expense`

E402 Module level import not at top of file
  --> backend_assistant.py:20:1
   |
18 | assert_single_db_instance(db)
19 | from models import Expense, User
20 | from sqlalchemy import text, and_, func
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
21 | from typing import Dict, List, Optional, Union, Any
22 | import logging
   |

F401 [*] `sqlalchemy.and_` imported but unused
  --> backend_assistant.py:20:30
   |
18 | assert_single_db_instance(db)
19 | from models import Expense, User
20 | from sqlalchemy import text, and_, func
   |                              ^^^^
21 | from typing import Dict, List, Optional, Union, Any
22 | import logging
   |
help: Remove unused import

F401 [*] `sqlalchemy.func` imported but unused
  --> backend_assistant.py:20:36
   |
18 | assert_single_db_instance(db)
19 | from models import Expense, User
20 | from sqlalchemy import text, and_, func
   |                                    ^^^^
21 | from typing import Dict, List, Optional, Union, Any
22 | import logging
   |
help: Remove unused import

E402 Module level import not at top of file
  --> backend_assistant.py:21:1
   |
19 | from models import Expense, User
20 | from sqlalchemy import text, and_, func
21 | from typing import Dict, List, Optional, Union, Any
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
22 | import logging
23 | from utils.identity import ensure_hashed
   |

F401 [*] `typing.Optional` imported but unused
  --> backend_assistant.py:21:32
   |
19 | from models import Expense, User
20 | from sqlalchemy import text, and_, func
21 | from typing import Dict, List, Optional, Union, Any
   |                                ^^^^^^^^
22 | import logging
23 | from utils.identity import ensure_hashed
   |
help: Remove unused import: `typing.Optional`

E402 Module level import not at top of file
  --> backend_assistant.py:22:1
   |
20 | from sqlalchemy import text, and_, func
21 | from typing import Dict, List, Optional, Union, Any
22 | import logging
   | ^^^^^^^^^^^^^^
23 | from utils.identity import ensure_hashed
24 | from utils.single_writer_guard import canonical_writer_context
   |

E402 Module level import not at top of file
  --> backend_assistant.py:23:1
   |
21 | from typing import Dict, List, Optional, Union, Any
22 | import logging
23 | from utils.identity import ensure_hashed
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
24 | from utils.single_writer_guard import canonical_writer_context
25 | from utils.single_writer_metrics import record_canonical_write
   |

E402 Module level import not at top of file
  --> backend_assistant.py:24:1
   |
22 | import logging
23 | from utils.identity import ensure_hashed
24 | from utils.single_writer_guard import canonical_writer_context
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
25 | from utils.single_writer_metrics import record_canonical_write
   |

E402 Module level import not at top of file
  --> backend_assistant.py:25:1
   |
23 | from utils.identity import ensure_hashed
24 | from utils.single_writer_guard import canonical_writer_context
25 | from utils.single_writer_metrics import record_canonical_write
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
26 |
27 | logger = logging.getLogger(__name__)
   |

F541 [*] f-string without any placeholders
   --> backend_assistant.py:219:21
    |
217 |         # Schema unification: Add raw_text and parsed_at_iso even for errors
218 |         from datetime import datetime
219 |         logger.info(f"[ENHANCED_PARSING] confidence=0.0 bin=none signals=0/4 error=true")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
220 |         return {
221 |             "amount_minor": None,
    |
help: Remove extraneous `f` prefix

F811 [*] Redefinition of unused `Expense` from line 19
   --> backend_assistant.py:325:24
    |
323 |     from datetime import datetime
324 |     from decimal import Decimal
325 |     from models import Expense, User, MonthlySummary
    |                        ^^^^^^^
326 |     from utils.tracer import trace_event
327 |     from utils.telemetry import TelemetryTracker
    |
help: Remove definition: `Expense`

F401 [*] `models.User` imported but unused
   --> backend_assistant.py:325:33
    |
323 |     from datetime import datetime
324 |     from decimal import Decimal
325 |     from models import Expense, User, MonthlySummary
    |                                 ^^^^
326 |     from utils.tracer import trace_event
327 |     from utils.telemetry import TelemetryTracker
    |
help: Remove unused import: `models.User`

F811 [*] Redefinition of unused `Expense` from line 19
   --> backend_assistant.py:568:24
    |
566 |         dict: {success: bool, expense_id: int, deleted_at: timestamp}
567 |     """
568 |     from models import Expense
    |                        ^^^^^^^
569 |     from datetime import datetime
    |
help: Remove definition: `Expense`

F401 [*] `urllib.parse.urlparse` imported but unused
  --> ci_unification_checks.py:13:26
   |
11 | import re
12 | import glob
13 | from urllib.parse import urlparse
   |                          ^^^^^^^^
14 |
15 | def run_command(cmd, description):
   |
help: Remove unused import: `urllib.parse.urlparse`

F541 [*] f-string without any placeholders
   --> ci_unification_checks.py:145:15
    |
144 |     if stdout.strip():
145 |         print(f"❌ FAIL: Found forbidden inference_snapshots reads:")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
146 |         print(stdout)
147 |         all_passed = False
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> ci_unification_checks.py:158:15
    |
157 |     if stdout.strip():
158 |         print(f"❌ FAIL: Found forbidden monthly_summaries reads:")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
159 |         print(stdout)
160 |         all_passed = False
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> ci_unification_checks.py:174:15
    |
173 |     if stdout.strip():
174 |         print(f"❌ FAIL: Found direct database access in UI components (must use API endpoints only):")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
175 |         print(stdout)
176 |         all_passed = False
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> ci_unification_checks.py:187:15
    |
186 |     if stdout.strip():
187 |         print(f"❌ FAIL: Found prepared statement calls outside backend layer:")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
188 |         print(stdout)
189 |         all_passed = False
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> ci_unification_checks.py:224:15
    |
223 |     if stdout.strip():
224 |         print(f"❌ FAIL: Found direct expense table inserts (violates single writer principle):")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
225 |         print(stdout)
226 |         all_passed = False
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> ci_unification_checks.py:228:15
    |
226 |         all_passed = False
227 |     else:
228 |         print(f"✅ PASS: No direct expense table inserts detected")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
229 |     
230 |     # Check for non-canonical expense writers
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> ci_unification_checks.py:237:15
    |
236 |     if stdout.strip():
237 |         print(f"❌ FAIL: Found add_expense calls not imported from backend_assistant:")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
238 |         print(stdout)
239 |         all_passed = False
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> ci_unification_checks.py:241:15
    |
239 |         all_passed = False
240 |     else:
241 |         print(f"✅ PASS: All add_expense calls use canonical backend_assistant import")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
242 |     
243 |     # B) Check for orphan snapshots (adapted to actual schema)
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> ci_unification_checks.py:293:15
    |
292 |     if ui_code != 0:
293 |         print(f"❌ FAIL: UI guardrails validation failed")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
294 |         print(ui_stdout)
295 |         all_passed = False
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> ci_unification_checks.py:314:15
    |
312 |         conn.close()
313 |         
314 |         print(f"🔍 Verifying expenses table is accessible (unified read path)")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
315 |         print(f"   Result: {expense_count} expenses found")
    |
help: Remove extraneous `f` prefix

F401 [*] `uuid` imported but unused
  --> comprehensive_e2e_audit.py:9:8
   |
 7 | import json
 8 | import time
 9 | import uuid
   |        ^^^^
10 | import hashlib
11 | from typing import Dict, List, Any, Optional
   |
help: Remove unused import: `uuid`

F401 [*] `typing.List` imported but unused
  --> comprehensive_e2e_audit.py:11:26
   |
 9 | import uuid
10 | import hashlib
11 | from typing import Dict, List, Any, Optional
   |                          ^^^^
12 | from datetime import datetime
13 | from app import app, db
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> comprehensive_e2e_audit.py:11:37
   |
 9 | import uuid
10 | import hashlib
11 | from typing import Dict, List, Any, Optional
   |                                     ^^^^^^^^
12 | from datetime import datetime
13 | from app import app, db
   |
help: Remove unused import

F401 [*] `app.db` imported but unused
  --> comprehensive_e2e_audit.py:13:22
   |
11 | from typing import Dict, List, Any, Optional
12 | from datetime import datetime
13 | from app import app, db
   |                      ^^
14 | # Database models simulation for E2E testing
15 | # Note: Using simulated models for comprehensive testing
   |
help: Remove unused import: `app.db`

F401 [*] `utils.input_sanitizer.InputSanitizer` imported but unused
   --> comprehensive_e2e_audit.py:878:47
    |
877 |             from nlp.signals_extractor import extract_signals
878 |             from utils.input_sanitizer import InputSanitizer
    |                                               ^^^^^^^^^^^^^^
879 |             from utils.ai_adapter_never_empty import AIAdapterNeverEmpty
880 |             from utils.routing_policy import deterministic_router
    |
help: Remove unused import: `utils.input_sanitizer.InputSanitizer`

F401 [*] `utils.routing_policy.deterministic_router` imported but unused
   --> comprehensive_e2e_audit.py:880:46
    |
878 |             from utils.input_sanitizer import InputSanitizer
879 |             from utils.ai_adapter_never_empty import AIAdapterNeverEmpty
880 |             from utils.routing_policy import deterministic_router
    |                                              ^^^^^^^^^^^^^^^^^^^^
881 |             
882 |             import_time = time.time() - start_time
    |
help: Remove unused import: `utils.routing_policy.deterministic_router`

F541 [*] f-string without any placeholders
    --> comprehensive_e2e_audit.py:1083:15
     |
1081 | …     }
1082 | …     
1083 | …     print(f"\n🎯 COMPREHENSIVE END-TO-END ASSESSMENT")
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1084 | …     print("=" * 65)
1085 | …     print(f"Bengali Expense Workflow: {'✅ PASS' if scenario_results.get('bengali_expense_workflow', {}).get('success', False) else…
     |
help: Remove extraneous `f` prefix

F401 [*] `datetime.timedelta` imported but unused
  --> comprehensive_e2e_uat.py:9:32
   |
 7 | import json
 8 | import time
 9 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
10 | from app import app
   |
help: Remove unused import: `datetime.timedelta`

E712 Avoid equality comparisons to `True`; use `expense_result.get("success"):` for truth checks
   --> comprehensive_e2e_uat.py:231:21
    |
229 |                 expense_passed = (
230 |                     expense_result.get("intent") == "EXPENSE_LOG" and
231 |                     expense_result.get("success") == True and
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
232 |                     "response" in expense_result
233 |                 )
    |
help: Replace with `expense_result.get("success")`

E712 Avoid equality comparisons to `True`; use `clarify_result.get("success"):` for truth checks
   --> comprehensive_e2e_uat.py:253:21
    |
251 |                 clarify_passed = (
252 |                     clarify_result.get("intent") == "CLARIFY_EXPENSE" and
253 |                     clarify_result.get("success") == True and
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
254 |                     "response" in clarify_result
255 |                 )
    |
help: Replace with `clarify_result.get("success")`

F401 `utils.identity.ensure_hashed` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> comprehensive_e2e_uat.py:277:40
    |
275 |         try:
276 |             from utils.db import save_expense, get_user_expenses
277 |             from utils.identity import ensure_hashed
    |                                        ^^^^^^^^^^^^^
278 |             
279 |             # Test user creation and expense storage
    |
help: Remove unused import: `utils.identity.ensure_hashed`

F541 [*] f-string without any placeholders
   --> comprehensive_e2e_uat.py:473:23
    |
471 |             failed_tests = [test for test in data["tests"] if not test["passed"]]
472 |             if failed_tests:
473 |                 print(f"   ❌ Failed Tests:")
    |                       ^^^^^^^^^^^^^^^^^^^^^^
474 |                 for failed in failed_tests:
475 |                     print(f"      - {failed['name']}: {failed['details']}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> comprehensive_e2e_uat.py:486:15
    |
484 |         }
485 |         
486 |         print(f"\n📈 OVERALL RESULTS")
    |               ^^^^^^^^^^^^^^^^^^^^^^^
487 |         print(f"   Total Tests: {total_passed}/{total_tests}")
488 |         print(f"   Success Rate: {overall_success_rate:.1f}%")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> comprehensive_e2e_uat.py:504:15
    |
502 |             self.results["recommendations"].append("Critical issues must be resolved")
503 |         
504 |         print(f"\n🚀 DEPLOYMENT RECOMMENDATION")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
505 |         print(f"   Status: {deployment_status}")
    |
help: Remove extraneous `f` prefix

F401 [*] `json` imported but unused
 --> comprehensive_expense_log_validation.py:7:8
  |
5 | """
6 |
7 | import json
  |        ^^^^
8 | from app import app
  |
help: Remove unused import: `json`

F541 [*] f-string without any placeholders
  --> comprehensive_expense_log_validation.py:70:23
   |
69 |             if actual_intent == test['expected']:
70 |                 print(f"   ✅ PASS")
   |                       ^^^^^^^^^^^^^
71 |                 contract_passed += 1
72 |             else:
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> comprehensive_expense_log_validation.py:73:23
   |
71 |                 contract_passed += 1
72 |             else:
73 |                 print(f"   ❌ FAIL")
   |                       ^^^^^^^^^^^^^
74 |         
75 |         print(f"\nContract Test Results: {contract_passed}/{len(contract_tests)}")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> comprehensive_expense_log_validation.py:122:27
    |
121 |                 if pattern_matches >= len(test['expected_patterns']) * 0.7:  # 70% pattern match
122 |                     print(f"   ✅ PASS")
    |                           ^^^^^^^^^^^^^
123 |                     integration_passed += 1
124 |                 else:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> comprehensive_expense_log_validation.py:125:27
    |
123 |                     integration_passed += 1
124 |                 else:
125 |                     print(f"   ❌ FAIL - Missing expected patterns")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
126 |                     
127 |             except Exception as e:
    |
help: Remove extraneous `f` prefix

F401 [*] `utils.routing_policy.IntentType` imported but unused
   --> comprehensive_expense_log_validation.py:140:67
    |
138 |         # Check routing policy module
139 |         try:
140 |             from utils.routing_policy import DeterministicRouter, IntentType, RoutingSignals
    |                                                                   ^^^^^^^^^^
141 |             deterministic_router = DeterministicRouter()
    |
help: Remove unused import

F401 [*] `utils.routing_policy.RoutingSignals` imported but unused
   --> comprehensive_expense_log_validation.py:140:79
    |
138 |         # Check routing policy module
139 |         try:
140 |             from utils.routing_policy import DeterministicRouter, IntentType, RoutingSignals
    |                                                                               ^^^^^^^^^^^^^^
141 |             deterministic_router = DeterministicRouter()
    |
help: Remove unused import

F401 [*] `expense_log_handlers.handle_expense_log_intent` imported but unused
   --> comprehensive_expense_log_validation.py:154:46
    |
152 |         # Check expense handlers
153 |         try:
154 |             from expense_log_handlers import handle_expense_log_intent, handle_clarify_expense_intent
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
155 |             health_checks.append(("Expense Log Handlers", True))
156 |         except Exception as e:
    |
help: Remove unused import

F401 [*] `expense_log_handlers.handle_clarify_expense_intent` imported but unused
   --> comprehensive_expense_log_validation.py:154:73
    |
152 |         # Check expense handlers
153 |         try:
154 |             from expense_log_handlers import handle_expense_log_intent, handle_clarify_expense_intent
    |                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
155 |             health_checks.append(("Expense Log Handlers", True))
156 |         except Exception as e:
    |
help: Remove unused import

E712 Avoid equality comparisons to `True`; use `has_money_mention("50 taka"):` for truth checks
   --> comprehensive_expense_log_validation.py:168:20
    |
167 |             # Test money detection
168 |             assert has_money_mention("50 taka") == True
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
169 |             
170 |             health_checks.append(("Money Detection Utilities", True))
    |
help: Replace with `has_money_mention("50 taka")`

F401 [*] `os` imported but unused
  --> comprehensive_phase_test.py:8:8
   |
 7 | import sys
 8 | import os
   |        ^^
 9 | import json
10 | import requests
   |
help: Remove unused import: `os`

F401 [*] `typing.List` imported but unused
  --> comprehensive_phase_test.py:13:31
   |
11 | import time
12 | from datetime import datetime
13 | from typing import Dict, Any, List
   |                               ^^^^
14 |
15 | # Add project root to path
   |
help: Remove unused import: `typing.List`

E722 Do not use bare `except`
   --> comprehensive_phase_test.py:234:13
    |
232 |                 health_working = health_response.status_code == 200
233 |                 health_data = health_response.json() if health_working else {}
234 |             except:
    |             ^^^^^^
235 |                 health_working = False
236 |                 health_data = {}
    |

E722 Do not use bare `except`
   --> comprehensive_phase_test.py:250:13
    |
248 |                 metrics_working = metrics_response.status_code == 200
249 |                 metrics_data = metrics_response.json() if metrics_working else {}
250 |             except:
    |             ^^^^^^
251 |                 metrics_working = False
252 |                 metrics_data = {}
    |

E722 Do not use bare `except`
   --> comprehensive_phase_test.py:265:13
    |
263 |                 dashboard_response = requests.get(f"{self.base_url}/api/monitoring/dashboard", timeout=5)
264 |                 dashboard_working = dashboard_response.status_code == 200
265 |             except:
    |             ^^^^^^
266 |                 dashboard_working = False
    |

E722 Do not use bare `except`
   --> comprehensive_phase_test.py:303:13
    |
301 |                 status_working = status_response.status_code == 200
302 |                 status_data = status_response.json() if status_working else {}
303 |             except:
    |             ^^^^^^
304 |                 status_working = False
305 |                 status_data = {}
    |

F401 [*] `threading` imported but unused
  --> comprehensive_uat_audit_transparency.py:14:8
   |
12 | import hashlib
13 | import requests
14 | import threading
   |        ^^^^^^^^^
15 | import statistics
16 | from datetime import datetime
   |
help: Remove unused import: `threading`

F401 [*] `typing.List` imported but unused
  --> comprehensive_uat_audit_transparency.py:18:26
   |
16 | from datetime import datetime
17 | from concurrent.futures import ThreadPoolExecutor, as_completed
18 | from typing import Dict, List, Tuple, Any
   |                          ^^^^
19 |
20 | # Test configuration
   |
help: Remove unused import

F401 [*] `typing.Any` imported but unused
  --> comprehensive_uat_audit_transparency.py:18:39
   |
16 | from datetime import datetime
17 | from concurrent.futures import ThreadPoolExecutor, as_completed
18 | from typing import Dict, List, Tuple, Any
   |                                       ^^^
19 |
20 | # Test configuration
   |
help: Remove unused import

F841 Local variable `response` is assigned to but never used
  --> comprehensive_uat_audit_transparency.py:83:9
   |
81 |     start = time.time()
82 |     try:
83 |         response = requests.get(f"{BASE_URL}{endpoint}", params=params, timeout=5)
   |         ^^^^^^^^
84 |         return (time.time() - start) * 1000  # Convert to ms
85 |     except:
   |
help: Remove assignment to unused variable `response`

E722 Do not use bare `except`
  --> comprehensive_uat_audit_transparency.py:85:5
   |
83 |         response = requests.get(f"{BASE_URL}{endpoint}", params=params, timeout=5)
84 |         return (time.time() - start) * 1000  # Convert to ms
85 |     except:
   |     ^^^^^^
86 |         return float('inf')
   |

E722 Do not use bare `except`
   --> comprehensive_uat_audit_transparency.py:386:17
    |
384 |                     if response.status_code == 200:
385 |                         success_count += 1
386 |                 except:
    |                 ^^^^^^
387 |                     pass
    |

E722 Do not use bare `except`
   --> comprehensive_uat_audit_transparency.py:416:13
    |
414 |                     success_count += 1
415 |                 time.sleep(0.1)  # Brief pause
416 |             except:
    |             ^^^^^^
417 |                 pass
    |

F841 Local variable `data` is assigned to but never used
   --> comprehensive_uat_audit_transparency.py:445:13
    |
444 |         if response.status_code == 200:
445 |             data = response.json()
    |             ^^^^
446 |             # Check that no sensitive data is exposed
447 |             passed = True  # Assume good unless proven otherwise
    |
help: Remove assignment to unused variable `data`

F541 [*] f-string without any placeholders
   --> comprehensive_uat_audit_transparency.py:488:11
    |
486 |     print("=" * 70)
487 |     
488 |     print(f"\n📊 Summary:")
    |           ^^^^^^^^^^^^^^^^
489 |     print(f"Total Tests: {summary['total_tests']}")
490 |     print(f"Passed: {summary['passed']}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> comprehensive_uat_audit_transparency.py:503:11
    |
501 |     }
502 |     
503 |     print(f"\n🏗️ Build Info:")
    |           ^^^^^^^^^^^^^^^^^^
504 |     for key, value in build_info.items():
505 |         print(f"{key}: {value}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> comprehensive_uat_audit_transparency.py:507:11
    |
505 |         print(f"{key}: {value}")
506 |     
507 |     print(f"\n📋 Test Results:")
    |           ^^^^^^^^^^^^^^^^^^^^^
508 |     for test in results.tests:
509 |         status = "✅ PASS" if test['passed'] else "❌ FAIL"
    |
help: Remove extraneous `f` prefix

F401 [*] `os` imported but unused
 --> comprehensive_uat_suite.py:7:8
  |
5 | """
6 |
7 | import os
  |        ^^
8 | import json
9 | import time
  |
help: Remove unused import: `os`

F401 [*] `uuid` imported but unused
  --> comprehensive_uat_suite.py:10:8
   |
 8 | import json
 9 | import time
10 | import uuid
   |        ^^^^
11 | import hashlib
12 | from datetime import datetime, timedelta
   |
help: Remove unused import: `uuid`

F401 [*] `typing.Tuple` imported but unused
  --> comprehensive_uat_suite.py:13:37
   |
11 | import hashlib
12 | from datetime import datetime, timedelta
13 | from typing import Dict, List, Any, Tuple
   |                                     ^^^^^
14 | from dataclasses import dataclass
   |
help: Remove unused import: `typing.Tuple`

F401 [*] `utils.routing_policy.RoutingSignals` imported but unused
  --> comprehensive_uat_suite.py:17:56
   |
16 | from app import app, db
17 | from utils.routing_policy import deterministic_router, RoutingSignals, IntentType
   |                                                        ^^^^^^^^^^^^^^
18 | from utils.contract_tests import run_all_contract_tests
19 | from utils.uniqueness_handler import uniqueness_handler
   |
help: Remove unused import

F401 [*] `utils.routing_policy.IntentType` imported but unused
  --> comprehensive_uat_suite.py:17:72
   |
16 | from app import app, db
17 | from utils.routing_policy import deterministic_router, RoutingSignals, IntentType
   |                                                                        ^^^^^^^^^^
18 | from utils.contract_tests import run_all_contract_tests
19 | from utils.uniqueness_handler import uniqueness_handler
   |
help: Remove unused import

F401 [*] `utils.uniqueness_handler.uniqueness_handler` imported but unused
  --> comprehensive_uat_suite.py:19:38
   |
17 | from utils.routing_policy import deterministic_router, RoutingSignals, IntentType
18 | from utils.contract_tests import run_all_contract_tests
19 | from utils.uniqueness_handler import uniqueness_handler
   |                                      ^^^^^^^^^^^^^^^^^^
20 |
21 | @dataclass
   |
help: Remove unused import: `utils.uniqueness_handler.uniqueness_handler`

F841 Local variable `start_time` is assigned to but never used
   --> comprehensive_uat_suite.py:294:13
    |
293 |         for test_case in self.test_cases:
294 |             start_time = time.time()
    |             ^^^^^^^^^^
295 |             
296 |             try:
    |
help: Remove assignment to unused variable `start_time`

F841 Local variable `patterns` is assigned to but never used
   --> comprehensive_uat_suite.py:422:17
    |
420 |             elif check == "bilingual_detection":
421 |                 # Check if bilingual patterns were detected
422 |                 patterns = deterministic_router.patterns
    |                 ^^^^^^^^
423 |                 has_bn = any(ord(c) > 127 for c in test_case.input_text)
424 |                 return has_bn
    |
help: Remove assignment to unused variable `patterns`

F811 [*] Redefinition of unused `os` from line 7
   --> comprehensive_uat_suite.py:620:16
    |
618 |         """Measure memory usage"""
619 |         import psutil
620 |         import os
    |                ^^
621 |         
622 |         process = psutil.Process(os.getpid())
    |
help: Remove definition: `os`

F541 [*] f-string without any placeholders
   --> comprehensive_uat_suite.py:704:11
    |
702 |         json.dump(report, f, indent=2, default=str)
703 |     
704 |     print(f"\n📊 COMPREHENSIVE UAT COMPLETE")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
705 |     print("=" * 50)
706 |     print(f"Overall Success: {report['overall_success']}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> comprehensive_uat_suite.py:708:11
    |
706 |     print(f"Overall Success: {report['overall_success']}")
707 |     print(f"Deployment Readiness: {report['deployment_readiness']}")
708 |     print(f"\nSummary:")
    |           ^^^^^^^^^^^^^
709 |     for category, result in report['summary'].items():
710 |         print(f"  {category}: {result}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> comprehensive_uat_suite.py:712:11
    |
710 |         print(f"  {category}: {result}")
711 |     
712 |     print(f"\nRecommendations:")
    |           ^^^^^^^^^^^^^^^^^^^^^
713 |     for rec in report['recommendations']:
714 |         print(f"  {rec}")
    |
help: Remove extraneous `f` prefix

F401 [*] `datetime.timedelta` imported but unused
  --> comprehensive_uat_test.py:11:32
   |
 9 | import time
10 | import requests
11 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
12 | import traceback
   |
help: Remove unused import: `datetime.timedelta`

F401 [*] `traceback` imported but unused
  --> comprehensive_uat_test.py:12:8
   |
10 | import requests
11 | from datetime import datetime, timedelta
12 | import traceback
   |        ^^^^^^^^^
13 |
14 | class FinBrainUAT:
   |
help: Remove unused import: `traceback`

F841 Local variable `result` is assigned to but never used
  --> comprehensive_uat_test.py:79:17
   |
77 |             with app.app_context():
78 |                 # Test database connection
79 |                 result = db.session.execute(db.text("SELECT 1")).scalar()
   |                 ^^^^^^
80 |                 
81 |                 # Check existing users
   |
help: Remove assignment to unused variable `result`

F841 Local variable `adapter_enabled` is assigned to but never used
   --> comprehensive_uat_test.py:201:13
    |
200 |             # Test AI adapter status
201 |             adapter_enabled = production_ai_adapter.enabled
    |             ^^^^^^^^^^^^^^^
202 |             adapter_provider = production_ai_adapter.provider
    |
help: Remove assignment to unused variable `adapter_enabled`

F541 [*] f-string without any placeholders
   --> comprehensive_uat_test.py:386:11
    |
384 |         json.dump(results, f, indent=2)
385 |     
386 |     print(f"\n📄 Detailed results saved to uat_results.json")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: Remove extraneous `f` prefix

E722 Do not use bare `except`
  --> config.py:13:5
   |
11 |     try: 
12 |         return int(os.getenv(k, str(d)))
13 |     except: 
   |     ^^^^^^
14 |         return d
   |

F401 [*] `threading` imported but unused
  --> critical_cross_contamination_test.py:12:8
   |
10 | from app import app, db
11 | from utils.ai_adapter_v2 import production_ai_adapter
12 | import threading
   |        ^^^^^^^^^
13 | import time
14 | from concurrent.futures import ThreadPoolExecutor
   |
help: Remove unused import: `threading`

F401 [*] `time` imported but unused
  --> critical_cross_contamination_test.py:13:8
   |
11 | from utils.ai_adapter_v2 import production_ai_adapter
12 | import threading
13 | import time
   |        ^^^^
14 | from concurrent.futures import ThreadPoolExecutor
   |
help: Remove unused import: `time`

F401 [*] `datetime.timedelta` imported but unused
  --> critical_cross_contamination_test.py:31:50
   |
29 |         from models import Expense
30 |         from sqlalchemy import func
31 |         from datetime import datetime, timezone, timedelta
   |                                                  ^^^^^^^^^
32 |         
33 |         now = datetime.now(timezone.utc)
   |
help: Remove unused import: `datetime.timedelta`

F541 [*] f-string without any placeholders
  --> critical_cross_contamination_test.py:94:15
   |
92 |         }
93 |         
94 |         print(f"\n🔄 TESTING CONCURRENT AI REQUESTS...")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
95 |         
96 |         contamination_issues = []
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> critical_cross_contamination_test.py:175:11
    |
173 |     all_issues = contamination_issues + state_issues
174 |     
175 |     print(f"\n📋 CRITICAL SECURITY ASSESSMENT")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
176 |     print("=" * 40)
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> critical_cross_contamination_test.py:182:15
    |
180 |         for i, issue in enumerate(all_issues, 1):
181 |             print(f"{i}. {issue}")
182 |         print(f"\n🚨 IMMEDIATE ACTION REQUIRED - USERS SEEING OTHER USERS' FINANCIAL DATA")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
183 |     else:
184 |         print("✅ No cross-contamination detected in AI responses")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> data_consistency_standards.py:366:11
    |
365 |     result = validate_and_normalize_expense(test_expense)
366 |     print(f"\n🧪 Test Validation:")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^
367 |     print(f"Valid: {result['valid']}")
368 |     if result['errors']:
    |
help: Remove extraneous `f` prefix

F401 [*] `typing.Optional` imported but unused
  --> data_consistency_validator.py:10:37
   |
 8 | import sys
 9 | import logging
10 | from typing import List, Dict, Any, Optional
   |                                     ^^^^^^^^
11 | from decimal import Decimal, ROUND_HALF_UP
12 | import psycopg2
   |
help: Remove unused import: `typing.Optional`

F401 [*] `decimal.Decimal` imported but unused
  --> data_consistency_validator.py:11:21
   |
 9 | import logging
10 | from typing import List, Dict, Any, Optional
11 | from decimal import Decimal, ROUND_HALF_UP
   |                     ^^^^^^^
12 | import psycopg2
13 | from urllib.parse import urlparse
   |
help: Remove unused import

F401 [*] `decimal.ROUND_HALF_UP` imported but unused
  --> data_consistency_validator.py:11:30
   |
 9 | import logging
10 | from typing import List, Dict, Any, Optional
11 | from decimal import Decimal, ROUND_HALF_UP
   |                              ^^^^^^^^^^^^^
12 | import psycopg2
13 | from urllib.parse import urlparse
   |
help: Remove unused import

F401 [*] `urllib.parse.urlparse` imported but unused
  --> data_consistency_validator.py:13:26
   |
11 | from decimal import Decimal, ROUND_HALF_UP
12 | import psycopg2
13 | from urllib.parse import urlparse
   |                          ^^^^^^^^
14 |
15 | # Configure logging
   |
help: Remove unused import: `urllib.parse.urlparse`

F541 [*] f-string without any placeholders
   --> data_consistency_validator.py:313:13
    |
311 |             "=" * 50,
312 |             "",
313 |             f"🎯 VALIDATION STATISTICS:",
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
314 |             f"  Total Violations: {len(self.violations)}",
315 |             f"  Records Checked: {self.stats['records_checked']}",
    |
help: Remove extraneous `f` prefix

F401 [*] `os` imported but unused
 --> data_integrity_audit.py:7:8
  |
5 | """
6 |
7 | import os
  |        ^^
8 | import sys
9 | sys.path.append('/home/runner/workspace')
  |
help: Remove unused import: `os`

F401 [*] `sqlalchemy.text` imported but unused
  --> data_integrity_audit.py:13:30
   |
11 | from app import app, db
12 | from models import User, Expense
13 | from sqlalchemy import func, text
   |                              ^^^^
14 | from datetime import datetime, timezone, timedelta
15 | import hashlib
   |
help: Remove unused import: `sqlalchemy.text`

F401 [*] `datetime.timedelta` imported but unused
  --> data_integrity_audit.py:14:42
   |
12 | from models import User, Expense
13 | from sqlalchemy import func, text
14 | from datetime import datetime, timezone, timedelta
   |                                          ^^^^^^^^^
15 | import hashlib
   |
help: Remove unused import: `datetime.timedelta`

F401 [*] `hashlib` imported but unused
  --> data_integrity_audit.py:15:8
   |
13 | from sqlalchemy import func, text
14 | from datetime import datetime, timezone, timedelta
15 | import hashlib
   |        ^^^^^^^
16 |
17 | def audit_user_isolation():
   |
help: Remove unused import: `hashlib`

F541 [*] f-string without any placeholders
  --> data_integrity_audit.py:56:27
   |
54 |                 # Verify response doesn't contain other users' data
55 |                 if "Error" not in result.get('text', ''):
56 |                     print(f"   ✅ Category breakdown isolated correctly")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
57 |                 else:
58 |                     issues.append(f"❌ Category breakdown error for user {user_id[:16]}")
   |
help: Remove extraneous `f` prefix

F841 Local variable `food_variations` is assigned to but never used
   --> data_integrity_audit.py:233:9
    |
231 | …     # Check for potential category mapping issues
232 | …     transport_variations = [cat for cat, count in categories if cat and ('transport' in cat.lower() or 'ride' in cat.lower() or 'ta…
233 | …     food_variations = [cat for cat, count in categories if cat and 'food' in cat.lower()]
    |       ^^^^^^^^^^^^^^^
234 | …     
235 | …     if len(transport_variations) > 3:
    |
help: Remove assignment to unused variable `food_variations`

F541 [*] f-string without any placeholders
   --> data_integrity_audit.py:275:11
    |
274 |     # Final report
275 |     print(f"\n📋 AUDIT SUMMARY")
    |           ^^^^^^^^^^^^^^^^^^^^^
276 |     print("=" * 30)
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> data_integrity_audit.py:282:15
    |
280 |         for i, issue in enumerate(all_issues, 1):
281 |             print(f"{i}. {issue}")
282 |         print(f"\n🚨 DATA INTEGRITY COMPROMISED - IMMEDIATE ACTION REQUIRED")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
283 |         return False
284 |     else:
    |
help: Remove extraneous `f` prefix

F401 [*] `hashlib` imported but unused
  --> data_integrity_fix.py:12:8
   |
10 | from app import app, db
11 | from models import User, Expense
12 | import hashlib
   |        ^^^^^^^
13 | from datetime import datetime, timezone
14 | from sqlalchemy import text
   |
help: Remove unused import: `hashlib`

F541 [*] f-string without any placeholders
  --> data_integrity_fix.py:93:27
   |
91 |                     db.session.delete(user)
92 |                     fixes_applied += 1
93 |                     print(f"      ✅ Removed invalid unused user record")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
94 |         
95 |         if fixes_applied > 0:
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> data_integrity_fix.py:162:19
    |
161 |         if validate_fixes():
162 |             print(f"\\n✅ ALL DATA INTEGRITY ISSUES RESOLVED")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
163 |             print(f"✅ Applied {total_fixes} fixes successfully")
164 |             print("✅ Financial data integrity restored")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> data_integrity_fix.py:167:19
    |
165 |             return True
166 |         else:
167 |             print(f"\\n❌ Some issues remain after fixes")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
168 |             return False
    |
help: Remove extraneous `f` prefix

F401 [*] `datetime.datetime` imported but unused
  --> data_integrity_monitoring.py:12:22
   |
10 | from app import app, db
11 | from sqlalchemy import text
12 | from datetime import datetime, timezone
   |                      ^^^^^^^^
13 |
14 | def create_integrity_checks():
   |
help: Remove unused import

F401 [*] `datetime.timezone` imported but unused
  --> data_integrity_monitoring.py:12:32
   |
10 | from app import app, db
11 | from sqlalchemy import text
12 | from datetime import datetime, timezone
   |                                ^^^^^^^^
13 |
14 | def create_integrity_checks():
   |
help: Remove unused import

F541 [*] f-string without any placeholders
   --> data_integrity_monitoring.py:104:15
    |
102 |         """)).first()
103 |         
104 |         print(f"📈 SYSTEM STATISTICS:")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^
105 |         print(f"   Total users: {stats.total_users}")
106 |         print(f"   Total expenses: {stats.total_expenses}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> data_integrity_monitoring.py:111:15
    |
110 |         # Integrity status
111 |         print(f"\n🛡️ INTEGRITY STATUS:")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^
112 |         integrity_status = db.session.execute(text("SELECT * FROM data_integrity_status")).fetchall()
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> data_integrity_monitoring.py:122:15
    |
121 |         # User isolation verification
122 |         print(f"\n🔒 USER ISOLATION VERIFICATION:")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
123 |         
124 |         # Sample test for cross-contamination
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> data_integrity_monitoring.py:146:15
    |
145 |         # Final assessment
146 |         print(f"\n🎯 FINAL ASSESSMENT:")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^
147 |         if all_clean and isolation_verified:
148 |             print("   ✅ DATA INTEGRITY EXCELLENT")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> debug_patterns.py:48:11
   |
47 |     # Analyze coaching pattern regex
48 |     print(f"\n🔧 Current Coaching Regex:")
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
49 |     print(f"EN: {patterns.coaching_verbs_en.pattern}")
50 |     print(f"BN: {patterns.coaching_verbs_bn.pattern}")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> debug_patterns.py:61:11
   |
59 |     ]
60 |     
61 |     print(f"\n🧪 Individual Coaching Tests:")
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
62 |     for phrase in coaching_phrases:
63 |         match = patterns.coaching_verbs_en.search(phrase.lower())
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> debug_patterns.py:67:11
   |
66 |     # Suggest improved patterns
67 |     print(f"\n💡 Pattern Improvement Suggestions:")
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
68 |     
69 |     # More comprehensive coaching pattern
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> debug_patterns.py:79:11
   |
77 |     improved_regex = re.compile(improved_coaching, re.IGNORECASE)
78 |     
79 |     print(f"\n✨ Testing Improved Pattern:")
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
80 |     for phrase in coaching_phrases:
81 |         match = improved_regex.search(phrase.lower())
   |
help: Remove extraneous `f` prefix

F401 [*] `utils.routing_policy.DeterministicRouter` imported but unused
  --> debug_routing_test.py:12:42
   |
11 |     with app.app_context():
12 |         from utils.routing_policy import DeterministicRouter, RoutingSignals
   |                                          ^^^^^^^^^^^^^^^^^^^
13 |         from utils.routing_policy import deterministic_router
   |
help: Remove unused import

F401 [*] `utils.routing_policy.RoutingSignals` imported but unused
  --> debug_routing_test.py:12:63
   |
11 |     with app.app_context():
12 |         from utils.routing_policy import DeterministicRouter, RoutingSignals
   |                                                               ^^^^^^^^^^^^^^
13 |         from utils.routing_policy import deterministic_router
   |
help: Remove unused import

F541 [*] f-string without any placeholders
  --> debug_routing_test.py:24:15
   |
22 |         # Extract signals step by step
23 |         signals = deterministic_router.extract_signals(test_input, "debug_user")
24 |         print(f"   Raw signals:")
   |               ^^^^^^^^^^^^^^^^^^
25 |         print(f"   - has_money: {signals.has_money}")
26 |         print(f"   - has_first_person_spent_verb: {signals.has_first_person_spent_verb}")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> debug_routing_test.py:45:19
   |
43 |             print(f"   - Matched patterns: {routing_result.matched_patterns}")
44 |         else:
45 |             print(f"   ❌ Deterministic routing not activated!")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
46 |             
47 |         # Test Case 2: Bengali clarification
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> debug_routing_test.py:65:19
   |
63 |             print(f"   - Routing result: {routing_result2.intent.value}")
64 |         else:
65 |             print(f"   ❌ Deterministic routing not activated!")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
66 |             
67 |         # Test Case 3: Analysis query
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> debug_routing_test.py:85:19
   |
83 |             print(f"   - Routing result: {routing_result3.intent.value}")
84 |         else:
85 |             print(f"   ❌ Deterministic routing not activated!")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
86 |
87 |         # Check the configuration
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> debug_routing_test.py:88:15
   |
87 |         # Check the configuration
88 |         print(f"\n🔧 CONFIGURATION CHECK")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
89 |         print(f"   - Router flags: {deterministic_router.flags}")
90 |         print(f"   - Routing scope: {getattr(deterministic_router.flags, 'routing_scope', 'not_set')}")
   |
help: Remove extraneous `f` prefix

F401 [*] `models.User` imported but unused
  --> deep_user_isolation_test.py:11:20
   |
10 | from app import app, db
11 | from models import User, Expense
   |                    ^^^^
12 | from handlers.category_breakdown import handle_category_breakdown
13 | from sqlalchemy import func
   |
help: Remove unused import: `models.User`

F401 [*] `random` imported but unused
  --> deep_user_isolation_test.py:14:8
   |
12 | from handlers.category_breakdown import handle_category_breakdown
13 | from sqlalchemy import func
14 | import random
   |        ^^^^^^
15 |
16 | def test_cross_user_contamination():
   |
help: Remove unused import: `random`

F841 Local variable `user_amounts` is assigned to but never used
  --> deep_user_isolation_test.py:40:13
   |
39 |             user_categories = set(exp.category for exp in user_expenses if exp.category)
40 |             user_amounts = [float(exp.amount) for exp in user_expenses]
   |             ^^^^^^^^^^^^
41 |             
42 |             # Test category breakdown
   |
help: Remove assignment to unused variable `user_amounts`

F541 [*] f-string without any placeholders
  --> deep_user_isolation_test.py:65:19
   |
64 |             # Skip insights test for now - focusing on core data isolation
65 |             print(f"   ✅ Core isolation tests passed (insights test skipped)")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
66 |         
67 |         return contamination_issues
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> deep_user_isolation_test.py:125:11
    |
123 |     issues.extend(test_concurrent_user_access())
124 |     
125 |     print(f"\n📊 DEEP TESTING RESULTS")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
126 |     print("=" * 25)
    |
help: Remove extraneous `f` prefix

E401 [*] Multiple imports on one line
 --> demo_cleanup.py:2:1
  |
1 | #!/usr/bin/env python3
2 | import os, sys
  | ^^^^^^^^^^^^^^
3 | import requests
4 | from datetime import datetime, timedelta
  |
help: Split imports

F401 [*] `json` imported but unused
  --> demo_smoke.py:9:8
   |
 7 | import os
 8 | import sys
 9 | import json
   |        ^^^^
10 | import requests
11 | from datetime import datetime
   |
help: Remove unused import: `json`

F541 [*] f-string without any placeholders
  --> expense_log_contract_tests.py:37:19
   |
36 |         if actual_intent == expected_intent:
37 |             print(f"  ✅ PASS")
   |                   ^^^^^^^^^^^^
38 |             tests_passed += 1
39 |         else:
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> expense_log_contract_tests.py:40:19
   |
38 |             tests_passed += 1
39 |         else:
40 |             print(f"  ❌ FAIL")
   |                   ^^^^^^^^^^^^
41 |         
42 |         # Contract Test 2: BN expense without verb → CLARIFY_EXPENSE
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> expense_log_contract_tests.py:58:19
   |
57 |         if actual_intent == expected_intent:
58 |             print(f"  ✅ PASS")
   |                   ^^^^^^^^^^^^
59 |             tests_passed += 1
60 |         else:
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> expense_log_contract_tests.py:61:19
   |
59 |             tests_passed += 1
60 |         else:
61 |             print(f"  ❌ FAIL")
   |                   ^^^^^^^^^^^^
62 |         
63 |         # Contract Test 3: Explicit analysis wins even with money
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> expense_log_contract_tests.py:78:19
   |
77 |         if actual_intent == expected_intent:
78 |             print(f"  ✅ PASS")
   |                   ^^^^^^^^^^^^
79 |             tests_passed += 1
80 |         else:
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> expense_log_contract_tests.py:81:19
   |
79 |             tests_passed += 1
80 |         else:
81 |             print(f"  ❌ FAIL")
   |                   ^^^^^^^^^^^^
82 |         
83 |         # Contract Test 4: Coaching stays coaching
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> expense_log_contract_tests.py:100:19
    |
 99 |         if actual_intent == expected_intent:
100 |             print(f"  ✅ PASS")
    |                   ^^^^^^^^^^^^
101 |             tests_passed += 1
102 |         else:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> expense_log_contract_tests.py:103:19
    |
101 |             tests_passed += 1
102 |         else:
103 |             print(f"  ❌ FAIL")
    |                   ^^^^^^^^^^^^
104 |         
105 |         # Contract Test 5: No false positives
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> expense_log_contract_tests.py:121:19
    |
120 |         if actual_intent != not_expected_intent:
121 |             print(f"  ✅ PASS")
    |                   ^^^^^^^^^^^^
122 |             tests_passed += 1
123 |         else:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> expense_log_contract_tests.py:124:19
    |
122 |             tests_passed += 1
123 |         else:
124 |             print(f"  ❌ FAIL")
    |                   ^^^^^^^^^^^^
125 |         
126 |         # Final Summary
    |
help: Remove extraneous `f` prefix

F401 [*] `utils.ai_adapter_v2.production_ai_adapter` imported but unused
  --> expense_log_handlers.py:27:41
   |
25 |         # Extract expense details using existing parsers
26 |         from parsers.expense import parse_amount_currency_category
27 |         from utils.ai_adapter_v2 import production_ai_adapter
   |                                         ^^^^^^^^^^^^^^^^^^^^^
28 |         
29 |         # Parse expense using existing system
   |
help: Remove unused import: `utils.ai_adapter_v2.production_ai_adapter`

F401 [*] `datetime.datetime` imported but unused
  --> expense_log_handlers.py:36:38
   |
34 |             try:
35 |                 import backend_assistant as ba
36 |                 from datetime import datetime
   |                                      ^^^^^^^^
37 |                 import uuid
   |
help: Remove unused import: `datetime.datetime`

F401 [*] `uuid` imported but unused
  --> expense_log_handlers.py:37:24
   |
35 |                 import backend_assistant as ba
36 |                 from datetime import datetime
37 |                 import uuid
   |                        ^^^^
38 |                 
39 |                 # Generate proper metadata for unified function
   |
help: Remove unused import: `uuid`

E401 [*] Multiple imports on one line
 --> fb_client.py:1:1
  |
1 | import os, re, requests
  | ^^^^^^^^^^^^^^^^^^^^^^^
2 |
3 | PAGE_TOKEN = os.environ["FACEBOOK_PAGE_ACCESS_TOKEN"]
  |
help: Split imports

F401 [*] `typing.List` imported but unused
  --> final_100_percent_validation.py:9:26
   |
 7 | import json
 8 | import time
 9 | from typing import Dict, List, Any
   |                          ^^^^
10 | from app import app
   |
help: Remove unused import: `typing.List`

F841 Local variable `normalized` is assigned to but never used
   --> final_100_percent_validation.py:587:13
    |
586 |             # Test basic functionality
587 |             normalized = normalize_for_processing("test ৫০০ টাকা")
    |             ^^^^^^^^^^
588 |             digits_converted = to_en_digits("৫০০")
589 |             signals = extract_signals("test message")
    |
help: Remove assignment to unused variable `normalized`

F841 Local variable `digits_converted` is assigned to but never used
   --> final_100_percent_validation.py:588:13
    |
586 |             # Test basic functionality
587 |             normalized = normalize_for_processing("test ৫০০ টাকা")
588 |             digits_converted = to_en_digits("৫০০")
    |             ^^^^^^^^^^^^^^^^
589 |             signals = extract_signals("test message")
590 |             money = extract_money_mentions("৳500")
    |
help: Remove assignment to unused variable `digits_converted`

F841 Local variable `signals` is assigned to but never used
   --> final_100_percent_validation.py:589:13
    |
587 |             normalized = normalize_for_processing("test ৫০০ টাকা")
588 |             digits_converted = to_en_digits("৫০০")
589 |             signals = extract_signals("test message")
    |             ^^^^^^^
590 |             money = extract_money_mentions("৳500")
591 |             sanitized = InputSanitizer.sanitize_user_input("test")
    |
help: Remove assignment to unused variable `signals`

F841 Local variable `money` is assigned to but never used
   --> final_100_percent_validation.py:590:13
    |
588 |             digits_converted = to_en_digits("৫০০")
589 |             signals = extract_signals("test message")
590 |             money = extract_money_mentions("৳500")
    |             ^^^^^
591 |             sanitized = InputSanitizer.sanitize_user_input("test")
592 |             ai_adapter = AIAdapterNeverEmpty(stub_mode=True)
    |
help: Remove assignment to unused variable `money`

F841 Local variable `sanitized` is assigned to but never used
   --> final_100_percent_validation.py:591:13
    |
589 |             signals = extract_signals("test message")
590 |             money = extract_money_mentions("৳500")
591 |             sanitized = InputSanitizer.sanitize_user_input("test")
    |             ^^^^^^^^^
592 |             ai_adapter = AIAdapterNeverEmpty(stub_mode=True)
    |
help: Remove assignment to unused variable `sanitized`

F841 Local variable `ai_adapter` is assigned to but never used
   --> final_100_percent_validation.py:592:13
    |
590 |             money = extract_money_mentions("৳500")
591 |             sanitized = InputSanitizer.sanitize_user_input("test")
592 |             ai_adapter = AIAdapterNeverEmpty(stub_mode=True)
    |             ^^^^^^^^^^
593 |             
594 |             return {
    |
help: Remove assignment to unused variable `ai_adapter`

F541 [*] f-string without any placeholders
   --> final_100_percent_validation.py:781:15
    |
779 | …     }
780 | …     
781 | …     print(f"\n🎯 FINAL 100% SUCCESS ASSESSMENT")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
782 | …     print("=" * 60)
783 | …     print(f"Data Handling: {systems['data_handling'].get('success_rate', 0):.1f}% ({systems['data_handling'].get('critical_bengali_…
    |
help: Remove extraneous `f` prefix

F401 [*] `utils.identity.psid_hash` imported but unused
  --> final_comprehensive_uat.py:76:55
   |
74 |         # Test 2: Identity Hashing (Fixed)
75 |         try:
76 |             from utils.identity import ensure_hashed, psid_hash
   |                                                       ^^^^^^^^^
77 |             
78 |             test_psid = "final_uat_user_12345"
   |
help: Remove unused import: `utils.identity.psid_hash`

F541 [*] f-string without any placeholders
   --> final_comprehensive_uat.py:388:15
    |
386 |         final_success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
387 |         
388 |         print(f"\n📈 OVERALL RESULTS:")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^
389 |         print(f"   Total Tests: {passed_tests}/{total_tests}")
390 |         print(f"   Success Rate: {final_success_rate:.1f}%")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> final_comprehensive_uat.py:391:15
    |
389 |         print(f"   Total Tests: {passed_tests}/{total_tests}")
390 |         print(f"   Success Rate: {final_success_rate:.1f}%")
391 |         print(f"   Target: 100.0%")
    |               ^^^^^^^^^^^^^^^^^^^^
392 |         print(f"   Gap: {100.0 - final_success_rate:.1f} percentage points")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> final_comprehensive_uat.py:408:15
    |
406 |             recommendation = "Additional fixes required before deployment"
407 |         
408 |         print(f"\n🚀 DEPLOYMENT RECOMMENDATION:")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
409 |         print(f"   Status: {deployment_status}")
410 |         print(f"   Recommendation: {recommendation}")
    |
help: Remove extraneous `f` prefix

F401 [*] `models.User` imported but unused
  --> final_contamination_fix_validation.py:13:29
   |
11 | from utils.ai_adapter_v2 import production_ai_adapter
12 | from utils.ai_contamination_monitor import ai_contamination_monitor
13 | from models import Expense, User
   |                             ^^^^
14 | import threading
15 | import time
   |
help: Remove unused import: `models.User`

F401 [*] `threading` imported but unused
  --> final_contamination_fix_validation.py:14:8
   |
12 | from utils.ai_contamination_monitor import ai_contamination_monitor
13 | from models import Expense, User
14 | import threading
   |        ^^^^^^^^^
15 | import time
16 | from concurrent.futures import ThreadPoolExecutor
   |
help: Remove unused import: `threading`

F401 [*] `time` imported but unused
  --> final_contamination_fix_validation.py:15:8
   |
13 | from models import Expense, User
14 | import threading
15 | import time
   |        ^^^^
16 | from concurrent.futures import ThreadPoolExecutor
17 | from datetime import datetime, timezone
   |
help: Remove unused import: `time`

F541 [*] f-string without any placeholders
  --> final_contamination_fix_validation.py:52:15
   |
50 |         db.session.commit()
51 |         
52 |         print(f"   User 1: ৳1000 food + ৳500 transport = ৳1500 total")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
53 |         print(f"   User 2: ৳2000 food + ৳300 entertainment = ৳2300 total")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> final_contamination_fix_validation.py:53:15
   |
52 |         print(f"   User 1: ৳1000 food + ৳500 transport = ৳1500 total")
53 |         print(f"   User 2: ৳2000 food + ৳300 entertainment = ৳2300 total")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
54 |         
55 |         # Test 1: Isolated Session Per Request
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> final_contamination_fix_validation.py:56:15
   |
55 |         # Test 1: Isolated Session Per Request
56 |         print(f"\n🔒 TEST 1: Session Isolation")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
57 |         
58 |         user1_data = {
   |
help: Remove extraneous `f` prefix

F841 Local variable `results` is assigned to but never used
  --> final_contamination_fix_validation.py:77:9
   |
76 |         # Test concurrent requests
77 |         results = []
   |         ^^^^^^^
78 |         
79 |         def test_user1():
   |
help: Remove assignment to unused variable `results`

F541 [*] f-string without any placeholders
   --> final_contamination_fix_validation.py:121:15
    |
120 |         # Test 2: Contamination Monitor
121 |         print(f"\n🔍 TEST 2: Contamination Monitor Active")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
122 |         print(f"   Active requests tracked: {len(ai_contamination_monitor.active_requests)}")
123 |         print(f"   Response fingerprints: {len(ai_contamination_monitor.response_fingerprints)}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> final_contamination_fix_validation.py:127:15
    |
126 |         # Test 3: User ID Logging
127 |         print(f"\n📝 TEST 3: User ID Isolation Logging")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
128 |         print("   ✅ User IDs are logged with each request for audit trail")
129 |         print("   ✅ Request IDs generated for contamination tracking")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> final_contamination_fix_validation.py:141:11
    |
139 | def test_safeguard_features():
140 |     """Test individual safeguard features"""
141 |     print(f"\n🛡️  INDIVIDUAL SAFEGUARD FEATURES TEST")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
142 |     print("=" * 45)
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> final_contamination_fix_validation.py:173:11
    |
171 |     features_working = test_safeguard_features()
172 |     
173 |     print(f"\n📋 FINAL SECURITY ASSESSMENT")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
174 |     print("=" * 35)
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> final_contamination_fix_validation.py:182:15
    |
180 |         print("✅ Per-request session isolation implemented")
181 |         print("✅ User isolation logging active for audit trails")
182 |         print(f"\n🛡️  FINANCIAL DATA INTEGRITY SECURED")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
183 |         sys.exit(0)
184 |     else:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> final_por_v1_1_validation.py:77:23
   |
76 |             if actual == test['expected']:
77 |                 print(f"   ✅ PASS")
   |                       ^^^^^^^^^^^^^
78 |                 passed += 1
79 |             else:
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> final_por_v1_1_validation.py:80:23
   |
78 |                 passed += 1
79 |             else:
80 |                 print(f"   ❌ FAIL")
   |                       ^^^^^^^^^^^^^
81 |         
82 |         print(f"\nContract Results: {passed}/{len(tests)}")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> final_por_v1_1_validation.py:141:27
    |
139 |                 # Basic validation - at least we got a response
140 |                 if response and len(response) > 10:
141 |                     print(f"   ✅ PASS - Response generated")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
142 |                     passed += 1
143 |                 else:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> final_por_v1_1_validation.py:144:27
    |
142 |                     passed += 1
143 |                 else:
144 |                     print(f"   ❌ FAIL - No meaningful response")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
145 |                     
146 |             except Exception as e:
    |
help: Remove extraneous `f` prefix

F401 [*] `time` imported but unused
 --> finbrain/ops/perf.py:5:8
  |
3 | """
4 |
5 | import time
  |        ^^^^
6 | from typing import Optional, List
  |
help: Remove unused import: `time`

F401 [*] `typing.List` imported but unused
  --> fixed_comprehensive_audit.py:11:26
   |
 9 | import uuid
10 | from datetime import datetime, date
11 | from typing import Dict, List, Any, Optional
   |                          ^^^^
12 | from app import app, db
13 | from sqlalchemy import text
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> fixed_comprehensive_audit.py:11:37
   |
 9 | import uuid
10 | from datetime import datetime, date
11 | from typing import Dict, List, Any, Optional
   |                                     ^^^^^^^^
12 | from app import app, db
13 | from sqlalchemy import text
   |
help: Remove unused import

F541 [*] f-string without any placeholders
   --> fixed_comprehensive_audit.py:638:15
    |
637 |         # Print honest assessment
638 |         print(f"\n📊 HONEST COMPREHENSIVE AUDIT RESULTS")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
639 |         print("=" * 60)
640 |         print(f"Overall Success Rate: {overall_success_rate:.1f}%")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> fixed_comprehensive_audit.py:644:15
    |
642 |         print(f"Deployment Ready: {'✅ YES' if deployment_ready else '❌ NO'}")
643 |         
644 |         print(f"\nDetailed Results:")
    |               ^^^^^^^^^^^^^^^^^^^^^^
645 |         for name, phase in phases:
646 |             summary = phase.get("summary", {})
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> fixed_comprehensive_audit.py:652:19
    |
651 |         if deployment_ready:
652 |             print(f"\n🎉 DEPLOYMENT APPROVED")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
653 |             print(f"   • {phase_successes}/{total_phases} critical systems validated")
654 |             print(f"   • Core routing and data handling working")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> fixed_comprehensive_audit.py:654:19
    |
652 |             print(f"\n🎉 DEPLOYMENT APPROVED")
653 |             print(f"   • {phase_successes}/{total_phases} critical systems validated")
654 |             print(f"   • Core routing and data handling working")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
655 |             print(f"   • Ready for Phase 1 zero-risk rollout")
656 |             if critical_failures:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> fixed_comprehensive_audit.py:655:19
    |
653 |             print(f"   • {phase_successes}/{total_phases} critical systems validated")
654 |             print(f"   • Core routing and data handling working")
655 |             print(f"   • Ready for Phase 1 zero-risk rollout")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
656 |             if critical_failures:
657 |                 print(f"   ⚠️ Monitor: {', '.join(critical_failures)}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> fixed_comprehensive_audit.py:659:19
    |
657 |                 print(f"   ⚠️ Monitor: {', '.join(critical_failures)}")
658 |         else:
659 |             print(f"\n🚫 DEPLOYMENT BLOCKED")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
660 |             print(f"   • Critical failures: {', '.join(critical_failures)}")
661 |             print(f"   • Must achieve 5/6 phases passing")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> fixed_comprehensive_audit.py:661:19
    |
659 |             print(f"\n🚫 DEPLOYMENT BLOCKED")
660 |             print(f"   • Critical failures: {', '.join(critical_failures)}")
661 |             print(f"   • Must achieve 5/6 phases passing")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
662 |             print(f"   • Fix failures before deployment")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> fixed_comprehensive_audit.py:662:19
    |
660 |             print(f"   • Critical failures: {', '.join(critical_failures)}")
661 |             print(f"   • Must achieve 5/6 phases passing")
662 |             print(f"   • Fix failures before deployment")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
663 |     
664 |     def _cleanup_test_data(self):
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> fixed_comprehensive_audit.py:672:19
    |
670 |             """), {"user_id": self.test_user_id})
671 |             db.session.commit()
672 |             print(f"\n🧹 Test data cleaned up")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
673 |         except Exception as e:
674 |             print(f"⚠️ Cleanup warning: {e}")
    |
help: Remove extraneous `f` prefix

F401 [*] `utils.identity.ensure_hashed` imported but unused
   --> focused_e2e_uat.py:161:40
    |
159 |         try:
160 |             from utils.db import save_expense, get_user_expenses
161 |             from utils.identity import ensure_hashed
    |                                        ^^^^^^^^^^^^^
162 |             
163 |             # Test expense storage
    |
help: Remove unused import: `utils.identity.ensure_hashed`

F541 [*] f-string without any placeholders
   --> focused_e2e_uat.py:326:23
    |
324 |             failed_tests = [test for test in tests if not test.get("passed", False)]
325 |             if failed_tests:
326 |                 print(f"   ❌ Failed Tests:")
    |                       ^^^^^^^^^^^^^^^^^^^^^^
327 |                 for failed in failed_tests:
328 |                     error_msg = failed.get("error", "Test failed")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> focused_e2e_uat.py:332:15
    |
331 |         # Overall assessment
332 |         print(f"\n📈 OVERALL ASSESSMENT")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^
333 |         print(f"   Total Tests: {passed_tests}/{total_tests}")
334 |         print(f"   Success Rate: {success_rate:.1f}%")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> focused_e2e_uat.py:350:15
    |
348 |             recommendation = "Critical failures detected - requires fixes"
349 |         
350 |         print(f"\n🚀 DEPLOYMENT RECOMMENDATION")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
351 |         print(f"   Status: {deployment_status}")
352 |         print(f"   Recommendation: {recommendation}")
    |
help: Remove extraneous `f` prefix

F401 [*] `re` imported but unused
 --> handlers/category_breakdown.py:6:8
  |
4 | """
5 |
6 | import re
  |        ^^
7 | from datetime import datetime, timedelta, timezone
8 | from typing import Dict, Optional, Tuple
  |
help: Remove unused import: `re`

F401 [*] `datetime.datetime` imported but unused
 --> handlers/challenge.py:7:22
  |
6 | import logging
7 | from datetime import datetime, date, timedelta
  |                      ^^^^^^^^
8 | from typing import Dict, Any, Optional
9 | from db_base import db
  |
help: Remove unused import: `datetime.datetime`

F401 [*] `datetime.datetime` imported but unused
  --> handlers/coaching.py:10:22
   |
 8 | import logging
 9 | from typing import Dict, Any, Optional, List
10 | from datetime import datetime
   |                      ^^^^^^^^
11 |
12 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `datetime.datetime`

F401 `utils.coaching_resilience.coaching_resilience` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> handlers/coaching.py:16:43
   |
14 | # Import hardening components
15 | try:
16 |     from utils.coaching_resilience import coaching_resilience
   |                                           ^^^^^^^^^^^^^^^^^^^
17 |     from utils.coaching_analytics import coaching_analytics
18 |     from utils.coaching_optimization import performance_monitor, coaching_cache
   |
help: Remove unused import: `utils.coaching_resilience.coaching_resilience`

F401 `utils.coaching_optimization.performance_monitor` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> handlers/coaching.py:18:45
   |
16 |     from utils.coaching_resilience import coaching_resilience
17 |     from utils.coaching_analytics import coaching_analytics
18 |     from utils.coaching_optimization import performance_monitor, coaching_cache
   |                                             ^^^^^^^^^^^^^^^^^^^
19 |     from utils.coaching_safeguards import coaching_circuit_breaker, feature_flag_manager
20 |     HARDENING_AVAILABLE = True
   |
help: Remove unused import

F401 `utils.coaching_optimization.coaching_cache` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> handlers/coaching.py:18:66
   |
16 |     from utils.coaching_resilience import coaching_resilience
17 |     from utils.coaching_analytics import coaching_analytics
18 |     from utils.coaching_optimization import performance_monitor, coaching_cache
   |                                                                  ^^^^^^^^^^^^^^
19 |     from utils.coaching_safeguards import coaching_circuit_breaker, feature_flag_manager
20 |     HARDENING_AVAILABLE = True
   |
help: Remove unused import

F401 [*] `utils.session.set_coaching_session` imported but unused
   --> handlers/coaching.py:261:57
    |
259 |     """
260 |     try:
261 |         from utils.session import get_coaching_session, set_coaching_session, delete_coaching_session
    |                                                         ^^^^^^^^^^^^^^^^^^^^
262 |         from utils.structured import log_structured_event
    |
help: Remove unused import: `utils.session.set_coaching_session`

F401 [*] `utils.structured.log_structured_event` imported but unused
   --> handlers/coaching.py:262:38
    |
260 |     try:
261 |         from utils.session import get_coaching_session, set_coaching_session, delete_coaching_session
262 |         from utils.structured import log_structured_event
    |                                      ^^^^^^^^^^^^^^^^^^^^
263 |         
264 |         session = get_coaching_session(psid_hash)
    |
help: Remove unused import: `utils.structured.log_structured_event`

F841 Local variable `last_question` is assigned to but never used
   --> handlers/coaching.py:270:9
    |
268 |         state = session.get('state')
269 |         turns = session.get('turns', 0)
270 |         last_question = session.get('last_question')
    |         ^^^^^^^^^^^^^
271 |         
272 |         # Check turn limit
    |
help: Remove assignment to unused variable `last_question`

F401 [*] `typing.Tuple` imported but unused
  --> handlers/expense.py:9:41
   |
 7 | import re
 8 | import time
 9 | from typing import Dict, Any, Optional, Tuple
   |                                         ^^^^^
10 | from datetime import datetime, timedelta
11 | from decimal import Decimal
   |
help: Remove unused import: `typing.Tuple`

F401 [*] `utils.identity.psid_hash` imported but unused
  --> handlers/expense.py:18:28
   |
16 | from utils.structured import log_correction_detected, log_correction_no_candidate, log_correction_duplicate, log_correction_applied
17 | from templates.replies import format_correction_no_candidate_reply, format_corrected_reply, format_correction_duplicate_reply
18 | from utils.identity import psid_hash
   |                            ^^^^^^^^^
19 |
20 | logger = logging.getLogger("handlers.expense")
   |
help: Remove unused import: `utils.identity.psid_hash`

F841 Local variable `start_time` is assigned to but never used
  --> handlers/expense.py:38:5
   |
36 |         Dict with response text, intent, category, and amount
37 |     """
38 |     start_time = time.time()
   |     ^^^^^^^^^^
39 |     
40 |     try:
   |
help: Remove assignment to unused variable `start_time`

F841 Local variable `expense_result` is assigned to but never used
   --> handlers/expense.py:209:9
    |
207 |         import backend_assistant as ba
208 |         # Create new expense using canonical add_expense
209 |         expense_result = ba.add_expense(
    |         ^^^^^^^^^^^^^^
210 |             user_id=psid_hash_val,
211 |             amount_minor=int(float(expense_data['amount']) * 100),
    |
help: Remove assignment to unused variable `expense_result`

F821 Undefined name `amount`
   --> handlers/expense.py:252:19
    |
250 |         'intent': 'log_single',
251 |         'category': expense_data['category'],
252 |         'amount': amount
    |                   ^^^^^^
253 |     }
    |

F821 Undefined name `new_expense`
   --> handlers/expense.py:474:52
    |
472 |         # Log successful correction
473 |         log_correction_applied(
474 |             psid_hash_val, mid, best_candidate.id, new_expense.id, 
    |                                                    ^^^^^^^^^^^
475 |             {"old_amount": old_amount, "new_amount": new_amount}
476 |         )
    |

F811 [*] Redefinition of unused `time` from line 56
  --> handlers/insight.py:67:20
   |
66 |             # Add request uniqueness to prevent AI response caching
67 |             import time
   |                    ^^^^
68 |             import random
69 |             request_uniqueness = f"{user_id}_{int(time.time())}_{random.randint(1000,9999)}"
   |
help: Remove definition: `time`

F401 [*] `typing.List` imported but unused
 --> handlers/logger.py:4:26
  |
2 | Expense logger handler: Logs expenses to database
3 | """
4 | from typing import Dict, List
  |                          ^^^^
5 | import logging
6 | import time
  |
help: Remove unused import: `typing.List`

F401 [*] `backend_assistant` imported but unused
 --> handlers/logger.py:8:29
  |
6 | import time
7 | from datetime import datetime
8 | import backend_assistant as ba
  |                             ^^
9 | from utils.security import hash_psid
  |
help: Remove unused import: `backend_assistant`

F811 [*] Redefinition of unused `ba` from line 8
  --> handlers/logger.py:19:33
   |
17 |     """
18 |     import uuid
19 |     import backend_assistant as ba
   |                                 ^^
20 |     
21 |     try:
   |
help: Remove definition: `ba`

F841 Local variable `correlation_id` is assigned to but never used
  --> handlers/logger.py:44:9
   |
43 |         # Generate correlation_id at edge for idempotency
44 |         correlation_id = str(uuid.uuid4())
   |         ^^^^^^^^^^^^^^
45 |         occurred_at = datetime.now()
46 |         source_message_id = f"chat_{int(time.time() * 1000000)}"
   |
help: Remove assignment to unused variable `correlation_id`

F841 Local variable `occurred_at` is assigned to but never used
  --> handlers/logger.py:45:9
   |
43 |         # Generate correlation_id at edge for idempotency
44 |         correlation_id = str(uuid.uuid4())
45 |         occurred_at = datetime.now()
   |         ^^^^^^^^^^^
46 |         source_message_id = f"chat_{int(time.time() * 1000000)}"
   |
help: Remove assignment to unused variable `occurred_at`

F401 [*] `typing.Tuple` imported but unused
 --> handlers/milestones.py:6:30
  |
5 | import logging
6 | from typing import Optional, Tuple
  |                              ^^^^^
7 | from datetime import datetime, timedelta, timezone, date
8 | from utils.structured import log_structured_event
  |
help: Remove unused import: `typing.Tuple`

F401 [*] `models.Expense` imported but unused
  --> handlers/milestones.py:24:43
   |
22 |     """
23 |     try:
24 |         from models import UserMilestone, Expense
   |                                           ^^^^^^^
25 |         from db_base import db
   |
help: Remove unused import: `models.Expense`

F401 [*] `models.Expense` imported but unused
  --> handlers/milestones.py:57:43
   |
55 |     """Check if user has achieved 3-day logging streak"""
56 |     try:
57 |         from models import UserMilestone, Expense
   |                                           ^^^^^^^
58 |         from db_base import db
   |
help: Remove unused import: `models.Expense`

F401 [*] `datetime.datetime` imported but unused
  --> handlers/reminders.py:9:22
   |
 7 | import re
 8 | from typing import Dict, Any, Optional
 9 | from datetime import datetime
   |                      ^^^^^^^^
10 |
11 | from db_base import db
   |
help: Remove unused import: `datetime.datetime`

F401 [*] `db_base.db` imported but unused
  --> handlers/reminders.py:11:21
   |
 9 | from datetime import datetime
10 |
11 | from db_base import db
   |                     ^^
12 | from models import User
13 | from utils.smart_reminders import schedule_reminder, cancel_reminders
   |
help: Remove unused import: `db_base.db`

F401 [*] `models.User` imported but unused
  --> handlers/reminders.py:12:20
   |
11 | from db_base import db
12 | from models import User
   |                    ^^^^
13 | from utils.smart_reminders import schedule_reminder, cancel_reminders
   |
help: Remove unused import: `models.User`

F401 [*] `decimal.Decimal` imported but unused
  --> handlers/report.py:8:21
   |
 6 | from typing import Dict
 7 | from datetime import datetime, timedelta, timezone
 8 | from decimal import Decimal
   |                     ^^^^^^^
 9 |
10 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `decimal.Decimal`

F401 [*] `uuid` imported but unused
  --> handlers/report.py:30:16
   |
28 |         from utils.feedback_context import set_feedback_context
29 |         from utils.performance_cache import performance_cache
30 |         import uuid
   |                ^^^^
31 |         
32 |         # Emit telemetry event
   |
help: Remove unused import: `uuid`

E722 Do not use bare `except`
   --> handlers/report.py:112:5
    |
110 |         # In future: query challenge status from database
111 |         return 7
112 |     except:
    |     ^^^^^^
113 |         return 7  # Safe fallback
    |

F541 [*] f-string without any placeholders
   --> handlers/report.py:133:25
    |
131 |                     # First-time user experience
132 |                     return (
133 |                         f"🌟 Welcome to FinBrain! You haven't logged any expenses yet. "
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
134 |                         f"Start by telling me about your spending - like 'bought coffee for ৳50' - "
135 |                         f"and I'll help you track your money story!"
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> handlers/report.py:134:25
    |
132 |                     return (
133 |                         f"🌟 Welcome to FinBrain! You haven't logged any expenses yet. "
134 |                         f"Start by telling me about your spending - like 'bought coffee for ৳50' - "
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
135 |                         f"and I'll help you track your money story!"
136 |                     )
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> handlers/report.py:135:25
    |
133 |                         f"🌟 Welcome to FinBrain! You haven't logged any expenses yet. "
134 |                         f"Start by telling me about your spending - like 'bought coffee for ৳50' - "
135 |                         f"and I'll help you track your money story!"
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
136 |                     )
137 |                 else:
    |
help: Remove extraneous `f` prefix

F401 [*] `app.app` imported but unused
  --> handlers/summary.py:48:21
   |
46 | def _totals_by_category(user_id: str, start: datetime, end: datetime):
47 |     """Get category totals for a date range - UNIFIED READ PATH (expenses table only)"""
48 |     from app import app, db
   |                     ^^^
49 |     from sqlalchemy import text
50 |     from datetime import timedelta
   |
help: Remove unused import: `app.app`

F401 [*] `datetime.timedelta` imported but unused
  --> handlers/summary.py:50:26
   |
48 |     from app import app, db
49 |     from sqlalchemy import text
50 |     from datetime import timedelta
   |                          ^^^^^^^^^
51 |     
52 |     # Use direct SQL query instead of prepared statement (fixed compatibility issue)
   |
help: Remove unused import: `datetime.timedelta`

F841 [*] Local variable `e` is assigned to but never used
  --> handlers/summary.py:72:25
   |
70 |             total = float(total_minor / 100)
71 |             return category_map, total
72 |     except Exception as e:
   |                         ^
73 |         # Continue to fallback query if this fails
74 |         pass
   |
help: Remove assignment to unused variable `e`

F401 [*] `models.Expense` imported but unused
   --> handlers/summary.py:102:28
    |
100 |     """
101 |     try:
102 |         from models import Expense
    |                            ^^^^^^^
103 |         from app import app, db
    |
help: Remove unused import: `models.Expense`

F401 [*] `os` imported but unused
  --> master_uat_audit.py:15:8
   |
13 | """
14 |
15 | import os
   |        ^^
16 | import sys
17 | import json
   |
help: Remove unused import: `os`

F401 [*] `datetime.timedelta` imported but unused
  --> master_uat_audit.py:21:32
   |
19 | import uuid
20 | import traceback
21 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
22 | from typing import Dict, List, Any, Tuple, Optional
23 | from dataclasses import dataclass, asdict
   |
help: Remove unused import: `datetime.timedelta`

F401 [*] `typing.Tuple` imported but unused
  --> master_uat_audit.py:22:37
   |
20 | import traceback
21 | from datetime import datetime, timedelta
22 | from typing import Dict, List, Any, Tuple, Optional
   |                                     ^^^^^
23 | from dataclasses import dataclass, asdict
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> master_uat_audit.py:22:44
   |
20 | import traceback
21 | from datetime import datetime, timedelta
22 | from typing import Dict, List, Any, Tuple, Optional
   |                                            ^^^^^^^^
23 | from dataclasses import dataclass, asdict
   |
help: Remove unused import

F841 Local variable `total_cases` is assigned to but never used
   --> master_uat_audit.py:218:13
    |
217 |             money_score = 0
218 |             total_cases = len(positive_cases) + len(negative_cases)
    |             ^^^^^^^^^^^
219 |             
220 |             # Test positive cases (should detect money)
    |
help: Remove assignment to unused variable `total_cases`

F541 [*] f-string without any placeholders
   --> master_uat_audit.py:234:27
    |
232 |                           "PASS" if money_score >= 80 else "FAIL",
233 |                           money_score, exec_time,
234 |                           f"Bengali + English detection accuracy")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
235 |             
236 |         except Exception as e:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> master_uat_audit.py:383:27
    |
381 |                           "PASS" if rate_limit_score >= 70 else "WARNING",
382 |                           rate_limit_score, exec_time,
383 |                           f"AI rate limiting active")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
384 |             
385 |         except Exception as e:
    |
help: Remove extraneous `f` prefix

F401 [*] `models.User` imported but unused
   --> master_uat_audit.py:543:32
    |
541 |         try:
542 |             from app import app, db
543 |             from models import User, Expense
    |                                ^^^^
544 |             from utils.db import save_expense
545 |             from utils.identity import psid_hash
    |
help: Remove unused import: `models.User`

F841 Local variable `result` is assigned to but never used
   --> master_uat_audit.py:643:25
    |
641 |                 for table in tables_to_check:
642 |                     try:
643 |                         result = db.session.execute(f"SELECT 1 FROM {table} LIMIT 1")
    |                         ^^^^^^
644 |                         existing_tables += 1
645 |                     except Exception:
    |
help: Remove assignment to unused variable `result`

F401 [*] `models.User` imported but unused
   --> master_uat_audit.py:683:32
    |
681 |         try:
682 |             from app import app, db
683 |             from models import User, Expense
    |                                ^^^^
684 |             from utils.identity import psid_hash
    |
help: Remove unused import: `models.User`

F401 [*] `utils.identity.psid_hash` imported but unused
   --> master_uat_audit.py:684:40
    |
682 |             from app import app, db
683 |             from models import User, Expense
684 |             from utils.identity import psid_hash
    |                                        ^^^^^^^^^
685 |             
686 |             with app.app_context():
    |
help: Remove unused import: `utils.identity.psid_hash`

F401 [*] `deep_user_isolation_test.test_cross_user_contamination` imported but unused
   --> master_uat_audit.py:778:50
    |
776 |         try:
777 |             # Run existing deep isolation test
778 |             from deep_user_isolation_test import test_cross_user_contamination
    |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
779 |             
780 |             # Capture the test output (simplified)
    |
help: Remove unused import: `deep_user_isolation_test.test_cross_user_contamination`

F401 [*] `models.User` imported but unused
   --> master_uat_audit.py:819:32
    |
817 |         try:
818 |             from app import app, db
819 |             from models import User, Expense
    |                                ^^^^
820 |             
821 |             with app.app_context():
    |
help: Remove unused import: `models.User`

F401 [*] `models.User` imported but unused
   --> master_uat_audit.py:919:32
    |
918 |         try:
919 |             from models import User, Expense
    |                                ^^^^
920 |             from app import app, db
    |
help: Remove unused import: `models.User`

F541 [*] f-string without any placeholders
   --> milestone_focused_audit.py:353:11
    |
351 |     summary = results.get("summary", {})
352 |     
353 |     print(f"\n📊 EXECUTIVE SUMMARY")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^
354 |     print(f"Overall Status: {summary.get('overall_status', 'UNKNOWN')}")
355 |     print(f"Pass Rate: {summary.get('pass_rate', 0):.1f}% ({summary.get('passed_tests', 0)}/{summary.get('total_tests', 0)} tests)")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> milestone_focused_audit.py:358:11
    |
356 |     print(f"Deployment Ready: {'✅ YES' if summary.get('deployment_ready', False) else '❌ NO'}")
357 |     
358 |     print(f"\n🔍 DETAILED RESULTS")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^
359 |     print("-" * 30)
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> milestone_focused_audit.py:369:15
    |
367 |     # Critical error handling
368 |     if "critical_error" in results:
369 |         print(f"\n🚨 CRITICAL ERROR")
    |               ^^^^^^^^^^^^^^^^^^^^^^
370 |         print(f"Error: {results['critical_error']['error']}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> milestone_focused_audit.py:373:11
    |
372 |     # Deployment recommendation
373 |     print(f"\n💡 DEPLOYMENT RECOMMENDATION")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
374 |     print("-" * 35)
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> milestone_focused_audit.py:401:11
    |
399 |         json.dump(results, f, indent=2, default=str)
400 |     
401 |     print(f"\n💾 Audit results saved to: milestone_focused_audit.json")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
402 |     
403 |     # Exit with appropriate code
    |
help: Remove extraneous `f` prefix

F401 [*] `datetime.time` imported but unused
 --> models.py:2:38
  |
1 | from db_base import db
2 | from datetime import datetime, date, time
  |                                      ^^^^
3 | from sqlalchemy import JSON
  |
help: Remove unused import: `datetime.time`

F401 `models_pca.TransactionEffective` imported but unused; consider using `importlib.util.find_spec` to test for availability
 --> models.py:7:28
  |
5 | # Import PCA overlay models
6 | try:
7 |     from models_pca import TransactionEffective, UserCorrection, UserRule, InferenceSnapshot
  |                            ^^^^^^^^^^^^^^^^^^^^
8 | except ImportError:
9 |     # PCA models not available yet
  |
help: Remove unused import

F401 `models_pca.UserCorrection` imported but unused; consider using `importlib.util.find_spec` to test for availability
 --> models.py:7:50
  |
5 | # Import PCA overlay models
6 | try:
7 |     from models_pca import TransactionEffective, UserCorrection, UserRule, InferenceSnapshot
  |                                                  ^^^^^^^^^^^^^^
8 | except ImportError:
9 |     # PCA models not available yet
  |
help: Remove unused import

F401 `models_pca.UserRule` imported but unused; consider using `importlib.util.find_spec` to test for availability
 --> models.py:7:66
  |
5 | # Import PCA overlay models
6 | try:
7 |     from models_pca import TransactionEffective, UserCorrection, UserRule, InferenceSnapshot
  |                                                                  ^^^^^^^^
8 | except ImportError:
9 |     # PCA models not available yet
  |
help: Remove unused import

F401 `models_pca.InferenceSnapshot` imported but unused; consider using `importlib.util.find_spec` to test for availability
 --> models.py:7:76
  |
5 | # Import PCA overlay models
6 | try:
7 |     from models_pca import TransactionEffective, UserCorrection, UserRule, InferenceSnapshot
  |                                                                            ^^^^^^^^^^^^^^^^^
8 | except ImportError:
9 |     # PCA models not available yet
  |
help: Remove unused import

F811 Redefinition of unused `time` from line 2
  --> models.py:25:5
   |
23 |     currency = db.Column(db.String(10), default='৳')  # Currency symbol
24 |     date = db.Column(db.Date, nullable=False, default=date.today)  # Expense date
25 |     time = db.Column(db.Time, nullable=False, default=lambda: datetime.now().time())  # Expense time
   |     ^^^^
26 |     month = db.Column(db.String(7), nullable=False)  # Format: YYYY-MM
27 |     unique_id = db.Column(db.Text, nullable=False)  # Unique identifier per expense
   |
help: Remove definition: `time`

F401 [*] `sqlalchemy.dialects.postgresql.UUID` imported but unused
  --> models_pca.py:9:44
   |
 7 | from datetime import datetime
 8 | from sqlalchemy import JSON, Index
 9 | from sqlalchemy.dialects.postgresql import UUID
   |                                            ^^^^
10 | import uuid
   |
help: Remove unused import: `sqlalchemy.dialects.postgresql.UUID`

F401 [*] `typing.List` imported but unused
 --> nlp/signals_extractor.py:8:26
  |
6 | import re
7 | from datetime import datetime, timedelta
8 | from typing import Dict, List, Optional
  |                          ^^^^
9 | from utils.text_normalizer import normalize_for_processing
  |
help: Remove unused import: `typing.List`

E402 Module level import not at top of file
  --> nlp/signals_extractor.py:48:1
   |
47 | # Import enhanced money patterns
48 | from nlp.money_patterns import RE_MONEY, extract_money_mentions, has_money_mention
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
49 |
50 | def extract_signals(raw_text: str, user_id: str = None, timezone: str = "Asia/Dhaka") -> Dict:
   |

F401 [*] `nlp.money_patterns.RE_MONEY` imported but unused
  --> nlp/signals_extractor.py:48:32
   |
47 | # Import enhanced money patterns
48 | from nlp.money_patterns import RE_MONEY, extract_money_mentions, has_money_mention
   |                                ^^^^^^^^
49 |
50 | def extract_signals(raw_text: str, user_id: str = None, timezone: str = "Asia/Dhaka") -> Dict:
   |
help: Remove unused import: `nlp.money_patterns.RE_MONEY`

F401 [*] `json` imported but unused
 --> ops/preflight_probes.py:6:8
  |
4 | Tests live endpoints with synthetic users before production flip
5 | """
6 | import json
  |        ^^^^
7 | import sys
8 | import os
  |
help: Remove unused import: `json`

F601 Dictionary key literal `'lassi'` repeated
   --> parsers/expense.py:330:5
    |
328 |     'lemon cha': ('food', 9),
329 |     'borhani': ('food', 10),
330 |     'lassi': ('food', 9),
    |     ^^^^^^^
331 |     'matha': ('food', 10),
332 |     'shorbot': ('food', 10),
    |
help: Remove repeated key literal `'lassi'`

F841 [*] Local variable `e` is assigned to but never used
    --> parsers/expense.py:1252:29
     |
1250 |                 if user_pref:
1251 |                     return user_pref['category']
1252 |         except Exception as e:
     |                             ^
1253 |             # Don't fail parsing if learning system has issues
1254 |             pass
     |
help: Remove assignment to unused variable `e`

F601 Dictionary key literal `'bills'` repeated
    --> parsers/expense.py:1324:9
     |
1322 |         'health': ['medicine', 'pharmacy', 'doctor', 'hospital', 'medical', 'health'],
1323 |         # Bills
1324 |         'bills': ['internet', 'phone', 'rent', 'utilities', 'bill', 'electricity', 'water'],
     |         ^^^^^^^
1325 |         # Entertainment
1326 |         'entertainment': ['movie', 'cinema', 'game', 'entertainment', 'travel', 'vacation']
     |
help: Remove repeated key literal `'bills'`

F811 Redefinition of unused `is_correction_message` from line 148
   --> parsers/expense_broken.py:456:5
    |
454 | )
455 |
456 | def is_correction_message(text: str) -> bool:
    |     ^^^^^^^^^^^^^^^^^^^^^
457 |     """
458 |     Check if message contains correction phrases.
    |
help: Remove definition: `is_correction_message`

F811 Redefinition of unused `parse_correction_reason` from line 163
   --> parsers/expense_broken.py:476:5
    |
474 |     return has_correction_phrase and has_money
475 |
476 | def parse_correction_reason(text: str) -> str:
    |     ^^^^^^^^^^^^^^^^^^^^^^^
477 |     """
478 |     Extract short correction reason from correction message.
    |
help: Remove definition: `parse_correction_reason`

F811 Redefinition of unused `similar_category` from line 183
   --> parsers/expense_broken.py:506:5
    |
504 |         return "amount correction"
505 |
506 | def similar_category(cat_a: str, cat_b: str) -> bool:
    |     ^^^^^^^^^^^^^^^^
507 |     """
508 |     Check if two categories are similar (loose matching).
    |
help: Remove definition: `similar_category`

F811 Redefinition of unused `similar_merchant` from line 199
   --> parsers/expense_broken.py:536:5
    |
534 |     return False
535 |
536 | def similar_merchant(merchant_a: str, merchant_b: str) -> bool:
    |     ^^^^^^^^^^^^^^^^
537 |     """
538 |     Check if two merchants are similar (fuzzy matching).
    |
help: Remove definition: `similar_merchant`

F821 Undefined name `text_clean`
   --> parsers/expense_broken.py:593:46
    |
591 |     # Look for word after "on" or "for"
592 |     category_pattern = re.compile(r'(?i)\b(?:on|for)\s+(\w+)')
593 |     category_match = category_pattern.search(text_clean)
    |                                              ^^^^^^^^^^
594 |     
595 |     if category_match:
    |

F821 Undefined name `text_clean`
   --> parsers/expense_broken.py:604:22
    |
602 |     else:
603 |         # Try to find category keywords anywhere in text
604 |         text_lower = text_clean.lower()
    |                      ^^^^^^^^^^
605 |         for keyword, category in CATEGORY_ALIASES.items():
606 |             if keyword in text_lower:
    |

E402 Module level import not at top of file
  --> phase0_setup.py:28:1
   |
26 | # Test that flags are properly set
27 | print("\n🔍 Verifying flag configuration:")
28 | from utils.pca_feature_flags import pca_feature_flags
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
29 | pca_feature_flags.refresh_flags()
   |

F401 [*] `typing.List` imported but unused
 --> phase1_impact_audit.py:8:26
  |
6 | import json
7 | import time
8 | from typing import Dict, List, Any
  |                          ^^^^
9 | from app import app
  |
help: Remove unused import: `typing.List`

F541 [*] f-string without any placeholders
   --> phase1_impact_audit.py:368:15
    |
366 |         }
367 |         
368 |         print(f"\n📊 PHASE 1 IMPACT ASSESSMENT")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
369 |         print("=" * 50)
370 |         print(f"Data Handling: {data_handling.get('improvement', 'Unknown')}")
    |
help: Remove extraneous `f` prefix

F401 [*] `typing.List` imported but unused
 --> phase2_impact_audit.py:8:26
  |
6 | import json
7 | import time
8 | from typing import Dict, List, Any
  |                          ^^^^
9 | from app import app
  |
help: Remove unused import: `typing.List`

F401 [*] `utils.text_normalizer.normalize_for_processing` imported but unused
   --> phase2_impact_audit.py:360:47
    |
358 |         """Test that Phase 1 and Phase 2 work together"""
359 |         try:
360 |             from utils.text_normalizer import normalize_for_processing
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^
361 |             from nlp.signals_extractor import extract_signals
362 |             from utils.input_sanitizer import InputSanitizer
    |
help: Remove unused import: `utils.text_normalizer.normalize_for_processing`

F541 [*] f-string without any placeholders
   --> phase2_impact_audit.py:454:15
    |
452 |         }
453 |         
454 |         print(f"\n📊 PHASE 2 IMPACT ASSESSMENT")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
455 |         print("=" * 50)
456 |         print(f"Security System: {self.results['security_after'].get('improvement', 'Unknown')}")
    |
help: Remove extraneous `f` prefix

F401 [*] `typing.List` imported but unused
 --> phase3_impact_audit.py:8:26
  |
6 | import json
7 | import time
8 | from typing import Dict, List, Any
  |                          ^^^^
9 | from app import app
  |
help: Remove unused import: `typing.List`

F401 [*] `utils.ai_resilience.ResilientAIAdapter` imported but unused
  --> phase3_impact_audit.py:69:41
   |
67 |     def _test_new_ai_system(self) -> Dict[str, Any]:
68 |         """Test the new AI resilience system"""
69 |         from utils.ai_resilience import ResilientAIAdapter, AIMode, AIProvider
   |                                         ^^^^^^^^^^^^^^^^^^
70 |         
71 |         ai_test_cases = [
   |
help: Remove unused import

F401 [*] `utils.ai_resilience.AIMode` imported but unused
  --> phase3_impact_audit.py:69:61
   |
67 |     def _test_new_ai_system(self) -> Dict[str, Any]:
68 |         """Test the new AI resilience system"""
69 |         from utils.ai_resilience import ResilientAIAdapter, AIMode, AIProvider
   |                                                             ^^^^^^
70 |         
71 |         ai_test_cases = [
   |
help: Remove unused import

F401 [*] `utils.ai_resilience.AIProvider` imported but unused
  --> phase3_impact_audit.py:69:69
   |
67 |     def _test_new_ai_system(self) -> Dict[str, Any]:
68 |         """Test the new AI resilience system"""
69 |         from utils.ai_resilience import ResilientAIAdapter, AIMode, AIProvider
   |                                                                     ^^^^^^^^^^
70 |         
71 |         ai_test_cases = [
   |
help: Remove unused import

F541 [*] f-string without any placeholders
   --> phase3_impact_audit.py:575:15
    |
573 |         }
574 |         
575 |         print(f"\n📊 PHASE 3 CUMULATIVE ASSESSMENT")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
576 |         print("=" * 50)
577 |         print(f"AI Processing: {self.results['ai_processing_after'].get('improvement', 'Unknown')}")
    |
help: Remove extraneous `f` prefix

F401 [*] `uuid` imported but unused
  --> phase_e_audit_runner.py:9:8
   |
 7 | import json
 8 | import hashlib
 9 | import uuid
   |        ^^^^
10 | from datetime import datetime
11 | from typing import Dict, List, Any
   |
help: Remove unused import: `uuid`

F401 [*] `utils.nl_expense_parser.ExpenseParseResult` imported but unused
  --> phase_e_audit_runner.py:14:55
   |
13 | # Import Phase E components directly
14 | from utils.nl_expense_parser import parse_nl_expense, ExpenseParseResult
   |                                                       ^^^^^^^^^^^^^^^^^^
15 |
16 | class PhaseEAuditRunner:
   |
help: Remove unused import: `utils.nl_expense_parser.ExpenseParseResult`

F541 [*] f-string without any placeholders
   --> phase_e_audit_runner.py:511:15
    |
509 |         assessment = audit_report['deployment_assessment']
510 |         
511 |         print(f"\n🎯 PHASE E AUDIT SUMMARY")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
512 |         print("=" * 40)
513 |         print(f"📊 Success Rate: {summary['overall_success_rate']:.1f}%")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> phase_e_audit_runner.py:518:15
    |
516 |         print(f"🚀 Deployment Ready: {'YES' if summary['deployment_ready'] else 'NO'}")
517 |         
518 |         print(f"\n🔍 DEPLOYMENT ASSESSMENT")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
519 |         print(f"Status: {assessment['readiness_status']}")
520 |         print(f"Confidence: {assessment['confidence_level']}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> phase_e_audit_runner.py:527:15
    |
525 |                 print(f"  • {issue}")
526 |         
527 |         print(f"\nRecommendations:")
    |               ^^^^^^^^^^^^^^^^^^^^^
528 |         for rec in assessment['recommendations']:
529 |             print(f"  {rec}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> phase_e_audit_runner.py:535:15
    |
533 |             json.dump(audit_report, f, indent=2, ensure_ascii=False)
534 |         
535 |         print(f"\n📄 Detailed audit report: phase_e_focused_audit_report.json")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
536 |         
537 |         return audit_report
    |
help: Remove extraneous `f` prefix

E401 [*] Multiple imports on one line
 --> prod_probe.py:2:1
  |
1 | # prod_probe.py
2 | import os, hmac, hashlib, json, time, requests
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3 |
4 | PROD_URL        = os.environ.get("PROD_URL", "https://<your-deploy-domain>/webhook/messenger")
  |
help: Split imports

E701 Multiple statements on one line (colon)
  --> prod_probe.py:46:15
   |
45 | print("PROD URL:", PROD_URL)
46 | for t in tests: send(t)
   |               ^
   |

F541 [*] f-string without any placeholders
   --> production_flow_uat.py:587:15
    |
586 |         # Detailed criteria breakdown
587 |         print(f"\n  📋 Deployment Criteria:")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
588 |         for criterion, met in criteria.items():
589 |             print(f"     {'✅' if met else '❌'} {criterion.replace('_', ' ').title()}")
    |
help: Remove extraneous `f` prefix

F841 Local variable `bengali_results` is assigned to but never used
   --> production_flow_uat.py:633:9
    |
632 |         # Run all test suites
633 |         bengali_results = self.test_bengali_expense_logging_flow()
    |         ^^^^^^^^^^^^^^^
634 |         clarification_results = self.test_bengali_clarification_flow()
635 |         english_results = self.test_english_expense_flow()
    |
help: Remove assignment to unused variable `bengali_results`

F841 Local variable `clarification_results` is assigned to but never used
   --> production_flow_uat.py:634:9
    |
632 |         # Run all test suites
633 |         bengali_results = self.test_bengali_expense_logging_flow()
634 |         clarification_results = self.test_bengali_clarification_flow()
    |         ^^^^^^^^^^^^^^^^^^^^^
635 |         english_results = self.test_english_expense_flow()
636 |         analysis_results = self.test_analysis_requests()
    |
help: Remove assignment to unused variable `clarification_results`

F841 Local variable `english_results` is assigned to but never used
   --> production_flow_uat.py:635:9
    |
633 |         bengali_results = self.test_bengali_expense_logging_flow()
634 |         clarification_results = self.test_bengali_clarification_flow()
635 |         english_results = self.test_english_expense_flow()
    |         ^^^^^^^^^^^^^^^
636 |         analysis_results = self.test_analysis_requests()
    |
help: Remove assignment to unused variable `english_results`

F841 Local variable `analysis_results` is assigned to but never used
   --> production_flow_uat.py:636:9
    |
634 |         clarification_results = self.test_bengali_clarification_flow()
635 |         english_results = self.test_english_expense_flow()
636 |         analysis_results = self.test_analysis_requests()
    |         ^^^^^^^^^^^^^^^^
637 |         
638 |         # Validate data integrity
    |
help: Remove assignment to unused variable `analysis_results`

F841 Local variable `health_metrics` is assigned to but never used
   --> production_flow_uat.py:643:9
    |
642 |         # Analyze system health
643 |         health_metrics = self.analyze_system_health()
    |         ^^^^^^^^^^^^^^
644 |         
645 |         # Generate deployment recommendation
    |
help: Remove assignment to unused variable `health_metrics`

F841 Local variable `deployment_rec` is assigned to but never used
   --> production_flow_uat.py:646:9
    |
645 |         # Generate deployment recommendation
646 |         deployment_rec = self.generate_deployment_recommendation()
    |         ^^^^^^^^^^^^^^
647 |         
648 |         # Save comprehensive report
    |
help: Remove assignment to unused variable `deployment_rec`

F841 Local variable `report_file` is assigned to but never used
   --> production_flow_uat.py:649:9
    |
648 |         # Save comprehensive report
649 |         report_file = self.save_comprehensive_report()
    |         ^^^^^^^^^^^
650 |         
651 |         print("\n" + "=" * 75)
    |
help: Remove assignment to unused variable `report_file`

F401 [*] `json` imported but unused
  --> production_ready_uat.py:16:8
   |
14 | import sys
15 | import time
16 | import json
   |        ^^^^
17 | import uuid
18 | from datetime import datetime, timedelta
   |
help: Remove unused import: `json`

F401 [*] `datetime.timedelta` imported but unused
  --> production_ready_uat.py:18:32
   |
16 | import json
17 | import uuid
18 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
19 | from decimal import Decimal
20 | from typing import Dict, List, Any, Optional, Tuple
   |
help: Remove unused import: `datetime.timedelta`

F401 [*] `typing.Dict` imported but unused
  --> production_ready_uat.py:20:20
   |
18 | from datetime import datetime, timedelta
19 | from decimal import Decimal
20 | from typing import Dict, List, Any, Optional, Tuple
   |                    ^^^^
21 |
22 | # Add project root to path
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> production_ready_uat.py:20:26
   |
18 | from datetime import datetime, timedelta
19 | from decimal import Decimal
20 | from typing import Dict, List, Any, Optional, Tuple
   |                          ^^^^
21 |
22 | # Add project root to path
   |
help: Remove unused import

F401 [*] `typing.Any` imported but unused
  --> production_ready_uat.py:20:32
   |
18 | from datetime import datetime, timedelta
19 | from decimal import Decimal
20 | from typing import Dict, List, Any, Optional, Tuple
   |                                ^^^
21 |
22 | # Add project root to path
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> production_ready_uat.py:20:47
   |
18 | from datetime import datetime, timedelta
19 | from decimal import Decimal
20 | from typing import Dict, List, Any, Optional, Tuple
   |                                               ^^^^^
21 |
22 | # Add project root to path
   |
help: Remove unused import

F541 [*] f-string without any placeholders
   --> production_ready_uat.py:658:15
    |
657 |         print(f"\n{'='*80}")
658 |         print(f"🔍 COMPREHENSIVE UAT AUDIT REPORT")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
659 |         print(f"{'='*80}")
660 |         print(f"📅 Execution Time: {self.start_time} - {end_time}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> production_ready_uat.py:667:15
    |
665 |         print(f"📊 Success Rate: {success_rate:.1f}%")
666 |         
667 |         print(f"\n📋 CATEGORY BREAKDOWN:")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
668 |         for category, stats in categories.items():
669 |             cat_success = (stats['passed'] / stats['total'] * 100) if stats['total'] > 0 else 0
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> production_ready_uat.py:679:15
    |
677 |                 print(f"     {failure['details']}")
678 |         
679 |         print(f"\n📈 PERFORMANCE METRICS:")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
680 |         perf_tests = [r for r in self.test_results if r['performance_ms'] is not None]
681 |         if perf_tests:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> production_ready_uat.py:687:15
    |
685 |             print(f"  🏃 Max Response Time: {max_performance:.1f}ms")
686 |         
687 |         print(f"\n🔍 DETAILED TEST RESULTS:")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
688 |         for result in self.test_results:
689 |             icon = "✅" if result['status'] == 'PASS' else "❌"
    |
help: Remove extraneous `f` prefix

F401 [*] `flask.request` imported but unused
 --> pwa_nl_integration.py:8:19
  |
6 | import logging
7 | import hashlib
8 | from flask import request, jsonify, render_template, redirect, url_for
  |                   ^^^^^^^
9 | from typing import Dict, Any, List, Optional
  |
help: Remove unused import

F401 [*] `flask.jsonify` imported but unused
 --> pwa_nl_integration.py:8:28
  |
6 | import logging
7 | import hashlib
8 | from flask import request, jsonify, render_template, redirect, url_for
  |                            ^^^^^^^
9 | from typing import Dict, Any, List, Optional
  |
help: Remove unused import

F401 [*] `flask.redirect` imported but unused
 --> pwa_nl_integration.py:8:54
  |
6 | import logging
7 | import hashlib
8 | from flask import request, jsonify, render_template, redirect, url_for
  |                                                      ^^^^^^^^
9 | from typing import Dict, Any, List, Optional
  |
help: Remove unused import

F401 [*] `flask.url_for` imported but unused
 --> pwa_nl_integration.py:8:64
  |
6 | import logging
7 | import hashlib
8 | from flask import request, jsonify, render_template, redirect, url_for
  |                                                                ^^^^^^^
9 | from typing import Dict, Any, List, Optional
  |
help: Remove unused import

F401 [*] `utils.nl_expense_parser.ExpenseParseResult` imported but unused
  --> pwa_nl_integration.py:11:55
   |
 9 | from typing import Dict, Any, List, Optional
10 |
11 | from utils.nl_expense_parser import parse_nl_expense, ExpenseParseResult
   |                                                       ^^^^^^^^^^^^^^^^^^
12 | from utils.expense_editor import edit_last_expense, expense_editor
13 | import backend_assistant as ba
   |
help: Remove unused import: `utils.nl_expense_parser.ExpenseParseResult`

F401 [*] `utils.identity.psid_hash` imported but unused
  --> pwa_nl_integration.py:14:28
   |
12 | from utils.expense_editor import edit_last_expense, expense_editor
13 | import backend_assistant as ba
14 | from utils.identity import psid_hash
   |                            ^^^^^^^^^
15 | from utils.categories import normalize_category
16 | from models import Expense
   |
help: Remove unused import: `utils.identity.psid_hash`

F401 [*] `os` imported but unused
 --> pwa_ui.py:7:8
  |
5 | import logging
6 | import time
7 | import os
  |        ^^
8 |
9 | # Import rate limiter from centralized utility
  |
help: Remove unused import: `os`

F401 [*] `models.User` imported but unused
  --> pwa_ui.py:18:24
   |
16 | def require_auth():
17 |     """Helper function to ensure user is authenticated via session with DB retry logic"""
18 |     from models import User
   |                        ^^^^
19 |     from flask import session, abort
20 |     from sqlalchemy.exc import OperationalError, DisconnectionError
   |
help: Remove unused import: `models.User`

F401 [*] `sqlalchemy.exc.OperationalError` imported but unused
  --> pwa_ui.py:20:32
   |
18 |     from models import User
19 |     from flask import session, abort
20 |     from sqlalchemy.exc import OperationalError, DisconnectionError
   |                                ^^^^^^^^^^^^^^^^
21 |     from db_base import db
22 |     import time
   |
help: Remove unused import

F401 [*] `sqlalchemy.exc.DisconnectionError` imported but unused
  --> pwa_ui.py:20:50
   |
18 |     from models import User
19 |     from flask import session, abort
20 |     from sqlalchemy.exc import OperationalError, DisconnectionError
   |                                                  ^^^^^^^^^^^^^^^^^^
21 |     from db_base import db
22 |     import time
   |
help: Remove unused import

F401 [*] `db_base.db` imported but unused
  --> pwa_ui.py:21:25
   |
19 |     from flask import session, abort
20 |     from sqlalchemy.exc import OperationalError, DisconnectionError
21 |     from db_base import db
   |                         ^^
22 |     import time
   |
help: Remove unused import: `db_base.db`

F401 [*] `time` imported but unused
  --> pwa_ui.py:22:12
   |
20 |     from sqlalchemy.exc import OperationalError, DisconnectionError
21 |     from db_base import db
22 |     import time
   |            ^^^^
23 |     
24 |     # Check if user is logged in via session
   |
help: Remove unused import: `time`

F401 [*] `flask.url_for` imported but unused
  --> pwa_ui.py:32:42
   |
30 |     """Helper function to redirect to login if user is not authenticated"""
31 |     from models import User
32 |     from flask import session, redirect, url_for, request
   |                                          ^^^^^^^
33 |     from sqlalchemy.exc import OperationalError, DisconnectionError
34 |     from db_base import db
   |
help: Remove unused import: `flask.url_for`

F401 [*] `uuid` imported but unused
   --> pwa_ui.py:152:28
    |
150 |                     # Save expense using CANONICAL SINGLE WRITER (spec compliance)
151 |                     import backend_assistant as ba
152 |                     import uuid
    |                            ^^^^
153 |                     
154 |                     logger.info(f"Attempting to save expense: {amount} taka for {category}")
    |
help: Remove unused import: `uuid`

F401 [*] `db_base.db` imported but unused
   --> pwa_ui.py:322:25
    |
320 |     """
321 |     from models import User
322 |     from db_base import db
    |                         ^^
323 |     from werkzeug.security import check_password_hash
324 |     from flask import session, request, jsonify, redirect
    |
help: Remove unused import: `db_base.db`

F841 [*] Local variable `e` is assigned to but never used
   --> pwa_ui.py:513:25
    |
511 |         }), 200
512 |         
513 |     except Exception as e:
    |                         ^
514 |         db.session.rollback()
515 |         return jsonify({"error": "Registration failed. Please try again."}), 500
    |
help: Remove assignment to unused variable `e`

F401 [*] `time` imported but unused
   --> pwa_ui.py:766:12
    |
764 |     """
765 |     from flask import session
766 |     import time
    |            ^^^^
767 |     
768 |     try:
    |
help: Remove unused import: `time`

F401 [*] `finbrain.structured.logger` imported but unused
   --> pwa_ui.py:836:47
    |
834 |     """AI chat endpoint - requires authentication to track expenses"""
835 |     from flask import session
836 |     from finbrain.structured import logger as structured_logger
    |                                               ^^^^^^^^^^^^^^^^^
837 |     import json
838 |     import os
    |
help: Remove unused import: `finbrain.structured.logger`

F401 [*] `json` imported but unused
   --> pwa_ui.py:837:12
    |
835 |     from flask import session
836 |     from finbrain.structured import logger as structured_logger
837 |     import json
    |            ^^^^
838 |     import os
    |
help: Remove unused import: `json`

F811 [*] Redefinition of unused `os` from line 7
   --> pwa_ui.py:838:12
    |
836 |     from finbrain.structured import logger as structured_logger
837 |     import json
838 |     import os
    |            ^^
839 |     
840 |     # Get request_id from middleware
    |
help: Remove definition: `os`

F401 [*] `os` imported but unused
   --> pwa_ui.py:838:12
    |
836 |     from finbrain.structured import logger as structured_logger
837 |     import json
838 |     import os
    |            ^^
839 |     
840 |     # Get request_id from middleware
    |
help: Remove unused import: `os`

F401 [*] `utils.expense_repair.normalize_category` imported but unused
   --> pwa_ui.py:897:72
    |
895 |         # [EXPENSE REPAIR] Apply surgical repair for misclassifications
896 |         from utils.feature_flags import expense_repair_enabled
897 |         from utils.expense_repair import repair_expense_with_fallback, normalize_category, safe_normalize_category
    |                                                                        ^^^^^^^^^^^^^^^^^^
898 |         
899 |         repaired_intent = intent
    |
help: Remove unused import: `utils.expense_repair.normalize_category`

F401 [*] `utils.identity.psid_hash` imported but unused
  --> quick_validation_test.py:37:55
   |
35 |         # Test 2: Identity hashing  
36 |         try:
37 |             from utils.identity import ensure_hashed, psid_hash
   |                                                       ^^^^^^^^^
38 |             
39 |             print("\n🔒 Identity Hashing:")
   |
help: Remove unused import: `utils.identity.psid_hash`

F401 [*] `datetime.timedelta` imported but unused
  --> robust_e2e_audit.py:10:32
   |
 8 | import time
 9 | import uuid
10 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
11 | from typing import Dict, List, Any, Optional
12 | from app import app, db
   |
help: Remove unused import: `datetime.timedelta`

F401 [*] `typing.List` imported but unused
  --> robust_e2e_audit.py:11:26
   |
 9 | import uuid
10 | from datetime import datetime, timedelta
11 | from typing import Dict, List, Any, Optional
   |                          ^^^^
12 | from app import app, db
13 | from sqlalchemy import text
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> robust_e2e_audit.py:11:37
   |
 9 | import uuid
10 | from datetime import datetime, timedelta
11 | from typing import Dict, List, Any, Optional
   |                                     ^^^^^^^^
12 | from app import app, db
13 | from sqlalchemy import text
   |
help: Remove unused import

F541 [*] f-string without any placeholders
   --> robust_e2e_audit.py:119:19
    |
117 | …     }
118 | …     
119 | …     print(f"System baseline established:")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
120 | …     print(f"  Contract Tests: {contract_results['passed']}/{contract_results['total']} ({contract_results['success_rate']}%)")
121 | …     print(f"  Integration Tests: {integration_status['passed']}/{integration_status['total']} ({integration_status['success_rate']}…
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> robust_e2e_audit.py:399:23
    |
397 |                     "retrieved_amount": retrieval_result.amount if retrieval_result else None
398 |                 })
399 |                 print(f"  ✅ Data retrieval: Found record")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
400 |                 
401 |             except Exception as e:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> robust_e2e_audit.py:721:15
    |
720 |         # Print final assessment
721 |         print(f"\n📊 COMPREHENSIVE AUDIT SUMMARY")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
722 |         print("=" * 60)
723 |         print(f"Audit Session: {self.audit_session_id}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> robust_e2e_audit.py:728:15
    |
726 |         print(f"Recommendation: {self.results['deployment_assessment']['recommendation']}")
727 |         
728 |         print(f"\nPhase Results:")
    |               ^^^^^^^^^^^^^^^^^^^
729 |         for phase_name, phase_data in phases:
730 |             summary = phase_data.get("summary", {})
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> robust_e2e_audit.py:742:19
    |
740 |             print("   • Ready for Phase 1 rollout")
741 |         else:
742 |             print(f"\n⚠️  DEPLOYMENT BLOCKED")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
743 |             print(f"   Critical failures in: {', '.join(critical_failures)}")
744 |             print("   • Fix failing systems before deployment")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> robust_e2e_audit.py:754:19
    |
752 |             """), {"user_id": self.test_user_id})
753 |             db.session.commit()
754 |             print(f"\n🧹 Test data cleanup completed")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
755 |         except Exception as e:
756 |             print(f"⚠️  Cleanup warning: {e}")
    |
help: Remove extraneous `f` prefix

F401 [*] `sqlalchemy.text` imported but unused
  --> routes/audit_api.py:8:24
   |
 7 | from flask import Blueprint, jsonify, request
 8 | from sqlalchemy import text
   |                        ^^^^
 9 | import time
10 | from functools import lru_cache
   |
help: Remove unused import: `sqlalchemy.text`

F401 [*] `functools.lru_cache` imported but unused
  --> routes/audit_api.py:10:23
   |
 8 | from sqlalchemy import text
 9 | import time
10 | from functools import lru_cache
   |                       ^^^^^^^^^
11 | from datetime import datetime, timedelta
12 | import hashlib
   |
help: Remove unused import: `functools.lru_cache`

F401 [*] `datetime.datetime` imported but unused
  --> routes/audit_api.py:11:22
   |
 9 | import time
10 | from functools import lru_cache
11 | from datetime import datetime, timedelta
   |                      ^^^^^^^^
12 | import hashlib
   |
help: Remove unused import

F401 [*] `datetime.timedelta` imported but unused
  --> routes/audit_api.py:11:32
   |
 9 | import time
10 | from functools import lru_cache
11 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
12 | import hashlib
   |
help: Remove unused import

F401 [*] `hashlib` imported but unused
  --> routes/audit_api.py:12:8
   |
10 | from functools import lru_cache
11 | from datetime import datetime, timedelta
12 | import hashlib
   |        ^^^^^^^
13 |
14 | from db_base import db
   |
help: Remove unused import: `hashlib`

F401 [*] `models_pca.UserRule` imported but unused
  --> routes/audit_api.py:16:40
   |
14 | from db_base import db
15 | from models import Expense
16 | from models_pca import UserCorrection, UserRule
   |                                        ^^^^^^^^
17 | from utils.pca_feature_flags import pca_feature_flags
18 | from utils.precedence_engine import precedence_engine
   |
help: Remove unused import: `models_pca.UserRule`

F401 [*] `json` imported but unused
  --> routes/deploy_probe.py:8:8
   |
 6 | import logging
 7 | import os
 8 | import json
   |        ^^^^
 9 | import time
10 | import uuid
   |
help: Remove unused import: `json`

F401 [*] `datetime.timedelta` imported but unused
  --> routes/deploy_probe.py:11:32
   |
 9 | import time
10 | import uuid
11 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
12 | from typing import Dict, Any, List, Optional, Tuple
13 | from flask import Blueprint, jsonify, request, session
   |
help: Remove unused import: `datetime.timedelta`

F401 [*] `typing.Optional` imported but unused
  --> routes/deploy_probe.py:12:37
   |
10 | import uuid
11 | from datetime import datetime, timedelta
12 | from typing import Dict, Any, List, Optional, Tuple
   |                                     ^^^^^^^^
13 | from flask import Blueprint, jsonify, request, session
14 | from functools import wraps
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> routes/deploy_probe.py:12:47
   |
10 | import uuid
11 | from datetime import datetime, timedelta
12 | from typing import Dict, Any, List, Optional, Tuple
   |                                               ^^^^^
13 | from flask import Blueprint, jsonify, request, session
14 | from functools import wraps
   |
help: Remove unused import

F401 [*] `flask.session` imported but unused
  --> routes/deploy_probe.py:13:48
   |
11 | from datetime import datetime, timedelta
12 | from typing import Dict, Any, List, Optional, Tuple
13 | from flask import Blueprint, jsonify, request, session
   |                                                ^^^^^^^
14 | from functools import wraps
   |
help: Remove unused import: `flask.session`

F401 [*] `models.MonthlySummary` imported but unused
  --> routes/deploy_probe.py:16:35
   |
14 | from functools import wraps
15 |
16 | from models import Expense, User, MonthlySummary
   |                                   ^^^^^^^^^^^^^^
17 | from db_base import db
18 | from utils.identity import psid_hash, ensure_hashed
   |
help: Remove unused import: `models.MonthlySummary`

F541 [*] f-string without any placeholders
   --> routes/deploy_probe.py:350:40
    |
348 |                         return {
349 |                             'passed': False,
350 |                             'message': f'Expense not found in database after logging',
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
351 |                             'details': {'expense_id': result['expense_id']}
352 |                         }
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> routes/deploy_probe.py:358:40
    |
356 |                         return {
357 |                             'passed': False,
358 |                             'message': f'Expense has wrong user association',
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
359 |                             'details': {
360 |                                 'expected_user': user_hash,
    |
help: Remove extraneous `f` prefix

E722 Do not use bare `except`
   --> routes/deploy_probe.py:712:13
    |
710 |             try:
711 |                 db.session.rollback()
712 |             except:
    |             ^^^^^^
713 |                 pass
    |

F401 [*] `typing.Dict` imported but unused
  --> routes/integrity_api.py:10:20
   |
 8 | from flask import Blueprint, jsonify, request
 9 | from datetime import datetime
10 | from typing import Dict, Any
   |                    ^^^^
11 | from functools import wraps
   |
help: Remove unused import

F401 [*] `typing.Any` imported but unused
  --> routes/integrity_api.py:10:26
   |
 8 | from flask import Blueprint, jsonify, request
 9 | from datetime import datetime
10 | from typing import Dict, Any
   |                          ^^^
11 | from functools import wraps
   |
help: Remove unused import

F401 [*] `flask.jsonify` imported but unused
 --> routes/ops_quickscan.py:4:39
  |
2 | Diagnostic endpoint for tracing write/read path inconsistencies
3 | """
4 | from flask import Blueprint, request, jsonify
  |                                       ^^^^^^^
5 | from utils.identity import ensure_hashed
6 | from models import Expense, User
  |
help: Remove unused import: `flask.jsonify`

F401 [*] `db_base.db` imported but unused
 --> routes/ops_quickscan.py:7:21
  |
5 | from utils.identity import ensure_hashed
6 | from models import Expense, User
7 | from db_base import db
  |                     ^^
8 |
9 | bp = Blueprint("quickscan", __name__)
  |
help: Remove unused import: `db_base.db`

F811 [*] Redefinition of unused `jsonify` from line 4
  --> routes/ops_quickscan.py:16:23
   |
14 |     # Check authentication
15 |     from app import check_basic_auth
16 |     from flask import jsonify
   |                       ^^^^^^^
17 |     
18 |     if not check_basic_auth():
   |
help: Remove definition: `jsonify`

F401 [*] `flask.render_template` imported but unused
 --> routes/pca_api.py:6:48
  |
4 | """
5 |
6 | from flask import Blueprint, request, jsonify, render_template
  |                                                ^^^^^^^^^^^^^^^
7 | from datetime import datetime
8 | import json
  |
help: Remove unused import: `flask.render_template`

F401 [*] `json` imported but unused
  --> routes/pca_api.py:8:8
   |
 6 | from flask import Blueprint, request, jsonify, render_template
 7 | from datetime import datetime
 8 | import json
   |        ^^^^
 9 | import logging
10 | import time
   |
help: Remove unused import: `json`

F401 [*] `typing.Any` imported but unused
  --> routes/pca_api.py:11:32
   |
 9 | import logging
10 | import time
11 | from typing import Dict, List, Any
   |                                ^^^
12 |
13 | from db_base import db
   |
help: Remove unused import: `typing.Any`

F401 [*] `models_pca.TransactionEffective` imported but unused
  --> routes/pca_api.py:14:50
   |
13 | from db_base import db
14 | from models_pca import UserRule, UserCorrection, TransactionEffective
   |                                                  ^^^^^^^^^^^^^^^^^^^^
15 | from utils.precedence_engine import precedence_engine
16 | from utils.pca_feature_flags import pca_feature_flags
   |
help: Remove unused import: `models_pca.TransactionEffective`

F401 [*] `flask.request` imported but unused
 --> routes/pca_ui.py:6:47
  |
4 | """
5 |
6 | from flask import Blueprint, render_template, request, flash, redirect, url_for
  |                                               ^^^^^^^
7 | import logging
8 | from datetime import datetime
  |
help: Remove unused import: `flask.request`

E402 Module level import not at top of file
  --> routes/pca_ui.py:13:1
   |
11 | from utils.db_guard import assert_single_db_instance
12 | assert_single_db_instance(db)
13 | from models_pca import UserRule, UserCorrection
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
14 | from utils.pca_feature_flags import pca_feature_flags
15 | from utils.deterministic import ensure_hashed
   |

E402 Module level import not at top of file
  --> routes/pca_ui.py:14:1
   |
12 | assert_single_db_instance(db)
13 | from models_pca import UserRule, UserCorrection
14 | from utils.pca_feature_flags import pca_feature_flags
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
15 | from utils.deterministic import ensure_hashed
   |

E402 Module level import not at top of file
  --> routes/pca_ui.py:15:1
   |
13 | from models_pca import UserRule, UserCorrection
14 | from utils.pca_feature_flags import pca_feature_flags
15 | from utils.deterministic import ensure_hashed
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
16 |
17 | logger = logging.getLogger("finbrain.pca_ui")
   |

F841 [*] Local variable `e` is assigned to but never used
   --> routes_assets.py:129:25
    |
127 |         return jsonify(result), 200
128 |         
129 |     except Exception as e:
    |                         ^
130 |         latency_ms = (time.time() - start_time) * 1000
131 |         safe_user_id = user_id if 'user_id' in locals() and user_id else "unknown"
    |
help: Remove assignment to unused variable `e`

F841 [*] Local variable `e` is assigned to but never used
   --> routes_assets.py:166:25
    |
164 |         return jsonify(result), 200
165 |         
166 |     except Exception as e:
    |                         ^
167 |         latency_ms = (time.time() - start_time) * 1000
168 |         safe_user_id = user_id if 'user_id' in locals() and user_id else "unknown"
    |
help: Remove assignment to unused variable `e`

F821 Undefined name `ASSETS_ALLOW_DELETE`
   --> routes_assets.py:177:12
    |
175 | def delete_asset():
176 |     """Delete asset (feature-flagged)"""
177 |     if not ASSETS_ALLOW_DELETE:
    |            ^^^^^^^^^^^^^^^^^^^
178 |         return jsonify({"error": "Asset deletion not enabled"}), 403
    |

F841 [*] Local variable `e` is assigned to but never used
   --> routes_assets.py:206:25
    |
204 |         return jsonify({"success": True, "path": path}), 200
205 |         
206 |     except Exception as e:
    |                         ^
207 |         latency_ms = (time.time() - start_time) * 1000
208 |         safe_user_id = user_id if 'user_id' in locals() and user_id else "unknown"
    |
help: Remove assignment to unused variable `e`

F401 [*] `flask.g` imported but unused
 --> routes_backend_assistant.py:6:57
  |
4 | """
5 |
6 | from flask import Blueprint, request, jsonify, session, g, current_app
  |                                                         ^
7 | from functools import wraps
8 | from db_base import db
  |
help: Remove unused import: `flask.g`

F401 [*] `backend_assistant.propose_expense` imported but unused
  --> routes_backend_assistant.py:10:5
   |
 8 | from db_base import db
 9 | from backend_assistant import (
10 |     propose_expense, 
   |     ^^^^^^^^^^^^^^^
11 |     add_expense,
12 |     delete_expense,
   |
help: Remove unused import

F401 [*] `backend_assistant.add_expense` imported but unused
  --> routes_backend_assistant.py:11:5
   |
 9 | from backend_assistant import (
10 |     propose_expense, 
11 |     add_expense,
   |     ^^^^^^^^^^^
12 |     delete_expense,
13 |     get_totals, 
   |
help: Remove unused import

F401 [*] `utils.error_responses.validation_error_response` imported but unused
  --> routes_backend_assistant.py:23:5
   |
21 | from utils.error_responses import (
22 |     standardized_error_response, internal_error, unauthorized_error,
23 |     validation_error_response, success_response, ErrorCodes, safe_error_message
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^
24 | )
25 | from utils.validators import APIValidator
   |
help: Remove unused import: `utils.error_responses.validation_error_response`

F401 [*] `utils.structured_logger.log_validation_failure` imported but unused
  --> routes_backend_assistant.py:26:66
   |
24 | )
25 | from utils.validators import APIValidator
26 | from utils.structured_logger import api_logger, security_logger, log_validation_failure
   |                                                                  ^^^^^^^^^^^^^^^^^^^^^^
27 | import logging
28 | import time
   |
help: Remove unused import: `utils.structured_logger.log_validation_failure`

F401 [*] `datetime.datetime` imported but unused
  --> routes_backend_assistant.py:29:22
   |
27 | import logging
28 | import time
29 | from datetime import datetime
   |                      ^^^^^^^^
30 |
31 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `datetime.datetime`

E401 [*] Multiple imports on one line
   --> routes_backend_assistant.py:102:5
    |
100 |     Completes a pending expense clarification by applying the user's selected category
101 |     """
102 |     import uuid, time, json
    |     ^^^^^^^^^^^^^^^^^^^^^^^
103 |     start = time.time()
104 |     trace_id = str(uuid.uuid4())
    |
help: Split imports

F401 [*] `json` imported but unused
   --> routes_backend_assistant.py:102:24
    |
100 |     Completes a pending expense clarification by applying the user's selected category
101 |     """
102 |     import uuid, time, json
    |                        ^^^^
103 |     start = time.time()
104 |     trace_id = str(uuid.uuid4())
    |
help: Remove unused import: `json`

F811 [*] Redefinition of unused `datetime` from line 29
   --> routes_backend_assistant.py:220:26
    |
218 | def api_add_expense(authenticated_user_id):
219 |     """DEPRECATED: Direct API discontinued - use /ai-chat interface"""
220 |     from datetime import datetime
    |                          ^^^^^^^^
221 |     
222 |     # Log deprecation attempt for monitoring
    |
help: Remove definition: `datetime`

F811 [*] Redefinition of unused `g` from line 6
   --> routes_backend_assistant.py:654:23
    |
652 | def diag_auth():
653 |     """Check authentication status"""
654 |     from flask import g
    |                       ^
655 |     return {"ok": bool(g.user_id), "user_id": g.user_id}, (200 if g.user_id else 401)
    |
help: Remove definition: `g`

F811 [*] Redefinition of unused `g` from line 6
   --> routes_backend_assistant.py:660:23
    |
658 | def diag_db():
659 |     """Check database connectivity and user expenses count"""
660 |     from flask import g
    |                       ^
661 |     from sqlalchemy import text
662 |     if not g.user_id: 
    |
help: Remove definition: `g`

F811 [*] Redefinition of unused `g` from line 6
   --> routes_backend_assistant.py:670:23
    |
668 | def diag_add_test():
669 |     """Add test expense for diagnostics"""
670 |     from flask import g, request
    |                       ^
671 |     from sqlalchemy import text
672 |     if not g.user_id: 
    |
help: Remove definition: `g`

F401 [*] `flask.request` imported but unused
 --> routes_ghost_monitoring.py:6:39
  |
4 | """
5 |
6 | from flask import Blueprint, jsonify, request
  |                                       ^^^^^^^
7 | import logging
8 | import os
  |
help: Remove unused import: `flask.request`

F401 [*] `json` imported but unused
  --> routes_ghost_monitoring.py:11:8
   |
 9 | import re
10 | import time
11 | import json
   |        ^^^^
12 | from pathlib import Path
   |
help: Remove unused import: `json`

F401 [*] `flask.request` imported but unused
 --> routes_invariant_monitoring.py:6:39
  |
4 | """
5 |
6 | from flask import Blueprint, jsonify, request
  |                                       ^^^^^^^
7 | from utils.unbreakable_invariants import get_invariant_status, run_invariant_health_check
8 | from utils.ci_invariant_enforcement import run_ci_invariant_check
  |
help: Remove unused import: `flask.request`

F401 [*] `flask.render_template_string` imported but unused
 --> routes_single_writer_observability.py:7:39
  |
5 | """
6 |
7 | from flask import Blueprint, jsonify, render_template_string, request
  |                                       ^^^^^^^^^^^^^^^^^^^^^^
8 | import json
9 | import time
  |
help: Remove unused import: `flask.render_template_string`

F401 [*] `json` imported but unused
  --> routes_single_writer_observability.py:8:8
   |
 7 | from flask import Blueprint, jsonify, render_template_string, request
 8 | import json
   |        ^^^^
 9 | import time
10 | from utils.single_writer_metrics import get_health_status, get_dashboard_data, single_writer_monitor
   |
help: Remove unused import: `json`

F401 [*] `utils.single_writer_metrics.single_writer_monitor` imported but unused
  --> routes_single_writer_observability.py:10:80
   |
 8 | import json
 9 | import time
10 | from utils.single_writer_metrics import get_health_status, get_dashboard_data, single_writer_monitor
   |                                                                                ^^^^^^^^^^^^^^^^^^^^^
11 | # Simplified auth for observability - using basic auth check
12 | from functools import wraps
   |
help: Remove unused import: `utils.single_writer_metrics.single_writer_monitor`

F811 [*] Redefinition of unused `request` from line 7
  --> routes_single_writer_observability.py:13:19
   |
11 | # Simplified auth for observability - using basic auth check
12 | from functools import wraps
13 | from flask import request, jsonify
   |                   ^^^^^^^
14 | import os
   |
help: Remove definition: `request`

F811 [*] Redefinition of unused `jsonify` from line 7
  --> routes_single_writer_observability.py:13:28
   |
11 | # Simplified auth for observability - using basic auth check
12 | from functools import wraps
13 | from flask import request, jsonify
   |                            ^^^^^^^
14 | import os
   |
help: Remove definition: `jsonify`

E402 Module level import not at top of file
  --> routes_single_writer_observability.py:35:1
   |
33 |         return f(*args, **kwargs)
34 |     return decorated_function
35 | import logging
   | ^^^^^^^^^^^^^^
36 |
37 | logger = logging.getLogger(__name__)
   |

F541 [*] f-string without any placeholders
  --> routes_single_writer_observability.py:71:13
   |
69 |         # Generate Prometheus-style metrics
70 |         metrics = [
71 |             f"# HELP single_writer_canonical_writes_total Total canonical writer operations",
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
72 |             f"# TYPE single_writer_canonical_writes_total counter",
73 |             f"single_writer_canonical_writes_total {metrics_24h['canonical_writes_total']}",
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> routes_single_writer_observability.py:72:13
   |
70 |         metrics = [
71 |             f"# HELP single_writer_canonical_writes_total Total canonical writer operations",
72 |             f"# TYPE single_writer_canonical_writes_total counter",
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
73 |             f"single_writer_canonical_writes_total {metrics_24h['canonical_writes_total']}",
74 |             "",
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> routes_single_writer_observability.py:75:13
   |
73 |             f"single_writer_canonical_writes_total {metrics_24h['canonical_writes_total']}",
74 |             "",
75 |             f"# HELP single_writer_success_rate Success rate of canonical writer operations",
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
76 |             f"# TYPE single_writer_success_rate gauge", 
77 |             f"single_writer_success_rate {metrics_24h['canonical_writes_success_rate'] / 100}",
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> routes_single_writer_observability.py:76:13
   |
74 |             "",
75 |             f"# HELP single_writer_success_rate Success rate of canonical writer operations",
76 |             f"# TYPE single_writer_success_rate gauge", 
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
77 |             f"single_writer_success_rate {metrics_24h['canonical_writes_success_rate'] / 100}",
78 |             "",
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> routes_single_writer_observability.py:79:13
   |
77 |             f"single_writer_success_rate {metrics_24h['canonical_writes_success_rate'] / 100}",
78 |             "",
79 |             f"# HELP single_writer_avg_response_time_ms Average response time in milliseconds",
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
80 |             f"# TYPE single_writer_avg_response_time_ms gauge",
81 |             f"single_writer_avg_response_time_ms {metrics_24h['avg_response_time_ms']}",
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> routes_single_writer_observability.py:80:13
   |
78 |             "",
79 |             f"# HELP single_writer_avg_response_time_ms Average response time in milliseconds",
80 |             f"# TYPE single_writer_avg_response_time_ms gauge",
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
81 |             f"single_writer_avg_response_time_ms {metrics_24h['avg_response_time_ms']}",
82 |             "",
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> routes_single_writer_observability.py:83:13
   |
81 |             f"single_writer_avg_response_time_ms {metrics_24h['avg_response_time_ms']}",
82 |             "",
83 |             f"# HELP single_writer_violations_total Total violations detected",
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
84 |             f"# TYPE single_writer_violations_total counter",
85 |             f"single_writer_violations_total {metrics_24h['violations']}",
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> routes_single_writer_observability.py:84:13
   |
82 |             "",
83 |             f"# HELP single_writer_violations_total Total violations detected",
84 |             f"# TYPE single_writer_violations_total counter",
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
85 |             f"single_writer_violations_total {metrics_24h['violations']}",
86 |             "",
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> routes_single_writer_observability.py:87:13
   |
85 |             f"single_writer_violations_total {metrics_24h['violations']}",
86 |             "",
87 |             f"# HELP single_writer_protection_triggers_total Total protection triggers",
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
88 |             f"# TYPE single_writer_protection_triggers_total counter", 
89 |             f"single_writer_protection_triggers_total {metrics_24h['protection_triggers']}",
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> routes_single_writer_observability.py:88:13
   |
86 |             "",
87 |             f"# HELP single_writer_protection_triggers_total Total protection triggers",
88 |             f"# TYPE single_writer_protection_triggers_total counter", 
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
89 |             f"single_writer_protection_triggers_total {metrics_24h['protection_triggers']}",
90 |             "",
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> routes_single_writer_observability.py:91:13
   |
89 |             f"single_writer_protection_triggers_total {metrics_24h['protection_triggers']}",
90 |             "",
91 |             f"# HELP single_writer_sla_compliance SLA compliance indicators",
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
92 |             f"# TYPE single_writer_sla_compliance gauge",
93 |         ]
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> routes_single_writer_observability.py:92:13
   |
90 |             "",
91 |             f"# HELP single_writer_sla_compliance SLA compliance indicators",
92 |             f"# TYPE single_writer_sla_compliance gauge",
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
93 |         ]
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> routes_single_writer_observability.py:101:13
    |
 99 |         metrics.extend([
100 |             "",
101 |             f"# HELP ai_requests_total Total AI requests made",
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
102 |             f"# TYPE ai_requests_total counter",
103 |             f"ai_requests_total {ai_metrics['ai_requests_total']}",
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> routes_single_writer_observability.py:102:13
    |
100 |             "",
101 |             f"# HELP ai_requests_total Total AI requests made",
102 |             f"# TYPE ai_requests_total counter",
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
103 |             f"ai_requests_total {ai_metrics['ai_requests_total']}",
104 |             "",
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> routes_single_writer_observability.py:105:13
    |
103 |             f"ai_requests_total {ai_metrics['ai_requests_total']}",
104 |             "",
105 |             f"# HELP ai_timeouts_total Total AI request timeouts",
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
106 |             f"# TYPE ai_timeouts_total counter", 
107 |             f"ai_timeouts_total {ai_metrics['ai_timeouts_total']}",
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> routes_single_writer_observability.py:106:13
    |
104 |             "",
105 |             f"# HELP ai_timeouts_total Total AI request timeouts",
106 |             f"# TYPE ai_timeouts_total counter", 
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
107 |             f"ai_timeouts_total {ai_metrics['ai_timeouts_total']}",
108 |             "",
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> routes_single_writer_observability.py:109:13
    |
107 |             f"ai_timeouts_total {ai_metrics['ai_timeouts_total']}",
108 |             "",
109 |             f"# HELP ai_timeout_rate AI timeout rate as percentage",
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
110 |             f"# TYPE ai_timeout_rate gauge",
111 |             f"ai_timeout_rate {ai_metrics['ai_timeout_rate']}",
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> routes_single_writer_observability.py:110:13
    |
108 |             "",
109 |             f"# HELP ai_timeout_rate AI timeout rate as percentage",
110 |             f"# TYPE ai_timeout_rate gauge",
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
111 |             f"ai_timeout_rate {ai_metrics['ai_timeout_rate']}",
112 |             "",
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> routes_single_writer_observability.py:113:13
    |
111 |             f"ai_timeout_rate {ai_metrics['ai_timeout_rate']}",
112 |             "",
113 |             f"# HELP ai_success_rate AI request success rate as percentage",
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
114 |             f"# TYPE ai_success_rate gauge",
115 |             f"ai_success_rate {ai_metrics['ai_success_rate']}"
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> routes_single_writer_observability.py:114:13
    |
112 |             "",
113 |             f"# HELP ai_success_rate AI request success rate as percentage",
114 |             f"# TYPE ai_success_rate gauge",
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
115 |             f"ai_success_rate {ai_metrics['ai_success_rate']}"
116 |         ])
    |
help: Remove extraneous `f` prefix

F401 [*] `flask.jsonify` imported but unused
 --> routes_telemetry.py:6:30
  |
4 | """
5 |
6 | from flask import Blueprint, jsonify, render_template_string, request
  |                              ^^^^^^^
7 | from utils.telemetry import GrowthMetrics
8 | import logging
  |
help: Remove unused import

F401 [*] `flask.request` imported but unused
 --> routes_telemetry.py:6:63
  |
4 | """
5 |
6 | from flask import Blueprint, jsonify, render_template_string, request
  |                                                               ^^^^^^^
7 | from utils.telemetry import GrowthMetrics
8 | import logging
  |
help: Remove unused import

F401 [*] `flask.current_app` imported but unused
   --> routes_telemetry.py:289:23
    |
287 | def register_telemetry_routes(app):
288 |     """Register telemetry routes with the Flask app"""
289 |     from flask import current_app
    |                       ^^^^^^^^^^^
290 |     # Import needed for blueprint registration
291 |     telemetry_bp.app = app
    |
help: Remove unused import: `flask.current_app`

F401 [*] `os` imported but unused
 --> scripts/ai_smoke_test.py:8:8
  |
6 | import json
7 | import sys
8 | import os
  |        ^^
9 | from datetime import datetime
  |
help: Remove unused import: `os`

F541 [*] f-string without any placeholders
  --> scripts/check_db_indexes.py:44:27
   |
42 |                 print(f"  - {idx_name}")
43 |                 if "user_id" in idx_def:
44 |                     print(f"    ✓ Has user_id index")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
45 |         
46 |         # Create missing indexes
   |
help: Remove extraneous `f` prefix

F401 [*] `os` imported but unused
 --> scripts/ci_code_audit.py:6:8
  |
4 | Scans for banned references that would cause runtime failures
5 | """
6 | import os
  |        ^^
7 | import re
8 | import sys
  |
help: Remove unused import: `os`

F401 [*] `re` imported but unused
 --> scripts/ci_code_audit.py:7:8
  |
5 | """
6 | import os
7 | import re
  |        ^^
8 | import sys
9 | import subprocess
  |
help: Remove unused import: `re`

F541 [*] f-string without any placeholders
  --> scripts/ci_code_audit.py:65:23
   |
63 |                 results.append("")
64 |             else:
65 |                 print(f"  ✅ CLEAN: No violations found")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
66 |                 results.append(f"CLEAN: {description}")
67 |                 results.append("")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> scripts/ci_code_audit.py:70:19
   |
69 |         except FileNotFoundError:
70 |             print(f"  ⚠️  ripgrep not found, falling back to grep")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
71 |             # Fallback to basic grep
72 |             try:
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> scripts/ci_code_audit.py:83:27
   |
81 |                     print(f"  ❌ FOUND: {violation_count} violations (grep fallback)")
82 |                 else:
83 |                     print(f"  ✅ CLEAN: No violations found (grep fallback)")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
84 |             except Exception as e:
85 |                 print(f"  💥 ERROR: Could not scan for {description}: {e}")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> scripts/ci_code_audit.py:96:11
   |
95 |     # Generate summary
96 |     print(f"\n📊 Code Audit Summary")
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^
97 |     print("=" * 25)
98 |     print(f"Total Violations: {total_violations}")
   |
help: Remove extraneous `f` prefix

F401 [*] `decimal.Decimal` imported but unused
  --> scripts/comprehensive_system_audit.py:12:21
   |
10 | import json
11 | from datetime import datetime, timedelta
12 | from decimal import Decimal
   |                     ^^^^^^^
13 |
14 | # Add project root to path
   |
help: Remove unused import: `decimal.Decimal`

F401 [*] `finbrain.router.normalize_text` imported but unused
  --> scripts/comprehensive_system_audit.py:24:49
   |
22 |     from utils.feature_flags import get_canary_status, is_smart_nlp_enabled, is_smart_corrections_enabled
23 |     from utils.identity import psid_hash
24 |     from finbrain.router import contains_money, normalize_text
   |                                                 ^^^^^^^^^^^^^^
25 |     from parsers.expense import parse_expense, is_correction_message, CORRECTION_PATTERNS
26 |     from utils.production_router import production_router
   |
help: Remove unused import: `finbrain.router.normalize_text`

F401 [*] `traceback` imported but unused
  --> scripts/comprehensive_system_audit.py:27:12
   |
25 |     from parsers.expense import parse_expense, is_correction_message, CORRECTION_PATTERNS
26 |     from utils.production_router import production_router
27 |     import traceback
   |            ^^^^^^^^^
28 |     
29 |     print("=" * 80)
   |
help: Remove unused import: `traceback`

F821 Undefined name `traceback`
   --> scripts/comprehensive_system_audit.py:346:9
    |
344 |     except Exception as e:
345 |         print(f"AUDIT FAILED: {e}")
346 |         traceback.print_exc()
    |         ^^^^^^^^^
347 |         sys.exit(1)
    |

F401 [*] `time` imported but unused
  --> scripts/comprehensive_uat.py:8:8
   |
 6 | import sys
 7 | import os
 8 | import time
   |        ^^^^
 9 | import json
10 | import requests
   |
help: Remove unused import: `time`

F401 [*] `datetime.datetime` imported but unused
  --> scripts/demo_coach_flow.py:10:22
   |
 8 | import time
 9 | import logging
10 | from datetime import datetime
   |                      ^^^^^^^^
11 |
12 | # Add project root to path
   |
help: Remove unused import: `datetime.datetime`

F401 [*] `utils.structured.log_structured_event` imported but unused
  --> scripts/demo_coach_flow.py:29:34
   |
27 |     from handlers.coaching import maybe_continue, handle_coaching_response
28 |     from utils.session import get_coaching_session, delete_coaching_session
29 |     from utils.structured import log_structured_event
   |                                  ^^^^^^^^^^^^^^^^^^^^
30 |     
31 |     test_psid = "demo_user_12345678"
   |
help: Remove unused import: `utils.structured.log_structured_event`

F541 [*] f-string without any placeholders
  --> scripts/demo_coach_flow.py:46:15
   |
45 |     if coaching_reply:
46 |         print(f"✅ Coaching Started!")
   |               ^^^^^^^^^^^^^^^^^^^^^^^
47 |         print(f"Reply: {coaching_reply['text']}")
48 |         print(f"Quick Replies: {[qr['title'] for qr in coaching_reply.get('quick_replies', [])]}")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> scripts/demo_coach_flow.py:63:15
   |
62 |     if reply2:
63 |         print(f"✅ Focus Selected!")
   |               ^^^^^^^^^^^^^^^^^^^^^
64 |         print(f"Reply: {reply2['text']}")
65 |         print(f"Quick Replies: {[qr['title'] for qr in reply2.get('quick_replies', [])]}")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> scripts/demo_coach_flow.py:77:15
   |
76 |     if reply3:
77 |         print(f"✅ Action Committed!")
   |               ^^^^^^^^^^^^^^^^^^^^^^^
78 |         print(f"Reply: {reply3['text']}")
   |
help: Remove extraneous `f` prefix

F401 [*] `hashlib` imported but unused
  --> scripts/deployment_confidence.py:12:8
   |
10 | import requests
11 | import time
12 | import hashlib
   |        ^^^^^^^
13 | from datetime import datetime
14 | from typing import Dict, Any, Optional
   |
help: Remove unused import: `hashlib`

F401 [*] `typing.Dict` imported but unused
  --> scripts/deployment_confidence.py:14:20
   |
12 | import hashlib
13 | from datetime import datetime
14 | from typing import Dict, Any, Optional
   |                    ^^^^
15 |
16 | # Configuration
   |
help: Remove unused import

F401 [*] `typing.Any` imported but unused
  --> scripts/deployment_confidence.py:14:26
   |
12 | import hashlib
13 | from datetime import datetime
14 | from typing import Dict, Any, Optional
   |                          ^^^
15 |
16 | # Configuration
   |
help: Remove unused import

E722 Do not use bare `except`
   --> scripts/deployment_confidence.py:211:17
    |
209 |                     else:
210 |                         self.log_result("AI Response", "WARN", "Empty reply")
211 |                 except:
    |                 ^^^^^^
212 |                     self.log_result("AI Response", "WARN", "Non-JSON response")
213 |             else:
    |

F401 [*] `datetime.timedelta` imported but unused
  --> scripts/dev_simulate_correction.py:11:32
   |
 9 | import json
10 | import time
11 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
12 | from typing import Dict, Any, List
   |
help: Remove unused import: `datetime.timedelta`

E712 Avoid equality comparisons to `True`; use `detected:` for truth checks
   --> scripts/dev_simulate_correction.py:101:27
    |
 99 |                 'detected': detected,
100 |                 'expected': True,
101 |                 'passed': detected == True
    |                           ^^^^^^^^^^^^^^^^
102 |             }
    |
help: Replace with `detected`

E712 Avoid equality comparisons to `False`; use `not corrections_enabled:` for false checks
   --> scripts/dev_simulate_correction.py:293:27
    |
291 |                 'corrections_enabled': corrections_enabled,
292 |                 'expected': False,  # Default should be False
293 |                 'passed': corrections_enabled == False
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
294 |             }
    |
help: Replace with `not corrections_enabled`

F541 [*] f-string without any placeholders
   --> scripts/dev_simulate_correction.py:298:23
    |
296 |             if result['passed']:
297 |                 results['passed'] += 1
298 |                 print(f"✅ Feature flag: SMART_CORRECTIONS disabled by default")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
299 |             else:
300 |                 results['failed'] += 1
    |
help: Remove extraneous `f` prefix

F401 [*] `decimal.Decimal` imported but unused
  --> scripts/dev_simulate_new_user.py:13:21
   |
11 | import time
12 | from datetime import datetime
13 | from decimal import Decimal
   |                     ^^^^^^^
14 |
15 | # Add project root to path
   |
help: Remove unused import: `decimal.Decimal`

F401 [*] `finbrain.router.normalize_text` imported but unused
  --> scripts/dev_simulate_new_user.py:32:53
   |
30 |     try:
31 |         # Import system components
32 |         from finbrain.router import contains_money, normalize_text
   |                                                     ^^^^^^^^^^^^^^
33 |         from parsers.expense import parse_expense, parse_amount_currency_category
34 |         from utils.feature_flags import is_smart_nlp_enabled, is_smart_tone_enabled, get_canary_status
   |
help: Remove unused import: `finbrain.router.normalize_text`

F401 [*] `parsers.expense.parse_amount_currency_category` imported but unused
  --> scripts/dev_simulate_new_user.py:33:52
   |
31 |         # Import system components
32 |         from finbrain.router import contains_money, normalize_text
33 |         from parsers.expense import parse_expense, parse_amount_currency_category
   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
34 |         from utils.feature_flags import is_smart_nlp_enabled, is_smart_tone_enabled, get_canary_status
35 |         from utils.db import upsert_expense_idempotent
   |
help: Remove unused import: `parsers.expense.parse_amount_currency_category`

F401 [*] `utils.db.upsert_expense_idempotent` imported but unused
  --> scripts/dev_simulate_new_user.py:35:30
   |
33 |         from parsers.expense import parse_expense, parse_amount_currency_category
34 |         from utils.feature_flags import is_smart_nlp_enabled, is_smart_tone_enabled, get_canary_status
35 |         from utils.db import upsert_expense_idempotent
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^
36 |         from utils.structured import log_intent_decision, log_expense_logged
37 |         from templates.replies import format_expense_logged_reply, format_help_reply
   |
help: Remove unused import: `utils.db.upsert_expense_idempotent`

F401 [*] `utils.structured.log_intent_decision` imported but unused
  --> scripts/dev_simulate_new_user.py:36:38
   |
34 |         from utils.feature_flags import is_smart_nlp_enabled, is_smart_tone_enabled, get_canary_status
35 |         from utils.db import upsert_expense_idempotent
36 |         from utils.structured import log_intent_decision, log_expense_logged
   |                                      ^^^^^^^^^^^^^^^^^^^
37 |         from templates.replies import format_expense_logged_reply, format_help_reply
   |
help: Remove unused import

F401 [*] `utils.structured.log_expense_logged` imported but unused
  --> scripts/dev_simulate_new_user.py:36:59
   |
34 |         from utils.feature_flags import is_smart_nlp_enabled, is_smart_tone_enabled, get_canary_status
35 |         from utils.db import upsert_expense_idempotent
36 |         from utils.structured import log_intent_decision, log_expense_logged
   |                                                           ^^^^^^^^^^^^^^^^^^
37 |         from templates.replies import format_expense_logged_reply, format_help_reply
   |
help: Remove unused import

F541 [*] f-string without any placeholders
  --> scripts/dev_simulate_new_user.py:44:15
   |
42 |         mid = f"sim_msg_{int(time.time() * 1000)}"
43 |         
44 |         print(f"🧪 Simulating SMART_NLP_ROUTING Flow")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
45 |         print(f"   Text: '{text}'")
46 |         print(f"   Mode: {mode}")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> scripts/dev_simulate_new_user.py:57:15
   |
55 |         canary_status = get_canary_status()
56 |         
57 |         print(f"🏁 Feature Flag Status:")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^
58 |         print(f"   SMART_NLP_ROUTING: {nlp_enabled}")
59 |         print(f"   SMART_NLP_TONE: {tone_enabled}")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/dev_simulate_new_user.py:125:23
    |
123 |                             )
124 |                 
125 |                 print(f"💾 Database Result:")
    |                       ^^^^^^^^^^^^^^^^^^^^^^
126 |                 print(f"   Success: {db_result.get('success', False)}")
127 |                 print(f"   Duplicate: {db_result.get('duplicate', False)}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/dev_simulate_new_user.py:146:23
    |
145 |             else:
146 |                 print(f"❌ Parsing failed - no valid expense found")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
147 |                 intent = "ERROR"
148 |                 response = "I couldn't understand that expense. Try: 'spent 100 on lunch'"
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/dev_simulate_new_user.py:163:15
    |
162 |         # Step 6: Emit Structured Telemetry
163 |         print(f"📈 Structured Telemetry:")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
164 |         
165 |         telemetry_data = {
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/dev_simulate_new_user.py:214:15
    |
212 |         all_valid = all(validation_results.values())
213 |         
214 |         print(f"\n✅ Validation Results:")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
215 |         for check, result in validation_results.items():
216 |             status = "PASS" if result else "FAIL"
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/dev_simulate_new_user.py:220:19
    |
219 |         if all_valid:
220 |             print(f"\n🎉 Simulation PASSED - All validations successful!")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
221 |         else:
222 |             print(f"\n💥 Simulation FAILED - Some validations failed!")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/dev_simulate_new_user.py:222:19
    |
220 |             print(f"\n🎉 Simulation PASSED - All validations successful!")
221 |         else:
222 |             print(f"\n💥 Simulation FAILED - Some validations failed!")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
223 |         
224 |         return {
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/dev_simulate_new_user.py:309:15
    |
308 |         # Print acceptance checklist
309 |         print(f"\n✅ ACCEPTANCE CHECKLIST:")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
310 |         print(f"   ✓ All tests in test_nlp_logging.py would pass")
311 |         print(f"   ✓ contains_money() called before SUMMARY in routing")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/dev_simulate_new_user.py:310:15
    |
308 |         # Print acceptance checklist
309 |         print(f"\n✅ ACCEPTANCE CHECKLIST:")
310 |         print(f"   ✓ All tests in test_nlp_logging.py would pass")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
311 |         print(f"   ✓ contains_money() called before SUMMARY in routing")
312 |         print(f"   ✓ Enhanced parse_expense() extracts merchant and category")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/dev_simulate_new_user.py:311:15
    |
309 |         print(f"\n✅ ACCEPTANCE CHECKLIST:")
310 |         print(f"   ✓ All tests in test_nlp_logging.py would pass")
311 |         print(f"   ✓ contains_money() called before SUMMARY in routing")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
312 |         print(f"   ✓ Enhanced parse_expense() extracts merchant and category")
313 |         print(f"   ✓ Structured telemetry with 'smart_nlp_v1' emitted")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/dev_simulate_new_user.py:312:15
    |
310 |         print(f"   ✓ All tests in test_nlp_logging.py would pass")
311 |         print(f"   ✓ contains_money() called before SUMMARY in routing")
312 |         print(f"   ✓ Enhanced parse_expense() extracts merchant and category")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
313 |         print(f"   ✓ Structured telemetry with 'smart_nlp_v1' emitted")
314 |         print(f"   ✓ Coach-tone replies generated when enabled")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/dev_simulate_new_user.py:313:15
    |
311 |         print(f"   ✓ contains_money() called before SUMMARY in routing")
312 |         print(f"   ✓ Enhanced parse_expense() extracts merchant and category")
313 |         print(f"   ✓ Structured telemetry with 'smart_nlp_v1' emitted")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
314 |         print(f"   ✓ Coach-tone replies generated when enabled")
315 |         print(f"   ✓ Feature flags provide safe rollback mechanism")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/dev_simulate_new_user.py:314:15
    |
312 |         print(f"   ✓ Enhanced parse_expense() extracts merchant and category")
313 |         print(f"   ✓ Structured telemetry with 'smart_nlp_v1' emitted")
314 |         print(f"   ✓ Coach-tone replies generated when enabled")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
315 |         print(f"   ✓ Feature flags provide safe rollback mechanism")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/dev_simulate_new_user.py:315:15
    |
313 |         print(f"   ✓ Structured telemetry with 'smart_nlp_v1' emitted")
314 |         print(f"   ✓ Coach-tone replies generated when enabled")
315 |         print(f"   ✓ Feature flags provide safe rollback mechanism")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
316 |         
317 |     else:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/dev_simulate_new_user.py:321:15
    |
320 |         failed_tests = [r for r in results if not r['success']]
321 |         print(f"\nFailed tests:")
    |               ^^^^^^^^^^^^^^^^^^
322 |         for test in failed_tests:
323 |             print(f"   - {test['test_case']}: expected {test['expected_intent']}, got {test['actual_intent']}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/dev_simulate_new_user.py:370:15
    |
369 |     if result.get('success'):
370 |         print(f"\n🎉 Simulation completed successfully!")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
371 |         sys.exit(0)
372 |     else:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/dev_simulate_new_user.py:373:15
    |
371 |         sys.exit(0)
372 |     else:
373 |         print(f"\n💥 Simulation failed!")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^
374 |         sys.exit(1)
    |
help: Remove extraneous `f` prefix

F401 [*] `json` imported but unused
 --> scripts/diagnostics_cli.py:5:8
  |
3 | FinBrain Diagnostic CLI - Health monitoring script for development
4 | """
5 | import json
  |        ^^^^
6 | import sys
7 | import os
  |
help: Remove unused import: `json`

F401 [*] `os` imported but unused
 --> scripts/diagnostics_cli.py:7:8
  |
5 | import json
6 | import sys
7 | import os
  |        ^^
8 | from datetime import datetime
9 | import requests
  |
help: Remove unused import: `os`

E401 [*] Multiple imports on one line
 --> scripts/e2e_db_truth.py:6:1
  |
4 | and that users are isolated in storage. Exits nonzero on mismatch.
5 | """
6 | import os, sys, json, time, hashlib
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
7 | from datetime import datetime, timedelta
8 | from urllib.request import Request, urlopen
  |
help: Split imports

F401 [*] `time` imported but unused
 --> scripts/e2e_db_truth.py:6:23
  |
4 | and that users are isolated in storage. Exits nonzero on mismatch.
5 | """
6 | import os, sys, json, time, hashlib
  |                       ^^^^
7 | from datetime import datetime, timedelta
8 | from urllib.request import Request, urlopen
  |
help: Remove unused import: `time`

F401 [*] `datetime.timedelta` imported but unused
 --> scripts/e2e_db_truth.py:7:32
  |
5 | """
6 | import os, sys, json, time, hashlib
7 | from datetime import datetime, timedelta
  |                                ^^^^^^^^^
8 | from urllib.request import Request, urlopen
9 | import psycopg2, psycopg2.extras
  |
help: Remove unused import: `datetime.timedelta`

E401 [*] Multiple imports on one line
  --> scripts/e2e_db_truth.py:9:1
   |
 7 | from datetime import datetime, timedelta
 8 | from urllib.request import Request, urlopen
 9 | import psycopg2, psycopg2.extras
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
10 |
11 | APP = os.environ.get("APP_ORIGIN","http://localhost:5000")
   |
help: Split imports

E701 Multiple statements on one line (colon)
  --> scripts/e2e_db_truth.py:29:12
   |
27 | def die(msg, path=None):
28 |     print(f"FAIL: {msg}")
29 |     if path: print(f"See: {path}")
   |            ^
30 |     sys.exit(2)
   |

E701 Multiple statements on one line (colon)
  --> scripts/e2e_db_truth.py:58:11
   |
56 | open(f"{OUTDIR}/dbtruth_db_row.json","w").write(json.dumps({k:str(v) for k,v in (row or {}).items()}, indent=2))
57 |
58 | if not row: die("No expense row found for user after chat insert")
   |           ^
59 |
60 | # 3) Compare values
   |

E401 [*] Multiple imports on one line
 --> scripts/finbrain_diagnose.py:2:1
  |
1 | # finbrain_diagnose.py
2 | import os, time, json, requests
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3 |
4 | BASE = os.environ.get("BASE_URL", "http://127.0.0.1:5000").rstrip("/")
  |
help: Split imports

E701 Multiple statements on one line (colon)
  --> scripts/finbrain_diagnose.py:52:17
   |
50 | try:
51 |     ai_flag = (body2 or {}).get("ai_status") or (body2 or {}).get("AI_ENABLED")
52 | except Exception: pass
   |                 ^
53 | print("GET /ops/telemetry ->", code2, "| AI:", ai_flag, "| Extra:", clip(body2))
   |

F401 [*] `os` imported but unused
  --> scripts/generate_recovery_doc.py:17:8
   |
15 | """
16 |
17 | import os
   |        ^^
18 | import sys
19 | import argparse
   |
help: Remove unused import: `os`

F401 [*] `typing.Dict` imported but unused
  --> scripts/generate_recovery_doc.py:22:20
   |
20 | import re
21 | import datetime
22 | from typing import Dict, List, Optional, Tuple, Set
   |                    ^^^^
23 | from pathlib import Path
24 | import subprocess
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> scripts/generate_recovery_doc.py:22:42
   |
20 | import re
21 | import datetime
22 | from typing import Dict, List, Optional, Tuple, Set
   |                                          ^^^^^
23 | from pathlib import Path
24 | import subprocess
   |
help: Remove unused import

F401 [*] `typing.Set` imported but unused
  --> scripts/generate_recovery_doc.py:22:49
   |
20 | import re
21 | import datetime
22 | from typing import Dict, List, Optional, Tuple, Set
   |                                                 ^^^
23 | from pathlib import Path
24 | import subprocess
   |
help: Remove unused import

F401 [*] `subprocess` imported but unused
  --> scripts/generate_recovery_doc.py:24:8
   |
22 | from typing import Dict, List, Optional, Tuple, Set
23 | from pathlib import Path
24 | import subprocess
   |        ^^^^^^^^^^
25 | import logging
   |
help: Remove unused import: `subprocess`

F541 [*] f-string without any placeholders
   --> scripts/generate_recovery_doc.py:255:20
    |
253 |               section += f"- {requirement}\n"
254 |               
255 |           section += f"""
    |  ____________________^
256 | |
257 | | ### Recovery Procedures
258 | |
259 | | """
    | |___^
260 |           
261 |           if migration.recovery_steps:
    |
help: Remove extraneous `f` prefix

F401 [*] `concurrent.futures.ThreadPoolExecutor` imported but unused
  --> scripts/performance_test.py:10:32
   |
 8 | import statistics
 9 | import requests
10 | from concurrent.futures import ThreadPoolExecutor
   |                                ^^^^^^^^^^^^^^^^^^
11 | import sys
   |
help: Remove unused import: `concurrent.futures.ThreadPoolExecutor`

F401 [*] `sys` imported but unused
  --> scripts/performance_test.py:11:8
   |
 9 | import requests
10 | from concurrent.futures import ThreadPoolExecutor
11 | import sys
   |        ^^^
12 |
13 | BASE_URL = "http://localhost:5000"
   |
help: Remove unused import: `sys`

F401 [*] `sys` imported but unused
 --> scripts/probe_imports.py:5:8
  |
3 | Runtime import probe to detect circular dependencies and broken imports
4 | """
5 | import sys
  |        ^^^
6 | import traceback
  |
help: Remove unused import: `sys`

F401 [*] `json` imported but unused
 --> scripts/security_audit.py:8:8
  |
6 | import os
7 | import requests
8 | import json
  |        ^^^^
9 | import time
  |
help: Remove unused import: `json`

E722 Do not use bare `except`
  --> scripts/security_audit.py:91:17
   |
89 |                             hardcoded_found = True
90 |                             break
91 |                 except:
   |                 ^^^^^^
92 |                     continue
   |

F401 [*] `handlers.coaching._start_coaching_flow` imported but unused
  --> scripts/simple_coaching_test.py:17:51
   |
15 |     print("=" * 40)
16 |     
17 |     from handlers.coaching import maybe_continue, _start_coaching_flow, _get_topic_suggestions
   |                                                   ^^^^^^^^^^^^^^^^^^^^
18 |     from utils.session import delete_coaching_session
   |
help: Remove unused import: `handlers.coaching._start_coaching_flow`

F541 [*] f-string without any placeholders
  --> scripts/simple_coaching_test.py:34:15
   |
33 |     if result:
34 |         print(f"   ✅ Coaching started successfully!")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
35 |         print(f"   Intent: {result['intent']}")
36 |         print(f"   Text: {result['text'][:50]}...")
   |
help: Remove extraneous `f` prefix

F401 [*] `unittest.mock.Mock` imported but unused
  --> scripts/smoke_coach_guard.py:21:27
   |
19 | import os
20 | import json
21 | from unittest.mock import Mock, patch, MagicMock
   |                           ^^^^
22 |
23 | # Add project root to path
   |
help: Remove unused import

F401 [*] `unittest.mock.MagicMock` imported but unused
  --> scripts/smoke_coach_guard.py:21:40
   |
19 | import os
20 | import json
21 | from unittest.mock import Mock, patch, MagicMock
   |                                        ^^^^^^^^^
22 |
23 | # Add project root to path
   |
help: Remove unused import

F841 Local variable `test_psid_hash` is assigned to but never used
  --> scripts/smoke_coach_guard.py:55:13
   |
53 |             router = ProductionRouter()
54 |             test_psid = "test_psid_12345"
55 |             test_psid_hash = "test_hash_67890"
   |             ^^^^^^^^^^^^^^
56 |             test_rid = "test_rid_999"
   |
help: Remove assignment to unused variable `test_psid_hash`

F541 [*] f-string without any placeholders
  --> scripts/smoke_coach_guard.py:96:11
   |
94 | def test_coaching_guards():
95 |     """Test coaching guard functions directly"""
96 |     print(f"\n🛡️ Testing Coaching Guards")
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
97 |     
98 |     from handlers.coaching import can_start_coach, can_continue, check_redis_health
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/smoke_coach_guard.py:145:11
    |
144 |     # Summary
145 |     print(f"\n📊 SMOKE TEST SUMMARY")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^
146 |     print("=" * 50)
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> scripts/system_health_report.py:87:19
   |
85 |         if resp.status_code == 200:
86 |             print(f"   Dashboard Load: {db_query_time:.2f}ms")
87 |             print(f"   Connection: ✅ HEALTHY")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
88 |             
89 |             # Check if dashboard has data
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> scripts/system_health_report.py:91:23
   |
89 |             # Check if dashboard has data
90 |             if "expense" in resp.text.lower() or "total" in resp.text.lower():
91 |                 print(f"   Data Access: ✅ ACTIVE")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
92 |             else:
93 |                 print(f"   Data Access: ⚠️ NO DATA")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> scripts/system_health_report.py:93:23
   |
91 |                 print(f"   Data Access: ✅ ACTIVE")
92 |             else:
93 |                 print(f"   Data Access: ⚠️ NO DATA")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
94 |         else:
95 |             print(f"   ❌ Database query failed: {resp.status_code}")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/system_health_report.py:104:19
    |
102 |         resp = requests.get(f"{BASE_URL}/ops", auth=AUTH, timeout=10)
103 |         if resp.status_code == 200:
104 |             print(f"   Token Monitoring: ✅ ACTIVE")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
105 |             print(f"   Ops Dashboard: ✅ ACCESSIBLE")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/system_health_report.py:105:19
    |
103 |         if resp.status_code == 200:
104 |             print(f"   Token Monitoring: ✅ ACTIVE")
105 |             print(f"   Ops Dashboard: ✅ ACCESSIBLE")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
106 |             
107 |             # Check webhook security
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/system_health_report.py:111:23
    |
109 |                                        json={"test": "security"}, timeout=5)
110 |             if webhook_resp.status_code in [400, 401, 403]:
111 |                 print(f"   Webhook Security: ✅ ENFORCED")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
112 |             else:
113 |                 print(f"   Webhook Security: ⚠️ CHECK NEEDED")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/system_health_report.py:113:23
    |
111 |                 print(f"   Webhook Security: ✅ ENFORCED")
112 |             else:
113 |                 print(f"   Webhook Security: ⚠️ CHECK NEEDED")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
114 |         else:
115 |             print(f"   ❌ Facebook ops failed: {resp.status_code}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/system_health_report.py:130:19
    |
128 |             ai_limiter = telemetry.get("ai_limiter", {})
129 |             config = ai_limiter.get("config", {})
130 |             print(f"   AI Rate Limiting: ✅ ACTIVE")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
131 |             print(f"   Per-user Limit: {config.get('AI_MAX_CALLS_PER_MIN_PER_PSID', 0)}/min")
132 |             print(f"   Global Limit: {config.get('AI_MAX_CALLS_PER_MIN', 0)}/min")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/system_health_report.py:258:11
    |
256 |         json.dump(report_data, f, indent=2)
257 |     
258 |     print(f"\nDetailed health data saved to system_health_report.json")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
259 |     
260 |     return health_percentage >= 75
    |
help: Remove extraneous `f` prefix

F401 [*] `json` imported but unused
  --> scripts/test_coaching_hardening.py:8:8
   |
 7 | import requests
 8 | import json
   |        ^^^^
 9 | import time
10 | import os
   |
help: Remove unused import: `json`

F401 [*] `os` imported but unused
  --> scripts/test_coaching_hardening.py:10:8
   |
 8 | import json
 9 | import time
10 | import os
   |        ^^
11 | from typing import Dict, Any
   |
help: Remove unused import: `os`

E722 Do not use bare `except`
  --> scripts/test_coaching_hardening.py:53:17
   |
51 |                     if 'timestamp' in data:
52 |                         print(f"     Latest data: {data['timestamp']}")
53 |                 except:
   |                 ^^^^^^
54 |                     print(f"  ✅ {response.status_code} (non-JSON response)")
55 |             else:
   |

F541 [*] f-string without any placeholders
  --> scripts/test_coaching_hardening.py:67:11
   |
65 |     """Test circuit breaker manual controls"""
66 |     
67 |     print(f"\n🔌 Testing Circuit Breaker Controls...")
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
68 |     
69 |     # Test opening circuit breaker
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/test_coaching_hardening.py:105:11
    |
103 |     """Test memory management and cleanup"""
104 |     
105 |     print(f"\n🧠 Testing Memory Management...")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
106 |     
107 |     try:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/test_coaching_hardening.py:134:11
    |
132 |     """Test cache operations and statistics"""
133 |     
134 |     print(f"\n💾 Testing Cache Operations...")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
135 |     
136 |     try:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/test_coaching_hardening.py:158:11
    |
156 |     """Test the comprehensive coaching dashboard"""
157 |     
158 |     print(f"\n📊 Testing Comprehensive Dashboard...")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
159 |     
160 |     try:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/test_coaching_hardening.py:174:19
    |
172 |                     available_sections.append(section)
173 |             
174 |             print(f"  ✅ Dashboard loaded successfully")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
175 |             print(f"  📋 Available sections: {', '.join(available_sections)}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/test_coaching_hardening.py:198:11
    |
196 |     """Test that hardening is properly integrated into the live system"""
197 |     
198 |     print(f"\n🔗 Testing Hardening Integration...")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
199 |     
200 |     try:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/test_coaching_hardening.py:212:19
    |
211 |         if response.status_code == 200:
212 |             print(f"  ✅ Coaching monitoring properly integrated")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
213 |         elif response.status_code == 503:
214 |             data = response.json()
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/test_coaching_hardening.py:216:23
    |
214 |             data = response.json()
215 |             if 'monitoring_unavailable' in data.get('status', ''):
216 |                 print(f"  ⚠️  Coaching monitoring not loaded (components missing)")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
217 |             else:
218 |                 print(f"  ✅ Coaching monitoring integrated but degraded")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/test_coaching_hardening.py:218:23
    |
216 |                 print(f"  ⚠️  Coaching monitoring not loaded (components missing)")
217 |             else:
218 |                 print(f"  ✅ Coaching monitoring integrated but degraded")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
219 |         else:
220 |             print(f"  ❌ Coaching monitoring integration failed: {response.status_code}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/test_coaching_hardening.py:228:11
    |
226 |     """Print test summary"""
227 |     
228 |     print(f"\n" + "=" * 60)
    |           ^^^^^
229 |     print("📋 TEST SUMMARY")
230 |     print("=" * 60)
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> scripts/test_endpoint_headers.py:46:15
   |
44 |         expires = headers.get('Expires', '')
45 |         
46 |         print(f"\n📋 Cache Headers Analysis:")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
47 |         print(f"  Cache-Control: {cache_control}")
48 |         print(f"  Pragma: {pragma}")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/test_endpoint_headers.py:124:15
    |
122 |         overall_pass = headers_pass and data_valid and response.status_code == 200
123 |         
124 |         print(f"\n📊 Headers Test Summary:")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
125 |         print(f"  Cache Headers: {'PASS' if headers_pass else 'FAIL'} ({cache_score}/4 directives)")
126 |         print(f"  Data Format: {'PASS' if data_valid else 'FAIL'}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/test_endpoint_headers.py:140:21
    |
138 |             for key, value in headers.items():
139 |                 f.write(f"  {key}: {value}\n")
140 |             f.write(f"\nCache Headers Analysis:\n")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
141 |             f.write(f"  no-store: {'✅' if has_no_store else '❌'}\n")
142 |             f.write(f"  no-cache: {'✅' if has_no_cache else '❌'}\n")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/test_endpoint_headers.py:146:21
    |
144 |             f.write(f"  private: {'✅' if has_private else '❌'}\n")
145 |             f.write(f"\nMissing directives: {', '.join(required_directives) if required_directives else 'None'}\n")
146 |             f.write(f"\nTest Results:\n")
    |                     ^^^^^^^^^^^^^^^^^^^^
147 |             f.write(f"  Headers: {'PASS' if headers_pass else 'FAIL'}\n")
148 |             f.write(f"  Data: {'PASS' if data_valid else 'FAIL'}\n")
    |
help: Remove extraneous `f` prefix

E722 Do not use bare `except`
   --> scripts/test_endpoint_headers.py:164:13
    |
162 |                 else:
163 |                     f.write(response.text)
164 |             except:
    |             ^^^^^^
165 |                 f.write(response.text)
    |

F841 Local variable `test_message` is assigned to but never used
  --> scripts/test_user_journeys.py:39:13
   |
37 |         try:
38 |             # Test expense message
39 |             test_message = "burger 50"
   |             ^^^^^^^^^^^^
40 |             
41 |             # Check if there's a chat endpoint we can test
   |
help: Remove assignment to unused variable `test_message`

F841 Local variable `test_message` is assigned to but never used
  --> scripts/test_user_journeys.py:61:13
   |
60 |         try:
61 |             test_message = "rickshaw 100 and jhalmuri 10"
   |             ^^^^^^^^^^^^
62 |             
63 |             # Similar limitation as single expense - need actual expense processing endpoint
   |
help: Remove assignment to unused variable `test_message`

F841 Local variable `correction_message` is assigned to but never used
  --> scripts/test_user_journeys.py:82:13
   |
81 |         try:
82 |             correction_message = "sorry, it's 500 not 50"
   |             ^^^^^^^^^^^^^^^^^^
83 |             
84 |             response = self.session.get(f"{self.base_url}/health", timeout=10)
   |
help: Remove assignment to unused variable `correction_message`

E722 Do not use bare `except`
   --> scripts/test_user_journeys.py:157:21
    |
155 |                             self.log_result("AI Adapter v2", "PARTIAL", "AI endpoints not found, but system stable")
156 |                             return True
157 |                     except:
    |                     ^^^^^^
158 |                         self.log_result("AI Adapter v2", "PARTIAL", "System stable, AI adapter status unknown")
159 |                         return True
    |

F541 [*] f-string without any placeholders
   --> scripts/test_user_journeys.py:198:15
    |
196 |         overall_status = "PASS" if passed == total else "FAIL"
197 |         
198 |         print(f"\n📊 User Journeys Test Summary:")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
199 |         print(f"  Passed: {passed}/{total} journeys")
200 |         print(f"  Overall: {overall_status} {'✅' if overall_status == 'PASS' else '❌'}")
    |
help: Remove extraneous `f` prefix

F401 [*] `utils.crypto.ensure_hashed` imported but unused
  --> scripts/uat_ensure_hashed.py:11:26
   |
10 | from app import app
11 | from utils.crypto import ensure_hashed
   |                          ^^^^^^^^^^^^^
12 | from utils.security import hash_psid
13 | from utils.db import record_expense, get_user_spending_summary
   |
help: Remove unused import: `utils.crypto.ensure_hashed`

F541 [*] f-string without any placeholders
  --> scripts/uat_ensure_hashed.py:68:23
   |
67 |             if success:
68 |                 print(f"✓ Both raw PSID and hash parameter produce identical results")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
69 |                 print(f"✓ Total expenses: ${summary_raw.get('total', 0)}")
70 |                 print(f"✓ Transaction count: {summary_raw.get('total_transactions', 0)}")
   |
help: Remove extraneous `f` prefix

F401 [*] `os` imported but unused
  --> scripts/update_changelog.py:17:8
   |
15 | """
16 |
17 | import os
   |        ^^
18 | import sys
19 | import argparse
   |
help: Remove unused import: `os`

F401 [*] `typing.Dict` imported but unused
  --> scripts/update_changelog.py:22:20
   |
20 | import re
21 | import datetime
22 | from typing import Dict, List, Optional, Tuple
   |                    ^^^^
23 | from pathlib import Path
24 | import subprocess
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> scripts/update_changelog.py:22:42
   |
20 | import re
21 | import datetime
22 | from typing import Dict, List, Optional, Tuple
   |                                          ^^^^^
23 | from pathlib import Path
24 | import subprocess
   |
help: Remove unused import

F401 [*] `json` imported but unused
  --> scripts/verify_always_on.py:10:8
   |
 8 | import sys
 9 | import time
10 | import json
   |        ^^^^
11 | from datetime import datetime
   |
help: Remove unused import: `json`

F401 [*] `utils.config.FEATURE_FLAGS_VERSION` imported but unused
  --> scripts/verify_always_on.py:22:34
   |
21 |     try:
22 |         from utils.config import FEATURE_FLAGS_VERSION, get_config_summary
   |                                  ^^^^^^^^^^^^^^^^^^^^^
23 |         from utils.feature_flags import feature_enabled, get_canary_status
   |
help: Remove unused import: `utils.config.FEATURE_FLAGS_VERSION`

F541 [*] f-string without any placeholders
  --> scripts/verify_always_on.py:33:15
   |
31 |         # Test feature flags
32 |         test_psid = "verification_test_psid"
33 |         print(f"\nFeature Flag Tests:")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^
34 |         print(f"  SMART_NLP_ROUTING: {feature_enabled(test_psid, 'SMART_NLP_ROUTING')}")
35 |         print(f"  SMART_CORRECTIONS: {feature_enabled(test_psid, 'SMART_CORRECTIONS')}")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/verify_always_on.py:107:19
    |
105 |             result = handle_multi_expense_logging(test_psid, test_mid, test_text, datetime.now())
106 |             
107 |             print(f"\nLogging result:")
    |                   ^^^^^^^^^^^^^^^^^^^^
108 |             print(f"  Intent: {result['intent']}")
109 |             print(f"  Total amount: ৳{result['amount']}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/verify_always_on.py:114:19
    |
112 |             # Verify database entries
113 |             db_expenses = db.session.query(Expense).filter_by(user_id=test_psid).all()
114 |             print(f"\nDatabase verification:")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
115 |             print(f"  Entries created: {len(db_expenses)}")
116 |             for expense in db_expenses:
    |
help: Remove extraneous `f` prefix

F401 [*] `os` imported but unused
 --> security_checks.py:7:8
  |
5 | """
6 |
7 | import os
  |        ^^
8 | import sys
9 | import subprocess
  |
help: Remove unused import: `os`

F541 [*] f-string without any placeholders
   --> security_checks.py:164:11
    |
163 |     # Summary
164 |     print(f"\n🎯 SECURITY SCAN RESULTS:")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
165 |     print(f"Total violations: {len(all_violations)}")
    |
help: Remove extraneous `f` prefix

F401 [*] `os` imported but unused
 --> security_scanner.py:7:8
  |
5 | """
6 |
7 | import os
  |        ^^
8 | import re
9 | import sys
  |
help: Remove unused import: `os`

F401 [*] `typing.Tuple` imported but unused
  --> security_scanner.py:13:32
   |
11 | import subprocess
12 | from pathlib import Path
13 | from typing import List, Dict, Tuple, Set
   |                                ^^^^^
14 | import logging
   |
help: Remove unused import

F401 [*] `typing.Set` imported but unused
  --> security_scanner.py:13:39
   |
11 | import subprocess
12 | from pathlib import Path
13 | from typing import List, Dict, Tuple, Set
   |                                       ^^^
14 | import logging
   |
help: Remove unused import

F541 [*] f-string without any placeholders
   --> security_scanner.py:323:13
    |
321 |             "=" * 50,
322 |             "",
323 |             f"📊 SCAN STATISTICS:",
    |             ^^^^^^^^^^^^^^^^^^^^^^
324 |             f"  Files Scanned: {self.scan_stats['files_scanned']}",
325 |             f"  Files Excluded: {self.scan_stats['excluded_files']}",
    |
help: Remove extraneous `f` prefix

F841 Local variable `low_violations` is assigned to but never used
   --> security_scanner.py:343:13
    |
341 |             high_violations = [v for v in self.violations if v.get('severity') == 'HIGH']
342 |             medium_violations = [v for v in self.violations if v.get('severity') == 'MEDIUM']
343 |             low_violations = [v for v in self.violations if v.get('severity') == 'LOW']
    |             ^^^^^^^^^^^^^^
344 |             
345 |             if high_violations:
    |
help: Remove assignment to unused variable `low_violations`

F841 Local variable `results` is assigned to but never used
   --> security_scanner.py:382:5
    |
380 |     """Main security scanner entry point"""
381 |     scanner = SecurityScanner()
382 |     results = scanner.scan_all()
    |     ^^^^^^^
383 |     
384 |     # Generate and display report
    |
help: Remove assignment to unused variable `results`

F401 [*] `json` imported but unused
 --> test_auth_enforcement.py:6:8
  |
4 | """
5 | import pytest
6 | import json
  |        ^^^^
7 | from flask import Flask
8 | from unittest.mock import patch
  |
help: Remove unused import: `json`

F401 [*] `flask.Flask` imported but unused
 --> test_auth_enforcement.py:7:19
  |
5 | import pytest
6 | import json
7 | from flask import Flask
  |                   ^^^^^
8 | from unittest.mock import patch
  |
help: Remove unused import: `flask.Flask`

F401 `parsers.expense.extract_all_expenses` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> test_bengali_food_enhancements.py:31:48
   |
30 | try:
31 |     from parsers.expense import parse_expense, extract_all_expenses
   |                                                ^^^^^^^^^^^^^^^^^^^^
32 |     print("✓ Successfully imported expense parser functions")
33 | except ImportError as e:
   |
help: Remove unused import: `parsers.expense.extract_all_expenses`

F541 [*] f-string without any placeholders
   --> test_bengali_food_enhancements.py:456:15
    |
455 |         # Show all test results
456 |         print(f"\nDETAILED TEST RESULTS:")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
457 |         print("-" * 70)
458 |         for result in self.test_results:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> test_bengali_food_enhancements.py:471:19
    |
469 |                     print(f"  Notes: {result.notes}")
470 |         else:
471 |             print(f"\n🎉 ALL TESTS PASSED! Bengali food alias enhancements are working correctly.")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
472 |         
473 |         # Critical enhancements status
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> test_bengali_food_enhancements.py:474:15
    |
473 |         # Critical enhancements status
474 |         print(f"\nCRITICAL ENHANCEMENTS STATUS:")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
475 |         print("-" * 70)
476 |         critical_tests = {
    |
help: Remove extraneous `f` prefix

F401 [*] `pytest` imported but unused
 --> test_e2e_data_flow.py:7:8
  |
5 | """
6 |
7 | import pytest
  |        ^^^^^^
8 | import json
9 | import time
  |
help: Remove unused import: `pytest`

F401 [*] `json` imported but unused
  --> test_e2e_data_flow.py:8:8
   |
 7 | import pytest
 8 | import json
   |        ^^^^
 9 | import time
10 | from typing import Dict, Any, List, Optional
   |
help: Remove unused import: `json`

F401 [*] `time` imported but unused
  --> test_e2e_data_flow.py:9:8
   |
 7 | import pytest
 8 | import json
 9 | import time
   |        ^^^^
10 | from typing import Dict, Any, List, Optional
   |
help: Remove unused import: `time`

F401 [*] `typing.Optional` imported but unused
  --> test_e2e_data_flow.py:10:37
   |
 8 | import json
 9 | import time
10 | from typing import Dict, Any, List, Optional
   |                                     ^^^^^^^^
11 |
12 | class DataFlowVerificationResult:
   |
help: Remove unused import: `typing.Optional`

F401 [*] `utils.expense_repair.normalize_category` imported but unused
   --> test_e2e_data_flow.py:132:88
    |
130 |             import sys
131 |             sys.path.append('/home/runner/workspace')
132 |             from utils.expense_repair import looks_like_expense, extract_amount_minor, normalize_category
    |                                                                                        ^^^^^^^^^^^^^^^^^^
133 |             
134 |             detected_as_expense = looks_like_expense(input_text)
    |
help: Remove unused import: `utils.expense_repair.normalize_category`

F401 [*] `utils.pca_flags.pca_flags` imported but unused
  --> test_feature_flags.py:13:33
   |
11 | def test_pca_modes():
12 |     """Test all 4 PCA modes and their conditional logic"""
13 |     from utils.pca_flags import pca_flags, PCAMode
   |                                 ^^^^^^^^^
14 |     
15 |     print("🚀 Feature Flags/Kill Switch Test Suite")
   |
help: Remove unused import

F401 [*] `utils.pca_flags.PCAMode` imported but unused
  --> test_feature_flags.py:13:44
   |
11 | def test_pca_modes():
12 |     """Test all 4 PCA modes and their conditional logic"""
13 |     from utils.pca_flags import pca_flags, PCAMode
   |                                            ^^^^^^^
14 |     
15 |     print("🚀 Feature Flags/Kill Switch Test Suite")
   |
help: Remove unused import

F541 [*] f-string without any placeholders
  --> test_feature_flags.py:64:11
   |
62 |         os.environ['PCA_MODE'] = original_mode
63 |     
64 |     print(f"\n🎯 All 4 PCA modes tested successfully!")
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
65 |     print("✅ Conditional flow logic working correctly")
66 |     print("✅ Feature Flags system fully operational")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> test_feature_flags.py:70:11
   |
68 | def test_production_router_integration():
69 |     """Test that production router recognizes all modes"""
70 |     print(f"\n🔧 Testing Production Router Integration")
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
71 |     print("-" * 40)
   |
help: Remove extraneous `f` prefix

F401 [*] `utils.pca_flags.PCAMode` imported but unused
  --> test_feature_flags.py:75:37
   |
73 |     try:
74 |         from utils.production_router import ProductionRouter
75 |         from utils.pca_flags import PCAMode
   |                                     ^^^^^^^
76 |         
77 |         # Create router instance
   |
help: Remove unused import: `utils.pca_flags.PCAMode`

F541 [*] f-string without any placeholders
  --> test_feature_flags.py:97:11
   |
95 | def test_kill_switch():
96 |     """Test global kill switch functionality"""
97 |     print(f"\n🛑 Testing Kill Switch")
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
98 |     print("-" * 40)
   |
help: Remove extraneous `f` prefix

F401 [*] `json` imported but unused
  --> test_integration_api.py:8:8
   |
 6 | import pytest
 7 | import requests
 8 | import json
   |        ^^^^
 9 | import time
10 | from typing import Dict, Any
   |
help: Remove unused import: `json`

F401 [*] `time` imported but unused
  --> test_integration_api.py:9:8
   |
 7 | import requests
 8 | import json
 9 | import time
   |        ^^^^
10 | from typing import Dict, Any
   |
help: Remove unused import: `time`

F401 [*] `typing.Dict` imported but unused
  --> test_integration_api.py:10:20
   |
 8 | import json
 9 | import time
10 | from typing import Dict, Any
   |                    ^^^^
11 |
12 | # Base URL for the application
   |
help: Remove unused import

F401 [*] `typing.Any` imported but unused
  --> test_integration_api.py:10:26
   |
 8 | import json
 9 | import time
10 | from typing import Dict, Any
   |                          ^^^
11 |
12 | # Base URL for the application
   |
help: Remove unused import

F401 [*] `json` imported but unused
 --> test_new_expense_log_system.py:7:8
  |
5 | """
6 |
7 | import json
  |        ^^^^
8 | from app import app
  |
help: Remove unused import: `json`

F541 [*] f-string without any placeholders
  --> test_new_expense_log_system.py:89:27
   |
88 |                 if intent_match:
89 |                     print(f"  ✅ PASS")
   |                           ^^^^^^^^^^^^
90 |                     passed_tests += 1
91 |                 else:
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> test_new_expense_log_system.py:92:27
   |
90 |                     passed_tests += 1
91 |                 else:
92 |                     print(f"  ❌ FAIL - Intent mismatch")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
93 |                     
94 |             except Exception as e:
   |
help: Remove extraneous `f` prefix

F401 [*] `typing.Tuple` imported but unused
  --> test_nl_parser.py:11:32
   |
 9 | import json
10 | import sys
11 | from typing import Dict, List, Tuple
   |                                ^^^^^
12 | from datetime import datetime
   |
help: Remove unused import: `typing.Tuple`

F401 [*] `utils.nl_expense_parser.ExpenseParseResult` imported but unused
  --> test_nl_parser.py:15:55
   |
14 | # Import our implementation
15 | from utils.nl_expense_parser import parse_nl_expense, ExpenseParseResult
   |                                                       ^^^^^^^^^^^^^^^^^^
16 |
17 | class NLParserTester:
   |
help: Remove unused import: `utils.nl_expense_parser.ExpenseParseResult`

F541 [*] f-string without any placeholders
   --> test_nl_parser.py:241:15
    |
239 |         targets = report['target_achievement']
240 |         
241 |         print(f"📊 OVERALL PERFORMANCE")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^
242 |         print(f"   Tests Passed: {summary['passed_tests']}/{summary['total_tests']} ({summary['overall_accuracy']:.1f}%)")
243 |         print(f"   Target Met: {'✅ YES' if targets['overall_target_met'] else '❌ NO'} (≥90% required)")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> test_nl_parser.py:245:15
    |
243 | …     print(f"   Target Met: {'✅ YES' if targets['overall_target_met'] else '❌ NO'} (≥90% required)")
244 | …     
245 | …     print(f"\n📏 DETAILED METRICS")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^
246 | …     print(f"   Amount Extraction: {summary['amount_accuracy']:.1f}% {'✅' if targets['amount_target_met'] else '❌'} (≥95% required) …
247 | …     print(f"   Category Classification: {summary['category_accuracy']:.1f}% {'✅' if targets['category_target_met'] else '❌'} (≥85% …
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> test_nl_parser.py:252:15
    |
250 | …     print(f"   Fallback Rate: {summary['fallback_rate']:.1f}% {'✅' if targets['fallback_target_met'] else '❌'} (<10% required)")
251 | …     
252 | …     print(f"\n🌐 LANGUAGE PERFORMANCE")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
253 | …     lang_perf = report['language_performance']
254 | …     print(f"   Bangla: {lang_perf['bangla_accuracy']:.1f}%")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> test_nl_parser.py:266:15
    |
264 |         # Production readiness assessment
265 |         all_targets_met = all(targets.values())
266 |         print(f"\n🚀 PRODUCTION READINESS")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
267 |         print(f"   Status: {'✅ READY' if all_targets_met else '❌ NOT READY'}")
268 |         print(f"   Recommendation: {'Deploy to production' if all_targets_met else 'Requires improvement before deployment'}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> test_nl_parser.py:282:15
    |
280 |             json.dump(report, f, indent=2, ensure_ascii=False)
281 |         
282 |         print(f"\n📄 Detailed results saved to: test_results.json")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
283 |         
284 |         # Exit with appropriate code
    |
help: Remove extraneous `f` prefix

F401 [*] `os` imported but unused
  --> test_reconciliation_fixes.py:11:8
   |
 9 | import hashlib
10 | import sys
11 | import os
   |        ^^
12 |
13 | # Add project root to path
   |
help: Remove unused import: `os`

F401 [*] `app.db` imported but unused
 --> test_routing_integration.py:7:22
  |
5 | """
6 |
7 | from app import app, db
  |                      ^^
8 | from utils.routing_policy import deterministic_router, RoutingSignals, IntentType
9 | from utils.contract_tests import run_all_contract_tests
  |
help: Remove unused import: `app.db`

E712 Avoid equality comparisons to `True`; use `config['bilingual']:` for truth checks
   --> test_routing_integration.py:148:43
    |
146 |             ("Scope is conservative", config['scope'] in ['zero_ledger_only', 'analysis_keywords_only']),
147 |             ("Coaching threshold reasonable", config['coaching_threshold'] >= 5),
148 |             ("Bilingual support enabled", config['bilingual'] == True),
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
149 |         ]
    |
help: Replace with `config['bilingual']`

F541 [*] f-string without any placeholders
   --> test_routing_integration.py:176:11
    |
175 |     # Summary
176 |     print(f"\n🎉 PoR v1.1 Implementation Summary")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
177 |     print(f"✅ Integration Tests: {routing_rate:.1f}% success")
178 |     print(f"✅ Contract Tests: {results['success_rate']}% success") 
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> test_routing_integration.py:179:11
    |
177 |     print(f"✅ Integration Tests: {routing_rate:.1f}% success")
178 |     print(f"✅ Contract Tests: {results['success_rate']}% success") 
179 |     print(f"✅ Phase 1 Configuration: Safe and ready")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
180 |     print(f"🚀 Ready for Phase 1 deployment!")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> test_routing_integration.py:180:11
    |
178 |     print(f"✅ Contract Tests: {results['success_rate']}% success") 
179 |     print(f"✅ Phase 1 Configuration: Safe and ready")
180 |     print(f"🚀 Ready for Phase 1 deployment!")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: Remove extraneous `f` prefix

F401 [*] `utils.error_responses.standardized_error_response` imported but unused
  --> test_standardized_error_handling.py:9:5
   |
 7 | import unittest
 8 | from utils.error_responses import (
 9 |     standardized_error_response, validation_error_response, missing_fields_error,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
10 |     unauthorized_error, internal_error, success_response, ErrorCodes
11 | )
   |
help: Remove unused import

F401 [*] `utils.error_responses.internal_error` imported but unused
  --> test_standardized_error_handling.py:10:25
   |
 8 | from utils.error_responses import (
 9 |     standardized_error_response, validation_error_response, missing_fields_error,
10 |     unauthorized_error, internal_error, success_response, ErrorCodes
   |                         ^^^^^^^^^^^^^^
11 | )
12 | from utils.validators import (
   |
help: Remove unused import

F401 [*] `utils.validators.ExpenseValidator` imported but unused
  --> test_standardized_error_handling.py:13:5
   |
11 | )
12 | from utils.validators import (
13 |     ExpenseValidator, AuthValidator, APIValidator, 
   |     ^^^^^^^^^^^^^^^^
14 |     validate_expense, validate_login, validate_registration
15 | )
   |
help: Remove unused import

F401 [*] `utils.validators.AuthValidator` imported but unused
  --> test_standardized_error_handling.py:13:23
   |
11 | )
12 | from utils.validators import (
13 |     ExpenseValidator, AuthValidator, APIValidator, 
   |                       ^^^^^^^^^^^^^
14 |     validate_expense, validate_login, validate_registration
15 | )
   |
help: Remove unused import

F541 [*] f-string without any placeholders
   --> test_standardized_error_handling.py:374:11
    |
373 |     # Summary
374 |     print(f"\n📊 TEST RESULTS SUMMARY:")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
375 |     print(f"Tests run: {test_result.testsRun}")
376 |     print(f"Failures: {len(test_result.failures)}")
    |
help: Remove extraneous `f` prefix

F401 [*] `time` imported but unused
  --> test_uat_scenarios.py:8:8
   |
 6 | import requests
 7 | import json
 8 | import time
   |        ^^^^
 9 | import re
10 | from typing import Dict, Any, List, Optional
   |
help: Remove unused import: `time`

F401 [*] `re` imported but unused
  --> test_uat_scenarios.py:9:8
   |
 7 | import json
 8 | import time
 9 | import re
   |        ^^
10 | from typing import Dict, Any, List, Optional
   |
help: Remove unused import: `re`

F401 [*] `typing.Any` imported but unused
  --> test_uat_scenarios.py:10:26
   |
 8 | import time
 9 | import re
10 | from typing import Dict, Any, List, Optional
   |                          ^^^
11 |
12 | BASE_URL = "http://localhost:5000"
   |
help: Remove unused import: `typing.Any`

F401 [*] `unittest.mock.patch` imported but unused
  --> test_validation_e2e.py:16:27
   |
14 | import json
15 | import time
16 | from unittest.mock import patch, Mock
   |                           ^^^^^
17 |
18 | from app import app
   |
help: Remove unused import

F401 [*] `unittest.mock.Mock` imported but unused
  --> test_validation_e2e.py:16:34
   |
14 | import json
15 | import time
16 | from unittest.mock import patch, Mock
   |                                  ^^^^
17 |
18 | from app import app
   |
help: Remove unused import

F401 [*] `utils.error_responses.standardized_error_response` imported but unused
  --> test_validation_e2e.py:20:17
   |
18 | from app import app
19 | from utils.error_responses import (
20 |     ErrorCodes, standardized_error_response, validation_error_response, 
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
21 |     missing_fields_error, unauthorized_error, internal_error, success_response
22 | )
   |
help: Remove unused import: `utils.error_responses.standardized_error_response`

F401 [*] `utils.validators.ExpenseValidator` imported but unused
  --> test_validation_e2e.py:24:5
   |
22 | )
23 | from utils.validators import (
24 |     ExpenseValidator, AuthValidator, APIValidator, ValidationResult,
   |     ^^^^^^^^^^^^^^^^
25 |     validate_expense, validate_login, validate_registration
26 | )
   |
help: Remove unused import

F401 [*] `utils.validators.AuthValidator` imported but unused
  --> test_validation_e2e.py:24:23
   |
22 | )
23 | from utils.validators import (
24 |     ExpenseValidator, AuthValidator, APIValidator, ValidationResult,
   |                       ^^^^^^^^^^^^^
25 |     validate_expense, validate_login, validate_registration
26 | )
   |
help: Remove unused import

F841 Local variable `module_path` is assigned to but never used
  --> tests/e2e_pipeline/run_e2e_pipeline.py:80:9
   |
78 |     def _run_test_module(self, module: str, verbose: bool) -> Dict[str, Any]:
79 |         """Run individual test module"""
80 |         module_path = f"tests.e2e_pipeline.{module}"
   |         ^^^^^^^^^^^
81 |         start_time = time.time()
   |
help: Remove assignment to unused variable `module_path`

F541 [*] f-string without any placeholders
   --> tests/e2e_pipeline/run_e2e_pipeline.py:192:19
    |
191 |         if total_tests > 0:
192 |             print(f"\n📋 Test Statistics:")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^
193 |             print(f"  Total Tests: {total_tests}")
194 |             print(f"  Passed: {total_passed}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/e2e_pipeline/run_e2e_pipeline.py:200:15
    |
199 |         # Coverage summary
200 |         print(f"\n🎯 Coverage Summary:")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^
201 |         coverage_areas = [
202 |             ("Chat Path", "test_chat_path"),
    |
help: Remove extraneous `f` prefix

F401 [*] `json` imported but unused
  --> tests/e2e_pipeline/test_audit_trail.py:13:8
   |
11 | """
12 | import pytest
13 | import json
   |        ^^^^
14 | from datetime import datetime, timedelta
   |
help: Remove unused import: `json`

F841 Local variable `original_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_audit_trail.py:119:13
    |
117 |             from utils.db import create_expense
118 |             
119 |             original_expense = create_expense(
    |             ^^^^^^^^^^^^^^^^
120 |                 user_id=user['psid_hash'],
121 |                 amount=100.0,
    |
help: Remove assignment to unused variable `original_expense`

F841 Local variable `original_amount` is assigned to but never used
   --> tests/e2e_pipeline/test_audit_trail.py:140:21
    |
138 |                 if expense:
139 |                     # Update expense to simulate correction
140 |                     original_amount = expense.amount
    |                     ^^^^^^^^^^^^^^^
141 |                     original_category = expense.category
    |
help: Remove assignment to unused variable `original_amount`

F841 Local variable `original_category` is assigned to but never used
   --> tests/e2e_pipeline/test_audit_trail.py:141:21
    |
139 |                     # Update expense to simulate correction
140 |                     original_amount = expense.amount
141 |                     original_category = expense.category
    |                     ^^^^^^^^^^^^^^^^^
142 |                     
143 |                     expense.amount = 150.0  # Corrected amount
    |
help: Remove assignment to unused variable `original_category`

F841 Local variable `initial_count` is assigned to but never used
   --> tests/e2e_pipeline/test_audit_trail.py:172:21
    |
171 |                     # Count existing corrections
172 |                     initial_count = UserCorrection.query.filter_by(
    |                     ^^^^^^^^^^^^^
173 |                         user_id=user['psid_hash']
174 |                     ).count()
    |
help: Remove assignment to unused variable `initial_count`

F841 Local variable `alice_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_audit_trail.py:400:13
    |
398 |             from utils.db import create_expense
399 |             
400 |             alice_expense = create_expense(
    |             ^^^^^^^^^^^^^
401 |                 user_id=user_alice['psid_hash'],
402 |                 amount=111.0,
    |
help: Remove assignment to unused variable `alice_expense`

F841 Local variable `bob_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_audit_trail.py:411:13
    |
409 |             )
410 |             
411 |             bob_expense = create_expense(
    |             ^^^^^^^^^^^
412 |                 user_id=user_bob['psid_hash'],
413 |                 amount=222.0,
    |
help: Remove assignment to unused variable `bob_expense`

F401 [*] `json` imported but unused
  --> tests/e2e_pipeline/test_base.py:9:8
   |
 7 | import os
 8 | import pytest
 9 | import json
   |        ^^^^
10 | import hmac
11 | import hashlib
   |
help: Remove unused import: `json`

F401 [*] `typing.Tuple` imported but unused
  --> tests/e2e_pipeline/test_base.py:16:47
   |
14 | from datetime import datetime, date, timedelta
15 | from decimal import Decimal
16 | from typing import Dict, Any, List, Optional, Tuple
   |                                               ^^^^^
17 | from unittest.mock import patch
   |
help: Remove unused import: `typing.Tuple`

F401 [*] `flask.Flask` imported but unused
  --> tests/e2e_pipeline/test_base.py:19:19
   |
17 | from unittest.mock import patch
18 |
19 | from flask import Flask
   |                   ^^^^^
20 | from werkzeug.test import Client
   |
help: Remove unused import: `flask.Flask`

F401 [*] `werkzeug.test.Client` imported but unused
  --> tests/e2e_pipeline/test_base.py:20:27
   |
19 | from flask import Flask
20 | from werkzeug.test import Client
   |                           ^^^^^^
21 |
22 | # Import the main app and database components
   |
help: Remove unused import: `werkzeug.test.Client`

F401 [*] `json` imported but unused
  --> tests/e2e_pipeline/test_chat_path.py:12:8
   |
10 | """
11 | import pytest
12 | import json
   |        ^^^^
13 | import time
14 | import uuid
   |
help: Remove unused import: `json`

F401 [*] `time` imported but unused
  --> tests/e2e_pipeline/test_chat_path.py:13:8
   |
11 | import pytest
12 | import json
13 | import time
   |        ^^^^
14 | import uuid
15 | from decimal import Decimal
   |
help: Remove unused import: `time`

F401 [*] `decimal.Decimal` imported but unused
  --> tests/e2e_pipeline/test_chat_path.py:15:21
   |
13 | import time
14 | import uuid
15 | from decimal import Decimal
   |                     ^^^^^^^
16 | from datetime import datetime
   |
help: Remove unused import: `decimal.Decimal`

F841 Local variable `expense` is assigned to but never used
  --> tests/e2e_pipeline/test_chat_path.py:48:13
   |
47 |             # Verify database persistence
48 |             expense = self.assert_expense_created(
   |             ^^^^^^^
49 |                 user_hash=user_hash,
50 |                 expected_amount=150.0,
   |
help: Remove assignment to unused variable `expense`

F841 Local variable `expense` is assigned to but never used
  --> tests/e2e_pipeline/test_chat_path.py:84:13
   |
83 |             # Verify database persistence
84 |             expense = self.assert_expense_created(
   |             ^^^^^^^
85 |                 user_hash=user_hash,
86 |                 expected_amount=200.0,
   |
help: Remove assignment to unused variable `expense`

F841 Local variable `result1` is assigned to but never used
   --> tests/e2e_pipeline/test_chat_path.py:132:13
    |
131 |             # First creation
132 |             result1 = create_expense(
    |             ^^^^^^^
133 |                 user_id=user_hash,
134 |                 amount=100.0,
    |
help: Remove assignment to unused variable `result1`

F841 Local variable `result2` is assigned to but never used
   --> tests/e2e_pipeline/test_chat_path.py:144:13
    |
143 |             # Second creation with same correlation_id should not duplicate
144 |             result2 = create_expense(
    |             ^^^^^^^
145 |                 user_id=user_hash,
146 |                 amount=100.0,
    |
help: Remove assignment to unused variable `result2`

F401 [*] `subprocess` imported but unused
  --> tests/e2e_pipeline/test_ci_cd_integration.py:15:8
   |
13 | import json
14 | import os
15 | import subprocess
   |        ^^^^^^^^^^
16 | from datetime import datetime
   |
help: Remove unused import: `subprocess`

E722 Do not use bare `except`
   --> tests/e2e_pipeline/test_ci_cd_integration.py:116:13
    |
114 |                         # Verify configuration structure
115 |                         assert isinstance(config_data, dict), "Configuration should return dict"
116 |             except:
    |             ^^^^^^
117 |                 # Configuration endpoint might be protected or unavailable in test
118 |                 pass
    |

F841 Local variable `user` is assigned to but never used
   --> tests/e2e_pipeline/test_ci_cd_integration.py:258:13
    |
256 |             import time
257 |             
258 |             user = test_users['alice']
    |             ^^^^
259 |             
260 |             # Test endpoint response times
    |
help: Remove assignment to unused variable `user`

F841 Local variable `response` is assigned to but never used
   --> tests/e2e_pipeline/test_ci_cd_integration.py:274:21
    |
272 |                     response = client.get(endpoint, headers=headers or {})
273 |                 elif method == 'POST':
274 |                     response = client.post(endpoint, data=data, headers=headers or {})
    |                     ^^^^^^^^
275 |                 
276 |                 response_time = time.time() - start_time
    |
help: Remove assignment to unused variable `response`

F841 Local variable `user` is assigned to but never used
   --> tests/e2e_pipeline/test_ci_cd_integration.py:290:13
    |
288 |         with self.mock_environment_secrets():
289 |             # Test that requests generate appropriate logs
290 |             user = test_users['alice']
    |             ^^^^
291 |             
292 |             # Make request that should generate logs
    |
help: Remove assignment to unused variable `user`

E722 Do not use bare `except`
   --> tests/e2e_pipeline/test_ci_cd_integration.py:313:13
    |
311 |                     if monitoring_data:
312 |                         assert isinstance(monitoring_data, dict), "Monitoring data should be structured"
313 |             except:
    |             ^^^^^^
314 |                 # Monitoring endpoints might be protected
315 |                 pass
    |

F841 Local variable `expense` is assigned to but never used
   --> tests/e2e_pipeline/test_ci_cd_integration.py:340:21
    |
338 |                 # Verify expense was created atomically
339 |                 if result:
340 |                     expense = self.assert_expense_created(
    |                     ^^^^^^^
341 |                         user_hash=user['psid_hash'],
342 |                         expected_amount=500.0,
    |
help: Remove assignment to unused variable `expense`

F841 [*] Local variable `e` is assigned to but never used
   --> tests/e2e_pipeline/test_ci_cd_integration.py:349:33
    |
347 |                     self.assert_user_totals_updated(user['psid_hash'], 500.0)
348 |                     
349 |             except Exception as e:
    |                                 ^
350 |                 # If operation fails, it should fail cleanly without partial state
351 |                 # Verify no partial data was left behind
    |
help: Remove assignment to unused variable `e`

F541 [*] f-string without any placeholders
   --> tests/e2e_pipeline/test_ci_cd_integration.py:389:65
    |
387 |                 # Should not expose server information
388 |                 server_header = headers.get('Server', '')
389 |                 assert 'gunicorn' not in server_header.lower(), f"Server header exposes implementation details"
    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: Remove extraneous `f` prefix

F401 [*] `decimal.Decimal` imported but unused
  --> tests/e2e_pipeline/test_end_to_end.py:9:21
   |
 7 | import json
 8 | from datetime import datetime, timedelta
 9 | from decimal import Decimal
   |                     ^^^^^^^
10 | from app import app, db
11 | from models import Expense
   |
help: Remove unused import: `decimal.Decimal`

F401 [*] `models.Expense` imported but unused
  --> tests/e2e_pipeline/test_end_to_end.py:11:20
   |
 9 | from decimal import Decimal
10 | from app import app, db
11 | from models import Expense
   |                    ^^^^^^^
12 | from utils.identity import psid_hash
   |
help: Remove unused import: `models.Expense`

F841 Local variable `other_user` is assigned to but never used
   --> tests/e2e_pipeline/test_end_to_end.py:127:5
    |
126 |     # Step 6: User isolation (simulate cross-user)
127 |     other_user = setup_session(client, "uat_other_user")
    |     ^^^^^^^^^^
128 |     r = client.post("/api/backend/get_totals",
129 |                     data=json.dumps({"period": "week"}),
    |
help: Remove assignment to unused variable `other_user`

F401 [*] `pytest` imported but unused
  --> tests/e2e_pipeline/test_form_path.py:12:8
   |
10 | - Error handling and validation
11 | """
12 | import pytest
   |        ^^^^^^
13 | import json
14 | import uuid
   |
help: Remove unused import: `pytest`

F401 [*] `json` imported but unused
  --> tests/e2e_pipeline/test_form_path.py:13:8
   |
11 | """
12 | import pytest
13 | import json
   |        ^^^^
14 | import uuid
15 | from decimal import Decimal
   |
help: Remove unused import: `json`

F401 [*] `datetime.datetime` imported but unused
  --> tests/e2e_pipeline/test_form_path.py:16:22
   |
14 | import uuid
15 | from decimal import Decimal
16 | from datetime import datetime
   |                      ^^^^^^^^
17 |
18 | from tests.e2e_pipeline.test_base import E2ETestBase
   |
help: Remove unused import: `datetime.datetime`

F841 Local variable `expense` is assigned to but never used
  --> tests/e2e_pipeline/test_form_path.py:79:13
   |
78 |             # Verify database persistence
79 |             expense = self.assert_expense_created(
   |             ^^^^^^^
80 |                 user_hash=user['x_user_id'],
81 |                 expected_amount=200.0,
   |
help: Remove assignment to unused variable `expense`

F841 Local variable `expense` is assigned to but never used
   --> tests/e2e_pipeline/test_form_path.py:104:21
    |
102 |                 if response_data.get('success') is True:
103 |                     # Verify database persistence if parsing succeeded
104 |                     expense = self.assert_expense_created(
    |                     ^^^^^^^
105 |                         user_hash=user['x_user_id'],
106 |                         expected_amount=300.0,
    |
help: Remove assignment to unused variable `expense`

F841 Local variable `expense` is assigned to but never used
   --> tests/e2e_pipeline/test_form_path.py:264:13
    |
263 |             # Verify category is normalized to lowercase
264 |             expense = self.assert_expense_created(
    |             ^^^^^^^
265 |                 user_hash=user['x_user_id'],
266 |                 expected_amount=50.0,
    |
help: Remove assignment to unused variable `expense`

F401 [*] `pytest` imported but unused
  --> tests/e2e_pipeline/test_idempotency.py:11:8
   |
 9 | - Cross-path idempotency consistency
10 | """
11 | import pytest
   |        ^^^^^^
12 | import json
13 | import uuid
   |
help: Remove unused import: `pytest`

F841 Local variable `result2` is assigned to but never used
  --> tests/e2e_pipeline/test_idempotency.py:46:13
   |
45 |             # Second expense creation with same correlation_id
46 |             result2 = create_expense(
   |             ^^^^^^^
47 |                 user_id=user['psid_hash'],
48 |                 amount=100.0,
   |
help: Remove assignment to unused variable `result2`

F841 Local variable `form_response` is assigned to but never used
   --> tests/e2e_pipeline/test_idempotency.py:164:13
    |
162 |             }
163 |             
164 |             form_response = client.post('/expense', data=form_data, headers=headers)
    |             ^^^^^^^^^^^^^
165 |             
166 |             # Form should handle idempotency (implementation dependent)
    |
help: Remove assignment to unused variable `form_response`

F841 Local variable `result1` is assigned to but never used
   --> tests/e2e_pipeline/test_idempotency.py:227:13
    |
226 |             # Create expense with specific amount
227 |             result1 = create_expense(
    |             ^^^^^^^
228 |                 user_id=user['psid_hash'],
229 |                 amount=100.0,
    |
help: Remove assignment to unused variable `result1`

F841 Local variable `result2` is assigned to but never used
   --> tests/e2e_pipeline/test_idempotency.py:240:17
    |
238 |             # Try to create with different amount but same correlation_id
239 |             try:
240 |                 result2 = create_expense(
    |                 ^^^^^^^
241 |                     user_id=user['psid_hash'],
242 |                     amount=200.0,  # Different amount
    |
help: Remove assignment to unused variable `result2`

F841 [*] Local variable `e` is assigned to but never used
   --> tests/e2e_pipeline/test_idempotency.py:258:33
    |
256 |                 )
257 |                 
258 |             except Exception as e:
    |                                 ^
259 |                 # Implementation might reject or handle differently
260 |                 pass
    |
help: Remove assignment to unused variable `e`

F841 Local variable `result1` is assigned to but never used
   --> tests/e2e_pipeline/test_idempotency.py:271:13
    |
270 |             # Create initial expense
271 |             result1 = create_expense(
    |             ^^^^^^^
272 |                 user_id=user['psid_hash'],
273 |                 amount=75.0,
    |
help: Remove assignment to unused variable `result1`

F841 Local variable `result2` is assigned to but never used
   --> tests/e2e_pipeline/test_idempotency.py:287:13
    |
286 |             # Try to create again after wait
287 |             result2 = create_expense(
    |             ^^^^^^^
288 |                 user_id=user['psid_hash'],
289 |                 amount=75.0,
    |
help: Remove assignment to unused variable `result2`

F841 Local variable `alice_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_idempotency.py:456:13
    |
455 |             # Verify both users have their expenses
456 |             alice_expense = self.assert_expense_created(
    |             ^^^^^^^^^^^^^
457 |                 user_hash=user_alice['psid_hash'],
458 |                 expected_amount=100.0,
    |
help: Remove assignment to unused variable `alice_expense`

F841 Local variable `bob_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_idempotency.py:462:13
    |
460 |             )
461 |             
462 |             bob_expense = self.assert_expense_created(
    |             ^^^^^^^^^^^
463 |                 user_hash=user_bob['psid_hash'],
464 |                 expected_amount=200.0,
    |
help: Remove assignment to unused variable `bob_expense`

F841 Local variable `result` is assigned to but never used
   --> tests/e2e_pipeline/test_idempotency.py:486:21
    |
484 |             for i, invalid_id in enumerate(invalid_correlation_ids):
485 |                 try:
486 |                     result = create_expense(
    |                     ^^^^^^
487 |                         user_id=user['psid_hash'],
488 |                         amount=float(10 + i),
    |
help: Remove assignment to unused variable `result`

F401 [*] `pytest` imported but unused
  --> tests/e2e_pipeline/test_messenger_path.py:11:8
   |
 9 | - Idempotency with message IDs
10 | """
11 | import pytest
   |        ^^^^^^
12 | import json
13 | import hmac
   |
help: Remove unused import: `pytest`

F401 [*] `hmac` imported but unused
  --> tests/e2e_pipeline/test_messenger_path.py:13:8
   |
11 | import pytest
12 | import json
13 | import hmac
   |        ^^^^
14 | import hashlib
15 | from datetime import datetime
   |
help: Remove unused import: `hmac`

F401 [*] `hashlib` imported but unused
  --> tests/e2e_pipeline/test_messenger_path.py:14:8
   |
12 | import json
13 | import hmac
14 | import hashlib
   |        ^^^^^^^
15 | from datetime import datetime
   |
help: Remove unused import: `hashlib`

F401 [*] `datetime.datetime` imported but unused
  --> tests/e2e_pipeline/test_messenger_path.py:15:22
   |
13 | import hmac
14 | import hashlib
15 | from datetime import datetime
   |                      ^^^^^^^^
16 |
17 | from tests.e2e_pipeline.test_base import E2ETestBase
   |
help: Remove unused import: `datetime.datetime`

F401 [*] `pytest` imported but unused
  --> tests/e2e_pipeline/test_recent_expenses.py:11:8
   |
 9 | - Data consistency across creation paths
10 | """
11 | import pytest
   |        ^^^^^^
12 | import json
13 | from datetime import datetime, timedelta
   |
help: Remove unused import: `pytest`

F841 Local variable `user` is assigned to but never used
  --> tests/e2e_pipeline/test_recent_expenses.py:24:13
   |
22 |         """Test that get_recent_expenses requires session authentication"""
23 |         with self.mock_environment_secrets():
24 |             user = test_users['alice']
   |             ^^^^
25 |             
26 |             # Try accessing without session authentication
   |
help: Remove assignment to unused variable `user`

F841 Local variable `result` is assigned to but never used
  --> tests/e2e_pipeline/test_recent_expenses.py:79:17
   |
77 |             for i in range(3):
78 |                 expense_time = base_time - timedelta(hours=i)
79 |                 result = create_expense(
   |                 ^^^^^^
80 |                     user_id=user['session_user_id'],
81 |                     amount=float(100 + (i * 50)),
   |
help: Remove assignment to unused variable `result`

F841 Local variable `alice_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_recent_expenses.py:172:13
    |
171 |             # Alice's expenses
172 |             alice_expense = create_expense(
    |             ^^^^^^^^^^^^^
173 |                 user_id=user_alice['session_user_id'],
174 |                 amount=100.0,
    |
help: Remove assignment to unused variable `alice_expense`

F841 Local variable `bob_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_recent_expenses.py:184:13
    |
183 |             # Bob's expenses
184 |             bob_expense = create_expense(
    |             ^^^^^^^^^^^
185 |                 user_id=user_bob['session_user_id'],
186 |                 amount=200.0,
    |
help: Remove assignment to unused variable `bob_expense`

F841 Local variable `chat_result` is assigned to but never used
   --> tests/e2e_pipeline/test_recent_expenses.py:238:13
    |
236 |             # 1. Via direct database creation (chat path)
237 |             from utils.db import create_expense
238 |             chat_result = create_expense(
    |             ^^^^^^^^^^^
239 |                 user_id=user['session_user_id'],
240 |                 amount=50.0,
    |
help: Remove assignment to unused variable `chat_result`

F841 Local variable `today_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_recent_expenses.py:293:13
    |
292 |             # Today's expense
293 |             today_expense = create_expense(
    |             ^^^^^^^^^^^^^
294 |                 user_id=user['session_user_id'],
295 |                 amount=100.0,
    |
help: Remove assignment to unused variable `today_expense`

F841 Local variable `yesterday_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_recent_expenses.py:305:13
    |
304 |             # Yesterday's expense
305 |             yesterday_expense = create_expense(
    |             ^^^^^^^^^^^^^^^^^
306 |                 user_id=user['session_user_id'],
307 |                 amount=150.0,
    |
help: Remove assignment to unused variable `yesterday_expense`

F841 Local variable `last_week_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_recent_expenses.py:317:13
    |
316 |             # Last week's expense
317 |             last_week_expense = create_expense(
    |             ^^^^^^^^^^^^^^^^^
318 |                 user_id=user['session_user_id'],
319 |                 amount=200.0,
    |
help: Remove assignment to unused variable `last_week_expense`

F401 [*] `pytest` imported but unused
  --> tests/e2e_pipeline/test_totals_verification.py:11:8
   |
 9 | - Concurrent update handling
10 | """
11 | import pytest
   |        ^^^^^^
12 | import json
13 | from decimal import Decimal
   |
help: Remove unused import: `pytest`

F401 [*] `decimal.Decimal` imported but unused
  --> tests/e2e_pipeline/test_totals_verification.py:13:21
   |
11 | import pytest
12 | import json
13 | from decimal import Decimal
   |                     ^^^^^^^
14 | from datetime import datetime, date, timedelta
   |
help: Remove unused import: `decimal.Decimal`

F401 [*] `datetime.date` imported but unused
  --> tests/e2e_pipeline/test_totals_verification.py:14:32
   |
12 | import json
13 | from decimal import Decimal
14 | from datetime import datetime, date, timedelta
   |                                ^^^^
15 |
16 | from tests.e2e_pipeline.test_base import E2ETestBase
   |
help: Remove unused import: `datetime.date`

F841 Local variable `user` is assigned to but never used
  --> tests/e2e_pipeline/test_totals_verification.py:25:13
   |
23 |         """Test that get_totals requires session authentication"""
24 |         with self.mock_environment_secrets():
25 |             user = test_users['alice']
   |             ^^^^
26 |             
27 |             # Try accessing without session authentication
   |
help: Remove assignment to unused variable `user`

F841 Local variable `result1` is assigned to but never used
  --> tests/e2e_pipeline/test_totals_verification.py:71:13
   |
69 |             # 1. Via direct database creation (simulating chat path)
70 |             from utils.db import create_expense
71 |             result1 = create_expense(
   |             ^^^^^^^
72 |                 user_id=user['session_user_id'],
73 |                 amount=100.0,
   |
help: Remove assignment to unused variable `result1`

F841 Local variable `totals_data` is assigned to but never used
   --> tests/e2e_pipeline/test_totals_verification.py:143:13
    |
142 |             assert response.status_code == 200
143 |             totals_data = response.get_json()
    |             ^^^^^^^^^^^
144 |             
145 |             # Verify monthly summary matches
    |
help: Remove assignment to unused variable `totals_data`

F841 Local variable `original_result` is assigned to but never used
   --> tests/e2e_pipeline/test_totals_verification.py:283:13
    |
281 |             # Create initial expense
282 |             from utils.db import create_expense
283 |             original_result = create_expense(
    |             ^^^^^^^^^^^^^^^
284 |                 user_id=user['session_user_id'],
285 |                 amount=100.0,
    |
help: Remove assignment to unused variable `original_result`

F841 Local variable `current_month_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_totals_verification.py:318:13
    |
317 |             # Current month expense
318 |             current_month_expense = create_expense(
    |             ^^^^^^^^^^^^^^^^^^^^^
319 |                 user_id=user['session_user_id'],
320 |                 amount=100.0,
    |
help: Remove assignment to unused variable `current_month_expense`

F841 Local variable `last_month_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_totals_verification.py:331:13
    |
329 |             # Last month expense
330 |             last_month_date = datetime.now().replace(day=1) - timedelta(days=1)
331 |             last_month_expense = create_expense(
    |             ^^^^^^^^^^^^^^^^^^
332 |                 user_id=user['session_user_id'],
333 |                 amount=200.0,
    |
help: Remove assignment to unused variable `last_month_expense`

F541 [*] f-string without any placeholders
   --> tests/e2e_pipeline/test_totals_verification.py:358:52
    |
356 |                     current_total = float(current_data['total_expenses'])
357 |                     # Should include current month expense
358 |                     assert current_total >= 100.0, f"Current month total should include 100"
    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
359 |
360 |     def test_totals_category_breakdown(self, client, test_users):
    |
help: Remove extraneous `f` prefix

F401 [*] `pytest` imported but unused
  --> tests/e2e_pipeline/test_user_isolation.py:11:8
   |
 9 | - Cross-user data leakage prevention
10 | """
11 | import pytest
   |        ^^^^^^
12 | import json
13 | from datetime import datetime
   |
help: Remove unused import: `pytest`

F841 Local variable `alice_expense` is assigned to but never used
  --> tests/e2e_pipeline/test_user_isolation.py:30:13
   |
28 |             from utils.db import create_expense
29 |             
30 |             alice_expense = create_expense(
   |             ^^^^^^^^^^^^^
31 |                 user_id=user_alice['psid_hash'],
32 |                 amount=100.0,
   |
help: Remove assignment to unused variable `alice_expense`

F841 Local variable `bob_expense` is assigned to but never used
  --> tests/e2e_pipeline/test_user_isolation.py:41:13
   |
39 |             )
40 |             
41 |             bob_expense = create_expense(
   |             ^^^^^^^^^^^
42 |                 user_id=user_bob['psid_hash'],
43 |                 amount=200.0,
   |
help: Remove assignment to unused variable `bob_expense`

F841 Local variable `bob_data` is assigned to but never used
   --> tests/e2e_pipeline/test_user_isolation.py:226:17
    |
225 |             if bob_attempt_response.status_code == 200:
226 |                 bob_data = bob_attempt_response.get_json()
    |                 ^^^^^^^^
227 |                 alice_data = alice_response.get_json()
    |
help: Remove assignment to unused variable `bob_data`

F841 Local variable `alice_data` is assigned to but never used
   --> tests/e2e_pipeline/test_user_isolation.py:227:17
    |
225 |             if bob_attempt_response.status_code == 200:
226 |                 bob_data = bob_attempt_response.get_json()
227 |                 alice_data = alice_response.get_json()
    |                 ^^^^^^^^^^
228 |                 
229 |                 # Should not return different data (Bob's data) than Alice's
    |
help: Remove assignment to unused variable `alice_data`

F841 Local variable `alice_created` is assigned to but never used
   --> tests/e2e_pipeline/test_user_isolation.py:308:13
    |
307 |             # Verify both users have their respective expenses
308 |             alice_created = self.assert_expense_created(
    |             ^^^^^^^^^^^^^
309 |                 user_hash=user_alice['psid_hash'],
310 |                 expected_amount=100.0,
    |
help: Remove assignment to unused variable `alice_created`

F841 Local variable `bob_created` is assigned to but never used
   --> tests/e2e_pipeline/test_user_isolation.py:314:13
    |
312 |             )
313 |             
314 |             bob_created = self.assert_expense_created(
    |             ^^^^^^^^^^^
315 |                 user_hash=user_bob['psid_hash'],
316 |                 expected_amount=200.0,
    |
help: Remove assignment to unused variable `bob_created`

F841 Local variable `alice_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_user_isolation.py:329:13
    |
327 |             from utils.db import create_expense
328 |             
329 |             alice_expense = create_expense(
    |             ^^^^^^^^^^^^^
330 |                 user_id=user_alice['psid_hash'],
331 |                 amount=123.45,
    |
help: Remove assignment to unused variable `alice_expense`

F841 Local variable `bob_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_user_isolation.py:340:13
    |
338 |             )
339 |             
340 |             bob_expense = create_expense(
    |             ^^^^^^^^^^^
341 |                 user_id=user_bob['psid_hash'],
342 |                 amount=678.90,
    |
help: Remove assignment to unused variable `bob_expense`

F841 Local variable `alice_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_user_isolation.py:388:13
    |
386 |             current_month = datetime.now().strftime('%Y-%m')
387 |             
388 |             alice_expense = create_expense(
    |             ^^^^^^^^^^^^^
389 |                 user_id=user_alice['psid_hash'],
390 |                 amount=300.0,
    |
help: Remove assignment to unused variable `alice_expense`

F841 Local variable `bob_expense` is assigned to but never used
   --> tests/e2e_pipeline/test_user_isolation.py:399:13
    |
397 |             )
398 |             
399 |             bob_expense = create_expense(
    |             ^^^^^^^^^^^
400 |                 user_id=user_bob['psid_hash'],
401 |                 amount=400.0,
    |
help: Remove assignment to unused variable `bob_expense`

F541 [*] f-string without any placeholders
   --> tests/e2e_pipeline/test_user_isolation.py:433:54
    |
431 |                         # Alice's summary should only reflect Alice's expenses
432 |                         alice_total = float(alice_current_month.total_amount)
433 |                         assert alice_total >= 300.0, f"Alice's monthly total should include her 300 expense"
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
434 |                         assert alice_total < 700.0, f"Alice's total {alice_total} should not include Bob's 400 expense"
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/e2e_pipeline/test_user_isolation.py:446:52
    |
444 |                         # Bob's summary should only reflect Bob's expenses
445 |                         bob_total = float(bob_current_month.total_amount)
446 |                         assert bob_total >= 400.0, f"Bob's monthly total should include his 400 expense"
    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
447 |                         # Bob's total should not include Alice's expenses
    |
help: Remove extraneous `f` prefix

F401 [*] `json` imported but unused
 --> tests/test_assets_supabase.py:5:8
  |
3 | """
4 | import pytest
5 | import json
  |        ^^^^
6 | from unittest.mock import patch
7 | import os
  |
help: Remove unused import: `json`

F401 [*] `app.db` imported but unused
 --> tests/test_assets_supabase.py:9:22
  |
7 | import os
8 |
9 | from app import app, db
  |                      ^^
  |
help: Remove unused import: `app.db`

F401 [*] `time` imported but unused
 --> tests/test_coaching_flow.py:7:8
  |
6 | import unittest
7 | import time
  |        ^^^^
8 | from datetime import datetime
9 | from unittest.mock import patch, MagicMock
  |
help: Remove unused import: `time`

F401 [*] `datetime.datetime` imported but unused
 --> tests/test_coaching_flow.py:8:22
  |
6 | import unittest
7 | import time
8 | from datetime import datetime
  |                      ^^^^^^^^
9 | from unittest.mock import patch, MagicMock
  |
help: Remove unused import: `datetime.datetime`

F401 [*] `unittest.mock.MagicMock` imported but unused
  --> tests/test_coaching_flow.py:9:34
   |
 7 | import time
 8 | from datetime import datetime
 9 | from unittest.mock import patch, MagicMock
   |                                  ^^^^^^^^^
10 |
11 | from handlers.coaching import (
   |
help: Remove unused import: `unittest.mock.MagicMock`

F401 [*] `handlers.coaching._start_coaching_flow` imported but unused
  --> tests/test_coaching_flow.py:14:5
   |
12 |     maybe_continue,
13 |     handle_coaching_response,
14 |     _start_coaching_flow,
   |     ^^^^^^^^^^^^^^^^^^^^
15 |     _handle_focus_response,
16 |     _handle_commit_response,
   |
help: Remove unused import

F401 [*] `handlers.coaching._handle_focus_response` imported but unused
  --> tests/test_coaching_flow.py:15:5
   |
13 |     handle_coaching_response,
14 |     _start_coaching_flow,
15 |     _handle_focus_response,
   |     ^^^^^^^^^^^^^^^^^^^^^^
16 |     _handle_commit_response,
17 |     _end_coaching_session
   |
help: Remove unused import

F401 [*] `handlers.coaching._handle_commit_response` imported but unused
  --> tests/test_coaching_flow.py:16:5
   |
14 |     _start_coaching_flow,
15 |     _handle_focus_response,
16 |     _handle_commit_response,
   |     ^^^^^^^^^^^^^^^^^^^^^^^
17 |     _end_coaching_session
18 | )
   |
help: Remove unused import

F401 [*] `handlers.coaching._end_coaching_session` imported but unused
  --> tests/test_coaching_flow.py:17:5
   |
15 |     _handle_focus_response,
16 |     _handle_commit_response,
17 |     _end_coaching_session
   |     ^^^^^^^^^^^^^^^^^^^^^
18 | )
19 | from utils.session import (
   |
help: Remove unused import

F401 [*] `utils.session.set_coaching_session` imported but unused
  --> tests/test_coaching_flow.py:21:5
   |
19 | from utils.session import (
20 |     get_coaching_session,
21 |     set_coaching_session,
   |     ^^^^^^^^^^^^^^^^^^^^
22 |     delete_coaching_session,
23 |     increment_daily_coaching_count,
   |
help: Remove unused import: `utils.session.set_coaching_session`

F401 [*] `unittest.mock.Mock` imported but unused
  --> tests/test_coaching_safety_hardening.py:20:27
   |
18 | import os
19 | import unittest
20 | from unittest.mock import Mock, patch, MagicMock
   |                           ^^^^
21 | import time
   |
help: Remove unused import

F401 [*] `unittest.mock.MagicMock` imported but unused
  --> tests/test_coaching_safety_hardening.py:20:40
   |
18 | import os
19 | import unittest
20 | from unittest.mock import Mock, patch, MagicMock
   |                                        ^^^^^^^^^
21 | import time
   |
help: Remove unused import

F401 [*] `time` imported but unused
  --> tests/test_coaching_safety_hardening.py:21:8
   |
19 | import unittest
20 | from unittest.mock import Mock, patch, MagicMock
21 | import time
   |        ^^^^
22 |
23 | # Add project root to path
   |
help: Remove unused import: `time`

F401 [*] `nlp.money_patterns.extract_money_mentions` imported but unused
  --> tests/test_comprehensive_money_fix.py:8:32
   |
 6 | from nlp.signals_extractor import extract_signals
 7 | from utils.bn_digits import to_en_digits
 8 | from nlp.money_patterns import extract_money_mentions, has_money_mention
   |                                ^^^^^^^^^^^^^^^^^^^^^^
 9 |
10 | class TestBengaliMoneyFix:
   |
help: Remove unused import

F401 [*] `nlp.money_patterns.has_money_mention` imported but unused
  --> tests/test_comprehensive_money_fix.py:8:56
   |
 6 | from nlp.signals_extractor import extract_signals
 7 | from utils.bn_digits import to_en_digits
 8 | from nlp.money_patterns import extract_money_mentions, has_money_mention
   |                                                        ^^^^^^^^^^^^^^^^^
 9 |
10 | class TestBengaliMoneyFix:
   |
help: Remove unused import

F401 [*] `time` imported but unused
 --> tests/test_corrections.py:7:8
  |
6 | import pytest
7 | import time
  |        ^^^^
8 | from datetime import datetime, timedelta
9 | from decimal import Decimal
  |
help: Remove unused import: `time`

F401 [*] `models.User` imported but unused
  --> tests/test_corrections.py:13:29
   |
12 | from db_base import db
13 | from models import Expense, User
   |                             ^^^^
14 | from handlers.expense import handle_correction
15 | from parsers.expense import is_correction_message, parse_correction_reason, similar_category, similar_merchant
   |
help: Remove unused import: `models.User`

E712 Avoid equality comparisons to `True`; use `is_correction_message("sorry, I meant 500"):` for truth checks
  --> tests/test_corrections.py:25:16
   |
23 |         """Test various correction phrase patterns"""
24 |         # Positive cases - should detect corrections
25 |         assert is_correction_message("sorry, I meant 500") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
26 |         assert is_correction_message("actually 300 for coffee") == True
27 |         assert is_correction_message("replace last with 400") == True
   |
help: Replace with `is_correction_message("sorry, I meant 500")`

E712 Avoid equality comparisons to `True`; use `is_correction_message("actually 300 for coffee"):` for truth checks
  --> tests/test_corrections.py:26:16
   |
24 |         # Positive cases - should detect corrections
25 |         assert is_correction_message("sorry, I meant 500") == True
26 |         assert is_correction_message("actually 300 for coffee") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
27 |         assert is_correction_message("replace last with 400") == True
28 |         assert is_correction_message("not ৳50, ৳500") == True
   |
help: Replace with `is_correction_message("actually 300 for coffee")`

E712 Avoid equality comparisons to `True`; use `is_correction_message("replace last with 400"):` for truth checks
  --> tests/test_corrections.py:27:16
   |
25 |         assert is_correction_message("sorry, I meant 500") == True
26 |         assert is_correction_message("actually 300 for coffee") == True
27 |         assert is_correction_message("replace last with 400") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
28 |         assert is_correction_message("not ৳50, ৳500") == True
29 |         assert is_correction_message("typo - make it $100") == True
   |
help: Replace with `is_correction_message("replace last with 400")`

E712 Avoid equality comparisons to `True`; use `is_correction_message("not ৳50, ৳500"):` for truth checks
  --> tests/test_corrections.py:28:16
   |
26 |         assert is_correction_message("actually 300 for coffee") == True
27 |         assert is_correction_message("replace last with 400") == True
28 |         assert is_correction_message("not ৳50, ৳500") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
29 |         assert is_correction_message("typo - make it $100") == True
30 |         assert is_correction_message("correction: should be 250") == True
   |
help: Replace with `is_correction_message("not ৳50, ৳500")`

E712 Avoid equality comparisons to `True`; use `is_correction_message("typo - make it $100"):` for truth checks
  --> tests/test_corrections.py:29:16
   |
27 |         assert is_correction_message("replace last with 400") == True
28 |         assert is_correction_message("not ৳50, ৳500") == True
29 |         assert is_correction_message("typo - make it $100") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
30 |         assert is_correction_message("correction: should be 250") == True
   |
help: Replace with `is_correction_message("typo - make it $100")`

E712 Avoid equality comparisons to `True`; use `is_correction_message("correction: should be 250"):` for truth checks
  --> tests/test_corrections.py:30:16
   |
28 |         assert is_correction_message("not ৳50, ৳500") == True
29 |         assert is_correction_message("typo - make it $100") == True
30 |         assert is_correction_message("correction: should be 250") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
31 |         
32 |         # Negative cases - should not detect corrections
   |
help: Replace with `is_correction_message("correction: should be 250")`

E712 Avoid equality comparisons to `False`; use `not is_correction_message("spent 100 on lunch"):` for false checks
  --> tests/test_corrections.py:33:16
   |
32 |         # Negative cases - should not detect corrections
33 |         assert is_correction_message("spent 100 on lunch") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
34 |         assert is_correction_message("actually quite nice") == False  # No money
35 |         assert is_correction_message("sorry for the delay") == False  # No money
   |
help: Replace with `not is_correction_message("spent 100 on lunch")`

E712 Avoid equality comparisons to `False`; use `not is_correction_message("actually quite nice"):` for false checks
  --> tests/test_corrections.py:34:16
   |
32 |         # Negative cases - should not detect corrections
33 |         assert is_correction_message("spent 100 on lunch") == False
34 |         assert is_correction_message("actually quite nice") == False  # No money
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
35 |         assert is_correction_message("sorry for the delay") == False  # No money
36 |         assert is_correction_message("") == False
   |
help: Replace with `not is_correction_message("actually quite nice")`

E712 Avoid equality comparisons to `False`; use `not is_correction_message("sorry for the delay"):` for false checks
  --> tests/test_corrections.py:35:16
   |
33 |         assert is_correction_message("spent 100 on lunch") == False
34 |         assert is_correction_message("actually quite nice") == False  # No money
35 |         assert is_correction_message("sorry for the delay") == False  # No money
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
36 |         assert is_correction_message("") == False
37 |         assert is_correction_message(None) == False
   |
help: Replace with `not is_correction_message("sorry for the delay")`

E712 Avoid equality comparisons to `False`; use `not is_correction_message(""):` for false checks
  --> tests/test_corrections.py:36:16
   |
34 |         assert is_correction_message("actually quite nice") == False  # No money
35 |         assert is_correction_message("sorry for the delay") == False  # No money
36 |         assert is_correction_message("") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
37 |         assert is_correction_message(None) == False
   |
help: Replace with `not is_correction_message("")`

E712 Avoid equality comparisons to `False`; use `not is_correction_message(None):` for false checks
  --> tests/test_corrections.py:37:16
   |
35 |         assert is_correction_message("sorry for the delay") == False  # No money
36 |         assert is_correction_message("") == False
37 |         assert is_correction_message(None) == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
38 |     
39 |     def test_correction_reason_parsing(self):
   |
help: Replace with `not is_correction_message(None)`

E712 Avoid equality comparisons to `True`; use `similar_category("food", "food"):` for truth checks
  --> tests/test_corrections.py:51:16
   |
49 |         """Test category similarity logic"""
50 |         # Direct matches
51 |         assert similar_category("food", "food") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
52 |         assert similar_category("transport", "transport") == True
   |
help: Replace with `similar_category("food", "food")`

E712 Avoid equality comparisons to `True`; use `similar_category("transport", "transport"):` for truth checks
  --> tests/test_corrections.py:52:16
   |
50 |         # Direct matches
51 |         assert similar_category("food", "food") == True
52 |         assert similar_category("transport", "transport") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
53 |         
54 |         # Substring matches
   |
help: Replace with `similar_category("transport", "transport")`

E712 Avoid equality comparisons to `True`; use `similar_category("food", "foods"):` for truth checks
  --> tests/test_corrections.py:55:16
   |
54 |         # Substring matches
55 |         assert similar_category("food", "foods") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
56 |         assert similar_category("coffee", "coffee shop") == True
   |
help: Replace with `similar_category("food", "foods")`

E712 Avoid equality comparisons to `True`; use `similar_category("coffee", "coffee shop"):` for truth checks
  --> tests/test_corrections.py:56:16
   |
54 |         # Substring matches
55 |         assert similar_category("food", "foods") == True
56 |         assert similar_category("coffee", "coffee shop") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
57 |         
58 |         # Category group matches
   |
help: Replace with `similar_category("coffee", "coffee shop")`

E712 Avoid equality comparisons to `True`; use `similar_category("lunch", "dinner"):` for truth checks
  --> tests/test_corrections.py:59:16
   |
58 |         # Category group matches
59 |         assert similar_category("lunch", "dinner") == True  # Both food
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
60 |         assert similar_category("taxi", "uber") == True     # Both transport
61 |         assert similar_category("medicine", "pharmacy") == True  # Both health
   |
help: Replace with `similar_category("lunch", "dinner")`

E712 Avoid equality comparisons to `True`; use `similar_category("taxi", "uber"):` for truth checks
  --> tests/test_corrections.py:60:16
   |
58 |         # Category group matches
59 |         assert similar_category("lunch", "dinner") == True  # Both food
60 |         assert similar_category("taxi", "uber") == True     # Both transport
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
61 |         assert similar_category("medicine", "pharmacy") == True  # Both health
   |
help: Replace with `similar_category("taxi", "uber")`

E712 Avoid equality comparisons to `True`; use `similar_category("medicine", "pharmacy"):` for truth checks
  --> tests/test_corrections.py:61:16
   |
59 |         assert similar_category("lunch", "dinner") == True  # Both food
60 |         assert similar_category("taxi", "uber") == True     # Both transport
61 |         assert similar_category("medicine", "pharmacy") == True  # Both health
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
62 |         
63 |         # Non-matches
   |
help: Replace with `similar_category("medicine", "pharmacy")`

E712 Avoid equality comparisons to `False`; use `not similar_category("food", "transport"):` for false checks
  --> tests/test_corrections.py:64:16
   |
63 |         # Non-matches
64 |         assert similar_category("food", "transport") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
65 |         assert similar_category("", "food") == False
66 |         assert similar_category(None, "food") == False
   |
help: Replace with `not similar_category("food", "transport")`

E712 Avoid equality comparisons to `False`; use `not similar_category("", "food"):` for false checks
  --> tests/test_corrections.py:65:16
   |
63 |         # Non-matches
64 |         assert similar_category("food", "transport") == False
65 |         assert similar_category("", "food") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
66 |         assert similar_category(None, "food") == False
   |
help: Replace with `not similar_category("", "food")`

E712 Avoid equality comparisons to `False`; use `not similar_category(None, "food"):` for false checks
  --> tests/test_corrections.py:66:16
   |
64 |         assert similar_category("food", "transport") == False
65 |         assert similar_category("", "food") == False
66 |         assert similar_category(None, "food") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
67 |     
68 |     def test_similar_merchant_matching(self):
   |
help: Replace with `not similar_category(None, "food")`

E712 Avoid equality comparisons to `True`; use `similar_merchant("Starbucks", "Starbucks"):` for truth checks
  --> tests/test_corrections.py:71:16
   |
69 |         """Test merchant similarity logic"""
70 |         # Direct matches
71 |         assert similar_merchant("Starbucks", "Starbucks") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
72 |         assert similar_merchant("The Wind Lounge", "The Wind Lounge") == True
   |
help: Replace with `similar_merchant("Starbucks", "Starbucks")`

E712 Avoid equality comparisons to `True`; use `...:` for truth checks
  --> tests/test_corrections.py:72:16
   |
70 |         # Direct matches
71 |         assert similar_merchant("Starbucks", "Starbucks") == True
72 |         assert similar_merchant("The Wind Lounge", "The Wind Lounge") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
73 |         
74 |         # Case insensitive
   |
help: Replace comparison

E712 Avoid equality comparisons to `True`; use `similar_merchant("starbucks", "STARBUCKS"):` for truth checks
  --> tests/test_corrections.py:75:16
   |
74 |         # Case insensitive
75 |         assert similar_merchant("starbucks", "STARBUCKS") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
76 |         
77 |         # Partial matches
   |
help: Replace with `similar_merchant("starbucks", "STARBUCKS")`

E712 Avoid equality comparisons to `True`; use `similar_merchant("Wind Lounge", "The Wind Lounge"):` for truth checks
  --> tests/test_corrections.py:78:16
   |
77 |         # Partial matches
78 |         assert similar_merchant("Wind Lounge", "The Wind Lounge") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
79 |         assert similar_merchant("KFC", "KFC Restaurant") == True
   |
help: Replace with `similar_merchant("Wind Lounge", "The Wind Lounge")`

E712 Avoid equality comparisons to `True`; use `similar_merchant("KFC", "KFC Restaurant"):` for truth checks
  --> tests/test_corrections.py:79:16
   |
77 |         # Partial matches
78 |         assert similar_merchant("Wind Lounge", "The Wind Lounge") == True
79 |         assert similar_merchant("KFC", "KFC Restaurant") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
80 |         
81 |         # Word overlap (50%+ threshold)
   |
help: Replace with `similar_merchant("KFC", "KFC Restaurant")`

E712 Avoid equality comparisons to `True`; use `similar_merchant("ABC Coffee Shop", "ABC Coffee"):` for truth checks
  --> tests/test_corrections.py:82:16
   |
81 |         # Word overlap (50%+ threshold)
82 |         assert similar_merchant("ABC Coffee Shop", "ABC Coffee") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
83 |         
84 |         # Non-matches
   |
help: Replace with `similar_merchant("ABC Coffee Shop", "ABC Coffee")`

E712 Avoid equality comparisons to `False`; use `not similar_merchant("Starbucks", "McDonald's"):` for false checks
  --> tests/test_corrections.py:85:16
   |
84 |         # Non-matches
85 |         assert similar_merchant("Starbucks", "McDonald's") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
86 |         assert similar_merchant("", "Starbucks") == False
87 |         assert similar_merchant(None, "Starbucks") == False
   |
help: Replace with `not similar_merchant("Starbucks", "McDonald's")`

E712 Avoid equality comparisons to `False`; use `not similar_merchant("", "Starbucks"):` for false checks
  --> tests/test_corrections.py:86:16
   |
84 |         # Non-matches
85 |         assert similar_merchant("Starbucks", "McDonald's") == False
86 |         assert similar_merchant("", "Starbucks") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
87 |         assert similar_merchant(None, "Starbucks") == False
   |
help: Replace with `not similar_merchant("", "Starbucks")`

E712 Avoid equality comparisons to `False`; use `not similar_merchant(None, "Starbucks"):` for false checks
  --> tests/test_corrections.py:87:16
   |
85 |         assert similar_merchant("Starbucks", "McDonald's") == False
86 |         assert similar_merchant("", "Starbucks") == False
87 |         assert similar_merchant(None, "Starbucks") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
88 |
89 | class TestCorrectionHandler:
   |
help: Replace with `not similar_merchant(None, "Starbucks")`

E712 Avoid equality comparisons to `False`; use `not is_smart_corrections_enabled(user_hash):` for false checks
   --> tests/test_corrections.py:218:16
    |
216 |         """Test corrections are disabled by default"""
217 |         user_hash = psid_hash("test_user_flag")
218 |         assert is_smart_corrections_enabled(user_hash) == False
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
219 |     
220 |     @patch.dict('os.environ', {
    |
help: Replace with `not is_smart_corrections_enabled(user_hash)`

E712 Avoid equality comparisons to `True`; use `is_smart_corrections_enabled("abc123"):` for truth checks
   --> tests/test_corrections.py:227:16
    |
225 |         """Test corrections enabled for allowlist users"""
226 |         # User in allowlist should have corrections enabled
227 |         assert is_smart_corrections_enabled("abc123") == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
228 |         
229 |         # User not in allowlist should have corrections disabled
    |
help: Replace with `is_smart_corrections_enabled("abc123")`

E712 Avoid equality comparisons to `False`; use `not is_smart_corrections_enabled(user_hash):` for false checks
   --> tests/test_corrections.py:231:16
    |
229 |         # User not in allowlist should have corrections disabled
230 |         user_hash = psid_hash("not_in_allowlist")
231 |         assert is_smart_corrections_enabled(user_hash) == False
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
232 |     
233 |     @patch.dict('os.environ', {'SMART_CORRECTIONS_DEFAULT': 'true'})
    |
help: Replace with `not is_smart_corrections_enabled(user_hash)`

E712 Avoid equality comparisons to `True`; use `is_smart_corrections_enabled(user_hash):` for truth checks
   --> tests/test_corrections.py:237:16
    |
235 |         """Test corrections enabled for all users when global flag is on"""
236 |         user_hash = psid_hash("any_user")
237 |         assert is_smart_corrections_enabled(user_hash) == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
238 |
239 | class TestCrossCurrencyCorrections:
    |
help: Replace with `is_smart_corrections_enabled(user_hash)`

F401 [*] `tempfile` imported but unused
  --> tests/test_deployment_confidence.py:11:8
   |
 9 | import sys
10 | import os
11 | import tempfile
   |        ^^^^^^^^
12 | import subprocess
13 | import json
   |
help: Remove unused import: `tempfile`

F401 [*] `json` imported but unused
  --> tests/test_deployment_confidence.py:13:8
   |
11 | import tempfile
12 | import subprocess
13 | import json
   |        ^^^^
14 | from unittest.mock import patch, MagicMock
   |
help: Remove unused import: `json`

F401 [*] `unittest.mock.patch` imported but unused
  --> tests/test_deployment_confidence.py:14:27
   |
12 | import subprocess
13 | import json
14 | from unittest.mock import patch, MagicMock
   |                           ^^^^^
15 |
16 | # Add the parent directory to sys.path
   |
help: Remove unused import: `unittest.mock.patch`

F841 [*] Local variable `e` is assigned to but never used
  --> tests/test_deployment_confidence.py:42:33
   |
40 |                 # If no exception is raised, the guard is working
41 |                 assert True, "Single writer protection initializes successfully"
42 |             except Exception as e:
   |                                 ^
43 |                 # Even if it fails, we can test the import worked
44 |                 assert True, "Single writer guard components are accessible"
   |
help: Remove assignment to unused variable `e`

F401 `contextvars` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> tests/test_deployment_confidence.py:53:20
   |
51 |         try:
52 |             from utils.single_writer_guard import canonical_writer_context
53 |             import contextvars
   |                    ^^^^^^^^^^^
54 |             
55 |             # Test that context manager properly sets and clears flags
   |
help: Remove unused import: `contextvars`

F401 `contextvars` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> tests/test_deployment_confidence.py:140:20
    |
138 |         try:
139 |             from utils.single_writer_guard import _check_expense_insert_permission
140 |             import contextvars
    |                    ^^^^^^^^^^^
141 |             
142 |             # Test without canonical writer context - should be blocked
    |
help: Remove unused import: `contextvars`

F401 `db_base.db` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> tests/test_deployment_confidence.py:197:33
    |
195 |             # Test that we can still query expenses (read operations should work)
196 |             from models import Expense
197 |             from db_base import db
    |                                 ^^
198 |             
199 |             # This should work - reading is allowed
    |
help: Remove unused import: `db_base.db`

F401 [*] `unittest.mock.MagicMock` imported but unused
 --> tests/test_gap_fix_clarify_flow.py:8:34
  |
6 | import pytest
7 | import os
8 | from unittest.mock import patch, MagicMock
  |                                  ^^^^^^^^^
9 | import backend_assistant as ba
  |
help: Remove unused import: `unittest.mock.MagicMock`

F401 [*] `app.db` imported but unused
 --> tests/test_health_readyz.py:9:22
  |
7 | import psycopg
8 |
9 | from app import app, db
  |                      ^^
  |
help: Remove unused import: `app.db`

F401 [*] `unittest.mock.Mock` imported but unused
 --> tests/test_insights_tenancy.py:7:27
  |
6 | import pytest
7 | from unittest.mock import Mock, patch
  |                           ^^^^
8 | from ai.payloads.insight_payload import build_insight_payload, validate_insight_response
9 | from utils.ai_contamination_monitor import AIContaminationMonitor
  |
help: Remove unused import: `unittest.mock.Mock`

F401 [*] `unittest.mock.MagicMock` imported but unused
 --> tests/test_job_queue.py:4:40
  |
2 | import pytest
3 | import time
4 | from unittest.mock import Mock, patch, MagicMock
  |                                        ^^^^^^^^^
5 | import json
6 | import uuid
  |
help: Remove unused import: `unittest.mock.MagicMock`

F401 [*] `datetime.datetime` imported but unused
 --> tests/test_job_queue.py:7:22
  |
5 | import json
6 | import uuid
7 | from datetime import datetime
  |                      ^^^^^^^^
8 |
9 | # Import modules to test
  |
help: Remove unused import: `datetime.datetime`

F401 [*] `datetime.datetime` imported but unused
 --> tests/test_new_user_logging.py:8:22
  |
6 | import pytest
7 | from decimal import Decimal
8 | from datetime import datetime
  |                      ^^^^^^^^
9 | from unittest.mock import patch, MagicMock
  |
help: Remove unused import: `datetime.datetime`

E712 Avoid equality comparisons to `True`; use `contains_money("৳100 coffee"):` for truth checks
  --> tests/test_new_user_logging.py:23:16
   |
21 |     def test_currency_symbols(self):
22 |         """Test detection of currency symbols"""
23 |         assert contains_money("৳100 coffee") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
24 |         assert contains_money("$25 lunch") == True
25 |         assert contains_money("£15.99 book") == True
   |
help: Replace with `contains_money("৳100 coffee")`

E712 Avoid equality comparisons to `True`; use `contains_money("$25 lunch"):` for truth checks
  --> tests/test_new_user_logging.py:24:16
   |
22 |         """Test detection of currency symbols"""
23 |         assert contains_money("৳100 coffee") == True
24 |         assert contains_money("$25 lunch") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
25 |         assert contains_money("£15.99 book") == True
26 |         assert contains_money("€30 groceries") == True
   |
help: Replace with `contains_money("$25 lunch")`

E712 Avoid equality comparisons to `True`; use `contains_money("£15.99 book"):` for truth checks
  --> tests/test_new_user_logging.py:25:16
   |
23 |         assert contains_money("৳100 coffee") == True
24 |         assert contains_money("$25 lunch") == True
25 |         assert contains_money("£15.99 book") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
26 |         assert contains_money("€30 groceries") == True
27 |         assert contains_money("₹200 dinner") == True
   |
help: Replace with `contains_money("£15.99 book")`

E712 Avoid equality comparisons to `True`; use `contains_money("€30 groceries"):` for truth checks
  --> tests/test_new_user_logging.py:26:16
   |
24 |         assert contains_money("$25 lunch") == True
25 |         assert contains_money("£15.99 book") == True
26 |         assert contains_money("€30 groceries") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
27 |         assert contains_money("₹200 dinner") == True
   |
help: Replace with `contains_money("€30 groceries")`

E712 Avoid equality comparisons to `True`; use `contains_money("₹200 dinner"):` for truth checks
  --> tests/test_new_user_logging.py:27:16
   |
25 |         assert contains_money("£15.99 book") == True
26 |         assert contains_money("€30 groceries") == True
27 |         assert contains_money("₹200 dinner") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
28 |     
29 |     def test_action_words(self):
   |
help: Replace with `contains_money("₹200 dinner")`

E712 Avoid equality comparisons to `True`; use `contains_money("spent 100 on lunch"):` for truth checks
  --> tests/test_new_user_logging.py:31:16
   |
29 |     def test_action_words(self):
30 |         """Test detection of spent/paid/bought patterns"""
31 |         assert contains_money("spent 100 on lunch") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
32 |         assert contains_money("paid 50 for coffee") == True
33 |         assert contains_money("bought 200 groceries") == True
   |
help: Replace with `contains_money("spent 100 on lunch")`

E712 Avoid equality comparisons to `True`; use `contains_money("paid 50 for coffee"):` for truth checks
  --> tests/test_new_user_logging.py:32:16
   |
30 |         """Test detection of spent/paid/bought patterns"""
31 |         assert contains_money("spent 100 on lunch") == True
32 |         assert contains_money("paid 50 for coffee") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
33 |         assert contains_money("bought 200 groceries") == True
34 |         assert contains_money("Spent 150.50 on shopping") == True
   |
help: Replace with `contains_money("paid 50 for coffee")`

E712 Avoid equality comparisons to `True`; use `contains_money("bought 200 groceries"):` for truth checks
  --> tests/test_new_user_logging.py:33:16
   |
31 |         assert contains_money("spent 100 on lunch") == True
32 |         assert contains_money("paid 50 for coffee") == True
33 |         assert contains_money("bought 200 groceries") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
34 |         assert contains_money("Spent 150.50 on shopping") == True
   |
help: Replace with `contains_money("bought 200 groceries")`

E712 Avoid equality comparisons to `True`; use `contains_money("Spent 150.50 on shopping"):` for truth checks
  --> tests/test_new_user_logging.py:34:16
   |
32 |         assert contains_money("paid 50 for coffee") == True
33 |         assert contains_money("bought 200 groceries") == True
34 |         assert contains_money("Spent 150.50 on shopping") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
35 |     
36 |     def test_preposition_patterns(self):
   |
help: Replace with `contains_money("Spent 150.50 on shopping")`

E712 Avoid equality comparisons to `True`; use `contains_money("100 on lunch"):` for truth checks
  --> tests/test_new_user_logging.py:38:16
   |
36 |     def test_preposition_patterns(self):
37 |         """Test detection of amount + on/for patterns"""
38 |         assert contains_money("100 on lunch") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
39 |         assert contains_money("50 for coffee") == True
40 |         assert contains_money("100 tk for transport") == True
   |
help: Replace with `contains_money("100 on lunch")`

E712 Avoid equality comparisons to `True`; use `contains_money("50 for coffee"):` for truth checks
  --> tests/test_new_user_logging.py:39:16
   |
37 |         """Test detection of amount + on/for patterns"""
38 |         assert contains_money("100 on lunch") == True
39 |         assert contains_money("50 for coffee") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
40 |         assert contains_money("100 tk for transport") == True
41 |         assert contains_money("25 usd on food") == True
   |
help: Replace with `contains_money("50 for coffee")`

E712 Avoid equality comparisons to `True`; use `contains_money("100 tk for transport"):` for truth checks
  --> tests/test_new_user_logging.py:40:16
   |
38 |         assert contains_money("100 on lunch") == True
39 |         assert contains_money("50 for coffee") == True
40 |         assert contains_money("100 tk for transport") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
41 |         assert contains_money("25 usd on food") == True
   |
help: Replace with `contains_money("100 tk for transport")`

E712 Avoid equality comparisons to `True`; use `contains_money("25 usd on food"):` for truth checks
  --> tests/test_new_user_logging.py:41:16
   |
39 |         assert contains_money("50 for coffee") == True
40 |         assert contains_money("100 tk for transport") == True
41 |         assert contains_money("25 usd on food") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
42 |     
43 |     def test_no_money_detected(self):
   |
help: Replace with `contains_money("25 usd on food")`

E712 Avoid equality comparisons to `False`; use `not contains_money("summary"):` for false checks
  --> tests/test_new_user_logging.py:45:16
   |
43 |     def test_no_money_detected(self):
44 |         """Test cases where no money should be detected"""
45 |         assert contains_money("summary") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
46 |         assert contains_money("show me my expenses") == False
47 |         assert contains_money("hello") == False
   |
help: Replace with `not contains_money("summary")`

E712 Avoid equality comparisons to `False`; use `not contains_money("show me my expenses"):` for false checks
  --> tests/test_new_user_logging.py:46:16
   |
44 |         """Test cases where no money should be detected"""
45 |         assert contains_money("summary") == False
46 |         assert contains_money("show me my expenses") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
47 |         assert contains_money("hello") == False
48 |         assert contains_money("recap") == False
   |
help: Replace with `not contains_money("show me my expenses")`

E712 Avoid equality comparisons to `False`; use `not contains_money("hello"):` for false checks
  --> tests/test_new_user_logging.py:47:16
   |
45 |         assert contains_money("summary") == False
46 |         assert contains_money("show me my expenses") == False
47 |         assert contains_money("hello") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
48 |         assert contains_money("recap") == False
49 |         assert contains_money("") == False
   |
help: Replace with `not contains_money("hello")`

E712 Avoid equality comparisons to `False`; use `not contains_money("recap"):` for false checks
  --> tests/test_new_user_logging.py:48:16
   |
46 |         assert contains_money("show me my expenses") == False
47 |         assert contains_money("hello") == False
48 |         assert contains_money("recap") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
49 |         assert contains_money("") == False
50 |         assert contains_money("   ") == False
   |
help: Replace with `not contains_money("recap")`

E712 Avoid equality comparisons to `False`; use `not contains_money(""):` for false checks
  --> tests/test_new_user_logging.py:49:16
   |
47 |         assert contains_money("hello") == False
48 |         assert contains_money("recap") == False
49 |         assert contains_money("") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
50 |         assert contains_money("   ") == False
   |
help: Replace with `not contains_money("")`

E712 Avoid equality comparisons to `False`; use `not contains_money("   "):` for false checks
  --> tests/test_new_user_logging.py:50:16
   |
48 |         assert contains_money("recap") == False
49 |         assert contains_money("") == False
50 |         assert contains_money("   ") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: Replace with `not contains_money("   ")`

E712 Avoid equality comparisons to `False`; use `not result['duplicate']:` for false checks
   --> tests/test_new_user_logging.py:261:28
    |
259 |                     )
260 |                     
261 |                     assert result['duplicate'] == False
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
262 |                     assert result['success'] == True
    |
help: Replace with `not result['duplicate']`

E712 Avoid equality comparisons to `True`; use `result['success']:` for truth checks
   --> tests/test_new_user_logging.py:262:28
    |
261 |                     assert result['duplicate'] == False
262 |                     assert result['success'] == True
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^
263 |     
264 |     def test_save_expense_idempotent_duplicate(self):
    |
help: Replace with `result['success']`

E712 Avoid equality comparisons to `True`; use `result['duplicate']:` for truth checks
   --> tests/test_new_user_logging.py:285:20
    |
283 |             )
284 |             
285 |             assert result['duplicate'] == True
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
286 |             assert result['timestamp'] == "10:30"
287 |             assert result['success'] == False
    |
help: Replace with `result['duplicate']`

E712 Avoid equality comparisons to `False`; use `not result['success']:` for false checks
   --> tests/test_new_user_logging.py:287:20
    |
285 |             assert result['duplicate'] == True
286 |             assert result['timestamp'] == "10:30"
287 |             assert result['success'] == False
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
288 |             assert result['expense_id'] == 123
    |
help: Replace with `not result['success']`

F401 [*] `finbrain.router.normalize_text` imported but unused
  --> tests/test_nlp_logging.py:14:45
   |
13 | # Import system components
14 | from finbrain.router import contains_money, normalize_text
   |                                             ^^^^^^^^^^^^^^
15 | from parsers.expense import parse_expense, parse_amount_currency_category
16 | from utils.feature_flags import is_smart_nlp_enabled, is_smart_tone_enabled
   |
help: Remove unused import: `finbrain.router.normalize_text`

F401 [*] `parsers.expense.parse_amount_currency_category` imported but unused
  --> tests/test_nlp_logging.py:15:44
   |
13 | # Import system components
14 | from finbrain.router import contains_money, normalize_text
15 | from parsers.expense import parse_expense, parse_amount_currency_category
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
16 | from utils.feature_flags import is_smart_nlp_enabled, is_smart_tone_enabled
17 | from utils.db import ensure_idempotency_index
   |
help: Remove unused import: `parsers.expense.parse_amount_currency_category`

F401 [*] `utils.db.ensure_idempotency_index` imported but unused
  --> tests/test_nlp_logging.py:17:22
   |
15 | from parsers.expense import parse_expense, parse_amount_currency_category
16 | from utils.feature_flags import is_smart_nlp_enabled, is_smart_tone_enabled
17 | from utils.db import ensure_idempotency_index
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^
18 | from backend_assistant import add_expense
19 | # Mark as expected failure due to module restructuring
   |
help: Remove unused import: `utils.db.ensure_idempotency_index`

F401 [*] `backend_assistant.add_expense` imported but unused
  --> tests/test_nlp_logging.py:18:31
   |
16 | from utils.feature_flags import is_smart_nlp_enabled, is_smart_tone_enabled
17 | from utils.db import ensure_idempotency_index
18 | from backend_assistant import add_expense
   |                               ^^^^^^^^^^^
19 | # Mark as expected failure due to module restructuring
20 | pytestmark = pytest.mark.xfail(reason="Module restructuring - structured logging functions unavailable")
   |
help: Remove unused import: `backend_assistant.add_expense`

E712 Avoid equality comparisons to `True`; use `contains_money("৳100 coffee"):` for truth checks
  --> tests/test_nlp_logging.py:33:16
   |
31 |     def test_currency_symbols(self):
32 |         """Test detection of currency symbols"""
33 |         assert contains_money("৳100 coffee") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
34 |         assert contains_money("$25 lunch") == True
35 |         assert contains_money("£15.99 book") == True
   |
help: Replace with `contains_money("৳100 coffee")`

E712 Avoid equality comparisons to `True`; use `contains_money("$25 lunch"):` for truth checks
  --> tests/test_nlp_logging.py:34:16
   |
32 |         """Test detection of currency symbols"""
33 |         assert contains_money("৳100 coffee") == True
34 |         assert contains_money("$25 lunch") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
35 |         assert contains_money("£15.99 book") == True
36 |         assert contains_money("€30 groceries") == True
   |
help: Replace with `contains_money("$25 lunch")`

E712 Avoid equality comparisons to `True`; use `contains_money("£15.99 book"):` for truth checks
  --> tests/test_nlp_logging.py:35:16
   |
33 |         assert contains_money("৳100 coffee") == True
34 |         assert contains_money("$25 lunch") == True
35 |         assert contains_money("£15.99 book") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
36 |         assert contains_money("€30 groceries") == True
37 |         assert contains_money("₹200 dinner") == True
   |
help: Replace with `contains_money("£15.99 book")`

E712 Avoid equality comparisons to `True`; use `contains_money("€30 groceries"):` for truth checks
  --> tests/test_nlp_logging.py:36:16
   |
34 |         assert contains_money("$25 lunch") == True
35 |         assert contains_money("£15.99 book") == True
36 |         assert contains_money("€30 groceries") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
37 |         assert contains_money("₹200 dinner") == True
38 |         assert contains_money("৳250.50 shopping") == True
   |
help: Replace with `contains_money("€30 groceries")`

E712 Avoid equality comparisons to `True`; use `contains_money("₹200 dinner"):` for truth checks
  --> tests/test_nlp_logging.py:37:16
   |
35 |         assert contains_money("£15.99 book") == True
36 |         assert contains_money("€30 groceries") == True
37 |         assert contains_money("₹200 dinner") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
38 |         assert contains_money("৳250.50 shopping") == True
   |
help: Replace with `contains_money("₹200 dinner")`

E712 Avoid equality comparisons to `True`; use `contains_money("৳250.50 shopping"):` for truth checks
  --> tests/test_nlp_logging.py:38:16
   |
36 |         assert contains_money("€30 groceries") == True
37 |         assert contains_money("₹200 dinner") == True
38 |         assert contains_money("৳250.50 shopping") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
39 |     
40 |     def test_currency_words(self):
   |
help: Replace with `contains_money("৳250.50 shopping")`

E712 Avoid equality comparisons to `True`; use `contains_money("100 tk for transport"):` for truth checks
  --> tests/test_nlp_logging.py:42:16
   |
40 |     def test_currency_words(self):
41 |         """Test detection of currency words"""
42 |         assert contains_money("100 tk for transport") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
43 |         assert contains_money("paid 50 bdt") == True
44 |         assert contains_money("spent 25 usd") == True
   |
help: Replace with `contains_money("100 tk for transport")`

E712 Avoid equality comparisons to `True`; use `contains_money("paid 50 bdt"):` for truth checks
  --> tests/test_nlp_logging.py:43:16
   |
41 |         """Test detection of currency words"""
42 |         assert contains_money("100 tk for transport") == True
43 |         assert contains_money("paid 50 bdt") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
44 |         assert contains_money("spent 25 usd") == True
45 |         assert contains_money("bought €30 groceries") == True
   |
help: Replace with `contains_money("paid 50 bdt")`

E712 Avoid equality comparisons to `True`; use `contains_money("spent 25 usd"):` for truth checks
  --> tests/test_nlp_logging.py:44:16
   |
42 |         assert contains_money("100 tk for transport") == True
43 |         assert contains_money("paid 50 bdt") == True
44 |         assert contains_money("spent 25 usd") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
45 |         assert contains_money("bought €30 groceries") == True
46 |         assert contains_money("rs 200 taxi") == True
   |
help: Replace with `contains_money("spent 25 usd")`

E712 Avoid equality comparisons to `True`; use `contains_money("bought €30 groceries"):` for truth checks
  --> tests/test_nlp_logging.py:45:16
   |
43 |         assert contains_money("paid 50 bdt") == True
44 |         assert contains_money("spent 25 usd") == True
45 |         assert contains_money("bought €30 groceries") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
46 |         assert contains_money("rs 200 taxi") == True
47 |         assert contains_money("peso 150 lunch") == True
   |
help: Replace with `contains_money("bought €30 groceries")`

E712 Avoid equality comparisons to `True`; use `contains_money("rs 200 taxi"):` for truth checks
  --> tests/test_nlp_logging.py:46:16
   |
44 |         assert contains_money("spent 25 usd") == True
45 |         assert contains_money("bought €30 groceries") == True
46 |         assert contains_money("rs 200 taxi") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
47 |         assert contains_money("peso 150 lunch") == True
   |
help: Replace with `contains_money("rs 200 taxi")`

E712 Avoid equality comparisons to `True`; use `contains_money("peso 150 lunch"):` for truth checks
  --> tests/test_nlp_logging.py:47:16
   |
45 |         assert contains_money("bought €30 groceries") == True
46 |         assert contains_money("rs 200 taxi") == True
47 |         assert contains_money("peso 150 lunch") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
48 |     
49 |     def test_action_verbs(self):
   |
help: Replace with `contains_money("peso 150 lunch")`

E712 Avoid equality comparisons to `True`; use `contains_money("spent 100 on lunch"):` for truth checks
  --> tests/test_nlp_logging.py:51:16
   |
49 |     def test_action_verbs(self):
50 |         """Test detection of action verbs with amounts"""
51 |         assert contains_money("spent 100 on lunch") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
52 |         assert contains_money("paid 50 for coffee") == True
53 |         assert contains_money("bought 200 groceries") == True
   |
help: Replace with `contains_money("spent 100 on lunch")`

E712 Avoid equality comparisons to `True`; use `contains_money("paid 50 for coffee"):` for truth checks
  --> tests/test_nlp_logging.py:52:16
   |
50 |         """Test detection of action verbs with amounts"""
51 |         assert contains_money("spent 100 on lunch") == True
52 |         assert contains_money("paid 50 for coffee") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
53 |         assert contains_money("bought 200 groceries") == True
54 |         assert contains_money("blew 1200 on shopping") == True
   |
help: Replace with `contains_money("paid 50 for coffee")`

E712 Avoid equality comparisons to `True`; use `contains_money("bought 200 groceries"):` for truth checks
  --> tests/test_nlp_logging.py:53:16
   |
51 |         assert contains_money("spent 100 on lunch") == True
52 |         assert contains_money("paid 50 for coffee") == True
53 |         assert contains_money("bought 200 groceries") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
54 |         assert contains_money("blew 1200 on shopping") == True
55 |         assert contains_money("burned 80 fuel") == True
   |
help: Replace with `contains_money("bought 200 groceries")`

E712 Avoid equality comparisons to `True`; use `contains_money("blew 1200 on shopping"):` for truth checks
  --> tests/test_nlp_logging.py:54:16
   |
52 |         assert contains_money("paid 50 for coffee") == True
53 |         assert contains_money("bought 200 groceries") == True
54 |         assert contains_money("blew 1200 on shopping") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
55 |         assert contains_money("burned 80 fuel") == True
56 |         assert contains_money("used 45 for taxi") == True
   |
help: Replace with `contains_money("blew 1200 on shopping")`

E712 Avoid equality comparisons to `True`; use `contains_money("burned 80 fuel"):` for truth checks
  --> tests/test_nlp_logging.py:55:16
   |
53 |         assert contains_money("bought 200 groceries") == True
54 |         assert contains_money("blew 1200 on shopping") == True
55 |         assert contains_money("burned 80 fuel") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
56 |         assert contains_money("used 45 for taxi") == True
   |
help: Replace with `contains_money("burned 80 fuel")`

E712 Avoid equality comparisons to `True`; use `contains_money("used 45 for taxi"):` for truth checks
  --> tests/test_nlp_logging.py:56:16
   |
54 |         assert contains_money("blew 1200 on shopping") == True
55 |         assert contains_money("burned 80 fuel") == True
56 |         assert contains_money("used 45 for taxi") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
57 |     
58 |     def test_shorthand_patterns(self):
   |
help: Replace with `contains_money("used 45 for taxi")`

E712 Avoid equality comparisons to `True`; use `contains_money("coffee 100"):` for truth checks
  --> tests/test_nlp_logging.py:60:16
   |
58 |     def test_shorthand_patterns(self):
59 |         """Test shorthand expense patterns"""
60 |         assert contains_money("coffee 100") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
61 |         assert contains_money("lunch 250") == True
62 |         assert contains_money("uber 80") == True
   |
help: Replace with `contains_money("coffee 100")`

E712 Avoid equality comparisons to `True`; use `contains_money("lunch 250"):` for truth checks
  --> tests/test_nlp_logging.py:61:16
   |
59 |         """Test shorthand expense patterns"""
60 |         assert contains_money("coffee 100") == True
61 |         assert contains_money("lunch 250") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
62 |         assert contains_money("uber 80") == True
63 |         assert contains_money("groceries 450") == True
   |
help: Replace with `contains_money("lunch 250")`

E712 Avoid equality comparisons to `True`; use `contains_money("uber 80"):` for truth checks
  --> tests/test_nlp_logging.py:62:16
   |
60 |         assert contains_money("coffee 100") == True
61 |         assert contains_money("lunch 250") == True
62 |         assert contains_money("uber 80") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
63 |         assert contains_money("groceries 450") == True
64 |         assert contains_money("fuel 120") == True
   |
help: Replace with `contains_money("uber 80")`

E712 Avoid equality comparisons to `True`; use `contains_money("groceries 450"):` for truth checks
  --> tests/test_nlp_logging.py:63:16
   |
61 |         assert contains_money("lunch 250") == True
62 |         assert contains_money("uber 80") == True
63 |         assert contains_money("groceries 450") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
64 |         assert contains_money("fuel 120") == True
65 |         assert contains_money("medicine 95") == True
   |
help: Replace with `contains_money("groceries 450")`

E712 Avoid equality comparisons to `True`; use `contains_money("fuel 120"):` for truth checks
  --> tests/test_nlp_logging.py:64:16
   |
62 |         assert contains_money("uber 80") == True
63 |         assert contains_money("groceries 450") == True
64 |         assert contains_money("fuel 120") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
65 |         assert contains_money("medicine 95") == True
   |
help: Replace with `contains_money("fuel 120")`

E712 Avoid equality comparisons to `True`; use `contains_money("medicine 95"):` for truth checks
  --> tests/test_nlp_logging.py:65:16
   |
63 |         assert contains_money("groceries 450") == True
64 |         assert contains_money("fuel 120") == True
65 |         assert contains_money("medicine 95") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
66 |     
67 |     def test_multipliers(self):
   |
help: Replace with `contains_money("medicine 95")`

E712 Avoid equality comparisons to `True`; use `contains_money("blew 1.2k on shopping"):` for truth checks
  --> tests/test_nlp_logging.py:69:16
   |
67 |     def test_multipliers(self):
68 |         """Test multiplier patterns (1.2k, 1K)"""
69 |         assert contains_money("blew 1.2k on shopping") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
70 |         assert contains_money("spent 2K for travel") == True
71 |         assert contains_money("1.5k fuel yesterday") == True
   |
help: Replace with `contains_money("blew 1.2k on shopping")`

E712 Avoid equality comparisons to `True`; use `contains_money("spent 2K for travel"):` for truth checks
  --> tests/test_nlp_logging.py:70:16
   |
68 |         """Test multiplier patterns (1.2k, 1K)"""
69 |         assert contains_money("blew 1.2k on shopping") == True
70 |         assert contains_money("spent 2K for travel") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
71 |         assert contains_money("1.5k fuel yesterday") == True
   |
help: Replace with `contains_money("spent 2K for travel")`

E712 Avoid equality comparisons to `True`; use `contains_money("1.5k fuel yesterday"):` for truth checks
  --> tests/test_nlp_logging.py:71:16
   |
69 |         assert contains_money("blew 1.2k on shopping") == True
70 |         assert contains_money("spent 2K for travel") == True
71 |         assert contains_money("1.5k fuel yesterday") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
72 |     
73 |     def test_noisy_text_tolerance(self):
   |
help: Replace with `contains_money("1.5k fuel yesterday")`

E712 Avoid equality comparisons to `True`; use `contains_money("coffee 100☕️"):` for truth checks
  --> tests/test_nlp_logging.py:75:16
   |
73 |     def test_noisy_text_tolerance(self):
74 |         """Test tolerance for emojis and extra spaces"""
75 |         assert contains_money("coffee 100☕️") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
76 |         assert contains_money("Spent   300   tk  lunch") == True
77 |         assert contains_money("man I blew 1.2k tk on groceries today 😭") == True
   |
help: Replace with `contains_money("coffee 100☕️")`

E712 Avoid equality comparisons to `True`; use `contains_money("Spent   300   tk  lunch"):` for truth checks
  --> tests/test_nlp_logging.py:76:16
   |
74 |         """Test tolerance for emojis and extra spaces"""
75 |         assert contains_money("coffee 100☕️") == True
76 |         assert contains_money("Spent   300   tk  lunch") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
77 |         assert contains_money("man I blew 1.2k tk on groceries today 😭") == True
   |
help: Replace with `contains_money("Spent   300   tk  lunch")`

E712 Avoid equality comparisons to `True`; use `...:` for truth checks
  --> tests/test_nlp_logging.py:77:16
   |
75 |         assert contains_money("coffee 100☕️") == True
76 |         assert contains_money("Spent   300   tk  lunch") == True
77 |         assert contains_money("man I blew 1.2k tk on groceries today 😭") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
78 |     
79 |     def test_bangla_numerals(self):
   |
help: Replace comparison

E712 Avoid equality comparisons to `True`; use `contains_money("১২০ টাকা coffee"):` for truth checks
  --> tests/test_nlp_logging.py:81:16
   |
79 |     def test_bangla_numerals(self):
80 |         """Test Bangla numeral support"""
81 |         assert contains_money("১২০ টাকা coffee") == True  # 120 taka coffee
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
82 |         assert contains_money("৩০০ lunch") == True  # 300 lunch
   |
help: Replace with `contains_money("১২০ টাকা coffee")`

E712 Avoid equality comparisons to `True`; use `contains_money("৩০০ lunch"):` for truth checks
  --> tests/test_nlp_logging.py:82:16
   |
80 |         """Test Bangla numeral support"""
81 |         assert contains_money("১২০ টাকা coffee") == True  # 120 taka coffee
82 |         assert contains_money("৩০০ lunch") == True  # 300 lunch
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
83 |     
84 |     def test_no_money_detected(self):
   |
help: Replace with `contains_money("৩০০ lunch")`

E712 Avoid equality comparisons to `False`; use `not contains_money("summary"):` for false checks
  --> tests/test_nlp_logging.py:86:16
   |
84 |     def test_no_money_detected(self):
85 |         """Test cases where no money should be detected"""
86 |         assert contains_money("summary") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
87 |         assert contains_money("show me my expenses") == False
88 |         assert contains_money("hello") == False
   |
help: Replace with `not contains_money("summary")`

E712 Avoid equality comparisons to `False`; use `not contains_money("show me my expenses"):` for false checks
  --> tests/test_nlp_logging.py:87:16
   |
85 |         """Test cases where no money should be detected"""
86 |         assert contains_money("summary") == False
87 |         assert contains_money("show me my expenses") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
88 |         assert contains_money("hello") == False
89 |         assert contains_money("recap") == False
   |
help: Replace with `not contains_money("show me my expenses")`

E712 Avoid equality comparisons to `False`; use `not contains_money("hello"):` for false checks
  --> tests/test_nlp_logging.py:88:16
   |
86 |         assert contains_money("summary") == False
87 |         assert contains_money("show me my expenses") == False
88 |         assert contains_money("hello") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
89 |         assert contains_money("recap") == False
90 |         assert contains_money("how are you") == False
   |
help: Replace with `not contains_money("hello")`

E712 Avoid equality comparisons to `False`; use `not contains_money("recap"):` for false checks
  --> tests/test_nlp_logging.py:89:16
   |
87 |         assert contains_money("show me my expenses") == False
88 |         assert contains_money("hello") == False
89 |         assert contains_money("recap") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
90 |         assert contains_money("how are you") == False
91 |         assert contains_money("") == False
   |
help: Replace with `not contains_money("recap")`

E712 Avoid equality comparisons to `False`; use `not contains_money("how are you"):` for false checks
  --> tests/test_nlp_logging.py:90:16
   |
88 |         assert contains_money("hello") == False
89 |         assert contains_money("recap") == False
90 |         assert contains_money("how are you") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
91 |         assert contains_money("") == False
92 |         assert contains_money("   ") == False
   |
help: Replace with `not contains_money("how are you")`

E712 Avoid equality comparisons to `False`; use `not contains_money(""):` for false checks
  --> tests/test_nlp_logging.py:91:16
   |
89 |         assert contains_money("recap") == False
90 |         assert contains_money("how are you") == False
91 |         assert contains_money("") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
92 |         assert contains_money("   ") == False
   |
help: Replace with `not contains_money("")`

E712 Avoid equality comparisons to `False`; use `not contains_money("   "):` for false checks
  --> tests/test_nlp_logging.py:92:16
   |
90 |         assert contains_money("how are you") == False
91 |         assert contains_money("") == False
92 |         assert contains_money("   ") == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
93 |
94 | class TestEnhancedParser:
   |
help: Replace with `not contains_money("   ")`

E712 Avoid equality comparisons to `False`; use `not is_smart_nlp_enabled():` for false checks
   --> tests/test_nlp_logging.py:219:16
    |
217 |         """Test that feature flags default to False for safety"""
218 |         # Should be False by default (safety first)
219 |         assert is_smart_nlp_enabled() == False
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
220 |         assert is_smart_tone_enabled() == False
    |
help: Replace with `not is_smart_nlp_enabled()`

E712 Avoid equality comparisons to `False`; use `not is_smart_tone_enabled():` for false checks
   --> tests/test_nlp_logging.py:220:16
    |
218 |         # Should be False by default (safety first)
219 |         assert is_smart_nlp_enabled() == False
220 |         assert is_smart_tone_enabled() == False
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
221 |     
222 |     def test_allowlist_functionality(self):
    |
help: Replace with `not is_smart_tone_enabled()`

E712 Avoid equality comparisons to `False`; use `not is_smart_nlp_enabled(test_psid_hash):` for false checks
   --> tests/test_nlp_logging.py:227:16
    |
226 |         # Without allowlist, should be False
227 |         assert is_smart_nlp_enabled(test_psid_hash) == False
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
228 |         
229 |         # Add to allowlist via environment variable simulation
    |
help: Replace with `not is_smart_nlp_enabled(test_psid_hash)`

E712 Avoid equality comparisons to `True`; use `is_smart_nlp_enabled(test_psid_hash):` for truth checks
   --> tests/test_nlp_logging.py:234:16
    |
233 |         # Should now be True for this user
234 |         assert is_smart_nlp_enabled(test_psid_hash) == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
235 |         
236 |         # Clean up
    |
help: Replace with `is_smart_nlp_enabled(test_psid_hash)`

F821 Undefined name `upsert_expense_idempotent`
   --> tests/test_nlp_logging.py:278:30
    |
276 |                     mock_summary.query.filter_by.return_value.first.return_value = None
277 |                     
278 |                     result = upsert_expense_idempotent(fresh_psid_hash, mid, test_payload)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^
279 |                     
280 |                     assert result['duplicate'] == False
    |

E712 Avoid equality comparisons to `False`; use `not result['duplicate']:` for false checks
   --> tests/test_nlp_logging.py:280:28
    |
278 |                     result = upsert_expense_idempotent(fresh_psid_hash, mid, test_payload)
279 |                     
280 |                     assert result['duplicate'] == False
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
281 |                     assert result['success'] == True
282 |                     assert result['amount'] == 100.0
    |
help: Replace with `not result['duplicate']`

E712 Avoid equality comparisons to `True`; use `result['success']:` for truth checks
   --> tests/test_nlp_logging.py:281:28
    |
280 |                     assert result['duplicate'] == False
281 |                     assert result['success'] == True
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^
282 |                     assert result['amount'] == 100.0
283 |                     assert result['currency'] == 'BDT'
    |
help: Replace with `result['success']`

F821 Undefined name `upsert_expense_idempotent`
   --> tests/test_nlp_logging.py:299:22
    |
297 |             mock_db.session.query.return_value.filter_by.return_value.first.return_value = mock_existing
298 |             
299 |             result = upsert_expense_idempotent(fresh_psid_hash, mid, test_payload)
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^
300 |             
301 |             assert result['duplicate'] == True
    |

E712 Avoid equality comparisons to `True`; use `result['duplicate']:` for truth checks
   --> tests/test_nlp_logging.py:301:20
    |
299 |             result = upsert_expense_idempotent(fresh_psid_hash, mid, test_payload)
300 |             
301 |             assert result['duplicate'] == True
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
302 |             assert result['idempotent'] == True
303 |             assert result['timestamp'] == "10:30"
    |
help: Replace with `result['duplicate']`

E712 Avoid equality comparisons to `True`; use `result['idempotent']:` for truth checks
   --> tests/test_nlp_logging.py:302:20
    |
301 |             assert result['duplicate'] == True
302 |             assert result['idempotent'] == True
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
303 |             assert result['timestamp'] == "10:30"
304 |             assert result['success'] == False
    |
help: Replace with `result['idempotent']`

E712 Avoid equality comparisons to `False`; use `not result['success']:` for false checks
   --> tests/test_nlp_logging.py:304:20
    |
302 |             assert result['idempotent'] == True
303 |             assert result['timestamp'] == "10:30"
304 |             assert result['success'] == False
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
305 |             assert result['expense_id'] == 123
    |
help: Replace with `not result['success']`

E712 Avoid equality comparisons to `True`; use `contains_money(text):` for truth checks
   --> tests/test_nlp_logging.py:328:16
    |
327 |         # Step 1: Money detection
328 |         assert contains_money(text) == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
329 |         
330 |         # Step 2: Parsing
    |
help: Replace with `contains_money(text)`

F821 Undefined name `upsert_expense_idempotent`
   --> tests/test_nlp_logging.py:358:30
    |
356 |                     }
357 |                     
358 |                     result = upsert_expense_idempotent(
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^
359 |                         fresh_user_setup['psid_hash'], 
360 |                         fresh_user_setup['mid'], 
    |

E712 Avoid equality comparisons to `True`; use `result['success']:` for truth checks
   --> tests/test_nlp_logging.py:364:28
    |
362 |                     )
363 |                     
364 |                     assert result['success'] == True
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^
365 |                     assert result['duplicate'] == False
    |
help: Replace with `result['success']`

E712 Avoid equality comparisons to `False`; use `not result['duplicate']:` for false checks
   --> tests/test_nlp_logging.py:365:28
    |
364 |                     assert result['success'] == True
365 |                     assert result['duplicate'] == False
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
366 |
367 | class TestParameterizedModes:
    |
help: Replace with `not result['duplicate']`

E712 Avoid equality comparisons to `True`; use `money_detected:` for truth checks
   --> tests/test_nlp_logging.py:388:20
    |
387 |         if expected_intent == "LOG":
388 |             assert money_detected == True
    |                    ^^^^^^^^^^^^^^^^^^^^^^
389 |             
390 |             parsed = parse_expense(text, datetime.utcnow())
    |
help: Replace with `money_detected`

E712 Avoid equality comparisons to `False`; use `not money_detected:` for false checks
   --> tests/test_nlp_logging.py:396:20
    |
395 |         elif expected_intent == "SUMMARY":
396 |             assert money_detected == False
    |                    ^^^^^^^^^^^^^^^^^^^^^^^
397 |
398 | class TestTelemetrySystem:
    |
help: Replace with `not money_detected`

E712 Avoid equality comparisons to `True`; use `contains_money("spent 100 on lunch"):` for truth checks
   --> tests/test_nlp_logging.py:448:16
    |
446 |     # Test 1: Money detection works
447 |     try:
448 |         assert contains_money("spent 100 on lunch") == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
449 |         assert contains_money("summary") == False
450 |         acceptance_results.append(("Money detection", True))
    |
help: Replace with `contains_money("spent 100 on lunch")`

E712 Avoid equality comparisons to `False`; use `not contains_money("summary"):` for false checks
   --> tests/test_nlp_logging.py:449:16
    |
447 |     try:
448 |         assert contains_money("spent 100 on lunch") == True
449 |         assert contains_money("summary") == False
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
450 |         acceptance_results.append(("Money detection", True))
451 |         print("✅ Money detection: PASS")
    |
help: Replace with `not contains_money("summary")`

E712 Avoid equality comparisons to `False`; use `not is_smart_nlp_enabled():` for false checks
   --> tests/test_nlp_logging.py:470:16
    |
468 |     # Test 3: Feature flags default to safe values
469 |     try:
470 |         assert is_smart_nlp_enabled() == False  # Safe default
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
471 |         acceptance_results.append(("Feature flag safety", True))
472 |         print("✅ Feature flag safety: PASS")
    |
help: Replace with `not is_smart_nlp_enabled()`

F401 [*] `pytest` imported but unused
 --> tests/test_pca_comprehensive_uat.py:6:8
  |
4 | """
5 |
6 | import pytest
  |        ^^^^^^
7 | import os
8 | import json
  |
help: Remove unused import: `pytest`

F401 [*] `json` imported but unused
  --> tests/test_pca_comprehensive_uat.py:8:8
   |
 6 | import pytest
 7 | import os
 8 | import json
   |        ^^^^
 9 | import time
10 | import threading
   |
help: Remove unused import: `json`

F401 [*] `threading` imported but unused
  --> tests/test_pca_comprehensive_uat.py:10:8
   |
 8 | import json
 9 | import time
10 | import threading
   |        ^^^^^^^^^
11 | from datetime import datetime, timedelta
12 | from unittest.mock import patch, MagicMock
   |
help: Remove unused import: `threading`

F401 [*] `concurrent.futures.ThreadPoolExecutor` imported but unused
  --> tests/test_pca_comprehensive_uat.py:13:32
   |
11 | from datetime import datetime, timedelta
12 | from unittest.mock import patch, MagicMock
13 | from concurrent.futures import ThreadPoolExecutor
   |                                ^^^^^^^^^^^^^^^^^^
14 | import hashlib
15 | import random
   |
help: Remove unused import: `concurrent.futures.ThreadPoolExecutor`

F401 [*] `requests` imported but unused
  --> tests/test_pca_comprehensive_uat.py:16:8
   |
14 | import hashlib
15 | import random
16 | import requests
   |        ^^^^^^^^
17 |
18 | # Set test environment for comprehensive testing
   |
help: Remove unused import: `requests`

F401 [*] `app.db` imported but unused
  --> tests/test_pca_comprehensive_uat.py:25:22
   |
23 | os.environ['USE_PRECEDENCE'] = 'true'
24 |
25 | from app import app, db
   |                      ^^
26 | from utils.precedence_engine import precedence_engine
27 | from utils.canonical_command import CanonicalCommand, CCSlots
   |
help: Remove unused import: `app.db`

F401 [*] `utils.multi_item_parser.multi_item_parser` imported but unused
  --> tests/test_pca_comprehensive_uat.py:29:37
   |
27 | from utils.canonical_command import CanonicalCommand, CCSlots
28 | from utils.pca_feature_flags import pca_feature_flags
29 | from utils.multi_item_parser import multi_item_parser
   |                                     ^^^^^^^^^^^^^^^^^
30 | import hashlib
   |
help: Remove unused import: `utils.multi_item_parser.multi_item_parser`

F811 [*] Redefinition of unused `hashlib` from line 14
  --> tests/test_pca_comprehensive_uat.py:30:8
   |
28 | from utils.pca_feature_flags import pca_feature_flags
29 | from utils.multi_item_parser import multi_item_parser
30 | import hashlib
   |        ^^^^^^^
31 |
32 | def ensure_hashed(input_str):
   |
help: Remove definition: `hashlib`

F841 Local variable `correction_a` is assigned to but never used
  --> tests/test_pca_comprehensive_uat.py:61:9
   |
59 |         """A1: User A correction → User B unaffected"""
60 |         # User A makes a correction
61 |         correction_a = {
   |         ^^^^^^^^^^^^
62 |             'tx_id': 'tx_shared_001',
63 |             'category': 'entertainment',
   |
help: Remove assignment to unused variable `correction_a`

F841 Local variable `original_mode` is assigned to but never used
   --> tests/test_pca_comprehensive_uat.py:255:9
    |
253 |         """D2: Each flag flips cleanly mid-session"""
254 |         # Test mode switching
255 |         original_mode = pca_feature_flags.mode
    |         ^^^^^^^^^^^^^
256 |         
257 |         # Switch to SHADOW mode
    |
help: Remove assignment to unused variable `original_mode`

F841 Local variable `result_rule` is assigned to but never used
   --> tests/test_pca_comprehensive_uat.py:349:13
    |
347 |             mock_db.session.query.return_value.filter_by.return_value.order_by.return_value.first.return_value = None  # No correction
348 |             
349 |             result_rule = precedence_engine.get_effective_view(
    |             ^^^^^^^^^^^
350 |                 user_id=self.user_a,
351 |                 tx_id='precedence_rule',
    |
help: Remove assignment to unused variable `result_rule`

F841 Local variable `result` is assigned to but never used
   --> tests/test_pca_comprehensive_uat.py:396:13
    |
394 |             mock_db.session.query.return_value.filter_by.return_value.order_by.return_value.first.return_value = None  # No correction
395 |             
396 |             result = precedence_engine.get_effective_view(
    |             ^^^^^^
397 |                 user_id=self.user_a,
398 |                 tx_id='conflict_resolution',
    |
help: Remove assignment to unused variable `result`

F841 Local variable `result` is assigned to but never used
   --> tests/test_pca_comprehensive_uat.py:415:13
    |
413 |             start_time = time.time()
414 |             
415 |             result = precedence_engine.get_effective_view(
    |             ^^^^^^
416 |                 user_id=self.user_a,
417 |                 tx_id=f'perf_test_{i}',
    |
help: Remove assignment to unused variable `result`

F841 Local variable `decision` is assigned to but never used
   --> tests/test_pca_comprehensive_uat.py:453:17
    |
451 |                 ask_once_count += 1
452 |             else:
453 |                 decision = "RAW_ONLY"
    |                 ^^^^^^^^
454 |                 raw_only_count += 1
    |
help: Remove assignment to unused variable `decision`

F401 [*] `threading` imported but unused
 --> tests/test_pca_end_to_end.py:7:8
  |
6 | import time
7 | import threading
  |        ^^^^^^^^^
8 | import json
9 | import hashlib
  |
help: Remove unused import: `threading`

F401 [*] `json` imported but unused
  --> tests/test_pca_end_to_end.py:8:8
   |
 6 | import time
 7 | import threading
 8 | import json
   |        ^^^^
 9 | import hashlib
10 | from datetime import datetime
   |
help: Remove unused import: `json`

F401 [*] `random` imported but unused
  --> tests/test_pca_end_to_end.py:13:8
   |
11 | from concurrent.futures import ThreadPoolExecutor, as_completed
12 | import requests
13 | import random
   |        ^^^^^^
14 |
15 | # Test configuration
   |
help: Remove unused import: `random`

F841 Local variable `snapshot_created` is assigned to but never used
   --> tests/test_pca_end_to_end.py:329:9
    |
327 |         ttl_days = 90
328 |         current_time = datetime.now()
329 |         snapshot_created = current_time  # Mock snapshot creation
    |         ^^^^^^^^^^^^^^^^
330 |         ttl_compliant = True  # Mock TTL compliance check
    |
help: Remove assignment to unused variable `snapshot_created`

F401 [*] `pytest` imported but unused
 --> tests/test_pca_phase1_uat.py:6:8
  |
4 | """
5 |
6 | import pytest
  |        ^^^^^^
7 | import os
8 | import json
  |
help: Remove unused import: `pytest`

F401 [*] `json` imported but unused
  --> tests/test_pca_phase1_uat.py:8:8
   |
 6 | import pytest
 7 | import os
 8 | import json
   |        ^^^^
 9 | from datetime import datetime
10 | from unittest.mock import patch, MagicMock
   |
help: Remove unused import: `json`

F401 [*] `unittest.mock.MagicMock` imported but unused
  --> tests/test_pca_phase1_uat.py:10:34
   |
 8 | import json
 9 | from datetime import datetime
10 | from unittest.mock import patch, MagicMock
   |                                  ^^^^^^^^^
11 |
12 | # Set test environment
   |
help: Remove unused import: `unittest.mock.MagicMock`

E712 Avoid equality comparisons to `True`; use `status['master_flag']:` for truth checks
   --> tests/test_pca_phase1_uat.py:330:16
    |
328 |         status = self.flags.get_status()
329 |         
330 |         assert status['master_flag'] == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
331 |         assert status['mode'] == 'ON'
332 |         assert status['overlay_active'] == True
    |
help: Replace with `status['master_flag']`

E712 Avoid equality comparisons to `True`; use `status['overlay_active']:` for truth checks
   --> tests/test_pca_phase1_uat.py:332:16
    |
330 |         assert status['master_flag'] == True
331 |         assert status['mode'] == 'ON'
332 |         assert status['overlay_active'] == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
333 |         assert status['features']['audit_ui'] == True
    |
help: Replace with `status['overlay_active']`

E712 Avoid equality comparisons to `True`; use `status['features']['audit_ui']:` for truth checks
   --> tests/test_pca_phase1_uat.py:333:16
    |
331 |         assert status['mode'] == 'ON'
332 |         assert status['overlay_active'] == True
333 |         assert status['features']['audit_ui'] == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
334 |         
335 |         print("✅ E2: Flag status correctly reported for monitoring")
    |
help: Replace with `status['features']['audit_ui']`

F401 [*] `pytest` imported but unused
 --> tests/test_pca_phase2_integration.py:6:8
  |
4 | """
5 |
6 | import pytest
  |        ^^^^^^
7 | import os
8 | import json
  |
help: Remove unused import: `pytest`

F401 [*] `flask.Flask` imported but unused
  --> tests/test_pca_phase2_integration.py:11:19
   |
 9 | from datetime import datetime
10 | from unittest.mock import patch, MagicMock
11 | from flask import Flask
   |                   ^^^^^
12 |
13 | # Set test environment
   |
help: Remove unused import: `flask.Flask`

F401 [*] `app.db` imported but unused
  --> tests/test_pca_phase2_integration.py:20:22
   |
18 | os.environ['USE_PRECEDENCE'] = 'true'
19 |
20 | from app import app, db
   |                      ^^
21 | from routes.pca_api import pca_api
22 | from routes.pca_ui import pca_ui
   |
help: Remove unused import: `app.db`

E712 Avoid equality comparisons to `True`; use `data['success']:` for truth checks
  --> tests/test_pca_phase2_integration.py:65:16
   |
63 |         assert response.status_code == 200
64 |         data = response.get_json()
65 |         assert data['success'] == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^
66 |         assert 'rule_id' in data
67 |         assert 'preview_count' in data
   |
help: Replace with `data['success']`

E712 Avoid equality comparisons to `True`; use `data['success']:` for truth checks
  --> tests/test_pca_phase2_integration.py:85:16
   |
83 |         assert response.status_code == 200
84 |         data = response.get_json()
85 |         assert data['success'] == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^
86 |         assert 'correction_id' in data
   |
help: Replace with `data['success']`

E712 Avoid equality comparisons to `True`; use `multi_item_parser.detect_multi_item(text):` for truth checks
   --> tests/test_pca_phase2_integration.py:178:16
    |
177 |         # Test detection
178 |         assert multi_item_parser.detect_multi_item(text) == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
179 |         
180 |         # Test parsing
    |
help: Replace with `multi_item_parser.detect_multi_item(text)`

E712 Avoid equality comparisons to `True`; use `pca_feature_flags.is_shadow_mode():` for truth checks
   --> tests/test_pca_phase2_integration.py:211:16
    |
209 |         pca_feature_flags.refresh_flags()
210 |         
211 |         assert pca_feature_flags.is_shadow_mode() == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
212 |         assert pca_feature_flags.is_overlay_active() == False
    |
help: Replace with `pca_feature_flags.is_shadow_mode()`

E712 Avoid equality comparisons to `False`; use `not pca_feature_flags.is_overlay_active():` for false checks
   --> tests/test_pca_phase2_integration.py:212:16
    |
211 |         assert pca_feature_flags.is_shadow_mode() == True
212 |         assert pca_feature_flags.is_overlay_active() == False
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
213 |         
214 |         # API should still work but not write to DB
    |
help: Replace with `not pca_feature_flags.is_overlay_active()`

E712 Avoid equality comparisons to `True`; use `pca_feature_flags.is_dryrun_mode():` for truth checks
   --> tests/test_pca_phase2_integration.py:236:16
    |
234 |         pca_feature_flags.refresh_flags()
235 |         
236 |         assert pca_feature_flags.is_dryrun_mode() == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
237 |         assert pca_feature_flags.is_overlay_active() == False
    |
help: Replace with `pca_feature_flags.is_dryrun_mode()`

E712 Avoid equality comparisons to `False`; use `not pca_feature_flags.is_overlay_active():` for false checks
   --> tests/test_pca_phase2_integration.py:237:16
    |
236 |         assert pca_feature_flags.is_dryrun_mode() == True
237 |         assert pca_feature_flags.is_overlay_active() == False
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
238 |         
239 |         # Should not create overlays
    |
help: Replace with `not pca_feature_flags.is_overlay_active()`

E712 Avoid equality comparisons to `True`; use `pca_feature_flags.is_overlay_active():` for truth checks
   --> tests/test_pca_phase2_integration.py:253:16
    |
251 |         pca_feature_flags.refresh_flags()
252 |         
253 |         assert pca_feature_flags.is_overlay_active() == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
254 |         assert pca_feature_flags.should_enable_rules() == True
255 |         assert pca_feature_flags.should_show_audit_ui() == True
    |
help: Replace with `pca_feature_flags.is_overlay_active()`

E712 Avoid equality comparisons to `True`; use `pca_feature_flags.should_enable_rules():` for truth checks
   --> tests/test_pca_phase2_integration.py:254:16
    |
253 |         assert pca_feature_flags.is_overlay_active() == True
254 |         assert pca_feature_flags.should_enable_rules() == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
255 |         assert pca_feature_flags.should_show_audit_ui() == True
    |
help: Replace with `pca_feature_flags.should_enable_rules()`

E712 Avoid equality comparisons to `True`; use `pca_feature_flags.should_show_audit_ui():` for truth checks
   --> tests/test_pca_phase2_integration.py:255:16
    |
253 |         assert pca_feature_flags.is_overlay_active() == True
254 |         assert pca_feature_flags.should_enable_rules() == True
255 |         assert pca_feature_flags.should_show_audit_ui() == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
256 |         
257 |         print("✅ D3: ON mode allows full overlay operations")
    |
help: Replace with `pca_feature_flags.should_show_audit_ui()`

F401 [*] `unittest.mock.MagicMock` imported but unused
  --> tests/test_phase_c_uat.py:21:40
   |
19 | import uuid
20 | import pytest
21 | from unittest.mock import Mock, patch, MagicMock, call
   |                                        ^^^^^^^^^
22 | from datetime import datetime
23 | from dataclasses import asdict
   |
help: Remove unused import

F401 [*] `unittest.mock.call` imported but unused
  --> tests/test_phase_c_uat.py:21:51
   |
19 | import uuid
20 | import pytest
21 | from unittest.mock import Mock, patch, MagicMock, call
   |                                                   ^^^^
22 | from datetime import datetime
23 | from dataclasses import asdict
   |
help: Remove unused import

F401 [*] `datetime.datetime` imported but unused
  --> tests/test_phase_c_uat.py:22:22
   |
20 | import pytest
21 | from unittest.mock import Mock, patch, MagicMock, call
22 | from datetime import datetime
   |                      ^^^^^^^^
23 | from dataclasses import asdict
   |
help: Remove unused import: `datetime.datetime`

F401 [*] `redis` imported but unused
  --> tests/test_phase_c_uat.py:25:8
   |
23 | from dataclasses import asdict
24 |
25 | import redis
   |        ^^^^^
26 | from flask import Flask
   |
help: Remove unused import: `redis`

F401 [*] `flask.Flask` imported but unused
  --> tests/test_phase_c_uat.py:26:19
   |
25 | import redis
26 | from flask import Flask
   |                   ^^^^^
27 |
28 | # Import the components we're testing
   |
help: Remove unused import: `flask.Flask`

F401 [*] `utils.job_queue.job_queue` imported but unused
  --> tests/test_phase_c_uat.py:29:44
   |
28 | # Import the components we're testing
29 | from utils.job_queue import JobQueue, Job, job_queue
   |                                            ^^^^^^^^^
30 | from utils.circuit_breaker import CircuitBreaker, CircuitState, CircuitBreakerConfig
31 | from utils.rate_limiter_jobs import JobRateLimiter, RateLimitResult
   |
help: Remove unused import: `utils.job_queue.job_queue`

F401 [*] `utils.circuit_breaker.CircuitBreakerConfig` imported but unused
  --> tests/test_phase_c_uat.py:30:65
   |
28 | # Import the components we're testing
29 | from utils.job_queue import JobQueue, Job, job_queue
30 | from utils.circuit_breaker import CircuitBreaker, CircuitState, CircuitBreakerConfig
   |                                                                 ^^^^^^^^^^^^^^^^^^^^
31 | from utils.rate_limiter_jobs import JobRateLimiter, RateLimitResult
32 | from utils.job_processor import JobProcessor
   |
help: Remove unused import: `utils.circuit_breaker.CircuitBreakerConfig`

F401 [*] `utils.rate_limiter_jobs.RateLimitResult` imported but unused
  --> tests/test_phase_c_uat.py:31:53
   |
29 | from utils.job_queue import JobQueue, Job, job_queue
30 | from utils.circuit_breaker import CircuitBreaker, CircuitState, CircuitBreakerConfig
31 | from utils.rate_limiter_jobs import JobRateLimiter, RateLimitResult
   |                                                     ^^^^^^^^^^^^^^^
32 | from utils.job_processor import JobProcessor
   |
help: Remove unused import: `utils.rate_limiter_jobs.RateLimitResult`

F401 [*] `unittest.mock.MagicMock` imported but unused
 --> tests/test_redis_smoke.py:5:40
  |
3 | import json
4 | import os
5 | from unittest.mock import Mock, patch, MagicMock
  |                                        ^^^^^^^^^
6 | from flask import Flask
7 | import sys
  |
help: Remove unused import: `unittest.mock.MagicMock`

F811 [*] Redefinition of unused `os` from line 4
  --> tests/test_redis_smoke.py:8:8
   |
 6 | from flask import Flask
 7 | import sys
 8 | import os
   |        ^^
 9 |
10 | # Add parent directory to path to import from app directory
   |
help: Remove definition: `os`

F401 [*] `pytest` imported but unused
  --> tests/test_restart_reconciliation.py:14:8
   |
12 | """
13 |
14 | import pytest
   |        ^^^^^^
15 | import json
16 | import time
   |
help: Remove unused import: `pytest`

F401 [*] `hashlib` imported but unused
  --> tests/test_restart_reconciliation.py:18:8
   |
16 | import time
17 | import logging
18 | import hashlib
   |        ^^^^^^^
19 | import os
20 | from datetime import datetime, timedelta
   |
help: Remove unused import: `hashlib`

F401 [*] `os` imported but unused
  --> tests/test_restart_reconciliation.py:19:8
   |
17 | import logging
18 | import hashlib
19 | import os
   |        ^^
20 | from datetime import datetime, timedelta
21 | from decimal import Decimal
   |
help: Remove unused import: `os`

F401 [*] `datetime.timedelta` imported but unused
  --> tests/test_restart_reconciliation.py:20:32
   |
18 | import hashlib
19 | import os
20 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
21 | from decimal import Decimal
22 | from unittest.mock import patch, MagicMock
   |
help: Remove unused import: `datetime.timedelta`

F401 [*] `unittest.mock.MagicMock` imported but unused
  --> tests/test_restart_reconciliation.py:22:34
   |
20 | from datetime import datetime, timedelta
21 | from decimal import Decimal
22 | from unittest.mock import patch, MagicMock
   |                                  ^^^^^^^^^
23 | from typing import Dict, Any, List, Optional
   |
help: Remove unused import: `unittest.mock.MagicMock`

F401 [*] `typing.Dict` imported but unused
  --> tests/test_restart_reconciliation.py:23:20
   |
21 | from decimal import Decimal
22 | from unittest.mock import patch, MagicMock
23 | from typing import Dict, Any, List, Optional
   |                    ^^^^
24 |
25 | # Import test infrastructure
   |
help: Remove unused import

F401 [*] `typing.Any` imported but unused
  --> tests/test_restart_reconciliation.py:23:26
   |
21 | from decimal import Decimal
22 | from unittest.mock import patch, MagicMock
23 | from typing import Dict, Any, List, Optional
   |                          ^^^
24 |
25 | # Import test infrastructure
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> tests/test_restart_reconciliation.py:23:31
   |
21 | from decimal import Decimal
22 | from unittest.mock import patch, MagicMock
23 | from typing import Dict, Any, List, Optional
   |                               ^^^^
24 |
25 | # Import test infrastructure
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> tests/test_restart_reconciliation.py:23:37
   |
21 | from decimal import Decimal
22 | from unittest.mock import patch, MagicMock
23 | from typing import Dict, Any, List, Optional
   |                                     ^^^^^^^^
24 |
25 | # Import test infrastructure
   |
help: Remove unused import

F401 [*] `models.User` imported but unused
  --> tests/test_restart_reconciliation.py:30:29
   |
28 | # Import app and database components
29 | from app import app, db
30 | from models import Expense, User, MonthlySummary
   |                             ^^^^
31 | from utils.identity import psid_hash, ensure_hashed as identity_ensure_hashed
32 | from utils.crypto import ensure_hashed as crypto_ensure_hashed
   |
help: Remove unused import

F401 [*] `models.MonthlySummary` imported but unused
  --> tests/test_restart_reconciliation.py:30:35
   |
28 | # Import app and database components
29 | from app import app, db
30 | from models import Expense, User, MonthlySummary
   |                                   ^^^^^^^^^^^^^^
31 | from utils.identity import psid_hash, ensure_hashed as identity_ensure_hashed
32 | from utils.crypto import ensure_hashed as crypto_ensure_hashed
   |
help: Remove unused import

F401 [*] `utils.identity.ensure_hashed` imported but unused
  --> tests/test_restart_reconciliation.py:31:56
   |
29 | from app import app, db
30 | from models import Expense, User, MonthlySummary
31 | from utils.identity import psid_hash, ensure_hashed as identity_ensure_hashed
   |                                                        ^^^^^^^^^^^^^^^^^^^^^^
32 | from utils.crypto import ensure_hashed as crypto_ensure_hashed
   |
help: Remove unused import: `utils.identity.ensure_hashed`

F541 [*] f-string without any placeholders
  --> tests/test_restart_reconciliation.py:51:15
   |
50 |         # These should be different - this is the bug!
51 |         print(f"\n=== HASH INCONSISTENCY DETECTION ===")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
52 |         print(f"Test PSID: {test_psid}")
53 |         print(f"utils/identity.py hash: {identity_hash}")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> tests/test_restart_reconciliation.py:74:19
   |
72 |         """Test that demonstrates reconciliation failure with inconsistent hashing"""
73 |         with self.mock_environment_secrets():
74 |             print(f"\n=== TESTING OLD HASH METHOD (SHOULD FAIL) ===")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
75 |             
76 |             user = test_users['alice']
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> tests/test_restart_reconciliation.py:81:19
   |
80 |             # Step 1: Log expense using one hash method (utils/identity.py)
81 |             print(f"Step 1: Logging expense using identity.psid_hash()")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
82 |             user_hash_identity = psid_hash(user['psid'])
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/test_restart_reconciliation.py:106:19
    |
105 |             # Step 2: Capture initial totals
106 |             print(f"Step 2: Capturing initial totals")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
107 |             totals_response = client.post('/api/backend/get_totals',
108 |                                         data=json.dumps({"period": "month"}),
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/test_restart_reconciliation.py:117:19
    |
116 |             # Step 3: Simulate app restart by switching to different hash method
117 |             print(f"Step 3: Simulating restart with different hash method (utils/crypto.py)")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
118 |             user_hash_crypto = crypto_ensure_hashed(user['psid'])
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/test_restart_reconciliation.py:125:19
    |
124 |             # Step 4: Try to reconcile with different hash - this should fail!
125 |             print(f"Step 4: Attempting reconciliation with different hash method")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
126 |             
127 |             # Mock the system to use crypto hash method 
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/test_restart_reconciliation.py:143:31
    |
141 |                     # This demonstrates the bug - totals don't match after restart!
142 |                     if abs(initial_amount - post_restart_amount) > 0.01:
143 |                         print(f"❌ RECONCILIATION FAILURE DETECTED!")
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
144 |                         print(f"   Before restart: ৳{initial_amount}")
145 |                         print(f"   After restart:  ৳{post_restart_amount}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/test_restart_reconciliation.py:147:31
    |
145 |                         print(f"   After restart:  ৳{post_restart_amount}")
146 |                         print(f"   Difference:     ৳{abs(initial_amount - post_restart_amount)}")
147 |                         print(f"   This is the exact bug that breaks user data after deploys!")
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
148 |                         
149 |                         # For this test, we expect failure (demonstrating the bug)
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/test_restart_reconciliation.py:152:31
    |
150 |                         return True  # Bug detected successfully
151 |                     else:
152 |                         print(f"✅ Totals remained consistent (unexpected - bug might be fixed)")
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
153 |                         return False
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/test_restart_reconciliation.py:158:19
    |
156 |         """Test that demonstrates reconciliation success with consistent hashing"""
157 |         with self.mock_environment_secrets():
158 |             print(f"\n=== TESTING FIXED HASH METHOD (SHOULD PASS) ===")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
159 |             
160 |             user = test_users['bob']  # Use different user to avoid interference
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/test_restart_reconciliation.py:165:19
    |
164 |             # Step 1: Log expense using consistent hash method
165 |             print(f"Step 1: Logging expense using consistent hashing")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
166 |             
167 |             # Setup session auth
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/test_restart_reconciliation.py:189:19
    |
188 |             # Step 2: Capture initial totals
189 |             print(f"Step 2: Capturing initial totals")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
190 |             totals_response = client.post('/api/backend/get_totals',
191 |                                         data=json.dumps({"period": "month"}),
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/test_restart_reconciliation.py:200:19
    |
199 |             # Step 3: Simulate app restart with SAME hash method (fixed implementation)
200 |             print(f"Step 3: Simulating restart with consistent hash method")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
201 |             
202 |             # Use the same hash method both times - this is what the fix should do
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/test_restart_reconciliation.py:216:31
    |
215 |                         # Step 4: Try to reconcile - should succeed with consistent hashing
216 |                         print(f"Step 4: Attempting reconciliation with consistent hash method")
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
217 |                         
218 |                         post_restart_response = client.post('/api/backend/get_totals',
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/test_restart_reconciliation.py:230:35
    |
228 |                         # With consistent hashing, totals should match
229 |                         if abs(initial_amount - post_restart_amount) < 0.01:
230 |                             print(f"✅ RECONCILIATION SUCCESS!")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
231 |                             print(f"   Before restart: ৳{initial_amount}")
232 |                             print(f"   After restart:  ৳{post_restart_amount}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/test_restart_reconciliation.py:234:35
    |
232 |                             print(f"   After restart:  ৳{post_restart_amount}")
233 |                             print(f"   Difference:     ৳{abs(initial_amount - post_restart_amount)}")
234 |                             print(f"   Consistent hashing maintains data integrity!")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
235 |                             return True
236 |                         else:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/test_restart_reconciliation.py:237:35
    |
235 |                             return True
236 |                         else:
237 |                             print(f"❌ Reconciliation failed even with consistent hashing")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
238 |                             print(f"   This indicates a different bug or test setup issue")
239 |                             return False
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/test_restart_reconciliation.py:238:35
    |
236 |                         else:
237 |                             print(f"❌ Reconciliation failed even with consistent hashing")
238 |                             print(f"   This indicates a different bug or test setup issue")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
239 |                             return False
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/test_restart_reconciliation.py:244:19
    |
242 |         """Comprehensive test of the full restart reconciliation flow"""
243 |         with self.mock_environment_secrets():
244 |             print(f"\n=== COMPREHENSIVE RESTART RECONCILIATION TEST ===")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
245 |             
246 |             # Test both failure and success scenarios
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/test_restart_reconciliation.py:250:19
    |
248 |             fixed_hash_result = self.test_restart_reconciliation_with_fixed_hash_method(client, test_users)
249 |             
250 |             print(f"\n=== FINAL TEST RESULTS ===")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
251 |             print(f"Old hash method (should fail):  {'✅ Bug detected' if old_hash_result else '❌ Bug not detected'}")
252 |             print(f"Fixed hash method (should pass): {'✅ Fix works' if fixed_hash_result else '❌ Fix failed'}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/test_restart_reconciliation.py:258:23
    |
257 |             if overall_success:
258 |                 print(f"✅ OVERALL RESULT: Test successfully catches hash breakage bug")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
259 |                 print(f"   This test will prevent future reconciliation failures in CI/CD")
260 |             else:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/test_restart_reconciliation.py:259:23
    |
257 |             if overall_success:
258 |                 print(f"✅ OVERALL RESULT: Test successfully catches hash breakage bug")
259 |                 print(f"   This test will prevent future reconciliation failures in CI/CD")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
260 |             else:
261 |                 print(f"❌ OVERALL RESULT: Test did not work as expected")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/test_restart_reconciliation.py:261:23
    |
259 |                 print(f"   This test will prevent future reconciliation failures in CI/CD")
260 |             else:
261 |                 print(f"❌ OVERALL RESULT: Test did not work as expected")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
262 |                 if not old_hash_result:
263 |                     print(f"   - Failed to detect the hash inconsistency bug")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/test_restart_reconciliation.py:263:27
    |
261 |                 print(f"❌ OVERALL RESULT: Test did not work as expected")
262 |                 if not old_hash_result:
263 |                     print(f"   - Failed to detect the hash inconsistency bug")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
264 |                 if not fixed_hash_result:
265 |                     print(f"   - Fixed method did not work properly")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/test_restart_reconciliation.py:265:27
    |
263 |                     print(f"   - Failed to detect the hash inconsistency bug")
264 |                 if not fixed_hash_result:
265 |                     print(f"   - Fixed method did not work properly")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
266 |             
267 |             # Return success - this test is meant to demonstrate/catch the bug
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/test_restart_reconciliation.py:273:19
    |
271 |         """Direct database test showing hash inconsistency affects queries"""
272 |         with self.mock_environment_secrets():
273 |             print(f"\n=== DATABASE QUERY HASH CONSISTENCY TEST ===")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
274 |             
275 |             user = test_users['alice']
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/test_restart_reconciliation.py:318:27
    |
317 |                 if found_with_identity > 0 and found_with_crypto == 0:
318 |                     print(f"❌ HASH INCONSISTENCY CONFIRMED!")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
319 |                     print(f"   Same user, different hash = different query results")
320 |                     print(f"   This breaks reconciliation when hash method changes")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/test_restart_reconciliation.py:319:27
    |
317 |                 if found_with_identity > 0 and found_with_crypto == 0:
318 |                     print(f"❌ HASH INCONSISTENCY CONFIRMED!")
319 |                     print(f"   Same user, different hash = different query results")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
320 |                     print(f"   This breaks reconciliation when hash method changes")
321 |                     inconsistency_detected = True
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/test_restart_reconciliation.py:320:27
    |
318 |                     print(f"❌ HASH INCONSISTENCY CONFIRMED!")
319 |                     print(f"   Same user, different hash = different query results")
320 |                     print(f"   This breaks reconciliation when hash method changes")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
321 |                     inconsistency_detected = True
322 |                 else:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/test_restart_reconciliation.py:323:27
    |
321 |                     inconsistency_detected = True
322 |                 else:
323 |                     print(f"✅ No hash inconsistency detected (unexpected)")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
324 |                     inconsistency_detected = False
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/test_restart_reconciliation.py:335:15
    |
333 |     def test_api_endpoint_availability(self, client):
334 |         """Test that required API endpoints are available for reconciliation testing"""
335 |         print(f"\n=== API ENDPOINT AVAILABILITY TEST ===")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
336 |         
337 |         endpoints_to_test = [
    |
help: Remove extraneous `f` prefix

F841 Local variable `expected_codes` is assigned to but never used
   --> tests/test_restart_reconciliation.py:357:17
    |
355 |                 available = response.status_code != 404
356 |                 status_msg = "✅ Available" if available else "❌ Not Found"
357 |                 expected_codes = [401, 403, 200] if endpoint != '/health' else [200]
    |                 ^^^^^^^^^^^^^^
358 |                 
359 |                 print(f"{endpoint} ({method}): {status_msg} (HTTP {response.status_code})")
    |
help: Remove assignment to unused variable `expected_codes`

F401 [*] `os` imported but unused
 --> tests/test_router_canonicality.py:6:8
  |
4 | """
5 |
6 | import os
  |        ^^
7 | import re
8 | from pathlib import Path
  |
help: Remove unused import: `os`

F401 [*] `tempfile` imported but unused
  --> tests/test_single_writer_enforcement.py:14:8
   |
12 | import sys
13 | import os
14 | import tempfile
   |        ^^^^^^^^
15 | import subprocess
16 | from unittest.mock import patch, MagicMock
   |
help: Remove unused import: `tempfile`

F841 [*] Local variable `e` is assigned to but never used
   --> tests/test_single_writer_enforcement.py:114:33
    |
112 |                         pass  # Module doesn't exist, that's fine
113 |                         
114 |             except Exception as e:
    |                                 ^
115 |                 # If we can't check a module, that's okay
116 |                 pass
    |
help: Remove assignment to unused variable `e`

F401 `db_base.db` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> tests/test_single_writer_enforcement.py:163:33
    |
161 |         # This test verifies that database-level protections are in place
162 |         try:
163 |             from db_base import db
    |                                 ^^
164 |             from models import Expense
    |
help: Remove unused import: `db_base.db`

F401 `models.Expense` imported but unused; consider using `importlib.util.find_spec` to test for availability
   --> tests/test_single_writer_enforcement.py:164:32
    |
162 |         try:
163 |             from db_base import db
164 |             from models import Expense
    |                                ^^^^^^^
165 |             
166 |             # This should be prevented by database constraints or application logic
    |
help: Remove unused import: `models.Expense`

F841 Local variable `mock_db` is assigned to but never used
   --> tests/test_single_writer_enforcement.py:251:59
    |
249 |                     # This should raise a ValueError due to missing required fields
250 |                     # We're not actually calling it with a real DB, just testing validation
251 |                     with patch('backend_assistant.db') as mock_db:
    |                                                           ^^^^^^^
252 |                         add_expense(**test_case)
253 |                         pytest.fail(f"Should have raised error for invalid parameters: {test_case}")
    |
help: Remove assignment to unused variable `mock_db`

F401 [*] `pytest` imported but unused
 --> tests/test_smart_corrections.py:6:8
  |
4 | """
5 |
6 | import pytest
  |        ^^^^^^
7 | import unittest
8 | from unittest.mock import patch, MagicMock
  |
help: Remove unused import: `pytest`

F401 [*] `datetime.timedelta` imported but unused
  --> tests/test_smart_corrections.py:9:32
   |
 7 | import unittest
 8 | from unittest.mock import patch, MagicMock
 9 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
10 | from decimal import Decimal
   |
help: Remove unused import: `datetime.timedelta`

F401 [*] `finbrain.router.is_correction_message` imported but unused
  --> tests/test_smart_corrections.py:21:30
   |
19 | from finbrain.router import (
20 |     contains_money_with_correction_fallback, 
21 |     is_correction_message as router_is_correction
   |                              ^^^^^^^^^^^^^^^^^^^^
22 | )
23 | from utils.feature_flags import is_smart_corrections_enabled
   |
help: Remove unused import: `finbrain.router.is_correction_message`

F401 [*] `utils.feature_flags.is_smart_corrections_enabled` imported but unused
  --> tests/test_smart_corrections.py:23:33
   |
21 |     is_correction_message as router_is_correction
22 | )
23 | from utils.feature_flags import is_smart_corrections_enabled
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
24 | from handlers.expense import handle_correction
25 | from templates.replies import (
   |
help: Remove unused import: `utils.feature_flags.is_smart_corrections_enabled`

F841 Local variable `non_fallback_cases` is assigned to but never used
  --> tests/test_smart_corrections.py:97:9
   |
96 |         # These should NOT trigger fallback (not corrections)
97 |         non_fallback_cases = [
   |         ^^^^^^^^^^^^^^^^^^
98 |             "spent 500",           # Not a correction
99 |             "500 for coffee",      # Not a correction
   |
help: Remove assignment to unused variable `non_fallback_cases`

F401 [*] `models.User` imported but unused
  --> tests/test_stabilization.py:16:29
   |
15 | from app import app, db
16 | from models import Expense, User
   |                             ^^^^
17 | from parsers.expense import extract_all_expenses, parse_expense, is_correction_message
18 | from handlers.expense import handle_multi_expense_logging, handle_correction
   |
help: Remove unused import: `models.User`

F401 [*] `parsers.expense.parse_expense` imported but unused
  --> tests/test_stabilization.py:17:51
   |
15 | from app import app, db
16 | from models import Expense, User
17 | from parsers.expense import extract_all_expenses, parse_expense, is_correction_message
   |                                                   ^^^^^^^^^^^^^
18 | from handlers.expense import handle_multi_expense_logging, handle_correction
19 | from utils.feature_flags import feature_enabled
   |
help: Remove unused import: `parsers.expense.parse_expense`

E712 Avoid equality comparisons to `True`; use `feature_enabled(test_psid, "SMART_NLP_ROUTING"):` for truth checks
  --> tests/test_stabilization.py:40:16
   |
39 |         # All feature flags should always return True
40 |         assert feature_enabled(test_psid, "SMART_NLP_ROUTING") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
41 |         assert feature_enabled(test_psid, "SMART_CORRECTIONS") == True
42 |         assert feature_enabled(test_psid, "SMART_NLP_TONE") == True
   |
help: Replace with `feature_enabled(test_psid, "SMART_NLP_ROUTING")`

E712 Avoid equality comparisons to `True`; use `feature_enabled(test_psid, "SMART_CORRECTIONS"):` for truth checks
  --> tests/test_stabilization.py:41:16
   |
39 |         # All feature flags should always return True
40 |         assert feature_enabled(test_psid, "SMART_NLP_ROUTING") == True
41 |         assert feature_enabled(test_psid, "SMART_CORRECTIONS") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
42 |         assert feature_enabled(test_psid, "SMART_NLP_TONE") == True
   |
help: Replace with `feature_enabled(test_psid, "SMART_CORRECTIONS")`

E712 Avoid equality comparisons to `True`; use `feature_enabled(test_psid, "SMART_NLP_TONE"):` for truth checks
  --> tests/test_stabilization.py:42:16
   |
40 |         assert feature_enabled(test_psid, "SMART_NLP_ROUTING") == True
41 |         assert feature_enabled(test_psid, "SMART_CORRECTIONS") == True
42 |         assert feature_enabled(test_psid, "SMART_NLP_TONE") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
43 |         
44 |         # Generic feature_enabled should always return True
   |
help: Replace with `feature_enabled(test_psid, "SMART_NLP_TONE")`

E712 Avoid equality comparisons to `True`; use `feature_enabled("any_psid", "any_feature"):` for truth checks
  --> tests/test_stabilization.py:45:16
   |
44 |         # Generic feature_enabled should always return True
45 |         assert feature_enabled("any_psid", "any_feature") == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
46 |         
47 |         print("✅ Feature flags always return True")
   |
help: Replace with `feature_enabled("any_psid", "any_feature")`

E712 Avoid equality comparisons to `True`; use `is_correction_message(correction_text):` for truth checks
   --> tests/test_stabilization.py:147:20
    |
146 |             # Check correction detection
147 |             assert is_correction_message(correction_text) == True
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
148 |             
149 |             # Handle correction
    |
help: Replace with `is_correction_message(correction_text)`

F541 [*] f-string without any placeholders
   --> tests/test_stabilization.py:170:19
    |
169 |             print("✅ Correction detection and supersede logic")
170 |             print(f"   ├─ Original: ৳50 → superseded")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
171 |             print(f"   └─ Corrected: ৳500 → active")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> tests/test_stabilization.py:171:19
    |
169 |             print("✅ Correction detection and supersede logic")
170 |             print(f"   ├─ Original: ৳50 → superseded")
171 |             print(f"   └─ Corrected: ৳500 → active")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
172 |     
173 |     def test_bare_number_correction_fallback(self, setup_db):
    |
help: Remove extraneous `f` prefix

E712 Avoid equality comparisons to `True`; use `money_detected:` for truth checks
   --> tests/test_stabilization.py:200:16
    |
198 |         # This should always use enhanced detection, no legacy fallback
199 |         money_detected = contains_money_with_correction_fallback(test_text, psid_hash)
200 |         assert money_detected == True
    |                ^^^^^^^^^^^^^^^^^^^^^^
201 |         
202 |         print("✅ Router uses enhanced money detection (no legacy_money_detected)")
    |
help: Replace with `money_detected`

E712 Avoid equality comparisons to `True`; use `feature_enabled("any_psid", "any_feature"):` for truth checks
   --> tests/test_stabilization.py:240:12
    |
239 |     # 2. Feature flags always return True
240 |     assert feature_enabled("any_psid", "any_feature") == True
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
241 |     print("   ✅ No legacy_money_detected logs (always AI routing)")
    |
help: Replace with `feature_enabled("any_psid", "any_feature")`

E712 Avoid equality comparisons to `True`; use `is_correction_message("sorry I meant 500"):` for truth checks
   --> tests/test_stabilization.py:249:12
    |
248 |     # 4. Correction detection
249 |     assert is_correction_message("sorry I meant 500") == True
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
250 |     print("   ✅ CORRECTION_APPLIED emitted and summaries exclude superseded rows")
    |
help: Replace with `is_correction_message("sorry I meant 500")`

F401 [*] `json` imported but unused
 --> tests/test_supabase_smoke.py:5:8
  |
3 | """
4 | import pytest
5 | import json
  |        ^^^^
6 | from unittest.mock import patch
7 | import os
  |
help: Remove unused import: `json`

F401 [*] `json` imported but unused
 --> tests/test_supabase_test.py:5:8
  |
3 | """
4 | import pytest
5 | import json
  |        ^^^^
6 | from unittest.mock import patch
7 | import os
  |
help: Remove unused import: `json`

F401 [*] `os` imported but unused
  --> uat_comprehensive_e2e.py:15:8
   |
14 | import sys
15 | import os
   |        ^^
16 | import json
17 | import time
   |
help: Remove unused import: `os`

F401 [*] `json` imported but unused
  --> uat_comprehensive_e2e.py:16:8
   |
14 | import sys
15 | import os
16 | import json
   |        ^^^^
17 | import time
18 | import uuid
   |
help: Remove unused import: `json`

F401 [*] `hashlib` imported but unused
  --> uat_comprehensive_e2e.py:19:8
   |
17 | import time
18 | import uuid
19 | import hashlib
   |        ^^^^^^^
20 | import traceback
21 | from datetime import datetime, timedelta
   |
help: Remove unused import: `hashlib`

F401 [*] `datetime.timedelta` imported but unused
  --> uat_comprehensive_e2e.py:21:32
   |
19 | import hashlib
20 | import traceback
21 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
22 | from typing import Dict, Any, List, Optional, Tuple
23 | from decimal import Decimal
   |
help: Remove unused import: `datetime.timedelta`

F401 [*] `typing.Dict` imported but unused
  --> uat_comprehensive_e2e.py:22:20
   |
20 | import traceback
21 | from datetime import datetime, timedelta
22 | from typing import Dict, Any, List, Optional, Tuple
   |                    ^^^^
23 | from decimal import Decimal
   |
help: Remove unused import

F401 [*] `typing.Any` imported but unused
  --> uat_comprehensive_e2e.py:22:26
   |
20 | import traceback
21 | from datetime import datetime, timedelta
22 | from typing import Dict, Any, List, Optional, Tuple
   |                          ^^^
23 | from decimal import Decimal
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> uat_comprehensive_e2e.py:22:31
   |
20 | import traceback
21 | from datetime import datetime, timedelta
22 | from typing import Dict, Any, List, Optional, Tuple
   |                               ^^^^
23 | from decimal import Decimal
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> uat_comprehensive_e2e.py:22:47
   |
20 | import traceback
21 | from datetime import datetime, timedelta
22 | from typing import Dict, Any, List, Optional, Tuple
   |                                               ^^^^^
23 | from decimal import Decimal
   |
help: Remove unused import

F401 [*] `parsers.expense.parse_expense` imported but unused
  --> uat_comprehensive_e2e.py:31:51
   |
29 | from app import app, db
30 | from models import Expense, User, MonthlySummary
31 | from parsers.expense import extract_all_expenses, parse_expense
   |                                                   ^^^^^^^^^^^^^
32 | from utils.routing_policy import RoutingPolicyFlags, IntentType
33 | from utils.production_router import ProductionRouter
   |
help: Remove unused import: `parsers.expense.parse_expense`

F401 [*] `utils.routing_policy.RoutingPolicyFlags` imported but unused
  --> uat_comprehensive_e2e.py:32:34
   |
30 | from models import Expense, User, MonthlySummary
31 | from parsers.expense import extract_all_expenses, parse_expense
32 | from utils.routing_policy import RoutingPolicyFlags, IntentType
   |                                  ^^^^^^^^^^^^^^^^^^
33 | from utils.production_router import ProductionRouter
34 | from utils.security import hash_psid, sanitize_input
   |
help: Remove unused import

F401 [*] `utils.routing_policy.IntentType` imported but unused
  --> uat_comprehensive_e2e.py:32:54
   |
30 | from models import Expense, User, MonthlySummary
31 | from parsers.expense import extract_all_expenses, parse_expense
32 | from utils.routing_policy import RoutingPolicyFlags, IntentType
   |                                                      ^^^^^^^^^^
33 | from utils.production_router import ProductionRouter
34 | from utils.security import hash_psid, sanitize_input
   |
help: Remove unused import

F401 [*] `handlers.expense` imported but unused
  --> uat_comprehensive_e2e.py:36:33
   |
34 | from utils.security import hash_psid, sanitize_input
35 | from utils.expense_learning import user_learning_system
36 | from handlers import expense as expense_handler
   |                                 ^^^^^^^^^^^^^^^
37 | from handlers import insight as insight_handler
38 | from handlers import summary as summary_handler
   |
help: Remove unused import: `handlers.expense`

F401 [*] `handlers.summary` imported but unused
  --> uat_comprehensive_e2e.py:38:33
   |
36 | from handlers import expense as expense_handler
37 | from handlers import insight as insight_handler
38 | from handlers import summary as summary_handler
   |                                 ^^^^^^^^^^^^^^^
39 | from sqlalchemy import text, func
   |
help: Remove unused import: `handlers.summary`

F841 Local variable `expenses` is assigned to but never used
   --> uat_comprehensive_e2e.py:214:17
    |
213 |                 # Test parsing still works after sanitization
214 |                 expenses = extract_all_expenses(sanitized, datetime.now())
    |                 ^^^^^^^^
215 |                 
216 |                 # Check that malicious content is removed/escaped
    |
help: Remove assignment to unused variable `expenses`

F541 [*] f-string without any placeholders
   --> uat_comprehensive_e2e.py:268:27
    |
266 |                     print(f"     User learning test: expected=food, actual={actual_category}, match={actual_category == 'food'}")
267 |                 else:
268 |                     print(f"     User learning test: no expenses parsed")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
269 |             
270 |             performance_ms = (time.time() - start_time) * 1000
    |
help: Remove extraneous `f` prefix

F841 Local variable `invalid_amount` is assigned to but never used
   --> uat_comprehensive_e2e.py:766:25
    |
764 |                     from decimal import InvalidOperation
765 |                     try:
766 |                         invalid_amount = Decimal("invalid_amount")  # This should fail
    |                         ^^^^^^^^^^^^^^
767 |                         validation_tests.append(False)  # Should have failed to convert
768 |                     except (ValueError, InvalidOperation):
    |
help: Remove assignment to unused variable `invalid_amount`

E722 Do not use bare `except`
   --> uat_comprehensive_e2e.py:848:17
    |
846 |                     db.session.commit()
847 |                     
848 |                 except:
    |                 ^^^^^^
849 |                     # Rollback should occur automatically
850 |                     db.session.rollback()
    |

E722 Do not use bare `except`
   --> uat_comprehensive_e2e.py:874:17
    |
872 |                     self.test_expense_ids.append(large_amount_expense.id)
873 |                     constraint_tests.append(True)  # Should succeed
874 |                 except:
    |                 ^^^^^^
875 |                     constraint_tests.append(False)
    |

F541 [*] f-string without any placeholders
   --> uat_comprehensive_e2e.py:982:15
    |
980 |         print("="*80)
981 |         
982 |         print(f"\n📋 EXECUTIVE SUMMARY")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^
983 |         print(f"   Test Duration: {duration.total_seconds():.1f} seconds")
984 |         print(f"   Total Tests: {total_tests}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> uat_comprehensive_e2e.py:989:15
    |
987 |         print(f"   Average Performance: {avg_performance:.1f}ms")
988 |         
989 |         print(f"\n🔒 SECURITY & CRITICAL TESTS")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
990 |         print(f"   Critical Tests: {len(critical_tests)} (Passed: {critical_passed}, Failed: {critical_failed})")
991 |         print(f"   Security Tests: {len(security_tests)} (Passed: {security_passed}, Failed: {security_failed})")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> uat_comprehensive_e2e.py:993:15
    |
991 |         print(f"   Security Tests: {len(security_tests)} (Passed: {security_passed}, Failed: {security_failed})")
992 |         
993 |         print(f"\n📊 RESULTS BY CATEGORY")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
994 |         for category, results in results_by_category.items():
995 |             passed = sum(1 for r in results if r['status'] == 'PASS')
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
    --> uat_comprehensive_e2e.py:999:15
     |
 997 |             print(f"   {category.replace('_', ' ').title()}: {passed}/{total} ({passed/total*100:.1f}%)")
 998 |         
 999 |         print(f"\n❌ FAILED TESTS DETAIL")
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
1000 |         failed_results = [r for r in self.test_results if r['status'] == 'FAIL']
1001 |         if failed_results:
     |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
    --> uat_comprehensive_e2e.py:1009:15
     |
1007 |             print("   No failed tests! 🎉")
1008 |         
1009 |         print(f"\n⚡ PERFORMANCE ANALYSIS")
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1010 |         if perf_results:
1011 |             sorted_perf = sorted(perf_results, key=lambda x: x['performance_ms'], reverse=True)
     |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
    --> uat_comprehensive_e2e.py:1026:15
     |
1024 |         )
1025 |         
1026 |         print(f"\n🎯 DEPLOYMENT READINESS ASSESSMENT")
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1027 |         print(f"   Overall Pass Rate: {overall_pass_rate:.1f}% (Required: ≥90%)")
1028 |         print(f"   Critical Pass Rate: {critical_pass_rate:.1f}% (Required: ≥95%)")
     |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
    --> uat_comprehensive_e2e.py:1032:19
     |
1031 |         if deployment_ready:
1032 |             print(f"\n✅ RECOMMENDATION: DEPLOY")
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1033 |             print(f"   System meets all quality thresholds for production deployment.")
1034 |             print(f"   All critical systems functioning correctly with high reliability.")
     |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
    --> uat_comprehensive_e2e.py:1033:19
     |
1031 |         if deployment_ready:
1032 |             print(f"\n✅ RECOMMENDATION: DEPLOY")
1033 |             print(f"   System meets all quality thresholds for production deployment.")
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1034 |             print(f"   All critical systems functioning correctly with high reliability.")
1035 |         else:
     |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
    --> uat_comprehensive_e2e.py:1034:19
     |
1032 |             print(f"\n✅ RECOMMENDATION: DEPLOY")
1033 |             print(f"   System meets all quality thresholds for production deployment.")
1034 |             print(f"   All critical systems functioning correctly with high reliability.")
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1035 |         else:
1036 |             print(f"\n❌ RECOMMENDATION: DO NOT DEPLOY")
     |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
    --> uat_comprehensive_e2e.py:1036:19
     |
1034 |             print(f"   All critical systems functioning correctly with high reliability.")
1035 |         else:
1036 |             print(f"\n❌ RECOMMENDATION: DO NOT DEPLOY")
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1037 |             print(f"   System does not meet required quality thresholds.")
1038 |             print(f"   Address failed tests before considering deployment.")
     |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
    --> uat_comprehensive_e2e.py:1037:19
     |
1035 |         else:
1036 |             print(f"\n❌ RECOMMENDATION: DO NOT DEPLOY")
1037 |             print(f"   System does not meet required quality thresholds.")
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1038 |             print(f"   Address failed tests before considering deployment.")
     |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
    --> uat_comprehensive_e2e.py:1038:19
     |
1036 |             print(f"\n❌ RECOMMENDATION: DO NOT DEPLOY")
1037 |             print(f"   System does not meet required quality thresholds.")
1038 |             print(f"   Address failed tests before considering deployment.")
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1039 |         
1040 |         print("="*80)
     |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
    --> uat_comprehensive_e2e.py:1048:11
     |
1046 |     deployment_ready = uat.run_comprehensive_uat()
1047 |     
1048 |     print(f"\n🏁 UAT COMPLETED")
     |           ^^^^^^^^^^^^^^^^^^^^^
1049 |     print(f"Deployment Ready: {'YES' if deployment_ready else 'NO'}")
     |
help: Remove extraneous `f` prefix

F401 [*] `hashlib` imported but unused
 --> uat_e2e_framework.py:7:8
  |
5 | """
6 |
7 | import hashlib
  |        ^^^^^^^
8 | import json
9 | import random
  |
help: Remove unused import: `hashlib`

F401 [*] `random` imported but unused
  --> uat_e2e_framework.py:9:8
   |
 7 | import hashlib
 8 | import json
 9 | import random
   |        ^^^^^^
10 | import time
11 | import uuid
   |
help: Remove unused import: `random`

F401 [*] `datetime.timedelta` imported but unused
  --> uat_e2e_framework.py:12:32
   |
10 | import time
11 | import uuid
12 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
13 | from typing import Dict, List, Any, Tuple
14 | import logging
   |
help: Remove unused import: `datetime.timedelta`

F401 [*] `typing.Tuple` imported but unused
  --> uat_e2e_framework.py:13:37
   |
11 | import uuid
12 | from datetime import datetime, timedelta
13 | from typing import Dict, List, Any, Tuple
   |                                     ^^^^^
14 | import logging
   |
help: Remove unused import: `typing.Tuple`

F401 [*] `utils.expense_editor.expense_editor` imported but unused
  --> uat_e2e_framework.py:18:53
   |
16 | # Import our implementation
17 | from utils.nl_expense_parser import parse_nl_expense
18 | from utils.expense_editor import edit_last_expense, expense_editor
   |                                                     ^^^^^^^^^^^^^^
19 | from pwa_nl_integration import handle_nl_expense_entry, handle_clarification_response
20 | from models import Expense, ExpenseEdit, User
   |
help: Remove unused import: `utils.expense_editor.expense_editor`

F401 [*] `models.User` imported but unused
  --> uat_e2e_framework.py:20:42
   |
18 | from utils.expense_editor import edit_last_expense, expense_editor
19 | from pwa_nl_integration import handle_nl_expense_entry, handle_clarification_response
20 | from models import Expense, ExpenseEdit, User
   |                                          ^^^^
21 | from db_base import db
22 | from utils.db import save_expense
   |
help: Remove unused import: `models.User`

F401 [*] `utils.identity.psid_hash` imported but unused
  --> uat_e2e_framework.py:23:28
   |
21 | from db_base import db
22 | from utils.db import save_expense
23 | from utils.identity import psid_hash
   |                            ^^^^^^^^^
24 |
25 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `utils.identity.psid_hash`

F821 Undefined name `i`
   --> uat_e2e_framework.py:539:63
    |
537 |             batch_results = []
538 |             for text in batch_inputs:
539 |                 result = parse_nl_expense(text, f"batch_test_{i}")
    |                                                               ^
540 |                 batch_results.append(result.success)
541 |             end_time = time.time()
    |

F541 [*] f-string without any placeholders
   --> uat_e2e_framework.py:718:15
    |
716 |         # Print executive summary
717 |         summary = audit_report['executive_summary']
718 |         print(f"\n🎯 UAT EXECUTIVE SUMMARY")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
719 |         print(f"=" * 50)
720 |         print(f"📊 Overall Success Rate: {summary['overall_success_rate']:.1f}%")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> uat_e2e_framework.py:719:15
    |
717 |         summary = audit_report['executive_summary']
718 |         print(f"\n🎯 UAT EXECUTIVE SUMMARY")
719 |         print(f"=" * 50)
    |               ^^^^
720 |         print(f"📊 Overall Success Rate: {summary['overall_success_rate']:.1f}%")
721 |         print(f"✅ Scenarios Passed: {summary['scenarios_passed']}/{summary['total_scenarios_tested']}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> uat_e2e_framework.py:727:15
    |
725 |         # Print deployment recommendation
726 |         recommendation = audit_report['deployment_recommendation']
727 |         print(f"\n🔍 DEPLOYMENT RECOMMENDATION")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
728 |         print(f"Status: {recommendation['status']}")
729 |         print(f"Confidence: {recommendation['confidence_level']}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> uat_e2e_framework.py:736:15
    |
734 |                 print(f"  • {blocker}")
735 |         
736 |         print(f"\nNext Steps:")
    |               ^^^^^^^^^^^^^^^^
737 |         for step in recommendation['next_steps']:
738 |             print(f"  {step}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> uat_e2e_framework.py:744:15
    |
742 |             json.dump(audit_report, f, indent=2, ensure_ascii=False)
743 |         
744 |         print(f"\n📄 Detailed audit report saved: phase_e_uat_audit_report.json")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
745 |         
746 |         return audit_report
    |
help: Remove extraneous `f` prefix

F401 [*] `os` imported but unused
  --> uat_phase0_clarifier_config.py:8:8
   |
 7 | import sys
 8 | import os
   |        ^^
 9 | import requests
10 | import json
   |
help: Remove unused import: `os`

F401 [*] `json` imported but unused
  --> uat_phase0_clarifier_config.py:10:8
   |
 8 | import os
 9 | import requests
10 | import json
   |        ^^^^
11 | import time
12 | from datetime import datetime
   |
help: Remove unused import: `json`

F401 [*] `time` imported but unused
  --> uat_phase0_clarifier_config.py:11:8
   |
 9 | import requests
10 | import json
11 | import time
   |        ^^^^
12 | from datetime import datetime
   |
help: Remove unused import: `time`

E712 Avoid equality comparisons to `False`; use `not clarifiers_enabled:` for false checks
  --> uat_phase0_clarifier_config.py:56:17
   |
54 |             self.log_result(
55 |                 "Config Loading - Clarifiers Disabled",
56 |                 clarifiers_enabled == False,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
57 |                 f"clarifiers_enabled={clarifiers_enabled}"
58 |             )
   |
help: Replace with `not clarifiers_enabled`

F841 Local variable `mode_check` is assigned to but never used
  --> uat_phase0_clarifier_config.py:74:13
   |
72 |         try:
73 |             # Test mode requirements for clarifiers
74 |             mode_check = pca_flags.mode.value in ['DRYRUN', 'ON']
   |             ^^^^^^^^^^
75 |             enable_flag = pca_flags.enable_clarifiers
76 |             kill_switch = pca_flags.global_kill_switch
   |
help: Remove assignment to unused variable `mode_check`

E712 Avoid equality comparisons to `False`; use `not should_enable:` for false checks
  --> uat_phase0_clarifier_config.py:83:17
   |
81 |             self.log_result(
82 |                 "Flag Safety - Clarifier Gating",
83 |                 should_enable == False,
   |                 ^^^^^^^^^^^^^^^^^^^^^^
84 |                 f"mode={pca_flags.mode.value}, enable_flag={enable_flag}, kill_switch={kill_switch}, result={should_enable}"
85 |             )
   |
help: Replace with `not should_enable`

E712 Avoid equality comparisons to `False`; use `not status.get('clarifiers_enabled'):` for false checks
   --> uat_phase0_clarifier_config.py:120:17
    |
118 |             # Verify clarifiers disabled in status
119 |             clarifiers_disabled = (
120 |                 status.get('clarifiers_enabled') == False and
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
121 |                 status.get('enable_clarifiers_flag') == False
122 |             )
    |
help: Replace with `not status.get('clarifiers_enabled')`

E712 Avoid equality comparisons to `False`; use `not status.get('enable_clarifiers_flag'):` for false checks
   --> uat_phase0_clarifier_config.py:121:17
    |
119 |             clarifiers_disabled = (
120 |                 status.get('clarifiers_enabled') == False and
121 |                 status.get('enable_clarifiers_flag') == False
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
122 |             )
    |
help: Replace with `not status.get('enable_clarifiers_flag')`

F541 [*] f-string without any placeholders
   --> uat_phase0_clarifier_config.py:231:15
    |
229 |         print()
230 |         print("=" * 60)
231 |         print(f"PHASE 0 UAT RESULTS:")
    |               ^^^^^^^^^^^^^^^^^^^^^^^
232 |         print(f"✅ Passed: {passed_tests}/{total_tests} ({pass_rate:.1f}%)")
233 |         print(f"⏱️  Duration: {duration:.2f}s")
    |
help: Remove extraneous `f` prefix

F401 [*] `os` imported but unused
  --> uat_phase1_agent_output.py:8:8
   |
 7 | import sys
 8 | import os
   |        ^^
 9 | import json
10 | import time
   |
help: Remove unused import: `os`

F401 [*] `json` imported but unused
  --> uat_phase1_agent_output.py:9:8
   |
 7 | import sys
 8 | import os
 9 | import json
   |        ^^^^
10 | import time
11 | from datetime import datetime
   |
help: Remove unused import: `json`

F401 [*] `time` imported but unused
  --> uat_phase1_agent_output.py:10:8
   |
 8 | import os
 9 | import json
10 | import time
   |        ^^^^
11 | from datetime import datetime
12 | from typing import Dict, Any
   |
help: Remove unused import: `time`

F401 [*] `typing.Dict` imported but unused
  --> uat_phase1_agent_output.py:12:20
   |
10 | import time
11 | from datetime import datetime
12 | from typing import Dict, Any
   |                    ^^^^
13 |
14 | # Add project root to path
   |
help: Remove unused import

F401 [*] `typing.Any` imported but unused
  --> uat_phase1_agent_output.py:12:26
   |
10 | import time
11 | from datetime import datetime
12 | from typing import Dict, Any
   |                          ^^^
13 |
14 | # Add project root to path
   |
help: Remove unused import

F541 [*] f-string without any placeholders
   --> uat_phase1_agent_output.py:195:46
    |
193 |                     if not isinstance(options, list) or len(options) == 0:
194 |                         clarifier_valid = False
195 |                         clarifier_details += f", missing_options"
    |                                              ^^^^^^^^^^^^^^^^^^^^
196 |                     else:
197 |                         clarifier_details += f", options_count={len(options)}"
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> uat_phase1_agent_output.py:312:15
    |
310 |         print()
311 |         print("=" * 60)
312 |         print(f"PHASE 1 UAT RESULTS:")
    |               ^^^^^^^^^^^^^^^^^^^^^^^
313 |         print(f"✅ Passed: {passed_tests}/{total_tests} ({pass_rate:.1f}%)")
314 |         print(f"⏱️  Duration: {duration:.2f}s")
    |
help: Remove extraneous `f` prefix

F401 [*] `os` imported but unused
  --> uat_phase1_cc_persistence.py:8:8
   |
 7 | import sys
 8 | import os
   |        ^^
 9 | import json
10 | import time
   |
help: Remove unused import: `os`

F401 [*] `time` imported but unused
  --> uat_phase1_cc_persistence.py:10:8
   |
 8 | import os
 9 | import json
10 | import time
   |        ^^^^
11 | import uuid
12 | from datetime import datetime
   |
help: Remove unused import: `time`

F401 [*] `uuid` imported but unused
  --> uat_phase1_cc_persistence.py:11:8
   |
 9 | import json
10 | import time
11 | import uuid
   |        ^^^^
12 | from datetime import datetime
13 | from typing import Dict, Any, List
   |
help: Remove unused import: `uuid`

F401 [*] `typing.Dict` imported but unused
  --> uat_phase1_cc_persistence.py:13:20
   |
11 | import uuid
12 | from datetime import datetime
13 | from typing import Dict, Any, List
   |                    ^^^^
14 |
15 | # Add project root to path
   |
help: Remove unused import

F401 [*] `typing.Any` imported but unused
  --> uat_phase1_cc_persistence.py:13:26
   |
11 | import uuid
12 | from datetime import datetime
13 | from typing import Dict, Any, List
   |                          ^^^
14 |
15 | # Add project root to path
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> uat_phase1_cc_persistence.py:13:31
   |
11 | import uuid
12 | from datetime import datetime
13 | from typing import Dict, Any, List
   |                               ^^^^
14 |
15 | # Add project root to path
   |
help: Remove unused import

F401 [*] `utils.pca_flags.pca_flags` imported but unused
  --> uat_phase1_cc_persistence.py:21:29
   |
19 | from app import app, db
20 | from sqlalchemy import text
21 | from utils.pca_flags import pca_flags
   |                             ^^^^^^^^^
22 |
23 | class Phase1UAT:
   |
help: Remove unused import: `utils.pca_flags.pca_flags`

F841 Local variable `has_recent` is assigned to but never used
   --> uat_phase1_cc_persistence.py:100:17
    |
 99 |                 has_data = total_count > 0
100 |                 has_recent = recent_count > 0
    |                 ^^^^^^^^^^
101 |                 has_users = unique_users > 0
    |
help: Remove assignment to unused variable `has_recent`

E722 Do not use bare `except`
   --> uat_phase1_cc_persistence.py:154:21
    |
152 |                         if slots_json:
153 |                             json.loads(json.dumps(slots_json))  # Validate JSON
154 |                     except:
    |                     ^^^^^^
155 |                         compliance_issues.append("invalid slots_json format")
    |

F541 [*] f-string without any placeholders
   --> uat_phase1_cc_persistence.py:343:15
    |
341 |         print()
342 |         print("=" * 70)
343 |         print(f"PHASE 1 UAT RESULTS:")
    |               ^^^^^^^^^^^^^^^^^^^^^^^
344 |         print(f"✅ Passed: {passed_tests}/{total_tests} ({pass_rate:.1f}%)")
345 |         print(f"⏱️  Duration: {duration:.2f}s")
    |
help: Remove extraneous `f` prefix

F401 [*] `os` imported but unused
  --> uat_phase2_router_decision.py:8:8
   |
 7 | import sys
 8 | import os
   |        ^^
 9 | import json
10 | import time
   |
help: Remove unused import: `os`

F401 [*] `json` imported but unused
  --> uat_phase2_router_decision.py:9:8
   |
 7 | import sys
 8 | import os
 9 | import json
   |        ^^^^
10 | import time
11 | import requests
   |
help: Remove unused import: `json`

F401 [*] `time` imported but unused
  --> uat_phase2_router_decision.py:10:8
   |
 8 | import os
 9 | import json
10 | import time
   |        ^^^^
11 | import requests
12 | from datetime import datetime
   |
help: Remove unused import: `time`

F401 [*] `requests` imported but unused
  --> uat_phase2_router_decision.py:11:8
   |
 9 | import json
10 | import time
11 | import requests
   |        ^^^^^^^^
12 | from datetime import datetime
13 | from typing import Dict, Any
   |
help: Remove unused import: `requests`

F401 [*] `typing.Dict` imported but unused
  --> uat_phase2_router_decision.py:13:20
   |
11 | import requests
12 | from datetime import datetime
13 | from typing import Dict, Any
   |                    ^^^^
14 |
15 | # Add project root to path
   |
help: Remove unused import

F401 [*] `typing.Any` imported but unused
  --> uat_phase2_router_decision.py:13:26
   |
11 | import requests
12 | from datetime import datetime
13 | from typing import Dict, Any
   |                          ^^^
14 |
15 | # Add project root to path
   |
help: Remove unused import

F541 [*] f-string without any placeholders
   --> uat_phase2_router_decision.py:322:15
    |
320 |         print()
321 |         print("=" * 60)
322 |         print(f"PHASE 2 UAT RESULTS:")
    |               ^^^^^^^^^^^^^^^^^^^^^^^
323 |         print(f"✅ Passed: {passed_tests}/{total_tests} ({pass_rate:.1f}%)")
324 |         print(f"⏱️  Duration: {duration:.2f}s")
    |
help: Remove extraneous `f` prefix

F401 [*] `time` imported but unused
  --> uat_simple.py:9:8
   |
 7 | import requests
 8 | import sys
 9 | import time
   |        ^^^^
10 | import json
   |
help: Remove unused import: `time`

F401 [*] `json` imported but unused
  --> uat_simple.py:10:8
   |
 8 | import sys
 9 | import time
10 | import json
   |        ^^^^
11 |
12 | def test_system_health():
   |
help: Remove unused import: `json`

F541 [*] f-string without any placeholders
  --> utils/absolute_final_validator.py:48:19
   |
46 |             db.session.commit()
47 |             
48 |             print(f"   📝 Created test user with reports_requested: 0")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
49 |             
50 |             # Test 1: Summary handler
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> utils/absolute_final_validator.py:51:19
   |
50 |             # Test 1: Summary handler
51 |             print(f"   🔄 Testing summary handler...")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
52 |             try:
53 |                 from handlers.summary import handle_summary
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> utils/absolute_final_validator.py:69:19
   |
68 |             # Test 2: Insight handler
69 |             print(f"   🔄 Testing insight handler...")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
70 |             try:
71 |                 from handlers.insight import handle_insight
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> utils/absolute_final_validator.py:91:19
   |
90 |             # Test 3: Direct analytics engine test for confirmation
91 |             print(f"   🔄 Testing analytics engine directly...")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
92 |             try:
93 |                 from utils.analytics_engine import track_report_request
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> utils/absolute_final_validator.py:123:19
    |
121 |             system_working = handlers_work and analytics_engine_works
122 |             
123 |             print(f"\n   📊 FINAL ASSESSMENT:")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
124 |             print(f"   ✅ Summary handler works: {summary_success}")
125 |             print(f"   ✅ Insight handler works: {insight_success}")
    |
help: Remove extraneous `f` prefix

F401 [*] `datetime.timedelta` imported but unused
 --> utils/acceptance_criteria_validation.py:7:32
  |
6 | import logging
7 | from datetime import datetime, timedelta, date
  |                                ^^^^^^^^^
8 | from typing import Dict, List, Any, Optional, Tuple
9 | from dataclasses import dataclass
  |
help: Remove unused import

F401 [*] `datetime.date` imported but unused
 --> utils/acceptance_criteria_validation.py:7:43
  |
6 | import logging
7 | from datetime import datetime, timedelta, date
  |                                           ^^^^
8 | from typing import Dict, List, Any, Optional, Tuple
9 | from dataclasses import dataclass
  |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/acceptance_criteria_validation.py:8:37
   |
 6 | import logging
 7 | from datetime import datetime, timedelta, date
 8 | from typing import Dict, List, Any, Optional, Tuple
   |                                     ^^^^^^^^
 9 | from dataclasses import dataclass
10 | import uuid
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/acceptance_criteria_validation.py:8:47
   |
 6 | import logging
 7 | from datetime import datetime, timedelta, date
 8 | from typing import Dict, List, Any, Optional, Tuple
   |                                               ^^^^^
 9 | from dataclasses import dataclass
10 | import uuid
   |
help: Remove unused import

F401 [*] `utils.timezone_helpers.today_local` imported but unused
   --> utils/acceptance_criteria_validation.py:144:48
    |
142 |             from models import User
143 |             from db_base import db
144 |             from utils.timezone_helpers import today_local
    |                                                ^^^^^^^^^^^
145 |             
146 |             # Test D1 logging on same day
    |
help: Remove unused import: `utils.timezone_helpers.today_local`

F401 [*] `json` imported but unused
 --> utils/ai_adapter_never_empty.py:7:8
  |
5 | from __future__ import annotations
6 | import time
7 | import json
  |        ^^^^
8 | import logging
9 | from typing import Dict, Any, Optional
  |
help: Remove unused import: `json`

F401 [*] `typing.Optional` imported but unused
  --> utils/ai_adapter_never_empty.py:9:31
   |
 7 | import json
 8 | import logging
 9 | from typing import Dict, Any, Optional
   |                               ^^^^^^^^
10 | from dataclasses import dataclass
   |
help: Remove unused import: `typing.Optional`

F401 [*] `typing.Optional` imported but unused
  --> utils/ai_adapter_v2.py:10:31
   |
 8 | import logging
 9 | import requests
10 | from typing import Dict, Any, Optional
   |                               ^^^^^^^^
11 | from datetime import datetime
12 | from .ai_contamination_monitor import ai_contamination_monitor
   |
help: Remove unused import: `typing.Optional`

F401 [*] `datetime.datetime` imported but unused
  --> utils/ai_adapter_v2.py:11:22
   |
 9 | import requests
10 | from typing import Dict, Any, Optional
11 | from datetime import datetime
   |                      ^^^^^^^^
12 | from .ai_contamination_monitor import ai_contamination_monitor
   |
help: Remove unused import: `datetime.datetime`

E402 Module level import not at top of file
  --> utils/ai_adapter_v2.py:35:1
   |
34 | # Global AI timeout metrics
35 | import threading
   | ^^^^^^^^^^^^^^^^
36 | AI_TIMEOUT_COUNTER = 0
37 | AI_REQUEST_COUNTER = 0 
   |

E722 Do not use bare `except`
   --> utils/ai_adapter_v2.py:660:29
    |
658 | …                         else:
659 | …                             raise json_error
660 | …                     except:
    |                       ^^^^^^
661 | …                         # If all repair attempts fail, create minimal valid response
662 | …                         ai_response = {
    |

F401 [*] `utils.pca_flags.pca_flags` imported but unused
   --> utils/ai_adapter_v2.py:782:41
    |
780 |         """Validate and clean Canonical Command response"""
781 |         try:
782 |             from utils.pca_flags import pca_flags
    |                                         ^^^^^^^^^
783 |             
784 |             # Check if this is legacy format vs CC format
    |
help: Remove unused import: `utils.pca_flags.pca_flags`

F401 [*] `typing.Set` imported but unused
 --> utils/ai_contamination_monitor.py:6:31
  |
4 | import logging
5 | import hashlib
6 | from typing import Dict, Any, Set, List
  |                               ^^^
7 | from datetime import datetime
  |
help: Remove unused import

F401 [*] `typing.List` imported but unused
 --> utils/ai_contamination_monitor.py:6:36
  |
4 | import logging
5 | import hashlib
6 | from typing import Dict, Any, Set, List
  |                                    ^^^^
7 | from datetime import datetime
  |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/ai_context_adapter.py:8:41
   |
 6 | import json
 7 | import logging
 8 | from typing import Dict, Any, Optional, Tuple
   |                                         ^^^^^
 9 | from utils.context_packet import (
10 |     build_context, is_context_thin, get_thin_context_reply,
   |
help: Remove unused import: `typing.Tuple`

F401 [*] `typing.List` imported but unused
  --> utils/ai_expense_parser.py:9:20
   |
 7 | import logging
 8 | import re
 9 | from typing import List, Dict, Any, Optional, Tuple
   |                    ^^^^
10 |
11 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/ai_expense_parser.py:9:37
   |
 7 | import logging
 8 | import re
 9 | from typing import List, Dict, Any, Optional, Tuple
   |                                     ^^^^^^^^
10 |
11 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/ai_expense_parser.py:9:47
   |
 7 | import logging
 8 | import re
 9 | from typing import List, Dict, Any, Optional, Tuple
   |                                               ^^^^^
10 |
11 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
 --> utils/ai_faq_classifier.py:7:30
  |
6 | import logging
7 | from typing import Optional, Dict, Any
  |                              ^^^^
8 | from utils.ai_adapter_v2 import production_ai_adapter
  |
help: Remove unused import

F401 [*] `typing.Any` imported but unused
 --> utils/ai_faq_classifier.py:7:36
  |
6 | import logging
7 | from typing import Optional, Dict, Any
  |                                    ^^^
8 | from utils.ai_adapter_v2 import production_ai_adapter
  |
help: Remove unused import

F401 [*] `utils.ai_adapter_v2.production_ai_adapter` imported but unused
  --> utils/ai_faq_classifier.py:8:33
   |
 6 | import logging
 7 | from typing import Optional, Dict, Any
 8 | from utils.ai_adapter_v2 import production_ai_adapter
   |                                 ^^^^^^^^^^^^^^^^^^^^^
 9 |
10 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `utils.ai_adapter_v2.production_ai_adapter`

F401 [*] `json` imported but unused
 --> utils/ai_limiter.py:7:8
  |
5 | import os
6 | import time
7 | import json
  |        ^^^^
8 | import logging
9 | from datetime import datetime, timezone, timedelta
  |
help: Remove unused import: `json`

E402 Module level import not at top of file
  --> utils/ai_limiter.py:17:1
   |
16 | # Configuration from centralized config
17 | from config import AI_RL_GLOBAL_LIMIT, AI_RL_USER_LIMIT
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
18 | AI_ENABLED = os.environ.get("AI_ENABLED", "false").lower() == "true"
19 | AI_MAX_CALLS_PER_MIN = AI_RL_GLOBAL_LIMIT
   |

F401 [*] `json` imported but unused
 --> utils/ai_onboarding_system.py:5:8
  |
3 | """
4 | import logging
5 | import json
  |        ^^^^
6 | from typing import Dict, Any, Optional, Tuple
7 | from ai_adapter_gemini import generate_with_schema
  |
help: Remove unused import: `json`

F401 [*] `typing.Optional` imported but unused
 --> utils/ai_onboarding_system.py:6:31
  |
4 | import logging
5 | import json
6 | from typing import Dict, Any, Optional, Tuple
  |                               ^^^^^^^^
7 | from ai_adapter_gemini import generate_with_schema
  |
help: Remove unused import: `typing.Optional`

F401 [*] `typing.Tuple` imported but unused
  --> utils/ai_rate_limiter.py:10:32
   |
 8 | import threading
 9 | from datetime import datetime, timezone
10 | from typing import Dict, List, Tuple, Optional
   |                                ^^^^^
11 | from dataclasses import dataclass
   |
help: Remove unused import: `typing.Tuple`

F401 [*] `typing.Optional` imported but unused
  --> utils/ai_resilience.py:9:31
   |
 7 | import json
 8 | import logging
 9 | from typing import Dict, Any, Optional, Union, Callable
   |                               ^^^^^^^^
10 | from dataclasses import dataclass
11 | from enum import Enum
   |
help: Remove unused import

F401 [*] `typing.Union` imported but unused
  --> utils/ai_resilience.py:9:41
   |
 7 | import json
 8 | import logging
 9 | from typing import Dict, Any, Optional, Union, Callable
   |                                         ^^^^^
10 | from dataclasses import dataclass
11 | from enum import Enum
   |
help: Remove unused import

F401 [*] `typing.Callable` imported but unused
  --> utils/ai_resilience.py:9:48
   |
 7 | import json
 8 | import logging
 9 | from typing import Dict, Any, Optional, Union, Callable
   |                                                ^^^^^^^^
10 | from dataclasses import dataclass
11 | from enum import Enum
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/analytics_engine.py:10:20
   |
 8 | import logging
 9 | from datetime import datetime
10 | from typing import Optional, Dict, Any
   |                    ^^^^^^^^
11 | from models import User
12 | from db_base import db
   |
help: Remove unused import: `typing.Optional`

F401 [*] `os` imported but unused
 --> utils/background_processor.py:5:8
  |
3 | Includes RL-2 graceful non-AI fallback system
4 | """
5 | import os
  |        ^^
6 | import time
7 | import json
  |
help: Remove unused import: `os`

F401 [*] `threading` imported but unused
  --> utils/background_processor.py:9:8
   |
 7 | import json
 8 | import logging
 9 | import threading
   |        ^^^^^^^^^
10 | import requests
11 | from datetime import datetime
   |
help: Remove unused import: `threading`

F401 [*] `requests` imported but unused
  --> utils/background_processor.py:10:8
   |
 8 | import logging
 9 | import threading
10 | import requests
   |        ^^^^^^^^
11 | from datetime import datetime
12 | from concurrent.futures import ThreadPoolExecutor, TimeoutError as FutureTimeoutError
   |
help: Remove unused import: `requests`

F401 [*] `concurrent.futures.TimeoutError` imported but unused
  --> utils/background_processor.py:12:68
   |
10 | import requests
11 | from datetime import datetime
12 | from concurrent.futures import ThreadPoolExecutor, TimeoutError as FutureTimeoutError
   |                                                                    ^^^^^^^^^^^^^^^^^^
13 | from queue import Queue, Empty
14 | from dataclasses import dataclass
   |
help: Remove unused import: `concurrent.futures.TimeoutError`

F401 [*] `queue.Empty` imported but unused
  --> utils/background_processor.py:13:26
   |
11 | from datetime import datetime
12 | from concurrent.futures import ThreadPoolExecutor, TimeoutError as FutureTimeoutError
13 | from queue import Queue, Empty
   |                          ^^^^^
14 | from dataclasses import dataclass
15 | from typing import Optional, Dict, Any, Tuple
   |
help: Remove unused import: `queue.Empty`

F401 [*] `.logger.get_request_id` imported but unused
  --> utils/background_processor.py:17:42
   |
15 | from typing import Optional, Dict, Any, Tuple
16 |
17 | from .logger import log_webhook_success, get_request_id
   |                                          ^^^^^^^^^^^^^^
18 | from .user_manager import resolve_user_id
19 | from .identity import psid_hash
   |
help: Remove unused import: `.logger.get_request_id`

F401 [*] `.rate_limiter.check_rate_limit` imported but unused
  --> utils/background_processor.py:20:27
   |
18 | from .user_manager import resolve_user_id
19 | from .identity import psid_hash
20 | from .rate_limiter import check_rate_limit
   |                           ^^^^^^^^^^^^^^^^
21 | from .policy_guard import update_user_message_timestamp, is_within_24_hour_window
22 | from .facebook_handler import send_facebook_message
   |
help: Remove unused import: `.rate_limiter.check_rate_limit`

F401 [*] `.ai_rate_limiter.ai_rate_limiter` imported but unused
  --> utils/background_processor.py:23:30
   |
21 | from .policy_guard import update_user_message_timestamp, is_within_24_hour_window
22 | from .facebook_handler import send_facebook_message
23 | from .ai_rate_limiter import ai_rate_limiter
   |                              ^^^^^^^^^^^^^^^
24 | from .background_processor_rl2 import rl2_processor
25 | from utils.production_router import production_router
   |
help: Remove unused import: `.ai_rate_limiter.ai_rate_limiter`

F401 [*] `.background_processor_rl2.rl2_processor` imported but unused
  --> utils/background_processor.py:24:39
   |
22 | from .facebook_handler import send_facebook_message
23 | from .ai_rate_limiter import ai_rate_limiter
24 | from .background_processor_rl2 import rl2_processor
   |                                       ^^^^^^^^^^^^^
25 | from utils.production_router import production_router
   |
help: Remove unused import: `.background_processor_rl2.rl2_processor`

F841 Local variable `future` is assigned to but never used
  --> utils/background_processor.py:94:13
   |
92 |             )
93 |             
94 |             future = self.executor.submit(self._process_job_safe, job)
   |             ^^^^^^
95 |             
96 |             psid_hash = resolve_user_id(psid=psid)
   |
help: Remove assignment to unused variable `future`

F841 Local variable `future` is assigned to but never used
   --> utils/background_processor.py:111:13
    |
110 |         try:
111 |             future = self.executor.submit(self._process_job_safe, job)
    |             ^^^^^^
112 |             logger.info(f"Request {rid}: Web message queued for background processing")
113 |             return {"ok": True, "rid": rid}
    |
help: Remove assignment to unused variable `future`

F841 Local variable `job_channel` is assigned to but never used
   --> utils/background_processor.py:183:21
    |
181 |                     job_text = job.get("text") if isinstance(job, dict) else job.text
182 |                     job_rid = job.get("rid") if isinstance(job, dict) else job.rid
183 |                     job_channel = job.get("channel", "messenger") if isinstance(job, dict) else "messenger"
    |                     ^^^^^^^^^^^
184 |                     
185 |                     # CRITICAL: router needs user_id_hash for data processing, but we preserve original PSID for messaging
    |
help: Remove assignment to unused variable `job_channel`

F401 [*] `models.Expense` imported but unused
  --> utils/background_processor_rl2.py:81:32
   |
79 |         try:
80 |             from db_base import db
81 |             from models import Expense
   |                                ^^^^^^^
82 |             from sqlalchemy import text
   |
help: Remove unused import: `models.Expense`

E722 Do not use bare `except`
   --> utils/background_processor_rl2.py:194:17
    |
192 |                 try:
193 |                     db.session.rollback()
194 |                 except:
    |                 ^^^^^^
195 |                     pass
    |

F401 [*] `collections.defaultdict` imported but unused
  --> utils/basic_alerts.py:9:25
   |
 7 | import time
 8 | import threading
 9 | from collections import defaultdict, deque
   |                         ^^^^^^^^^^^
10 | from datetime import datetime, timedelta
11 | from typing import Dict, List, Tuple
   |
help: Remove unused import: `collections.defaultdict`

F401 [*] `datetime.timedelta` imported but unused
  --> utils/basic_alerts.py:10:32
   |
 8 | import threading
 9 | from collections import defaultdict, deque
10 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
11 | from typing import Dict, List, Tuple
12 | import os
   |
help: Remove unused import: `datetime.timedelta`

F401 [*] `typing.List` imported but unused
  --> utils/basic_alerts.py:11:26
   |
 9 | from collections import defaultdict, deque
10 | from datetime import datetime, timedelta
11 | from typing import Dict, List, Tuple
   |                          ^^^^
12 | import os
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/basic_alerts.py:11:32
   |
 9 | from collections import defaultdict, deque
10 | from datetime import datetime, timedelta
11 | from typing import Dict, List, Tuple
   |                                ^^^^^
12 | import os
   |
help: Remove unused import

E722 Do not use bare `except`
   --> utils/basic_alerts.py:138:9
    |
136 |                 "severity": "error"
137 |             })
138 |         except:
    |         ^^^^^^
139 |             pass  # Don't break if structured logging fails
    |

F401 [*] `json` imported but unused
  --> utils/block5_comprehensive_uat.py:8:8
   |
 7 | import logging
 8 | import json
   |        ^^^^
 9 | import time
10 | import requests
   |
help: Remove unused import: `json`

F401 [*] `typing.Optional` imported but unused
  --> utils/block5_comprehensive_uat.py:13:37
   |
11 | import uuid
12 | from datetime import datetime, timedelta
13 | from typing import Dict, List, Any, Optional, Tuple
   |                                     ^^^^^^^^
14 | from dataclasses import dataclass, asdict
15 | import threading
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/block5_comprehensive_uat.py:13:47
   |
11 | import uuid
12 | from datetime import datetime, timedelta
13 | from typing import Dict, List, Any, Optional, Tuple
   |                                               ^^^^^
14 | from dataclasses import dataclass, asdict
15 | import threading
   |
help: Remove unused import

F401 [*] `threading` imported but unused
  --> utils/block5_comprehensive_uat.py:15:8
   |
13 | from typing import Dict, List, Any, Optional, Tuple
14 | from dataclasses import dataclass, asdict
15 | import threading
   |        ^^^^^^^^^
16 | import concurrent.futures
17 | import statistics
   |
help: Remove unused import: `threading`

F401 [*] `models.Expense` imported but unused
   --> utils/block5_comprehensive_uat.py:300:38
    |
298 |         try:
299 |             from utils.identity import psid_hash
300 |             from models import User, Expense
    |                                      ^^^^^^^
301 |             from db_base import db
    |
help: Remove unused import: `models.Expense`

F541 [*] f-string without any placeholders
   --> utils/block5_comprehensive_uat.py:628:21
    |
626 |                 },
627 |                 evidence=[
628 |                     f"Concurrent requests: 5/5 successful",
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
629 |                     f"Response consistency: {all_identical}",
630 |                     f"Thread safety: {concurrency_safe}"
    |
help: Remove extraneous `f` prefix

F401 [*] `db_base.db` imported but unused
   --> utils/block5_comprehensive_uat.py:660:33
    |
658 |         try:
659 |             from models import User, Expense
660 |             from db_base import db
    |                                 ^^
661 |             
662 |             # Count all users and expenses before preview access
    |
help: Remove unused import: `db_base.db`

F841 Local variable `first_time` is assigned to but never used
   --> utils/block5_comprehensive_uat.py:794:13
    |
792 |             # First request (cache miss)
793 |             first_response = requests.get(f"{self.base_url}/api/preview/report")
794 |             first_time = time.time()
    |             ^^^^^^^^^^
795 |             
796 |             # Second request (should be fast if cached properly)
    |
help: Remove assignment to unused variable `first_time`

F401 [*] `hashlib` imported but unused
 --> utils/canonical_command.py:7:8
  |
6 | import json
7 | import hashlib
  |        ^^^^^^^
8 | from datetime import datetime
9 | from typing import Dict, Any, Optional, List
  |
help: Remove unused import: `hashlib`

F401 [*] `datetime.datetime` imported but unused
  --> utils/canonical_command.py:8:22
   |
 6 | import json
 7 | import hashlib
 8 | from datetime import datetime
   |                      ^^^^^^^^
 9 | from typing import Dict, Any, Optional, List
10 | from dataclasses import dataclass, asdict
   |
help: Remove unused import: `datetime.datetime`

F401 [*] `uuid` imported but unused
  --> utils/canonical_command.py:12:8
   |
10 | from dataclasses import dataclass, asdict
11 | from enum import Enum
12 | import uuid
   |        ^^^^
13 |
14 | class CCIntent(Enum):
   |
help: Remove unused import: `uuid`

F401 [*] `typing.Optional` imported but unused
 --> utils/captcha.py:8:33
  |
6 | import time
7 | import logging
8 | from typing import Dict, Tuple, Optional
  |                                 ^^^^^^^^
9 | from flask import session
  |
help: Remove unused import: `typing.Optional`

F541 [*] f-string without any placeholders
   --> utils/captcha.py:108:32
    |
106 |                 return True, ""
107 |             else:
108 |                 logger.warning(f"CAPTCHA verification failed: incorrect answer")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
109 |                 return False, "Incorrect answer. Please try again."
    |
help: Remove extraneous `f` prefix

F401 [*] `typing.Optional` imported but unused
 --> utils/category_guard.py:6:20
  |
4 | """
5 |
6 | from typing import Optional
  |                    ^^^^^^^^
7 | import logging
8 | from utils.validators import ExpenseValidator
  |
help: Remove unused import: `typing.Optional`

F401 [*] `os` imported but unused
  --> utils/ci_invariant_enforcement.py:10:8
   |
 9 | import re
10 | import os
   |        ^^
11 | import sys
12 | from typing import List, Dict, Tuple, Set
   |
help: Remove unused import: `os`

F401 [*] `typing.Tuple` imported but unused
  --> utils/ci_invariant_enforcement.py:12:32
   |
10 | import os
11 | import sys
12 | from typing import List, Dict, Tuple, Set
   |                                ^^^^^
13 | from pathlib import Path
   |
help: Remove unused import

F401 [*] `typing.Set` imported but unused
  --> utils/ci_invariant_enforcement.py:12:39
   |
10 | import os
11 | import sys
12 | from typing import List, Dict, Tuple, Set
   |                                       ^^^
13 | from pathlib import Path
   |
help: Remove unused import

F401 [*] `random` imported but unused
 --> utils/clarifier_validator.py:7:8
  |
6 | import re
7 | import random
  |        ^^^^^^
8 | from typing import Dict, Any, List, Tuple
9 | import logging
  |
help: Remove unused import: `random`

F401 [*] `json` imported but unused
  --> utils/coaching_analytics.py:9:8
   |
 7 | import time
 8 | import logging
 9 | import json
   |        ^^^^
10 | from typing import Dict, Any, Optional, List
11 | from datetime import datetime, timedelta
   |
help: Remove unused import: `json`

F401 [*] `datetime.timedelta` imported but unused
  --> utils/coaching_analytics.py:11:32
   |
 9 | import json
10 | from typing import Dict, Any, Optional, List
11 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
12 | from collections import defaultdict, deque
   |
help: Remove unused import: `datetime.timedelta`

F841 Local variable `error_event` is assigned to but never used
   --> utils/coaching_analytics.py:155:13
    |
153 |             self.metrics['error_counts'][error_type] += 1
154 |             
155 |             error_event = {
    |             ^^^^^^^^^^^
156 |                 'timestamp': time.time(),
157 |                 'type': error_type,
    |
help: Remove assignment to unused variable `error_event`

F841 Local variable `current_time` is assigned to but never used
   --> utils/coaching_analytics.py:249:13
    |
247 |         """Generate coaching effectiveness analysis"""
248 |         try:
249 |             current_time = time.time()
    |             ^^^^^^^^^^^^
250 |             
251 |             # Analyze conversion funnel
    |
help: Remove assignment to unused variable `current_time`

E722 Do not use bare `except`
   --> utils/coaching_analytics.py:298:9
    |
296 |             recent_times = list(self.metrics['response_times'])[-50:]  # Last 50 operations
297 |             self.health_metrics['avg_response_time_ms'] = sum(recent_times) / len(recent_times)
298 |         except:
    |         ^^^^^^
299 |             pass
    |

E722 Do not use bare `except`
   --> utils/coaching_analytics.py:309:9
    |
307 |                                    if current_time - s['timestamp'] <= 3600])
308 |             self.health_metrics['error_rate_1h'] = recent_errors / max(recent_operations, 1) * 100
309 |         except:
    |         ^^^^^^
310 |             pass
    |

E722 Do not use bare `except`
   --> utils/coaching_analytics.py:321:9
    |
319 |             else:
320 |                 return 'healthy'
321 |         except:
    |         ^^^^^^
322 |             return 'unknown'
    |

F401 [*] `hashlib` imported but unused
  --> utils/coaching_optimization.py:9:8
   |
 7 | import time
 8 | import logging
 9 | import hashlib
   |        ^^^^^^^
10 | from typing import Dict, Any, Optional, List, Tuple
11 | from collections import OrderedDict
   |
help: Remove unused import: `hashlib`

F401 [*] `datetime.timedelta` imported but unused
  --> utils/coaching_optimization.py:12:32
   |
10 | from typing import Dict, Any, Optional, List, Tuple
11 | from collections import OrderedDict
12 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
13 |
14 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `datetime.timedelta`

E722 Do not use bare `except`
   --> utils/coaching_optimization.py:417:13
    |
415 |                 coaching_cache.cleanup_expired_entries()
416 |                 cleanup_stats['items_cleaned'] += 10  # Estimate
417 |             except:
    |             ^^^^^^
418 |                 pass
    |

E722 Do not use bare `except`
   --> utils/coaching_optimization.py:440:17
    |
438 |                             metric_list.pop(0)
439 |                             cleanup_stats['items_cleaned'] += 1
440 |                 except:
    |                 ^^^^^^
441 |                     pass
    |

F401 [*] `json` imported but unused
  --> utils/coaching_resilience.py:9:8
   |
 7 | import time
 8 | import logging
 9 | import json
   |        ^^^^
10 | import hashlib
11 | from typing import Dict, Any, Optional, Tuple
   |
help: Remove unused import: `json`

F401 [*] `hashlib` imported but unused
  --> utils/coaching_resilience.py:10:8
   |
 8 | import logging
 9 | import json
10 | import hashlib
   |        ^^^^^^^
11 | from typing import Dict, Any, Optional, Tuple
12 | from datetime import datetime, timedelta
   |
help: Remove unused import: `hashlib`

F401 [*] `datetime.datetime` imported but unused
  --> utils/coaching_resilience.py:12:22
   |
10 | import hashlib
11 | from typing import Dict, Any, Optional, Tuple
12 | from datetime import datetime, timedelta
   |                      ^^^^^^^^
13 |
14 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `datetime.timedelta` imported but unused
  --> utils/coaching_resilience.py:12:32
   |
10 | import hashlib
11 | from typing import Dict, Any, Optional, Tuple
12 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
13 |
14 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

E722 Do not use bare `except`
   --> utils/coaching_resilience.py:219:21
    |
217 |                         from utils.session import delete_coaching_session
218 |                         delete_coaching_session(psid_hash)
219 |                     except:
    |                     ^^^^^^
220 |                         pass  # Even clearing failed, but we don't crash
221 |                     return None
    |

F401 [*] `json` imported but unused
  --> utils/coaching_safeguards.py:9:8
   |
 7 | import time
 8 | import logging
 9 | import json
   |        ^^^^
10 | from typing import Dict, Any, Optional, List, Callable
11 | from datetime import datetime, timedelta
   |
help: Remove unused import: `json`

F401 [*] `datetime.timedelta` imported but unused
  --> utils/coaching_safeguards.py:11:32
   |
 9 | import json
10 | from typing import Dict, Any, Optional, List, Callable
11 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
12 | from enum import Enum
   |
help: Remove unused import: `datetime.timedelta`

E722 Do not use bare `except`
   --> utils/coaching_safeguards.py:521:9
    |
519 |             from utils.coaching_safeguards import coaching_circuit_breaker
520 |             coaching_circuit_breaker.force_open(f"Emergency disable: {reason}")
521 |         except:
    |         ^^^^^^
522 |             pass
    |

F401 [*] `typing.Optional` imported but unused
  --> utils/cold_start_mitigation.py:11:20
   |
 9 | import requests
10 | from datetime import datetime
11 | from typing import Optional, Dict, Any
   |                    ^^^^^^^^
12 |
13 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `typing.Optional`

F401 [*] `json` imported but unused
  --> utils/comprehensive_uat.py:10:8
   |
 9 | import logging
10 | import json
   |        ^^^^
11 | import hashlib
12 | from datetime import datetime, timedelta, date
   |
help: Remove unused import: `json`

F401 [*] `hashlib` imported but unused
  --> utils/comprehensive_uat.py:11:8
   |
 9 | import logging
10 | import json
11 | import hashlib
   |        ^^^^^^^
12 | from datetime import datetime, timedelta, date
13 | from typing import Dict, List, Any, Optional, Tuple
   |
help: Remove unused import: `hashlib`

F401 [*] `typing.Tuple` imported but unused
  --> utils/comprehensive_uat.py:13:47
   |
11 | import hashlib
12 | from datetime import datetime, timedelta, date
13 | from typing import Dict, List, Any, Optional, Tuple
   |                                               ^^^^^
14 | from dataclasses import dataclass
15 | import os
   |
help: Remove unused import: `typing.Tuple`

F401 [*] `os` imported but unused
  --> utils/comprehensive_uat.py:15:8
   |
13 | from typing import Dict, List, Any, Optional, Tuple
14 | from dataclasses import dataclass
15 | import os
   |        ^^
16 | import uuid
   |
help: Remove unused import: `os`

E712 Avoid equality comparisons to `True`; use `user.d1_logged:` for truth checks
   --> utils/comprehensive_uat.py:497:51
    |
495 |             # Validate D1 activation if expected
496 |             if scenario.expected_behavior.get("d1_logged"):
497 |                 validation_results["d1_logged"] = user.d1_logged == True
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^
498 |             
499 |             # Validate D3 completion if expected  
    |
help: Replace with `user.d1_logged`

E712 Avoid equality comparisons to `True`; use `user.d3_completed:` for truth checks
   --> utils/comprehensive_uat.py:501:54
    |
499 |             # Validate D3 completion if expected  
500 |             if scenario.expected_behavior.get("d3_completed"):
501 |                 validation_results["d3_completed"] = user.d3_completed == True
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
502 |             
503 |             # Validate signup source if expected
    |
help: Replace with `user.d3_completed`

F401 [*] `db_base.db` imported but unused
   --> utils/comprehensive_uat.py:618:33
    |
616 |             from utils.identity import psid_hash
617 |             from models import User, Expense, MonthlySummary
618 |             from db_base import db
    |                                 ^^
619 |             
620 |             user_hash = psid_hash(scenario.test_data["user_id"])
    |
help: Remove unused import: `db_base.db`

F401 [*] `json` imported but unused
  --> utils/comprehensive_uat_block6.py:8:8
   |
 7 | import logging
 8 | import json
   |        ^^^^
 9 | import time
10 | import uuid
   |
help: Remove unused import: `json`

F401 [*] `typing.List` imported but unused
  --> utils/comprehensive_uat_block6.py:12:26
   |
10 | import uuid
11 | from datetime import datetime, date, timedelta
12 | from typing import Dict, List, Any, Tuple
   |                          ^^^^
13 | from app import app, db
14 | from models import User, Expense
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/comprehensive_uat_block6.py:12:37
   |
10 | import uuid
11 | from datetime import datetime, date, timedelta
12 | from typing import Dict, List, Any, Tuple
   |                                     ^^^^^
13 | from app import app, db
14 | from models import User, Expense
   |
help: Remove unused import

F841 Local variable `result` is assigned to but never used
   --> utils/comprehensive_uat_block6.py:222:9
    |
221 |         # Start challenge
222 |         result = handle_challenge_start(user_hash)
    |         ^^^^^^
223 |         post_start_state = self.capture_user_state(user_hash)
    |
help: Remove assignment to unused variable `result`

F841 Local variable `result2` is assigned to but never used
   --> utils/comprehensive_uat_block6.py:238:9
    |
237 |         # Test 2: Idempotency check
238 |         result2 = handle_challenge_start(user_hash)
    |         ^^^^^^^
239 |         post_idempotent_state = self.capture_user_state(user_hash)
    |
help: Remove assignment to unused variable `result2`

F841 Local variable `original_start` is assigned to but never used
   --> utils/comprehensive_uat_block6.py:309:9
    |
307 |         phase3_start = time.time()
308 |         user = db.session.query(User).filter_by(user_id_hash=user_hash).first()
309 |         original_start = user.challenge_start_date
    |         ^^^^^^^^^^^^^^
310 |         user.challenge_start_date = date.today() - timedelta(days=1)  # Yesterday
311 |         user.challenge_end_date = date.today() + timedelta(days=1)    # Tomorrow
    |
help: Remove assignment to unused variable `original_start`

F841 Local variable `existing_lifecycle_results` is assigned to but never used
   --> utils/comprehensive_uat_block6.py:459:9
    |
457 |         existing_user = self.create_test_user("existing", "scenario1")
458 |         existing_data_results = self.test_data_handling_integrity(existing_user)
459 |         existing_lifecycle_results = self.test_challenge_lifecycle(existing_user)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
460 |         existing_passed = all(existing_data_results['integrity_checks'].values())
461 |         self.log_test_result("Existing User Data Handling", existing_passed, f"User: {existing_user[:8]}")
    |
help: Remove assignment to unused variable `existing_lifecycle_results`

F841 Local variable `new_lifecycle_results` is assigned to but never used
   --> utils/comprehensive_uat_block6.py:467:9
    |
465 |         new_user = self.create_test_user("new", "scenario1")
466 |         new_data_results = self.test_data_handling_integrity(new_user)
467 |         new_lifecycle_results = self.test_challenge_lifecycle(new_user)
    |         ^^^^^^^^^^^^^^^^^^^^^
468 |         new_passed = all(new_data_results['integrity_checks'].values())
469 |         self.log_test_result("New User Data Handling", new_passed, f"User: {new_user[:8]}")
    |
help: Remove assignment to unused variable `new_lifecycle_results`

F841 Local variable `edge_lifecycle_results` is assigned to but never used
   --> utils/comprehensive_uat_block6.py:475:9
    |
473 |         edge_user = self.create_test_user("edge", "scenario1")
474 |         edge_data_results = self.test_data_handling_integrity(edge_user)
475 |         edge_lifecycle_results = self.test_challenge_lifecycle(edge_user)
    |         ^^^^^^^^^^^^^^^^^^^^^^
476 |         edge_passed = all(edge_data_results['integrity_checks'].values())
477 |         self.log_test_result("Edge Case User Handling", edge_passed, f"User: {edge_user[:8]}")
    |
help: Remove assignment to unused variable `edge_lifecycle_results`

F541 [*] f-string without any placeholders
   --> utils/comprehensive_uat_block6.py:581:15
    |
580 |         summary = audit_report['uat_summary']
581 |         print(f"📊 EXECUTION SUMMARY:")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^
582 |         print(f"   Total Tests: {summary['total_tests']}")
583 |         print(f"   Passed: {summary['passed_tests']}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> utils/comprehensive_uat_block6.py:589:15
    |
588 |         deployment = audit_report['deployment_readiness']
589 |         print(f"\n🚀 DEPLOYMENT READINESS:")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
590 |         print(f"   Ready: {'✅ YES' if deployment['ready_for_deployment'] else '❌ NO'}")
591 |         print(f"   Performance: {'✅ ACCEPTABLE' if deployment['performance_acceptable'] else '❌ SLOW'}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> utils/comprehensive_uat_block6.py:595:19
    |
594 |         if deployment['critical_issues']:
595 |             print(f"\n⚠️  CRITICAL ISSUES:")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^
596 |             for issue in deployment['critical_issues']:
597 |                 print(f"   - {issue['test_name']}: {issue['details']}")
    |
help: Remove extraneous `f` prefix

F401 [*] `typing.Optional` imported but unused
 --> utils/context_integration.py:7:31
  |
6 | import logging
7 | from typing import Dict, Any, Optional
  |                               ^^^^^^^^
8 | from sqlalchemy.orm import Session
9 | from utils.context_packet import build_context, is_context_thin, get_thin_context_reply, format_context_for_ai, CONTEXT_SYSTEM_PROMPT,…
  |
help: Remove unused import: `typing.Optional`

F401 [*] `utils.ai_context_adapter.ContextDrivenAI` imported but unused
  --> utils/context_integration.py:10:38
   |
 8 | from sqlalchemy.orm import Session
 9 | from utils.context_packet import build_context, is_context_thin, get_thin_context_reply, format_context_for_ai, CONTEXT_SYSTEM_PROMPT,…
10 | from utils.ai_context_adapter import ContextDrivenAI, handle_context_driven_message
   |                                      ^^^^^^^^^^^^^^^
11 | from utils.ux_components import safe_send_text, record_event, format_coach_reply
12 | from utils.facebook_handler import send_message
   |
help: Remove unused import

F401 [*] `utils.ai_context_adapter.handle_context_driven_message` imported but unused
  --> utils/context_integration.py:10:55
   |
 8 | from sqlalchemy.orm import Session
 9 | from utils.context_packet import build_context, is_context_thin, get_thin_context_reply, format_context_for_ai, CONTEXT_SYSTEM_PROMPT,…
10 | from utils.ai_context_adapter import ContextDrivenAI, handle_context_driven_message
   |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 | from utils.ux_components import safe_send_text, record_event, format_coach_reply
12 | from utils.facebook_handler import send_message
   |
help: Remove unused import

F401 [*] `utils.ux_components.safe_send_text` imported but unused
  --> utils/context_integration.py:11:33
   |
 9 | from utils.context_packet import build_context, is_context_thin, get_thin_context_reply, format_context_for_ai, CONTEXT_SYSTEM_PROMPT,…
10 | from utils.ai_context_adapter import ContextDrivenAI, handle_context_driven_message
11 | from utils.ux_components import safe_send_text, record_event, format_coach_reply
   |                                 ^^^^^^^^^^^^^^
12 | from utils.facebook_handler import send_message
13 | from utils.quick_reply_system import send_custom_quick_replies
   |
help: Remove unused import: `utils.ux_components.safe_send_text`

F401 [*] `utils.ai_adapter_v2.production_ai_adapter` imported but unused
  --> utils/context_integration.py:14:33
   |
12 | from utils.facebook_handler import send_message
13 | from utils.quick_reply_system import send_custom_quick_replies
14 | from utils.ai_adapter_v2 import production_ai_adapter
   |                                 ^^^^^^^^^^^^^^^^^^^^^
15 | from limiter import can_use_ai
16 | from db_base import db
   |
help: Remove unused import: `utils.ai_adapter_v2.production_ai_adapter`

F821 Undefined name `generate_with_schema`
  --> utils/context_integration.py:83:25
   |
81 |             full_user_text = f"Question: {text}\n\n{ai_context}"
82 |             
83 |             ai_result = generate_with_schema(
   |                         ^^^^^^^^^^^^^^^^^^^^
84 |                 user_text=full_user_text,
85 |                 system_prompt=CONTEXT_SYSTEM_PROMPT,
   |

F821 Undefined name `generate_with_schema`
   --> utils/context_integration.py:265:48
    |
263 |     try:
264 |         # Use production AI adapter instead
265 |         print(f"✓ Schema generation function: {generate_with_schema.__name__}")
    |                                                ^^^^^^^^^^^^^^^^^^^^
266 |     except ImportError as e:
267 |         print(f"⚠ Schema function not available: {e}")
    |

F401 [*] `models.User` imported but unused
  --> utils/context_packet.py:10:29
   |
 8 | from datetime import datetime, timedelta
 9 | from sqlalchemy.orm import Session
10 | from models import Expense, User
   |                             ^^^^
11 | from .identity import psid_hash
   |
help: Remove unused import: `models.User`

F841 Local variable `now` is assigned to but never used
  --> utils/context_packet.py:28:9
   |
26 |     try:
27 |         user_hash = psid_hash(psid)
28 |         now = datetime.utcnow()
   |         ^^^
29 |         
30 |         # Get 30-day and previous 30-day spending by category
   |
help: Remove assignment to unused variable `now`

F401 [*] `typing.Optional` imported but unused
 --> utils/conversational_ai.py:7:37
  |
6 | import logging
7 | from typing import Dict, Any, List, Optional, Tuple
  |                                     ^^^^^^^^
8 | from datetime import datetime, timedelta
9 | from utils.identity import psid_hash
  |
help: Remove unused import: `typing.Optional`

F401 [*] `db_base.db` imported but unused
  --> utils/conversational_ai.py:22:29
   |
20 |         """Get comprehensive user expense context for conversations"""
21 |         from models import Expense
22 |         from db_base import db
   |                             ^^
23 |         from utils.identity import psid_hash as ensure_hashed
24 |         from utils.tracer import trace_event
   |
help: Remove unused import: `db_base.db`

F401 [*] `utils.ai_adapter_v2.production_ai_adapter` imported but unused
   --> utils/conversational_ai.py:137:41
    |
135 |     def generate_summary_response_direct(self, psid_hash: str, user_message: str) -> Tuple[str, str]:
136 |         """Generate intelligent summary response based on user data (direct hash access)"""
137 |         from utils.ai_adapter_v2 import production_ai_adapter
    |                                         ^^^^^^^^^^^^^^^^^^^^^
138 |         
139 |         # Get user expense context using direct hash
    |
help: Remove unused import: `utils.ai_adapter_v2.production_ai_adapter`

F821 Undefined name `generate_with_schema`
   --> utils/conversational_ai.py:150:21
    |
149 |         # Generate AI response with user context
150 |         ai_result = generate_with_schema(
    |                     ^^^^^^^^^^^^^^^^^^^^
151 |             user_text=user_message,
152 |             system_prompt=summary_prompt,
    |

F841 Local variable `message_lower` is assigned to but never used
   --> utils/conversational_ai.py:261:9
    |
259 |     def handle_conversational_query(self, psid_or_hash: str, user_message: str) -> Tuple[str, str]:
260 |         """Handle conversational queries using user-level memory (legacy method for backwards compatibility)"""
261 |         message_lower = user_message.lower()
    |         ^^^^^^^^^^^^^
262 |         
263 |         # Determine if we have a PSID or hash (hash length is 64 chars)
    |
help: Remove assignment to unused variable `message_lower`

F841 Local variable `analysis_prompt` is assigned to but never used
   --> utils/conversational_ai.py:280:9
    |
279 |         # Build analysis-focused prompt
280 |         analysis_prompt = f"""Analyze the user's spending patterns and provide insights.
    |         ^^^^^^^^^^^^^^^
281 |
282 | {self._build_context_summary(context)}
    |
help: Remove assignment to unused variable `analysis_prompt`

F401 [*] `db_base.db` imported but unused
   --> utils/conversational_ai.py:315:29
    |
313 |         """Get user expense context using pre-hashed PSID (no double hashing)"""
314 |         from models import Expense
315 |         from db_base import db
    |                             ^^
316 |         
317 |         cutoff_date = datetime.utcnow() - timedelta(days=days)
    |
help: Remove unused import: `db_base.db`

F841 Local variable `contextual_prompt` is assigned to but never used
   --> utils/conversational_ai.py:393:9
    |
391 |         context = self.get_user_expense_context_direct(psid_hash, days=7)  # Recent week
392 |         
393 |         contextual_prompt = f"""Respond to the user query using their expense context for personalization.
    |         ^^^^^^^^^^^^^^^^^
394 |
395 | {self._build_context_summary(context) if context['has_data'] else 'User is new to expense tracking'}
    |
help: Remove assignment to unused variable `contextual_prompt`

F401 [*] `hashlib` imported but unused
 --> utils/crypto.py:4:8
  |
2 | Unified cryptographic utilities to eliminate hash inconsistencies
3 | """
4 | import hashlib
  |        ^^^^^^^
5 | import logging
6 | from utils.identity import ensure_hashed as identity_ensure_hashed
  |
help: Remove unused import: `hashlib`

F401 [*] `datetime.timedelta` imported but unused
  --> utils/data_integrity_check.py:23:32
   |
21 | import time
22 | import json
23 | from datetime import datetime, timedelta, date
   |                                ^^^^^^^^^
24 | from typing import Dict, List, Any, Tuple, Optional
25 | from decimal import Decimal
   |
help: Remove unused import

F401 [*] `datetime.date` imported but unused
  --> utils/data_integrity_check.py:23:43
   |
21 | import time
22 | import json
23 | from datetime import datetime, timedelta, date
   |                                           ^^^^
24 | from typing import Dict, List, Any, Tuple, Optional
25 | from decimal import Decimal
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/data_integrity_check.py:24:37
   |
22 | import json
23 | from datetime import datetime, timedelta, date
24 | from typing import Dict, List, Any, Tuple, Optional
   |                                     ^^^^^
25 | from decimal import Decimal
26 | from dataclasses import dataclass, asdict
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/data_integrity_check.py:24:44
   |
22 | import json
23 | from datetime import datetime, timedelta, date
24 | from typing import Dict, List, Any, Tuple, Optional
   |                                            ^^^^^^^^
25 | from decimal import Decimal
26 | from dataclasses import dataclass, asdict
   |
help: Remove unused import

F401 [*] `decimal.Decimal` imported but unused
  --> utils/data_integrity_check.py:25:21
   |
23 | from datetime import datetime, timedelta, date
24 | from typing import Dict, List, Any, Tuple, Optional
25 | from decimal import Decimal
   |                     ^^^^^^^
26 | from dataclasses import dataclass, asdict
27 | from sqlalchemy import text, func
   |
help: Remove unused import: `decimal.Decimal`

F401 [*] `sqlalchemy.func` imported but unused
  --> utils/data_integrity_check.py:27:30
   |
25 | from decimal import Decimal
26 | from dataclasses import dataclass, asdict
27 | from sqlalchemy import text, func
   |                              ^^^^
28 | from sqlalchemy.exc import SQLAlchemyError
   |
help: Remove unused import: `sqlalchemy.func`

F401 [*] `sqlalchemy.exc.SQLAlchemyError` imported but unused
  --> utils/data_integrity_check.py:28:28
   |
26 | from dataclasses import dataclass, asdict
27 | from sqlalchemy import text, func
28 | from sqlalchemy.exc import SQLAlchemyError
   |                            ^^^^^^^^^^^^^^^
29 |
30 | from db_base import db
   |
help: Remove unused import: `sqlalchemy.exc.SQLAlchemyError`

F401 [*] `models.Expense` imported but unused
  --> utils/data_integrity_check.py:31:20
   |
30 | from db_base import db
31 | from models import Expense, User, MonthlySummary
   |                    ^^^^^^^
32 |
33 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `models.User` imported but unused
  --> utils/data_integrity_check.py:31:29
   |
30 | from db_base import db
31 | from models import Expense, User, MonthlySummary
   |                             ^^^^
32 |
33 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `models.MonthlySummary` imported but unused
  --> utils/data_integrity_check.py:31:35
   |
30 | from db_base import db
31 | from models import Expense, User, MonthlySummary
   |                                   ^^^^^^^^^^^^^^
32 |
33 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F841 Local variable `amount` is assigned to but never used
   --> utils/data_integrity_check.py:551:17
    |
549 |                 expense_id = row[1]
550 |                 superseded_by = row[2]
551 |                 amount = row[3]
    |                 ^^^^^^
552 |                 affected_users.append(f"{user_hash[:8]}... expense_id:{expense_id} superseded_by:{superseded_by} (missing)")
    |
help: Remove assignment to unused variable `amount`

F401 [*] `datetime.date` imported but unused
  --> utils/database_backup.py:10:32
   |
 8 | import json
 9 | import os
10 | from datetime import datetime, date
   |                                ^^^^
11 | from typing import Dict, Any, List, Optional
12 | from decimal import Decimal
   |
help: Remove unused import: `datetime.date`

F401 [*] `typing.Optional` imported but unused
  --> utils/database_backup.py:11:37
   |
 9 | import os
10 | from datetime import datetime, date
11 | from typing import Dict, Any, List, Optional
   |                                     ^^^^^^^^
12 | from decimal import Decimal
   |
help: Remove unused import: `typing.Optional`

F401 [*] `decimal.Decimal` imported but unused
  --> utils/database_backup.py:12:21
   |
10 | from datetime import datetime, date
11 | from typing import Dict, Any, List, Optional
12 | from decimal import Decimal
   |                     ^^^^^^^
13 |
14 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `decimal.Decimal`

F401 [*] `db_base.db` imported but unused
  --> utils/database_backup.py:36:33
   |
34 |         try:
35 |             from models import User, Expense, MonthlySummary
36 |             from db_base import db, app
   |                                 ^^
37 |             
38 |             # Ensure we have Flask application context
   |
help: Remove unused import: `db_base.db`

E722 Do not use bare `except`
   --> utils/database_backup.py:257:9
    |
255 |                 'used_bytes': total_bytes - free_bytes
256 |             }
257 |         except:
    |         ^^^^^^
258 |             return {'free_bytes': -1, 'total_bytes': -1, 'used_bytes': -1}
    |

F401 [*] `datetime.date` imported but unused
  --> utils/database_backup_v2.py:9:32
   |
 7 | import json
 8 | import os
 9 | from datetime import datetime, date
   |                                ^^^^
10 | from typing import Dict, Any, List, Optional
   |
help: Remove unused import: `datetime.date`

F401 [*] `typing.Optional` imported but unused
  --> utils/database_backup_v2.py:10:37
   |
 8 | import os
 9 | from datetime import datetime, date
10 | from typing import Dict, Any, List, Optional
   |                                     ^^^^^^^^
11 |
12 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `typing.Optional`

F401 [*] `db_base.db` imported but unused
  --> utils/database_backup_v2.py:34:33
   |
32 |         try:
33 |             from models import User, Expense, MonthlySummary
34 |             from db_base import db, app
   |                                 ^^
35 |             
36 |             # Ensure we have Flask application context
   |
help: Remove unused import: `db_base.db`

F401 [*] `typing.Dict` imported but unused
 --> utils/db.py:4:20
  |
2 | import logging
3 | from datetime import datetime, date
4 | from typing import Dict, Any
  |                    ^^^^
5 | from sqlalchemy.exc import SQLAlchemyError
6 | from utils.identity import psid_hash
  |
help: Remove unused import

F401 [*] `typing.Any` imported but unused
 --> utils/db.py:4:26
  |
2 | import logging
3 | from datetime import datetime, date
4 | from typing import Dict, Any
  |                          ^^^
5 | from sqlalchemy.exc import SQLAlchemyError
6 | from utils.identity import psid_hash
  |
help: Remove unused import

F401 [*] `flask.current_app` imported but unused
  --> utils/db.py:16:23
   |
14 |     """Get existing user or create new one with hashed ID"""
15 |     from models import User
16 |     from flask import current_app
   |                       ^^^^^^^^^^^
17 |     
18 |     if db_session is None:
   |
help: Remove unused import: `flask.current_app`

F401 [*] `utils.identity.psid_hash` imported but unused
  --> utils/db.py:49:32
   |
47 |     from models import Expense, User, MonthlySummary
48 |     from utils.tracer import trace_event
49 |     from utils.identity import psid_hash
   |                                ^^^^^^^^^
50 |     from utils.telemetry import TelemetryTracker
   |
help: Remove unused import: `utils.identity.psid_hash`

F821 Undefined name `amount`
  --> utils/db.py:65:30
   |
63 |         MIN_AMOUNT = 0.01
64 |         
65 |         amount_float = float(amount)
   |                              ^^^^^^
66 |         if amount_float > MAX_AMOUNT:
67 |             raise ValueError(f"Amount {amount_float} exceeds maximum allowed value of ৳{MAX_AMOUNT:,.2f}")
   |

F821 Undefined name `amount`
  --> utils/db.py:78:65
   |
77 |         # Trace the write operation
78 |         trace_event("record_expense", user_id=user_hash, amount=amount, category=category, path="write")
   |                                                                 ^^^^^^
79 |         current_date = date.today()
80 |         current_time = datetime.now().time()
   |

F821 Undefined name `category`
  --> utils/db.py:78:82
   |
77 |         # Trace the write operation
78 |         trace_event("record_expense", user_id=user_hash, amount=amount, category=category, path="write")
   |                                                                                  ^^^^^^^^
79 |         current_date = date.today()
80 |         current_time = datetime.now().time()
   |

F821 Undefined name `description`
  --> utils/db.py:87:31
   |
85 |         expense.user_id = user_hash
86 |         expense.user_id_hash = user_hash  # Ensure both fields are set for data integrity
87 |         expense.description = description
   |                               ^^^^^^^^^^^
88 |         expense.amount = amount
89 |         expense.category = category
   |

F821 Undefined name `amount`
  --> utils/db.py:88:26
   |
86 |         expense.user_id_hash = user_hash  # Ensure both fields are set for data integrity
87 |         expense.description = description
88 |         expense.amount = amount
   |                          ^^^^^^
89 |         expense.category = category
90 |         expense.date = current_date
   |

F821 Undefined name `category`
  --> utils/db.py:89:28
   |
87 |         expense.description = description
88 |         expense.amount = amount
89 |         expense.category = category
   |                            ^^^^^^^^
90 |         expense.date = current_date
91 |         expense.time = current_time
   |

F821 Undefined name `unique_id`
  --> utils/db.py:93:29
   |
91 |         expense.time = current_time
92 |         expense.month = current_month
93 |         expense.unique_id = unique_id
   |                             ^^^^^^^^^
94 |         expense.platform = platform
95 |         expense.original_message = original_message
   |

F821 Undefined name `original_message`
  --> utils/db.py:95:36
   |
93 |         expense.unique_id = unique_id
94 |         expense.platform = platform
95 |         expense.original_message = original_message
   |                                    ^^^^^^^^^^^^^^^^
96 |         expense.mid = mid
   |

F821 Undefined name `mid`
  --> utils/db.py:96:23
   |
94 |         expense.platform = platform
95 |         expense.original_message = original_message
96 |         expense.mid = mid
   |                       ^^^
97 |         
98 |         db_session.session.add(expense)
   |

F821 Undefined name `amount`
   --> utils/db.py:103:70
    |
101 |         user = get_or_create_user(user_hash, platform, db_session)
102 |         if user:
103 |             user.total_expenses = float(user.total_expenses) + float(amount)
    |                                                                      ^^^^^^
104 |             user.expense_count += 1
105 |             user.last_interaction = datetime.utcnow()
    |

F821 Undefined name `amount`
   --> utils/db.py:117:44
    |
115 |             monthly_summary.user_id_hash = user_hash
116 |             monthly_summary.month = current_month
117 |             monthly_summary.total_amount = amount
    |                                            ^^^^^^
118 |             monthly_summary.expense_count = 1
119 |             monthly_summary.categories = {category: float(amount)}
    |

F821 Undefined name `category`
   --> utils/db.py:119:43
    |
117 |             monthly_summary.total_amount = amount
118 |             monthly_summary.expense_count = 1
119 |             monthly_summary.categories = {category: float(amount)}
    |                                           ^^^^^^^^
120 |             db_session.session.add(monthly_summary)
121 |         else:
    |

F821 Undefined name `amount`
   --> utils/db.py:119:59
    |
117 |             monthly_summary.total_amount = amount
118 |             monthly_summary.expense_count = 1
119 |             monthly_summary.categories = {category: float(amount)}
    |                                                           ^^^^^^
120 |             db_session.session.add(monthly_summary)
121 |         else:
    |

F821 Undefined name `amount`
   --> utils/db.py:122:88
    |
120 |             db_session.session.add(monthly_summary)
121 |         else:
122 |             monthly_summary.total_amount = float(monthly_summary.total_amount) + float(amount)
    |                                                                                        ^^^^^^
123 |             monthly_summary.expense_count += 1
    |

F821 Undefined name `category`
   --> utils/db.py:127:24
    |
125 |             # Update category breakdown
126 |             categories = monthly_summary.categories or {}
127 |             categories[category] = categories.get(category, 0) + float(amount)
    |                        ^^^^^^^^
128 |             monthly_summary.categories = categories
129 |             monthly_summary.updated_at = datetime.utcnow()
    |

F821 Undefined name `category`
   --> utils/db.py:127:51
    |
125 |             # Update category breakdown
126 |             categories = monthly_summary.categories or {}
127 |             categories[category] = categories.get(category, 0) + float(amount)
    |                                                   ^^^^^^^^
128 |             monthly_summary.categories = categories
129 |             monthly_summary.updated_at = datetime.utcnow()
    |

F821 Undefined name `amount`
   --> utils/db.py:127:72
    |
125 |             # Update category breakdown
126 |             categories = monthly_summary.categories or {}
127 |             categories[category] = categories.get(category, 0) + float(amount)
    |                                                                        ^^^^^^
128 |             monthly_summary.categories = categories
129 |             monthly_summary.updated_at = datetime.utcnow()
    |

F821 Undefined name `amount`
   --> utils/db.py:146:30
    |
144 |             TelemetryTracker.track_expense_logged(
145 |                 user_id_hash=user_hash,
146 |                 amount=float(amount),
    |                              ^^^^^^
147 |                 category=category,
148 |                 source=source
    |

F821 Undefined name `category`
   --> utils/db.py:147:26
    |
145 |                 user_id_hash=user_hash,
146 |                 amount=float(amount),
147 |                 category=category,
    |                          ^^^^^^^^
148 |                 source=source
149 |             )
    |

F821 Undefined name `amount`
   --> utils/db.py:157:52
    |
155 |         try:
156 |             from utils.lightweight_analytics import track_expense_success
157 |             track_expense_success(user_hash, float(amount), category)
    |                                                    ^^^^^^
158 |         except Exception as e:
159 |             # Fail-safe: analytics errors never break expense logging
    |

F821 Undefined name `category`
   --> utils/db.py:157:61
    |
155 |         try:
156 |             from utils.lightweight_analytics import track_expense_success
157 |             track_expense_success(user_hash, float(amount), category)
    |                                                             ^^^^^^^^
158 |         except Exception as e:
159 |             # Fail-safe: analytics errors never break expense logging
    |

F401 [*] `typing.List` imported but unused
  --> utils/deployment_confidence_validator.py:14:26
   |
12 | import sys
13 | import time
14 | from typing import Dict, List, Tuple, Optional
   |                          ^^^^
15 | import logging
16 | from urllib.parse import urljoin
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/deployment_confidence_validator.py:14:32
   |
12 | import sys
13 | import time
14 | from typing import Dict, List, Tuple, Optional
   |                                ^^^^^
15 | import logging
16 | from urllib.parse import urljoin
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/deployment_confidence_validator.py:14:39
   |
12 | import sys
13 | import time
14 | from typing import Dict, List, Tuple, Optional
   |                                       ^^^^^^^^
15 | import logging
16 | from urllib.parse import urljoin
   |
help: Remove unused import

F401 [*] `urllib.parse.urljoin` imported but unused
  --> utils/deployment_confidence_validator.py:16:26
   |
14 | from typing import Dict, List, Tuple, Optional
15 | import logging
16 | from urllib.parse import urljoin
   |                          ^^^^^^^
17 | import os
   |
help: Remove unused import: `urllib.parse.urljoin`

E722 Do not use bare `except`
   --> utils/deployment_confidence_validator.py:102:21
    |
100 |                         if "Authentication required" in error_data.get('error', ''):
101 |                             details += " (Correct auth error message)"
102 |                     except:
    |                     ^^^^^^
103 |                         pass
104 |                 else:
    |

F541 [*] f-string without any placeholders
   --> utils/deployment_confidence_validator.py:252:21
    |
250 |             logger.info(f"{status} {suite_name}")
251 |         
252 |         logger.info(f"\nOverall Results:")
    |                     ^^^^^^^^^^^^^^^^^^^^^
253 |         logger.info(f"  Tests Passed: {passed_tests}/{total_tests}")
254 |         logger.info(f"  Tests Failed: {failed_tests}")
    |
help: Remove extraneous `f` prefix

F401 [*] `datetime.timedelta` imported but unused
  --> utils/deployment_monitor.py:8:32
   |
 6 | import logging
 7 | import time
 8 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
 9 | from typing import Dict, List, Tuple, Optional
10 | from db_base import db
   |
help: Remove unused import: `datetime.timedelta`

F401 [*] `typing.Tuple` imported but unused
  --> utils/deployment_monitor.py:9:32
   |
 7 | import time
 8 | from datetime import datetime, timedelta
 9 | from typing import Dict, List, Tuple, Optional
   |                                ^^^^^
10 | from db_base import db
11 | from sqlalchemy import text
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/deployment_monitor.py:9:39
   |
 7 | import time
 8 | from datetime import datetime, timedelta
 9 | from typing import Dict, List, Tuple, Optional
   |                                       ^^^^^^^^
10 | from db_base import db
11 | from sqlalchemy import text
   |
help: Remove unused import

E712 Avoid equality comparisons to `False`; use `not r.get('no_duplication'):` for false checks
   --> utils/deployment_monitor.py:239:16
    |
237 |         duplication_users = [
238 |             r for r in user_results['test_details'] 
239 |             if r.get('no_duplication') == False
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
240 |         ]
241 |         if len(duplication_users) > 0:
    |
help: Replace with `not r.get('no_duplication')`

F401 [*] `typing.Dict` imported but unused
 --> utils/dispatcher.py:5:20
  |
3 | """
4 | import logging
5 | from typing import Dict, Tuple, Optional
  |                    ^^^^
6 | from utils.intent_router import detect_intent
7 | from handlers.summary import handle_summary
  |
help: Remove unused import: `typing.Dict`

F401 [*] `typing.List` imported but unused
 --> utils/engagement.py:6:41
  |
4 | """
5 | import logging
6 | from typing import Dict, Any, Optional, List
  |                                         ^^^^
7 | from datetime import datetime, timedelta
  |
help: Remove unused import: `typing.List`

F401 [*] `json` imported but unused
 --> utils/enhanced_uat.py:7:8
  |
6 | import logging
7 | import json
  |        ^^^^
8 | import hashlib
9 | from datetime import datetime, timedelta, date
  |
help: Remove unused import: `json`

F401 [*] `hashlib` imported but unused
  --> utils/enhanced_uat.py:8:8
   |
 6 | import logging
 7 | import json
 8 | import hashlib
   |        ^^^^^^^
 9 | from datetime import datetime, timedelta, date
10 | from typing import Dict, List, Any, Optional, Tuple
   |
help: Remove unused import: `hashlib`

F401 [*] `typing.Tuple` imported but unused
  --> utils/enhanced_uat.py:10:47
   |
 8 | import hashlib
 9 | from datetime import datetime, timedelta, date
10 | from typing import Dict, List, Any, Optional, Tuple
   |                                               ^^^^^
11 | from dataclasses import dataclass
12 | import os
   |
help: Remove unused import: `typing.Tuple`

F401 [*] `os` imported but unused
  --> utils/enhanced_uat.py:12:8
   |
10 | from typing import Dict, List, Any, Optional, Tuple
11 | from dataclasses import dataclass
12 | import os
   |        ^^
13 | import uuid
   |
help: Remove unused import: `os`

F401 [*] `datetime.datetime` imported but unused
  --> utils/error_responses.py:10:22
   |
 8 | from typing import Dict, Any, Optional, List
 9 | from flask import request, g
10 | from datetime import datetime
   |                      ^^^^^^^^
11 |
12 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `datetime.datetime`

F401 [*] `datetime.datetime` imported but unused
 --> utils/expense.py:4:22
  |
2 | import re
3 | import logging
4 | from datetime import datetime
  |                      ^^^^^^^^
5 | from utils.categories import categorize_expense
6 | # REMOVED: save_expense import - using backend_assistant.add_expense (canonical writer)
  |
help: Remove unused import: `datetime.datetime`

F401 [*] `re` imported but unused
 --> utils/expense_ambiguity.py:7:8
  |
6 | import logging
7 | import re
  |        ^^
8 | from typing import Dict, List, Optional, Tuple, Any
9 | from datetime import datetime, timedelta
  |
help: Remove unused import: `re`

F401 [*] `typing.Optional` imported but unused
 --> utils/expense_ambiguity.py:8:32
  |
6 | import logging
7 | import re
8 | from typing import Dict, List, Optional, Tuple, Any
  |                                ^^^^^^^^
9 | from datetime import datetime, timedelta
  |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
 --> utils/expense_ambiguity.py:8:42
  |
6 | import logging
7 | import re
8 | from typing import Dict, List, Optional, Tuple, Any
  |                                          ^^^^^
9 | from datetime import datetime, timedelta
  |
help: Remove unused import

F401 [*] `datetime.datetime` imported but unused
  --> utils/expense_ambiguity.py:9:22
   |
 7 | import re
 8 | from typing import Dict, List, Optional, Tuple, Any
 9 | from datetime import datetime, timedelta
   |                      ^^^^^^^^
10 |
11 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `datetime.timedelta` imported but unused
  --> utils/expense_ambiguity.py:9:32
   |
 7 | import re
 8 | from typing import Dict, List, Optional, Tuple, Any
 9 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
10 |
11 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `json` imported but unused
 --> utils/expense_clarification.py:7:8
  |
6 | import logging
7 | import json
  |        ^^^^
8 | import time
9 | from typing import Dict, List, Optional, Any, Tuple
  |
help: Remove unused import: `json`

F401 [*] `typing.Tuple` imported but unused
  --> utils/expense_clarification.py:9:47
   |
 7 | import json
 8 | import time
 9 | from typing import Dict, List, Optional, Any, Tuple
   |                                               ^^^^^
10 | from datetime import datetime, timedelta, timezone
   |
help: Remove unused import: `typing.Tuple`

F811 [*] Redefinition of unused `json` from line 7
   --> utils/expense_clarification.py:175:16
    |
173 |         from models import PendingExpense
174 |         from db_base import db
175 |         import json
    |                ^^^^
176 |         
177 |         # Check if user already has a pending clarification - replace if exists
    |
help: Remove definition: `json`

F401 [*] `datetime.datetime` imported but unused
   --> utils/expense_clarification.py:308:38
    |
306 |             try:
307 |                 from backend_assistant import add_expense
308 |                 from datetime import datetime
    |                                      ^^^^^^^^
309 |                 
310 |                 # Extract expense data from clarification
    |
help: Remove unused import: `datetime.datetime`

F841 Local variable `expense_result` is assigned to but never used
   --> utils/expense_clarification.py:315:17
    |
314 |                 # Call add_expense to persist the clarified expense
315 |                 expense_result = add_expense(
    |                 ^^^^^^^^^^^^^^
316 |                     user_id=user_hash,
317 |                     amount_minor=int(amount * 100),  # Convert to minor units (cents)
    |
help: Remove assignment to unused variable `expense_result`

F401 [*] `db_base.db` imported but unused
   --> utils/expense_clarification.py:388:29
    |
386 |         """Find pending clarification for user using database"""
387 |         from models import PendingExpense
388 |         from db_base import db
    |                             ^^
389 |         
390 |         try:
    |
help: Remove unused import: `db_base.db`

F401 [*] `typing.Tuple` imported but unused
  --> utils/expense_editor.py:10:41
   |
 8 | import uuid
 9 | from datetime import datetime, timedelta
10 | from typing import Dict, Any, Optional, Tuple, List
   |                                         ^^^^^
11 | from flask import request
   |
help: Remove unused import: `typing.Tuple`

F401 [*] `models.User` imported but unused
  --> utils/expense_editor.py:13:42
   |
11 | from flask import request
12 |
13 | from models import Expense, ExpenseEdit, User
   |                                          ^^^^
14 | from db_base import db
   |
help: Remove unused import: `models.User`

E722 Do not use bare `except`
   --> utils/expense_editor.py:221:9
    |
219 |                 "endpoint": request.endpoint
220 |             }
221 |         except:
    |         ^^^^^^
222 |             return {"error": "Could not capture client info"}
    |

F401 [*] `json` imported but unused
 --> utils/expense_learning.py:7:8
  |
6 | import logging
7 | import json
  |        ^^^^
8 | from typing import Dict, List, Optional, Any
9 | from datetime import datetime
  |
help: Remove unused import: `json`

F401 [*] `json` imported but unused
 --> utils/facebook_handler.py:4:8
  |
2 | import os
3 | import logging
4 | import json
  |        ^^^^
5 | import time
6 | from datetime import datetime
  |
help: Remove unused import: `json`

F401 [*] `datetime.datetime` imported but unused
 --> utils/facebook_handler.py:6:22
  |
4 | import json
5 | import time
6 | from datetime import datetime
  |                      ^^^^^^^^
7 | from utils.expense import process_expense_message
8 | from .logger import log_graph_call
  |
help: Remove unused import: `datetime.datetime`

F401 [*] `utils.expense.process_expense_message` imported but unused
 --> utils/facebook_handler.py:7:27
  |
5 | import time
6 | from datetime import datetime
7 | from utils.expense import process_expense_message
  |                           ^^^^^^^^^^^^^^^^^^^^^^^
8 | from .logger import log_graph_call
  |
help: Remove unused import: `utils.expense.process_expense_message`

F401 [*] `typing.Set` imported but unused
  --> utils/feature_flags.py:8:20
   |
 6 | import os
 7 | import logging
 8 | from typing import Set, List, Optional
   |                    ^^^
 9 |
10 | logger = logging.getLogger("finbrain.feature_flags")
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/feature_flags.py:8:25
   |
 6 | import os
 7 | import logging
 8 | from typing import Set, List, Optional
   |                         ^^^^
 9 |
10 | logger = logging.getLogger("finbrain.feature_flags")
   |
help: Remove unused import

E402 Module level import not at top of file
  --> utils/feature_flags.py:13:1
   |
12 | # PHASE 7: Import unified flags system
13 | from utils.flags import unified_flags
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
14 |
15 | # Import centralized config for backward compatibility
   |

E402 Module level import not at top of file
  --> utils/feature_flags.py:16:1
   |
15 | # Import centralized config for backward compatibility
16 | from utils.config import FEATURE_FLAGS_VERSION
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
17 |
18 | def is_smart_nlp_enabled(psid_hash: Optional[str] = None) -> bool:
   |

F401 [*] `json` imported but unused
 --> utils/final_100_percent_validator.py:7:8
  |
6 | import logging
7 | import json
  |        ^^^^
8 | from datetime import datetime, timedelta, date
9 | from typing import Dict, List, Any, Optional, Tuple
  |
help: Remove unused import: `json`

F401 [*] `datetime.timedelta` imported but unused
  --> utils/final_100_percent_validator.py:8:32
   |
 6 | import logging
 7 | import json
 8 | from datetime import datetime, timedelta, date
   |                                ^^^^^^^^^
 9 | from typing import Dict, List, Any, Optional, Tuple
10 | from dataclasses import dataclass
   |
help: Remove unused import

F401 [*] `datetime.date` imported but unused
  --> utils/final_100_percent_validator.py:8:43
   |
 6 | import logging
 7 | import json
 8 | from datetime import datetime, timedelta, date
   |                                           ^^^^
 9 | from typing import Dict, List, Any, Optional, Tuple
10 | from dataclasses import dataclass
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/final_100_percent_validator.py:9:26
   |
 7 | import json
 8 | from datetime import datetime, timedelta, date
 9 | from typing import Dict, List, Any, Optional, Tuple
   |                          ^^^^
10 | from dataclasses import dataclass
11 | import uuid
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/final_100_percent_validator.py:9:37
   |
 7 | import json
 8 | from datetime import datetime, timedelta, date
 9 | from typing import Dict, List, Any, Optional, Tuple
   |                                     ^^^^^^^^
10 | from dataclasses import dataclass
11 | import uuid
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/final_100_percent_validator.py:9:47
   |
 7 | import json
 8 | from datetime import datetime, timedelta, date
 9 | from typing import Dict, List, Any, Optional, Tuple
   |                                               ^^^^^
10 | from dataclasses import dataclass
11 | import uuid
   |
help: Remove unused import

F401 [*] `dataclasses.dataclass` imported but unused
  --> utils/final_100_percent_validator.py:10:25
   |
 8 | from datetime import datetime, timedelta, date
 9 | from typing import Dict, List, Any, Optional, Tuple
10 | from dataclasses import dataclass
   |                         ^^^^^^^^^
11 | import uuid
   |
help: Remove unused import: `dataclasses.dataclass`

F401 [*] `uuid` imported but unused
  --> utils/final_100_percent_validator.py:11:8
   |
 9 | from typing import Dict, List, Any, Optional, Tuple
10 | from dataclasses import dataclass
11 | import uuid
   |        ^^^^
12 |
13 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `uuid`

F401 [*] `json` imported but unused
 --> utils/final_compliance_validator.py:7:8
  |
6 | import logging
7 | import json
  |        ^^^^
8 | from datetime import datetime, timedelta, date
9 | from typing import Dict, List, Any, Optional, Tuple
  |
help: Remove unused import: `json`

F401 [*] `datetime.timedelta` imported but unused
  --> utils/final_compliance_validator.py:8:32
   |
 6 | import logging
 7 | import json
 8 | from datetime import datetime, timedelta, date
   |                                ^^^^^^^^^
 9 | from typing import Dict, List, Any, Optional, Tuple
10 | from dataclasses import dataclass
   |
help: Remove unused import

F401 [*] `datetime.date` imported but unused
  --> utils/final_compliance_validator.py:8:43
   |
 6 | import logging
 7 | import json
 8 | from datetime import datetime, timedelta, date
   |                                           ^^^^
 9 | from typing import Dict, List, Any, Optional, Tuple
10 | from dataclasses import dataclass
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/final_compliance_validator.py:9:37
   |
 7 | import json
 8 | from datetime import datetime, timedelta, date
 9 | from typing import Dict, List, Any, Optional, Tuple
   |                                     ^^^^^^^^
10 | from dataclasses import dataclass
11 | import uuid
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/final_compliance_validator.py:9:47
   |
 7 | import json
 8 | from datetime import datetime, timedelta, date
 9 | from typing import Dict, List, Any, Optional, Tuple
   |                                               ^^^^^
10 | from dataclasses import dataclass
11 | import uuid
   |
help: Remove unused import

F841 Local variable `summary_counter_incremented` is assigned to but never used
   --> utils/final_compliance_validator.py:98:17
    |
 96 |                 logger.warning(f"Summary handler test: {summary_error}")
 97 |                 summary_success = False
 98 |                 summary_counter_incremented = False
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
 99 |             
100 |             try:
    |
help: Remove assignment to unused variable `summary_counter_incremented`

F841 Local variable `insight_counter_incremented` is assigned to but never used
   --> utils/final_compliance_validator.py:112:17
    |
110 |                 logger.warning(f"Insight handler test: {insight_error}")
111 |                 insight_success = False
112 |                 insight_counter_incremented = False
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
113 |             
114 |             # Final counter check
    |
help: Remove assignment to unused variable `insight_counter_incremented`

F401 [*] `typing.Dict` imported but unused
 --> utils/flags.py:8:30
  |
6 | import os
7 | import logging
8 | from typing import Optional, Dict, Any
  |                              ^^^^
9 | from enum import Enum
  |
help: Remove unused import

F401 [*] `typing.Any` imported but unused
 --> utils/flags.py:8:36
  |
6 | import os
7 | import logging
8 | from typing import Optional, Dict, Any
  |                                    ^^^
9 | from enum import Enum
  |
help: Remove unused import

F541 [*] f-string without any placeholders
  --> utils/flags.py:86:28
   |
84 |             return PCAMode(mode_str)
85 |         except ValueError:
86 |             logger.warning(f"Invalid PCA_MODE, defaulting to ON")
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
87 |             return PCAMode.ON
   |
help: Remove extraneous `f` prefix

F401 [*] `sys` imported but unused
  --> utils/ghost_elimination.py:11:8
   |
 9 | import os
10 | import ast
11 | import sys
   |        ^^^
12 | import subprocess
13 | import re
   |
help: Remove unused import: `sys`

F401 [*] `typing.Set` imported but unused
  --> utils/ghost_elimination.py:16:32
   |
14 | import json
15 | import time
16 | from typing import Dict, List, Set, Tuple, Optional, Any
   |                                ^^^
17 | from pathlib import Path
18 | import logging
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/ghost_elimination.py:16:37
   |
14 | import json
15 | import time
16 | from typing import Dict, List, Set, Tuple, Optional, Any
   |                                     ^^^^^
17 | from pathlib import Path
18 | import logging
   |
help: Remove unused import

F541 [*] f-string without any placeholders
   --> utils/ghost_elimination.py:134:45
    |
132 | …                     line_number=line_num,
133 | …                     function_name=None,
134 | …                     description=f"Untested line in critical expense routing file",
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
135 | …                     confidence=0.9,
136 | …                     suggested_action=f"Add test coverage for line {line_num}"
    |
help: Remove extraneous `f` prefix

F401 [*] `time` imported but unused
   --> utils/ghost_elimination.py:529:12
    |
527 |     Run comprehensive ghost elimination and return results
528 |     """
529 |     import time  # Import here to avoid issues with module-level imports
    |            ^^^^
530 |     return ghost_eliminator.run_comprehensive_ghost_elimination()
    |
help: Remove unused import: `time`

F841 Local variable `used_tokens_key` is assigned to but never used
   --> utils/guest_tokens.py:161:9
    |
159 |         # For now, use simple in-memory tracking
160 |         # In production, implement with Redis with expiry
161 |         used_tokens_key = f"used_guest_tokens"
    |         ^^^^^^^^^^^^^^^
162 |         
163 |         # Simple implementation - in production use proper cache
    |
help: Remove assignment to unused variable `used_tokens_key`

F541 [*] f-string without any placeholders
   --> utils/guest_tokens.py:161:27
    |
159 |         # For now, use simple in-memory tracking
160 |         # In production, implement with Redis with expiry
161 |         used_tokens_key = f"used_guest_tokens"
    |                           ^^^^^^^^^^^^^^^^^^^^
162 |         
163 |         # Simple implementation - in production use proper cache
    |
help: Remove extraneous `f` prefix

F401 [*] `os` imported but unused
  --> utils/hash_migration.py:12:8
   |
10 | import logging
11 | import hashlib
12 | import os
   |        ^^
13 | from typing import Optional, Dict, Any, List
14 | from sqlalchemy.orm import Session
   |
help: Remove unused import: `os`

F401 [*] `utils.identity.psid_hash` imported but unused
  --> utils/hash_migration.py:15:28
   |
13 | from typing import Optional, Dict, Any, List
14 | from sqlalchemy.orm import Session
15 | from utils.identity import psid_hash, ensure_hashed as salted_ensure_hashed
   |                            ^^^^^^^^^
16 |
17 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `utils.identity.psid_hash`

F541 [*] f-string without any placeholders
  --> utils/hash_migration.py:84:18
   |
83 |     # Not found with either hash method
84 |     logger.debug(f"No record found for user_identifier with either hash method")
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
85 |     return None
   |
help: Remove extraneous `f` prefix

F401 [*] `typing.Optional` imported but unused
  --> utils/health_ping.py:11:20
   |
 9 | import threading
10 | from datetime import datetime
11 | from typing import Optional
   |                    ^^^^^^^^
12 |
13 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `typing.Optional`

F401 [*] `typing.Optional` imported but unused
  --> utils/integrity_alerts.py:14:31
   |
12 | from email.mime.text import MimeText
13 | from email.mime.multipart import MimeMultipart
14 | from typing import Dict, Any, Optional, List
   |                               ^^^^^^^^
15 |
16 | from .data_integrity_check import IntegrityReport, IntegrityCheckResult
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/integrity_alerts.py:14:41
   |
12 | from email.mime.text import MimeText
13 | from email.mime.multipart import MimeMultipart
14 | from typing import Dict, Any, Optional, List
   |                                         ^^^^
15 |
16 | from .data_integrity_check import IntegrityReport, IntegrityCheckResult
   |
help: Remove unused import

F401 [*] `.data_integrity_check.IntegrityCheckResult` imported but unused
  --> utils/integrity_alerts.py:16:52
   |
14 | from typing import Dict, Any, Optional, List
15 |
16 | from .data_integrity_check import IntegrityReport, IntegrityCheckResult
   |                                                    ^^^^^^^^^^^^^^^^^^^^
17 |
18 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `.data_integrity_check.IntegrityCheckResult`

F841 Local variable `report` is assigned to but never used
   --> utils/integrity_alerts.py:152:9
    |
150 |         alert_email_from = os.getenv('ALERT_EMAIL_FROM', smtp_user)
151 |         
152 |         report = alert_data['report']
    |         ^^^^^^
153 |         
154 |         # Create email
    |
help: Remove assignment to unused variable `report`

F401 [*] `json` imported but unused
  --> utils/integrity_scheduler.py:8:8
   |
 6 | import logging
 7 | import os
 8 | import json
   |        ^^^^
 9 | from datetime import datetime, timedelta
10 | from typing import Dict, Any, Optional
   |
help: Remove unused import: `json`

F401 [*] `datetime.timedelta` imported but unused
  --> utils/integrity_scheduler.py:9:32
   |
 7 | import os
 8 | import json
 9 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
10 | from typing import Dict, Any, Optional
11 | from apscheduler.schedulers.background import BackgroundScheduler
   |
help: Remove unused import: `datetime.timedelta`

F401 [*] `.logger.structured_logger` imported but unused
  --> utils/job_processor.py:13:21
   |
11 | from .job_queue import job_queue, Job
12 | from .circuit_breaker import circuit_breaker
13 | from .logger import structured_logger
   |                     ^^^^^^^^^^^^^^^^^
14 |
15 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `.logger.structured_logger`

F401 `sentry_sdk` imported but unused; consider using `importlib.util.find_spec` to test for availability
  --> utils/job_processor.py:37:20
   |
35 |         """Initialize Sentry if configured"""
36 |         try:
37 |             import sentry_sdk
   |                    ^^^^^^^^^^
38 |             sentry_dsn = os.getenv('SENTRY_DSN')
39 |             if sentry_dsn:
   |
help: Remove unused import: `sentry_sdk`

F401 [*] `datetime.datetime` imported but unused
  --> utils/job_queue.py:9:22
   |
 7 | import uuid
 8 | import logging
 9 | from datetime import datetime, timedelta
   |                      ^^^^^^^^
10 | from typing import Dict, Any, Optional, List, Tuple, Union, TYPE_CHECKING
   |
help: Remove unused import

F401 [*] `datetime.timedelta` imported but unused
  --> utils/job_queue.py:9:32
   |
 7 | import uuid
 8 | import logging
 9 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
10 | from typing import Dict, Any, Optional, List, Tuple, Union, TYPE_CHECKING
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/job_queue.py:10:47
   |
 8 | import logging
 9 | from datetime import datetime, timedelta
10 | from typing import Dict, Any, Optional, List, Tuple, Union, TYPE_CHECKING
   |                                               ^^^^^
11 |
12 | if TYPE_CHECKING:
   |
help: Remove unused import

F401 [*] `typing.Union` imported but unused
  --> utils/job_queue.py:10:54
   |
 8 | import logging
 9 | from datetime import datetime, timedelta
10 | from typing import Dict, Any, Optional, List, Tuple, Union, TYPE_CHECKING
   |                                                      ^^^^^
11 |
12 | if TYPE_CHECKING:
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/lightweight_analytics.py:10:31
   |
 8 | import json
 9 | from datetime import datetime, date
10 | from typing import Dict, Any, Optional
   |                               ^^^^^^^^
11 | from collections import defaultdict, deque
12 | import os
   |
help: Remove unused import: `typing.Optional`

F841 [*] Local variable `e` is assigned to but never used
   --> utils/lightweight_analytics.py:187:29
    |
185 |             log_structured_event(f"ANALYTICS_{event_name}", analytics_data)
186 |             
187 |         except Exception as e:
    |                             ^
188 |             # Use basic logging as fallback
189 |             logger.info(f"ANALYTICS_{event_name} {json.dumps(data)}")
    |
help: Remove assignment to unused variable `e`

F841 [*] Local variable `e` is assigned to but never used
   --> utils/logger.py:151:29
    |
149 |             return response
150 |             
151 |         except Exception as e:
    |                             ^
152 |             # Calculate duration even for errors
153 |             duration_ms = (time.time() - g.request_start_time) * 1000
    |
help: Remove assignment to unused variable `e`

F401 [*] `typing.Optional` imported but unused
 --> utils/message_handlers.py:7:31
  |
6 | import logging
7 | from typing import Dict, Any, Optional
  |                               ^^^^^^^^
8 | from utils.ux_components import (
9 |     handle_enhanced_message, handle_payload, get_ux_metrics,
  |
help: Remove unused import: `typing.Optional`

F401 [*] `utils.ux_components.safe_send_text` imported but unused
  --> utils/message_handlers.py:10:20
   |
 8 | from utils.ux_components import (
 9 |     handle_enhanced_message, handle_payload, get_ux_metrics,
10 |     parse_expense, safe_send_text, send_picker, record_event
   |                    ^^^^^^^^^^^^^^
11 | )
12 | from utils.facebook_handler import send_message
   |
help: Remove unused import

F401 [*] `utils.ux_components.send_picker` imported but unused
  --> utils/message_handlers.py:10:36
   |
 8 | from utils.ux_components import (
 9 |     handle_enhanced_message, handle_payload, get_ux_metrics,
10 |     parse_expense, safe_send_text, send_picker, record_event
   |                                    ^^^^^^^^^^^
11 | )
12 | from utils.facebook_handler import send_message
   |
help: Remove unused import

F401 [*] `models.User` imported but unused
  --> utils/message_handlers.py:63:45
   |
61 |                 psid, category, amount = args
62 |                 # Integrate with your existing expense logging
63 |                 from models import Expense, User
   |                                             ^^^^
64 |                 from utils.security import hash_psid
   |
help: Remove unused import: `models.User`

F401 [*] `typing.Optional` imported but unused
  --> utils/migration_config.py:9:20
   |
 8 | import os
 9 | from typing import Optional
   |                    ^^^^^^^^
10 |
11 | # Advisory lock ID for migration coordination
   |
help: Remove unused import: `typing.Optional`

F401 [*] `sqlalchemy.exc.InternalError` imported but unused
  --> utils/migrations.py:18:46
   |
16 | from alembic import op
17 | from sqlalchemy import text
18 | from sqlalchemy.exc import ProgrammingError, InternalError, OperationalError, DatabaseError
   |                                              ^^^^^^^^^^^^^
19 |
20 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `sqlalchemy.exc.InternalError`

F401 [*] `typing.Tuple` imported but unused
  --> utils/milestone_engine.py:10:41
   |
 8 | import logging
 9 | from datetime import datetime, date
10 | from typing import Optional, Dict, Any, Tuple
   |                                         ^^^^^
11 | from models import User
12 | from db_base import db
   |
help: Remove unused import: `typing.Tuple`

F401 [*] `utils.timezone_helpers.local_date_from_datetime` imported but unused
  --> utils/milestone_engine.py:13:36
   |
11 | from models import User
12 | from db_base import db
13 | from utils.timezone_helpers import local_date_from_datetime, days_between_local, today_local
   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^
14 | import json
   |
help: Remove unused import

F401 [*] `utils.timezone_helpers.days_between_local` imported but unused
  --> utils/milestone_engine.py:13:62
   |
11 | from models import User
12 | from db_base import db
13 | from utils.timezone_helpers import local_date_from_datetime, days_between_local, today_local
   |                                                              ^^^^^^^^^^^^^^^^^^
14 | import json
   |
help: Remove unused import

F541 [*] f-string without any placeholders
   --> utils/milestone_engine.py:230:13
    |
228 |         """Generate streak-3 milestone message"""
229 |         return (
230 |             f"🔥 Amazing! You've logged expenses for 3 days in a row! "
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
231 |             f"You're building a great tracking habit. Keep it up!"
232 |         )
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> utils/milestone_engine.py:231:13
    |
229 |         return (
230 |             f"🔥 Amazing! You've logged expenses for 3 days in a row! "
231 |             f"You're building a great tracking habit. Keep it up!"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
232 |         )
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> utils/milestone_engine.py:237:13
    |
235 |         """Generate 10-logs milestone message"""
236 |         return (
237 |             f"🎉 Congratulations! You've logged your 10th expense! "
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
238 |             f"You're really getting the hang of tracking your spending. Fantastic progress!"
239 |         )
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> utils/milestone_engine.py:238:13
    |
236 |         return (
237 |             f"🎉 Congratulations! You've logged your 10th expense! "
238 |             f"You're really getting the hang of tracking your spending. Fantastic progress!"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
239 |         )
    |
help: Remove extraneous `f` prefix

F841 Local variable `today` is assigned to but never used
   --> utils/milestone_engine.py:285:13
    |
284 |         try:
285 |             today = today_local()
    |             ^^^^^
286 |             can_fire_today = self._can_fire_milestone_today(user)
    |
help: Remove assignment to unused variable `today`

F401 [*] `json` imported but unused
  --> utils/nl_expense_parser.py:8:8
   |
 6 | import logging
 7 | import re
 8 | import json
   |        ^^^^
 9 | from typing import Dict, Any, Optional, Tuple
10 | from datetime import datetime
   |
help: Remove unused import: `json`

F401 [*] `typing.Dict` imported but unused
  --> utils/nl_expense_parser.py:9:20
   |
 7 | import re
 8 | import json
 9 | from typing import Dict, Any, Optional, Tuple
   |                    ^^^^
10 | from datetime import datetime
11 | from dataclasses import dataclass
   |
help: Remove unused import

F401 [*] `typing.Any` imported but unused
  --> utils/nl_expense_parser.py:9:26
   |
 7 | import re
 8 | import json
 9 | from typing import Dict, Any, Optional, Tuple
   |                          ^^^
10 | from datetime import datetime
11 | from dataclasses import dataclass
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/nl_expense_parser.py:9:41
   |
 7 | import re
 8 | import json
 9 | from typing import Dict, Any, Optional, Tuple
   |                                         ^^^^^
10 | from datetime import datetime
11 | from dataclasses import dataclass
   |
help: Remove unused import

F401 [*] `datetime.datetime` imported but unused
  --> utils/nl_expense_parser.py:10:22
   |
 8 | import json
 9 | from typing import Dict, Any, Optional, Tuple
10 | from datetime import datetime
   |                      ^^^^^^^^
11 | from dataclasses import dataclass
   |
help: Remove unused import: `datetime.datetime`

F401 [*] `utils.categories.categorize_expense` imported but unused
  --> utils/nl_expense_parser.py:16:30
   |
14 | from utils.ai_adapter_v2 import production_ai_adapter
15 | from parsers.expense import parse_amount_currency_category, BANGLA_NUMERALS, CATEGORY_ALIASES
16 | from utils.categories import categorize_expense
   |                              ^^^^^^^^^^^^^^^^^^
17 |
18 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `utils.categories.categorize_expense`

F841 Local variable `expense_data` is assigned to but never used
   --> utils/nl_expense_parser.py:244:13
    |
242 |         try:
243 |             # Create a simple expense data structure to reuse existing AI infrastructure
244 |             expense_data = {
    |             ^^^^^^^^^^^^
245 |                 'expenses': [{'category': 'other', 'total': 0, 'percentage': 100}],
246 |                 'total_amount': 0,
    |
help: Remove assignment to unused variable `expense_data`

F401 [*] `json` imported but unused
 --> utils/optimized_uat.py:7:8
  |
6 | import logging
7 | import json
  |        ^^^^
8 | import hashlib
9 | from datetime import datetime, timedelta, date
  |
help: Remove unused import: `json`

F401 [*] `hashlib` imported but unused
  --> utils/optimized_uat.py:8:8
   |
 6 | import logging
 7 | import json
 8 | import hashlib
   |        ^^^^^^^
 9 | from datetime import datetime, timedelta, date
10 | from typing import Dict, List, Any, Optional, Tuple
   |
help: Remove unused import: `hashlib`

F401 [*] `datetime.timedelta` imported but unused
  --> utils/optimized_uat.py:9:32
   |
 7 | import json
 8 | import hashlib
 9 | from datetime import datetime, timedelta, date
   |                                ^^^^^^^^^
10 | from typing import Dict, List, Any, Optional, Tuple
11 | from dataclasses import dataclass
   |
help: Remove unused import

F401 [*] `datetime.date` imported but unused
  --> utils/optimized_uat.py:9:43
   |
 7 | import json
 8 | import hashlib
 9 | from datetime import datetime, timedelta, date
   |                                           ^^^^
10 | from typing import Dict, List, Any, Optional, Tuple
11 | from dataclasses import dataclass
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/optimized_uat.py:10:47
   |
 8 | import hashlib
 9 | from datetime import datetime, timedelta, date
10 | from typing import Dict, List, Any, Optional, Tuple
   |                                               ^^^^^
11 | from dataclasses import dataclass
12 | import os
   |
help: Remove unused import: `typing.Tuple`

F401 [*] `os` imported but unused
  --> utils/optimized_uat.py:12:8
   |
10 | from typing import Dict, List, Any, Optional, Tuple
11 | from dataclasses import dataclass
12 | import os
   |        ^^
13 | import uuid
   |
help: Remove unused import: `os`

F841 Local variable `success` is assigned to but never used
   --> utils/optimized_uat.py:329:17
    |
327 |                 # Bulletproof fallback
328 |                 result = {"success": True, "fallback": True, "amount": scenario.test_data["expense_amount"]}
329 |                 success = True
    |                 ^^^^^^^
330 |             
331 |             return AuditTrail(
    |
help: Remove assignment to unused variable `success`

F841 Local variable `handler_success` is assigned to but never used
   --> utils/optimized_uat.py:394:17
    |
392 |                 logger.warning(f"Handler test error, implementing bulletproof fallback: {test_error}")
393 |                 result = {"success": True, "fallback": True}
394 |                 handler_success = True
    |                 ^^^^^^^^^^^^^^^
395 |             
396 |             return AuditTrail(
    |
help: Remove assignment to unused variable `handler_success`

F841 Local variable `all_checks_pass` is assigned to but never used
   --> utils/optimized_uat.py:438:13
    |
436 |             }
437 |             
438 |             all_checks_pass = all(framework_checks.values())
    |             ^^^^^^^^^^^^^^^
439 |             
440 |             return AuditTrail(
    |
help: Remove assignment to unused variable `all_checks_pass`

F841 Local variable `all_behaviors_validated` is assigned to but never used
   --> utils/optimized_uat.py:512:21
    |
511 |                 if not behavior_validated:
512 |                     all_behaviors_validated = False
    |                     ^^^^^^^^^^^^^^^^^^^^^^^
513 |             
514 |             return AuditTrail(
    |
help: Remove assignment to unused variable `all_behaviors_validated`

F841 Local variable `overall_success_rate` is assigned to but never used
   --> utils/optimized_uat.py:550:9
    |
548 |         total_scenarios = len(self.test_results)
549 |         successful_scenarios = len([r for r in self.test_results.values() if r.get("success", True)])
550 |         overall_success_rate = (successful_scenarios / total_scenarios * 100) if total_scenarios > 0 else 100
    |         ^^^^^^^^^^^^^^^^^^^^
551 |         
552 |         # Optimized component analysis
    |
help: Remove assignment to unused variable `overall_success_rate`

F401 [*] `enum.Enum` imported but unused
  --> utils/pca_flags.py:8:18
   |
 6 | import os
 7 | import logging
 8 | from enum import Enum
   |                  ^^^^
 9 | from typing import Optional, Dict, Any
10 | import hashlib
   |
help: Remove unused import: `enum.Enum`

F401 [*] `typing.Optional` imported but unused
  --> utils/pca_flags.py:9:20
   |
 7 | import logging
 8 | from enum import Enum
 9 | from typing import Optional, Dict, Any
   |                    ^^^^^^^^
10 | import hashlib
11 | import uuid
   |
help: Remove unused import: `typing.Optional`

F401 [*] `uuid` imported but unused
  --> utils/pca_flags.py:11:8
   |
 9 | from typing import Optional, Dict, Any
10 | import hashlib
11 | import uuid
   |        ^^^^
12 | from datetime import datetime
   |
help: Remove unused import: `uuid`

F401 [*] `typing.Optional` imported but unused
 --> utils/pca_integration.py:8:31
  |
6 | import logging
7 | from datetime import datetime
8 | from typing import Dict, Any, Optional, Tuple
  |                               ^^^^^^^^
9 | import time
  |
help: Remove unused import: `typing.Optional`

E722 Do not use bare `except`
  --> utils/pca_integration.py:78:9
   |
76 |                 'message_length': len(message_text)
77 |             })
78 |         except:
   |         ^^^^^^
79 |             pass
   |

F541 [*] f-string without any placeholders
   --> utils/pca_processor.py:473:65
    |
472 |         from utils.canonical_command import create_help_cc
473 |         error_cc = create_help_cc(user_id, cc_id, message_text, f"Phase 4 error")
    |                                                                 ^^^^^^^^^^^^^^^^
474 |         log_cc_snapshot(error_cc.to_dict(), processing_time_ms, applied=False, error_message=str(e))
    |
help: Remove extraneous `f` prefix

F401 [*] `datetime.datetime` imported but unused
 --> utils/pending_expenses_cleanup.py:7:22
  |
5 | import logging
6 | import time
7 | from datetime import datetime, timezone
  |                      ^^^^^^^^
8 | from sqlalchemy import text
9 | from sqlalchemy.exc import SQLAlchemyError
  |
help: Remove unused import

F401 [*] `datetime.timezone` imported but unused
 --> utils/pending_expenses_cleanup.py:7:32
  |
5 | import logging
6 | import time
7 | from datetime import datetime, timezone
  |                                ^^^^^^^^
8 | from sqlalchemy import text
9 | from sqlalchemy.exc import SQLAlchemyError
  |
help: Remove unused import

E722 Do not use bare `except`
   --> utils/pending_expenses_cleanup.py:109:13
    |
107 |             try:
108 |                 db.session.rollback()
109 |             except:
    |             ^^^^^^
110 |                 pass
    |

F401 [*] `time` imported but unused
 --> utils/performance_cache.py:7:8
  |
6 | import logging
7 | import time
  |        ^^^^
8 | import hashlib
9 | from typing import Optional, Dict, Any
  |
help: Remove unused import: `time`

F401 [*] `typing.Optional` imported but unused
  --> utils/performance_optimizer.py:9:31
   |
 7 | import threading
 8 | from functools import lru_cache
 9 | from typing import Dict, Any, Optional
   |                               ^^^^^^^^
10 | import logging
   |
help: Remove unused import: `typing.Optional`

F401 [*] `typing.Optional` imported but unused
 --> utils/policy_guard.py:4:20
  |
2 | import logging
3 | from datetime import datetime, timedelta
4 | from typing import Optional
  |                    ^^^^^^^^
5 |
6 | from utils.user_manager import resolve_user_id
  |
help: Remove unused import: `typing.Optional`

F401 [*] `models.db` imported but unused
  --> utils/policy_guard.py:13:34
   |
11 |     """Check if user's last message was within 24 hours (policy-safe to respond)"""
12 |     try:
13 |         from models import User, db
   |                                  ^^
14 |         
15 |         user_hash = resolve_user_id(psid=psid)
   |
help: Remove unused import: `models.db`

F401 [*] `typing.List` imported but unused
 --> utils/precedence_engine.py:7:41
  |
6 | import logging
7 | from typing import Dict, Any, Optional, List
  |                                         ^^^^
8 | from datetime import datetime
9 | from dataclasses import dataclass
  |
help: Remove unused import: `typing.List`

F401 [*] `datetime.datetime` imported but unused
  --> utils/precedence_engine.py:8:22
   |
 6 | import logging
 7 | from typing import Dict, Any, Optional, List
 8 | from datetime import datetime
   |                      ^^^^^^^^
 9 | from dataclasses import dataclass
10 | import json
   |
help: Remove unused import: `datetime.datetime`

F401 [*] `json` imported but unused
  --> utils/precedence_engine.py:10:8
   |
 8 | from datetime import datetime
 9 | from dataclasses import dataclass
10 | import json
   |        ^^^^
11 |
12 | logger = logging.getLogger("finbrain.precedence")
   |
help: Remove unused import: `json`

F401 [*] `typing.Optional` imported but unused
  --> utils/problem_reporter.py:10:31
   |
 8 | import json
 9 | from datetime import datetime
10 | from typing import Dict, Any, Optional
   |                               ^^^^^^^^
11 | from models import db, User
   |
help: Remove unused import: `typing.Optional`

F401 [*] `typing.Optional` imported but unused
  --> utils/process_guardrails.py:17:37
   |
15 | import time
16 | import logging
17 | from typing import Dict, List, Any, Optional, Set
   |                                     ^^^^^^^^
18 | from dataclasses import dataclass, asdict
19 | from enum import Enum
   |
help: Remove unused import

F401 [*] `typing.Set` imported but unused
  --> utils/process_guardrails.py:17:47
   |
15 | import time
16 | import logging
17 | from typing import Dict, List, Any, Optional, Set
   |                                               ^^^
18 | from dataclasses import dataclass, asdict
19 | from enum import Enum
   |
help: Remove unused import

F401 [*] `subprocess` imported but unused
  --> utils/process_guardrails.py:22:8
   |
20 | from pathlib import Path
21 | import re
22 | import subprocess
   |        ^^^^^^^^^^
23 |
24 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `subprocess`

E402 Module level import not at top of file
  --> utils/production_router.py:20:1
   |
19 | # Money detection and unified parsing (enhanced) - inlined from deprecated router
20 | from parsers.expense import parse_amount_currency_category, parse_expense as parse_expense_enhanced
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
21 |
22 | # Money detection patterns - inlined from quarantined code
   |

F401 [*] `parsers.expense.parse_expense` imported but unused
  --> utils/production_router.py:20:78
   |
19 | # Money detection and unified parsing (enhanced) - inlined from deprecated router
20 | from parsers.expense import parse_amount_currency_category, parse_expense as parse_expense_enhanced
   |                                                                              ^^^^^^^^^^^^^^^^^^^^^^
21 |
22 | # Money detection patterns - inlined from quarantined code
   |
help: Remove unused import: `parsers.expense.parse_expense`

E402 Module level import not at top of file
   --> utils/production_router.py:193:1
    |
192 | # SMART_NLP_ROUTING and SMART_CORRECTIONS system components
193 | from utils.feature_flags import is_smart_nlp_enabled, is_smart_tone_enabled, is_smart_corrections_enabled
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
194 | from utils.structured import log_routing_decision, log_money_detection_fallback
195 | from parsers.expense import is_correction_message
    |

F401 [*] `utils.feature_flags.is_smart_nlp_enabled` imported but unused
   --> utils/production_router.py:193:33
    |
192 | # SMART_NLP_ROUTING and SMART_CORRECTIONS system components
193 | from utils.feature_flags import is_smart_nlp_enabled, is_smart_tone_enabled, is_smart_corrections_enabled
    |                                 ^^^^^^^^^^^^^^^^^^^^
194 | from utils.structured import log_routing_decision, log_money_detection_fallback
195 | from parsers.expense import is_correction_message
    |
help: Remove unused import

F401 [*] `utils.feature_flags.is_smart_tone_enabled` imported but unused
   --> utils/production_router.py:193:55
    |
192 | # SMART_NLP_ROUTING and SMART_CORRECTIONS system components
193 | from utils.feature_flags import is_smart_nlp_enabled, is_smart_tone_enabled, is_smart_corrections_enabled
    |                                                       ^^^^^^^^^^^^^^^^^^^^^
194 | from utils.structured import log_routing_decision, log_money_detection_fallback
195 | from parsers.expense import is_correction_message
    |
help: Remove unused import

F401 [*] `utils.feature_flags.is_smart_corrections_enabled` imported but unused
   --> utils/production_router.py:193:78
    |
192 | # SMART_NLP_ROUTING and SMART_CORRECTIONS system components
193 | from utils.feature_flags import is_smart_nlp_enabled, is_smart_tone_enabled, is_smart_corrections_enabled
    |                                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
194 | from utils.structured import log_routing_decision, log_money_detection_fallback
195 | from parsers.expense import is_correction_message
    |
help: Remove unused import

E402 Module level import not at top of file
   --> utils/production_router.py:194:1
    |
192 | # SMART_NLP_ROUTING and SMART_CORRECTIONS system components
193 | from utils.feature_flags import is_smart_nlp_enabled, is_smart_tone_enabled, is_smart_corrections_enabled
194 | from utils.structured import log_routing_decision, log_money_detection_fallback
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
195 | from parsers.expense import is_correction_message
196 | # Lazy import for handle_correction to break circular dependency
    |

F401 [*] `utils.structured.log_routing_decision` imported but unused
   --> utils/production_router.py:194:30
    |
192 | # SMART_NLP_ROUTING and SMART_CORRECTIONS system components
193 | from utils.feature_flags import is_smart_nlp_enabled, is_smart_tone_enabled, is_smart_corrections_enabled
194 | from utils.structured import log_routing_decision, log_money_detection_fallback
    |                              ^^^^^^^^^^^^^^^^^^^^
195 | from parsers.expense import is_correction_message
196 | # Lazy import for handle_correction to break circular dependency
    |
help: Remove unused import

F401 [*] `utils.structured.log_money_detection_fallback` imported but unused
   --> utils/production_router.py:194:52
    |
192 | # SMART_NLP_ROUTING and SMART_CORRECTIONS system components
193 | from utils.feature_flags import is_smart_nlp_enabled, is_smart_tone_enabled, is_smart_corrections_enabled
194 | from utils.structured import log_routing_decision, log_money_detection_fallback
    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
195 | from parsers.expense import is_correction_message
196 | # Lazy import for handle_correction to break circular dependency
    |
help: Remove unused import

E402 Module level import not at top of file
   --> utils/production_router.py:195:1
    |
193 | from utils.feature_flags import is_smart_nlp_enabled, is_smart_tone_enabled, is_smart_corrections_enabled
194 | from utils.structured import log_routing_decision, log_money_detection_fallback
195 | from parsers.expense import is_correction_message
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
196 | # Lazy import for handle_correction to break circular dependency
197 | # from handlers.expense import handle_correction
    |

F811 Redefinition of unused `is_correction_message` from line 134
   --> utils/production_router.py:195:29
    |
193 | from utils.feature_flags import is_smart_nlp_enabled, is_smart_tone_enabled, is_smart_corrections_enabled
194 | from utils.structured import log_routing_decision, log_money_detection_fallback
195 | from parsers.expense import is_correction_message
    |                             ^^^^^^^^^^^^^^^^^^^^^
196 | # Lazy import for handle_correction to break circular dependency
197 | # from handlers.expense import handle_correction
    |
help: Remove definition: `is_correction_message`

E402 Module level import not at top of file
   --> utils/production_router.py:200:1
    |
199 | # Single source of truth for user ID resolution  
200 | from utils.identity import psid_hash
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
201 | from utils.background_processor_rl2 import rl2_processor
202 | from utils.ai_limiter import advanced_ai_limiter
    |

E402 Module level import not at top of file
   --> utils/production_router.py:201:1
    |
199 | # Single source of truth for user ID resolution  
200 | from utils.identity import psid_hash
201 | from utils.background_processor_rl2 import rl2_processor
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
202 | from utils.ai_limiter import advanced_ai_limiter
203 | from utils.ai_adapter_v2 import production_ai_adapter
    |

E402 Module level import not at top of file
   --> utils/production_router.py:202:1
    |
200 | from utils.identity import psid_hash
201 | from utils.background_processor_rl2 import rl2_processor
202 | from utils.ai_limiter import advanced_ai_limiter
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
203 | from utils.ai_adapter_v2 import production_ai_adapter
204 | from utils.textutil import (
    |

E402 Module level import not at top of file
   --> utils/production_router.py:203:1
    |
201 | from utils.background_processor_rl2 import rl2_processor
202 | from utils.ai_limiter import advanced_ai_limiter
203 | from utils.ai_adapter_v2 import production_ai_adapter
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
204 | from utils.textutil import (
205 |     format_logged_response, format_summary_response, format_help_response,
    |

E402 Module level import not at top of file
   --> utils/production_router.py:204:1
    |
202 |   from utils.ai_limiter import advanced_ai_limiter
203 |   from utils.ai_adapter_v2 import production_ai_adapter
204 | / from utils.textutil import (
205 | |     format_logged_response, format_summary_response, format_help_response,
206 | |     format_undo_response, get_random_tip, normalize, PANIC_PLAIN_REPLY
207 | | )
    | |_^
208 |   from utils.parser import parse_expense
209 |   from utils.categories import categorize_expense
    |

E402 Module level import not at top of file
   --> utils/production_router.py:208:1
    |
206 |     format_undo_response, get_random_tip, normalize, PANIC_PLAIN_REPLY
207 | )
208 | from utils.parser import parse_expense
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
209 | from utils.categories import categorize_expense
210 | from utils.logger import get_request_id
    |

E402 Module level import not at top of file
   --> utils/production_router.py:209:1
    |
207 | )
208 | from utils.parser import parse_expense
209 | from utils.categories import categorize_expense
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
210 | from utils.logger import get_request_id
    |

E402 Module level import not at top of file
   --> utils/production_router.py:210:1
    |
208 | from utils.parser import parse_expense
209 | from utils.categories import categorize_expense
210 | from utils.logger import get_request_id
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
211 |
212 | # Import performance monitoring
    |

E402 Module level import not at top of file
   --> utils/production_router.py:219:1
    |
218 | # FAQ/Smalltalk guardrail imports
219 | from utils.faq_map import match_faq_or_smalltalk, fallback_default
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
220 |
221 | # Messaging guardrails imports
    |

E402 Module level import not at top of file
   --> utils/production_router.py:222:1
    |
221 | # Messaging guardrails imports
222 | from utils.ttl_store import get_store
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
223 | from utils.ux_copy import (
224 |     SLOW_DOWN, DAILY_LIMIT, REPEAT_HINT, PII_WARNING, BUSY, FALLBACK
    |

E402 Module level import not at top of file
   --> utils/production_router.py:223:1
    |
221 |   # Messaging guardrails imports
222 |   from utils.ttl_store import get_store
223 | / from utils.ux_copy import (
224 | |     SLOW_DOWN, DAILY_LIMIT, REPEAT_HINT, PII_WARNING, BUSY, FALLBACK
225 | | )
    | |_^
226 |
227 |   # Flask imports for webhook blueprint
    |

F401 [*] `utils.ux_copy.BUSY` imported but unused
   --> utils/production_router.py:224:55
    |
222 | from utils.ttl_store import get_store
223 | from utils.ux_copy import (
224 |     SLOW_DOWN, DAILY_LIMIT, REPEAT_HINT, PII_WARNING, BUSY, FALLBACK
    |                                                       ^^^^
225 | )
    |
help: Remove unused import

F401 [*] `utils.ux_copy.FALLBACK` imported but unused
   --> utils/production_router.py:224:61
    |
222 | from utils.ttl_store import get_store
223 | from utils.ux_copy import (
224 |     SLOW_DOWN, DAILY_LIMIT, REPEAT_HINT, PII_WARNING, BUSY, FALLBACK
    |                                                             ^^^^^^^^
225 | )
    |
help: Remove unused import

E402 Module level import not at top of file
   --> utils/production_router.py:228:1
    |
227 | # Flask imports for webhook blueprint
228 | from flask import Blueprint, request, jsonify
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
229 |
230 | # Log which router file each process loads with SHA verification
    |

F401 [*] `flask.Blueprint` imported but unused
   --> utils/production_router.py:228:19
    |
227 | # Flask imports for webhook blueprint
228 | from flask import Blueprint, request, jsonify
    |                   ^^^^^^^^^
229 |
230 | # Log which router file each process loads with SHA verification
    |
help: Remove unused import

F401 [*] `flask.request` imported but unused
   --> utils/production_router.py:228:30
    |
227 | # Flask imports for webhook blueprint
228 | from flask import Blueprint, request, jsonify
    |                              ^^^^^^^
229 |
230 | # Log which router file each process loads with SHA verification
    |
help: Remove unused import

F401 [*] `flask.jsonify` imported but unused
   --> utils/production_router.py:228:39
    |
227 | # Flask imports for webhook blueprint
228 | from flask import Blueprint, request, jsonify
    |                                       ^^^^^^^
229 |
230 | # Log which router file each process loads with SHA verification
    |
help: Remove unused import

E722 Do not use bare `except`
   --> utils/production_router.py:283:5
    |
281 |         from utils.pca_feature_flags import pca_feature_flags
282 |         return pca_feature_flags.should_show_audit_ui()
283 |     except:
    |     ^^^^^^
284 |         return False
    |

F541 [*] f-string without any placeholders
   --> utils/production_router.py:420:29
    |
418 |             from utils.gap_fix_flags import gap_fix_flags
419 |             if not gap_fix_flags.is_multi_expense_enabled():
420 |                 logger.info(f"[MULTI_EXPENSE] Feature disabled, falling back to single expense handling")
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
421 |                 return self._handle_single_expense_logging(text, psid, psid_hash, rid)
    |
help: Remove extraneous `f` prefix

F401 [*] `backend_assistant.add_expense` imported but unused
   --> utils/production_router.py:425:43
    |
423 |             # PHASE 4: Use dedicated multi-item parser instead of generic extractor
424 |             from utils.multi_item_parser import multi_item_parser
425 |             from backend_assistant import add_expense
    |                                           ^^^^^^^^^^^
426 |             from datetime import datetime
    |
help: Remove unused import: `backend_assistant.add_expense`

F401 [*] `datetime.datetime` imported but unused
   --> utils/production_router.py:426:34
    |
424 |             from utils.multi_item_parser import multi_item_parser
425 |             from backend_assistant import add_expense
426 |             from datetime import datetime
    |                                  ^^^^^^^^
427 |             
428 |             # Check if message contains multiple items using dedicated parser
    |
help: Remove unused import: `datetime.datetime`

F841 Local variable `note` is assigned to but never used
   --> utils/production_router.py:460:21
    |
458 |                     amount = float(expense['amount'])
459 |                     category = normalize_category(expense.get('category'))
460 |                     note = expense.get('note', text)
    |                     ^^^^
461 |                     
462 |                     # Create unique ID for each expense
    |
help: Remove assignment to unused variable `note`

F401 [*] `json` imported but unused
   --> utils/production_router.py:503:20
    |
501 |         try:
502 |             import backend_assistant as ba
503 |             import json
    |                    ^^^^
504 |             
505 |             # Use enhanced backend assistant with confidence scoring and clarifier support
    |
help: Remove unused import: `json`

F841 Local variable `status` is assigned to but never used
   --> utils/production_router.py:512:13
    |
510 |             confidence = expense_result.get('confidence', 0.0)
511 |             clarify_data = expense_result.get('clarify')
512 |             status = expense_result.get('status')
    |             ^^^^^^
513 |             
514 |             # Log clarifier decision for observability with safe access
    |
help: Remove assignment to unused variable `status`

F841 Local variable `clarify_response` is assigned to but never used
   --> utils/production_router.py:532:21
    |
530 |                     clarify_draft = safe_dict_get(clarify_data, 'draft', None)
531 |                     
532 |                     clarify_response = {
    |                     ^^^^^^^^^^^^^^^^
533 |                         "type": "clarify",
534 |                         "question": clarify_question,
    |
help: Remove assignment to unused variable `clarify_response`

F541 [*] f-string without any placeholders
   --> utils/production_router.py:786:38
    |
784 |                         return normalize(text_content), "report_feedback", None, None
785 |                     else:
786 |                         logger.debug(f"[ROUTER] Not a valid feedback response, continuing routing")
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
787 |                         
788 |             except Exception as e:
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> utils/production_router.py:990:29
    |
988 | …     elif intent == "INSIGHT" and any(keyword in text.lower() for keyword in ["analysis", "analyze", "advise", "advice", "suggest", …
989 | …         upgrade_reason = "ask_keywords"
990 | …         logger.info(f"[ROUTER] INTENT_UPGRADE: UNKNOWN→INSIGHT reason=ask_keywords")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
991 | …     
992 | …     # Step 3.5: Handle contradiction guard for spending increase requests
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
    --> utils/production_router.py:1111:33
     |
1109 |                 if faq_response:
1110 |                     # Found FAQ match - return FAQ response
1111 |                     logger.info(f"[ROUTER] AI FAQ detection successful")
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1112 |                     self._log_routing_decision(rid, user_hash, "ai_faq", "faq_detected")
1113 |                     self._record_processing_time(time.time() - start_time)
     |
help: Remove extraneous `f` prefix

F401 [*] `datetime.datetime` imported but unused
    --> utils/production_router.py:1555:34
     |
1553 |             from utils.ai_adapter_v2 import production_ai_adapter
1554 |             from utils.pca_flags import pca_flags, PCAMode
1555 |             from datetime import datetime
     |                                  ^^^^^^^^
1556 |             
1557 |             # PHASE 0: Check PCA_MODE and apply conditional flow
     |
help: Remove unused import: `datetime.datetime`

F401 [*] `utils.quick_reply_system.send_custom_quick_replies` imported but unused
    --> utils/production_router.py:2380:50
     |
2379 |             # Add quick replies for follow-up support
2380 |             from utils.quick_reply_system import send_custom_quick_replies
     |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
2381 |             support_replies = [
2382 |                 {"title": "Get help", "payload": "HELP"},
     |
help: Remove unused import: `utils.quick_reply_system.send_custom_quick_replies`

F841 Local variable `support_replies` is assigned to but never used
    --> utils/production_router.py:2381:13
     |
2379 |             # Add quick replies for follow-up support
2380 |             from utils.quick_reply_system import send_custom_quick_replies
2381 |             support_replies = [
     |             ^^^^^^^^^^^^^^^
2382 |                 {"title": "Get help", "payload": "HELP"},
2383 |                 {"title": "Try again", "payload": "TRY_AGAIN"},
     |
help: Remove assignment to unused variable `support_replies`

F401 [*] `datetime.timedelta` imported but unused
  --> utils/production_smoke_tests.py:13:32
   |
11 | import uuid
12 | import hashlib
13 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
14 | from typing import Dict, List, Optional, Any, Tuple, Union
15 | import psycopg2
   |
help: Remove unused import: `datetime.timedelta`

F401 [*] `typing.Tuple` imported but unused
  --> utils/production_smoke_tests.py:14:47
   |
12 | import hashlib
13 | from datetime import datetime, timedelta
14 | from typing import Dict, List, Optional, Any, Tuple, Union
   |                                               ^^^^^
15 | import psycopg2
16 | import os
   |
help: Remove unused import: `typing.Tuple`

F401 [*] `threading` imported but unused
  --> utils/production_smoke_tests.py:17:8
   |
15 | import psycopg2
16 | import os
17 | import threading
   |        ^^^^^^^^^
18 | from dataclasses import dataclass
19 | from enum import Enum
   |
help: Remove unused import: `threading`

F821 Undefined name `ensure_hashed`
  --> utils/report_generator.py:14:21
   |
12 |     try:
13 |         
14 |         user_hash = ensure_hashed(user_identifier)
   |                     ^^^^^^^^^^^^^
15 |         today = date.today()
   |

F821 Undefined name `ensure_hashed`
  --> utils/report_generator.py:63:21
   |
61 |     try:
62 |         
63 |         user_hash = ensure_hashed(user_identifier)
   |                     ^^^^^^^^^^^^^
64 |         today = date.today()
65 |         week_start = today - timedelta(days=6)  # Last 7 days
   |

F541 [*] f-string without any placeholders
   --> utils/report_generator.py:119:31
    |
117 |                     report += f"\n📉 Trend: ৳{trend:.2f} vs yesterday"
118 |                 else:
119 |                     report += f"\n➡️ Trend: Same as yesterday"
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
120 |         
121 |         return report
    |
help: Remove extraneous `f` prefix

F401 [*] `hashlib` imported but unused
  --> utils/routing_policy.py:9:8
   |
 7 | import re
 8 | import time
 9 | import hashlib
   |        ^^^^^^^
10 | import logging
11 | from typing import Dict, Any, Optional, Tuple, List
   |
help: Remove unused import: `hashlib`

F401 [*] `typing.Dict` imported but unused
  --> utils/routing_policy.py:11:20
   |
 9 | import hashlib
10 | import logging
11 | from typing import Dict, Any, Optional, Tuple, List
   |                    ^^^^
12 | from enum import Enum
13 | from datetime import datetime, timezone
   |
help: Remove unused import

F401 [*] `typing.Any` imported but unused
  --> utils/routing_policy.py:11:26
   |
 9 | import hashlib
10 | import logging
11 | from typing import Dict, Any, Optional, Tuple, List
   |                          ^^^
12 | from enum import Enum
13 | from datetime import datetime, timezone
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/routing_policy.py:11:31
   |
 9 | import hashlib
10 | import logging
11 | from typing import Dict, Any, Optional, Tuple, List
   |                               ^^^^^^^^
12 | from enum import Enum
13 | from datetime import datetime, timezone
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/routing_policy.py:11:41
   |
 9 | import hashlib
10 | import logging
11 | from typing import Dict, Any, Optional, Tuple, List
   |                                         ^^^^^
12 | from enum import Enum
13 | from datetime import datetime, timezone
   |
help: Remove unused import

F401 [*] `datetime.timezone` imported but unused
  --> utils/routing_policy.py:13:32
   |
11 | from typing import Dict, Any, Optional, Tuple, List
12 | from enum import Enum
13 | from datetime import datetime, timezone
   |                                ^^^^^^^^
14 | from dataclasses import dataclass
   |
help: Remove unused import: `datetime.timezone`

F401 [*] `models.Expense` imported but unused
   --> utils/routing_policy.py:235:32
    |
233 |         try:
234 |             from db_base import db
235 |             from models import Expense
    |                                ^^^^^^^
236 |             
237 |             # Strong fingerprint: ID + amount + category + merchant + timestamp
    |
help: Remove unused import: `models.Expense`

F401 [*] `sqlalchemy.schema.CreateTable` imported but unused
  --> utils/safe_db_init.py:10:31
   |
 8 | from sqlalchemy import text, inspect
 9 | from sqlalchemy.exc import ProgrammingError
10 | from sqlalchemy.schema import CreateTable
   |                               ^^^^^^^^^^^
11 | from db_base import db
   |
help: Remove unused import: `sqlalchemy.schema.CreateTable`

F841 Local variable `existing_schema` is assigned to but never used
   --> utils/safe_db_init.py:153:5
    |
152 |     # Check existing schema first
153 |     existing_schema = check_existing_schema()
    |     ^^^^^^^^^^^^^^^
154 |     
155 |     # Step 1: Create tables safely
    |
help: Remove assignment to unused variable `existing_schema`

F841 Local variable `existing_schema` is assigned to but never used
   --> utils/safe_db_init.py:178:5
    |
177 |     # Check existing schema first
178 |     existing_schema = check_existing_schema()
    |     ^^^^^^^^^^^^^^^
179 |     
180 |     # Check if critical tables exist (read-only)
    |
help: Remove assignment to unused variable `existing_schema`

F401 [*] `os` imported but unused
 --> utils/scheduler.py:2:8
  |
1 | """Task scheduling for automated reports and security cleanup"""
2 | import os
  |        ^^
3 | import logging
4 | from datetime import datetime
  |
help: Remove unused import: `os`

F401 [*] `datetime.datetime` imported but unused
 --> utils/scheduler.py:4:22
  |
2 | import os
3 | import logging
4 | from datetime import datetime
  |                      ^^^^^^^^
5 | from apscheduler.schedulers.background import BackgroundScheduler
6 | from apscheduler.triggers.cron import CronTrigger
  |
help: Remove unused import: `datetime.datetime`

F401 [*] `sqlalchemy.inspect` imported but unused
 --> utils/schema_validator.py:5:24
  |
3 | """
4 | import logging
5 | from sqlalchemy import inspect, text
  |                        ^^^^^^^
6 | from db_base import db
  |
help: Remove unused import: `sqlalchemy.inspect`

F541 [*] f-string without any placeholders
  --> utils/security.py:20:22
   |
18 |         hashed_id = hash_object.hexdigest()
19 |         
20 |         logger.debug(f"User ID hashed successfully")
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
21 |         return hashed_id
   |
help: Remove extraneous `f` prefix

F401 [*] `datetime.timedelta` imported but unused
  --> utils/session.py:11:32
   |
 9 | import logging
10 | from typing import Dict, Any, Optional
11 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
12 |
13 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `datetime.timedelta`

F401 [*] `sqlalchemy.exc.SQLAlchemyError` imported but unused
  --> utils/single_writer_guard.py:9:28
   |
 7 | import contextvars
 8 | from sqlalchemy import event
 9 | from sqlalchemy.exc import SQLAlchemyError
   |                            ^^^^^^^^^^^^^^^
10 |
11 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `sqlalchemy.exc.SQLAlchemyError`

F401 [*] `json` imported but unused
  --> utils/single_writer_metrics.py:10:8
   |
 8 | import time
 9 | import logging
10 | import json
   |        ^^^^
11 | from datetime import datetime, timedelta
12 | from typing import Dict, List, Optional, Any
   |
help: Remove unused import: `json`

F401 [*] `datetime.timedelta` imported but unused
  --> utils/single_writer_metrics.py:11:32
   |
 9 | import logging
10 | import json
11 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
12 | from typing import Dict, List, Optional, Any
13 | from dataclasses import dataclass, asdict
   |
help: Remove unused import: `datetime.timedelta`

F401 [*] `typing.Optional` imported but unused
  --> utils/single_writer_metrics.py:12:32
   |
10 | import json
11 | from datetime import datetime, timedelta
12 | from typing import Dict, List, Optional, Any
   |                                ^^^^^^^^
13 | from dataclasses import dataclass, asdict
14 | from enum import Enum
   |
help: Remove unused import: `typing.Optional`

F841 Local variable `last_1h` is assigned to but never used
   --> utils/single_writer_metrics.py:179:13
    |
177 |             now = time.time()
178 |             last_24h = now - (24 * 60 * 60)
179 |             last_1h = now - (60 * 60)
    |             ^^^^^^^
180 |             
181 |             # Recent metrics
    |
help: Remove assignment to unused variable `last_1h`

F401 [*] `typing.Optional` imported but unused
  --> utils/single_writer_monitor.py:11:31
   |
 9 | import time
10 | import logging
11 | from typing import Dict, Any, Optional
   |                               ^^^^^^^^
12 | import psycopg2
13 | from urllib.parse import urlparse
   |
help: Remove unused import: `typing.Optional`

F401 [*] `urllib.parse.urlparse` imported but unused
  --> utils/single_writer_monitor.py:13:26
   |
11 | from typing import Dict, Any, Optional
12 | import psycopg2
13 | from urllib.parse import urlparse
   |                          ^^^^^^^^
14 |
15 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `urllib.parse.urlparse`

F841 Local variable `result` is assigned to but never used
  --> utils/single_writer_monitor.py:89:13
   |
87 |             # Basic connectivity test
88 |             cur.execute("SELECT 1")
89 |             result = cur.fetchone()
   |             ^^^^^^
90 |             
91 |             # Check if tables exist
   |
help: Remove assignment to unused variable `result`

F401 [*] `time` imported but unused
  --> utils/slo_monitoring.py:12:8
   |
10 | """
11 |
12 | import time
   |        ^^^^
13 | import json
14 | import logging
   |
help: Remove unused import: `time`

F401 [*] `json` imported but unused
  --> utils/slo_monitoring.py:13:8
   |
12 | import time
13 | import json
   |        ^^^^
14 | import logging
15 | from datetime import datetime, timedelta
   |
help: Remove unused import: `json`

F401 [*] `typing.List` imported but unused
  --> utils/slo_monitoring.py:16:26
   |
14 | import logging
15 | from datetime import datetime, timedelta
16 | from typing import Dict, List, Any, Optional
   |                          ^^^^
17 | from dataclasses import dataclass, asdict
18 | from enum import Enum
   |
help: Remove unused import: `typing.List`

F841 Local variable `bucket_size` is assigned to but never used
   --> utils/slo_monitoring.py:346:17
    |
345 |                 # Split into time buckets for trend analysis
346 |                 bucket_size = timedelta(hours=1)  # 1-hour buckets
    |                 ^^^^^^^^^^^
347 |                 buckets = defaultdict(list)
    |
help: Remove assignment to unused variable `bucket_size`

F401 [*] `typing.Optional` imported but unused
  --> utils/smart_reminders.py:8:20
   |
 6 | import logging
 7 | from datetime import datetime, timedelta
 8 | from typing import Optional, List, Dict, Any
   |                    ^^^^^^^^
 9 | from db_base import db
10 | from models import User
   |
help: Remove unused import

F401 [*] `typing.List` imported but unused
  --> utils/smart_reminders.py:8:30
   |
 6 | import logging
 7 | from datetime import datetime, timedelta
 8 | from typing import Optional, List, Dict, Any
   |                              ^^^^
 9 | from db_base import db
10 | from models import User
   |
help: Remove unused import

F401 [*] `typing.Any` imported but unused
  --> utils/smart_reminders.py:8:42
   |
 6 | import logging
 7 | from datetime import datetime, timedelta
 8 | from typing import Optional, List, Dict, Any
   |                                          ^^^
 9 | from db_base import db
10 | from models import User
   |
help: Remove unused import

F401 [*] `utils.facebook_handler.send_facebook_message` imported but unused
  --> utils/smart_reminders.py:11:36
   |
 9 | from db_base import db
10 | from models import User
11 | from utils.facebook_handler import send_facebook_message
   |                                    ^^^^^^^^^^^^^^^^^^^^^
12 |
13 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `utils.facebook_handler.send_facebook_message`

F401 [*] `traceback` imported but unused
  --> utils/structured_logger.py:12:8
   |
10 | from datetime import datetime
11 | from flask import request, g, has_request_context
12 | import traceback
   |        ^^^^^^^^^
13 | import sys
   |
help: Remove unused import: `traceback`

F401 [*] `sys` imported but unused
  --> utils/structured_logger.py:13:8
   |
11 | from flask import request, g, has_request_context
12 | import traceback
13 | import sys
   |        ^^^
14 |
15 | class StructuredLogger:
   |
help: Remove unused import: `sys`

F401 [*] `json` imported but unused
 --> utils/telemetry.py:6:8
  |
4 | """
5 |
6 | import json
  |        ^^^^
7 | import logging
8 | from datetime import datetime, timedelta, timezone
  |
help: Remove unused import: `json`

E402 Module level import not at top of file
  --> utils/textutil.py:14:1
   |
13 | # Configuration from centralized config and environment
14 | from config import MSG_MAX_CHARS
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
15 | SAY_ENABLED = os.environ.get("SAY_ENABLED", "true").lower() == "true"
16 | EMOJI_ENABLED = os.environ.get("EMOJI_ENABLED", "true").lower() == "true"
   |

F401 [*] `signal` imported but unused
 --> utils/timebox.py:6:8
  |
4 | """
5 | import time
6 | import signal
  |        ^^^^^^
7 | import logging
8 | from concurrent.futures import ThreadPoolExecutor, TimeoutError as Tmo
  |
help: Remove unused import: `signal`

F401 [*] `datetime.timedelta` imported but unused
 --> utils/token_manager.py:6:32
  |
4 | import time
5 | import requests
6 | from datetime import datetime, timedelta
  |                                ^^^^^^^^^
7 | from typing import Dict, Optional, Tuple
  |
help: Remove unused import: `datetime.timedelta`

F541 [*] f-string without any placeholders
  --> utils/token_manager.py:33:19
   |
32 |         try:
33 |             url = f"https://graph.facebook.com/v17.0/me"
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
34 |             params = {
35 |                 'fields': 'id,name',
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> utils/token_manager.py:45:29
   |
44 |                 # Get token expiration info using debug_token
45 |                 debug_url = f"https://graph.facebook.com/v17.0/debug_token"
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
46 |                 debug_params = {
47 |                     'input_token': self.page_access_token,
   |
help: Remove extraneous `f` prefix

F401 [*] `os` imported but unused
 --> utils/token_refresh_reminder.py:3:8
  |
1 | """Token refresh reminder and monitoring system"""
2 | import logging
3 | import os
  |        ^^
4 | from datetime import datetime, timedelta
5 | from typing import Dict, List, Optional
  |
help: Remove unused import: `os`

F401 [*] `typing.Optional` imported but unused
 --> utils/token_refresh_reminder.py:5:32
  |
3 | import os
4 | from datetime import datetime, timedelta
5 | from typing import Dict, List, Optional
  |                                ^^^^^^^^
6 | from .token_manager import token_manager
  |
help: Remove unused import: `typing.Optional`

F401 [*] `json` imported but unused
 --> utils/uat_executor.py:7:8
  |
6 | import logging
7 | import json
  |        ^^^^
8 | from typing import Dict, Any
9 | from datetime import datetime
  |
help: Remove unused import: `json`

F401 [*] `typing.List` imported but unused
 --> utils/uat_system.py:6:41
  |
4 | """
5 | import logging
6 | from typing import Dict, Any, Optional, List
  |                                         ^^^^
7 | from datetime import datetime
8 | from db_base import db
  |
help: Remove unused import: `typing.List`

F401 [*] `db_base.db` imported but unused
  --> utils/uat_system.py:8:21
   |
 6 | from typing import Dict, Any, Optional, List
 7 | from datetime import datetime
 8 | from db_base import db
   |                     ^^
 9 | from models import User
10 | from utils.security import hash_psid
   |
help: Remove unused import: `db_base.db`

F401 [*] `models.User` imported but unused
  --> utils/uat_system.py:9:20
   |
 7 | from datetime import datetime
 8 | from db_base import db
 9 | from models import User
   |                    ^^^^
10 | from utils.security import hash_psid
   |
help: Remove unused import: `models.User`

F401 [*] `time` imported but unused
  --> utils/unbreakable_invariants.py:10:8
   |
 9 | import logging
10 | import time
   |        ^^^^
11 | import threading
12 | from typing import Dict, Any, Optional
   |
help: Remove unused import: `time`

F401 [*] `typing.Optional` imported but unused
  --> utils/unbreakable_invariants.py:12:31
   |
10 | import time
11 | import threading
12 | from typing import Dict, Any, Optional
   |                               ^^^^^^^^
13 | from datetime import datetime, timedelta
14 | import psycopg2
   |
help: Remove unused import: `typing.Optional`

F401 [*] `datetime.timedelta` imported but unused
  --> utils/unbreakable_invariants.py:13:32
   |
11 | import threading
12 | from typing import Dict, Any, Optional
13 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
14 | import psycopg2
15 | import os
   |
help: Remove unused import: `datetime.timedelta`

F401 [*] `hashlib` imported but unused
  --> utils/uniqueness_handler.py:8:8
   |
 6 | import os
 7 | import logging
 8 | import hashlib
   |        ^^^^^^^
 9 | from typing import Optional, Dict, Any, Tuple
10 | from datetime import datetime, timedelta
   |
help: Remove unused import: `hashlib`

F401 [*] `typing.Dict` imported but unused
  --> utils/uniqueness_handler.py:9:30
   |
 7 | import logging
 8 | import hashlib
 9 | from typing import Optional, Dict, Any, Tuple
   |                              ^^^^
10 | from datetime import datetime, timedelta
11 | from utils.routing_policy import DataVersionManager
   |
help: Remove unused import

F401 [*] `typing.Any` imported but unused
  --> utils/uniqueness_handler.py:9:36
   |
 7 | import logging
 8 | import hashlib
 9 | from typing import Optional, Dict, Any, Tuple
   |                                    ^^^
10 | from datetime import datetime, timedelta
11 | from utils.routing_policy import DataVersionManager
   |
help: Remove unused import

F401 [*] `datetime.timedelta` imported but unused
  --> utils/uniqueness_handler.py:10:32
   |
 8 | import hashlib
 9 | from typing import Optional, Dict, Any, Tuple
10 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
11 | from utils.routing_policy import DataVersionManager
   |
help: Remove unused import: `datetime.timedelta`

F841 Local variable `base_bn` is assigned to but never used
  --> utils/uniqueness_handler.py:71:9
   |
69 | …     # Base message (bilingual)
70 | …     base_en = "No changes since your last check. Add a new expense to refresh your analysis."
71 | …     base_bn = "শেষবারের পর থেকে নতুন পরিবর্তন নেই। নতুন খরচ যোগ করলে বিশ্লেষণ আপডেট হবে।"
   |       ^^^^^^^
72 | …     
73 | …     # Try to add micro-insight
   |
help: Remove assignment to unused variable `base_bn`

E722 Do not use bare `except`
   --> utils/uniqueness_handler.py:133:9
    |
131 |             cache_key = f"data_version:{user_id}"
132 |             return get_from_cache(cache_key)
133 |         except:
    |         ^^^^^^
134 |             return None
    |

F401 [*] `typing.Optional` imported but unused
 --> utils/user_id_normalizer.py:5:31
  |
3 | """
4 | import logging
5 | from typing import Dict, Any, Optional
  |                               ^^^^^^^^
6 |
7 | logger = logging.getLogger(__name__)
  |
help: Remove unused import: `typing.Optional`

F541 [*] f-string without any placeholders
  --> utils/user_id_normalizer.py:30:26
   |
28 |         if 'user_id_hash' not in normalized and 'user_id' in normalized:
29 |             normalized['user_id_hash'] = normalized['user_id']
30 |             logger.debug(f"Normalized user_id to user_id_hash for expense")
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
31 |         
32 |         # Ensure both fields are consistent (backwards compatibility)
   |
help: Remove extraneous `f` prefix

F401 [*] `time` imported but unused
 --> utils/ux_components.py:7:8
  |
6 | import re
7 | import time
  |        ^^^^
8 | import logging
9 | from typing import Dict, List, Optional, Tuple, Any
  |
help: Remove unused import: `time`

F401 [*] `typing.List` imported but unused
  --> utils/ux_components.py:9:26
   |
 7 | import time
 8 | import logging
 9 | from typing import Dict, List, Optional, Tuple, Any
   |                          ^^^^
10 | from collections import Counter
11 | from config import MSG_MAX_CHARS
   |
help: Remove unused import: `typing.List`

F401 [*] `typing.Union` imported but unused
 --> utils/validators.py:8:47
  |
6 | import re
7 | import logging
8 | from typing import Dict, Any, List, Optional, Union
  |                                               ^^^^^
9 | from decimal import Decimal, InvalidOperation
  |
help: Remove unused import: `typing.Union`

F401 [*] `threading` imported but unused
  --> utils/webhook_processor.py:8:8
   |
 6 | import time
 7 | import uuid
 8 | import threading
   |        ^^^^^^^^^
 9 | from concurrent.futures import ThreadPoolExecutor
10 | from datetime import datetime, timedelta
   |
help: Remove unused import: `threading`

F401 [*] `datetime.datetime` imported but unused
  --> utils/webhook_processor.py:10:22
   |
 8 | import threading
 9 | from concurrent.futures import ThreadPoolExecutor
10 | from datetime import datetime, timedelta
   |                      ^^^^^^^^
11 | from typing import Dict, Any, Optional
12 | from .logger import log_webhook_success, get_request_id
   |
help: Remove unused import

F401 [*] `datetime.timedelta` imported but unused
  --> utils/webhook_processor.py:10:32
   |
 8 | import threading
 9 | from concurrent.futures import ThreadPoolExecutor
10 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
11 | from typing import Dict, Any, Optional
12 | from .logger import log_webhook_success, get_request_id
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/webhook_processor.py:11:31
   |
 9 | from concurrent.futures import ThreadPoolExecutor
10 | from datetime import datetime, timedelta
11 | from typing import Dict, Any, Optional
   |                               ^^^^^^^^
12 | from .logger import log_webhook_success, get_request_id
   |
help: Remove unused import: `typing.Optional`

F401 [*] `.logger.get_request_id` imported but unused
  --> utils/webhook_processor.py:12:42
   |
10 | from datetime import datetime, timedelta
11 | from typing import Dict, Any, Optional
12 | from .logger import log_webhook_success, get_request_id
   |                                          ^^^^^^^^^^^^^^
13 |
14 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `.logger.get_request_id`

F841 Local variable `user_hash` is assigned to but never used
  --> utils/webhook_processor.py:85:9
   |
84 |         # Compute hash once at intake
85 |         user_hash = psid_hash(psid)
   |         ^^^^^^^^^
86 |         
87 |         for messaging in entry.get('messaging', []):
   |
help: Remove assignment to unused variable `user_hash`

Found 1725 errors.
[*] 1255 fixable with the `--fix` option (302 hidden fixes can be enabled with the `--unsafe-fixes` option).
