F541 [*] f-string without any placeholders
  --> FINAL_PRODUCTION_TEST.py:50:27
   |
49 |                 if real_data_found and "start logging" not in response.lower():
50 |                     print(f"   ✅ SUCCESS: Real data found")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
51 |                 else:
52 |                     print(f"   ❌ FAILED: No real data or fallback response")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> FINAL_PRODUCTION_TEST.py:52:27
   |
50 |                     print(f"   ✅ SUCCESS: Real data found")
51 |                 else:
52 |                     print(f"   ❌ FAILED: No real data or fallback response")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
53 |                     
54 |             except Exception as e:
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> FINAL_PRODUCTION_TEST.py:57:15
   |
55 |                 print(f"   ❌ ERROR: {e}")
56 |         
57 |         print(f"\n🎯 PRODUCTION STATUS: READY FOR USER TESTING")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
58 |
59 | if __name__ == "__main__":
   |
help: Remove extraneous `f` prefix

F401 [*] `typing.Dict` imported but unused
  --> ai/ai_reply_optimized.py:8:20
   |
 6 | import json
 7 | import logging
 8 | from typing import Dict, Any
   |                    ^^^^
 9 | from utils.context_packet import build_context
10 | from ai_adapter_gemini import generate_with_schema
   |
help: Remove unused import

F401 [*] `typing.Any` imported but unused
  --> ai/ai_reply_optimized.py:8:26
   |
 6 | import json
 7 | import logging
 8 | from typing import Dict, Any
   |                          ^^^
 9 | from utils.context_packet import build_context
10 | from ai_adapter_gemini import generate_with_schema
   |
help: Remove unused import

F401 [*] `typing.Dict` imported but unused
 --> ai/expense_parse.py:7:20
  |
6 | import logging
7 | from typing import Dict, Any, Optional
  |                    ^^^^
8 |
9 | logger = logging.getLogger(__name__)
  |
help: Remove unused import

F401 [*] `typing.Any` imported but unused
 --> ai/expense_parse.py:7:26
  |
6 | import logging
7 | from typing import Dict, Any, Optional
  |                          ^^^
8 |
9 | logger = logging.getLogger(__name__)
  |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
 --> ai/expense_parse.py:7:31
  |
6 | import logging
7 | from typing import Dict, Any, Optional
  |                               ^^^^^^^^
8 |
9 | logger = logging.getLogger(__name__)
  |
help: Remove unused import

E701 Multiple statements on one line (colon)
  --> ai/expense_parse.py:36:21
   |
35 |     # Unwrap callables
36 |     if callable(amt): amt = amt()
   |                     ^
37 |     if callable(cat): cat = cat()
38 |     if callable(note): note = note()
   |

E701 Multiple statements on one line (colon)
  --> ai/expense_parse.py:37:21
   |
35 |     # Unwrap callables
36 |     if callable(amt): amt = amt()
37 |     if callable(cat): cat = cat()
   |                     ^
38 |     if callable(note): note = note()
   |

E701 Multiple statements on one line (colon)
  --> ai/expense_parse.py:38:22
   |
36 |     if callable(amt): amt = amt()
37 |     if callable(cat): cat = cat()
38 |     if callable(note): note = note()
   |                      ^
39 |     
40 |     # Strict validation
   |

F401 [*] `flask.redirect` imported but unused
 --> app.py:4:70
  |
2 | import logging
3 | import sys
4 | from flask import Flask, request, jsonify, render_template, session, redirect, url_for, make_response, g
  |                                                                      ^^^^^^^^
5 | from flask_sqlalchemy import SQLAlchemy
6 | from sqlalchemy.orm import DeclarativeBase
  |
help: Remove unused import

F401 [*] `flask.url_for` imported but unused
 --> app.py:4:80
  |
2 | import logging
3 | import sys
4 | from flask import Flask, request, jsonify, render_template, session, redirect, url_for, make_response, g
  |                                                                                ^^^^^^^
5 | from flask_sqlalchemy import SQLAlchemy
6 | from sqlalchemy.orm import DeclarativeBase
  |
help: Remove unused import

F401 [*] `json` imported but unused
  --> app.py:9:8
   |
 7 | from werkzeug.middleware.proxy_fix import ProxyFix
 8 | from functools import wraps
 9 | import json
   |        ^^^^
10 | import base64
11 | from datetime import datetime, timedelta, timezone
   |
help: Remove unused import: `json`

F401 [*] `base64` imported but unused
  --> app.py:10:8
   |
 8 | from functools import wraps
 9 | import json
10 | import base64
   |        ^^^^^^
11 | from datetime import datetime, timedelta, timezone
   |
help: Remove unused import: `base64`

F401 [*] `models.User` imported but unused
   --> app.py:267:37
    |
266 |     try:
267 |         from models import Expense, User, MonthlySummary
    |                                     ^^^^
268 |         from datetime import datetime
269 |         from sqlalchemy import func, extract
    |
help: Remove unused import

F401 [*] `models.MonthlySummary` imported but unused
   --> app.py:267:43
    |
266 |     try:
267 |         from models import Expense, User, MonthlySummary
    |                                           ^^^^^^^^^^^^^^
268 |         from datetime import datetime
269 |         from sqlalchemy import func, extract
    |
help: Remove unused import

F541 [*] f-string without any placeholders
   --> app.py:328:27
    |
326 |         if not token_healthy:
327 |             health_status = "degraded"
328 |             issues.append(f"token_issue")
    |                           ^^^^^^^^^^^^^^
329 |     except Exception as e:
330 |         logger.error(f"Token health check failed: {str(e)}")
    |
help: Remove extraneous `f` prefix

F401 [*] `utils.logger.request_logger` imported but unused
   --> app.py:389:30
    |
387 | def webhook_messenger() -> str | tuple[str, int]:
388 |     """Facebook Messenger webhook with structured request logging"""
389 |     from utils.logger import request_logger
    |                              ^^^^^^^^^^^^^^
390 |     
391 |     if request.method == "GET":
    |
help: Remove unused import: `utils.logger.request_logger`

F841 Local variable `production_router` is assigned to but never used
   --> app.py:420:13
    |
418 |             from utils.production_router import production_router
419 |         except ImportError:
420 |             production_router = None
    |             ^^^^^^^^^^^^^^^^^
421 |         
422 |         # Get raw payload and signature
    |
help: Remove assignment to unused variable `production_router`

F401 [*] `json` imported but unused
   --> app.py:568:16
    |
566 |         from utils.ai_adapter_v2 import production_ai_adapter
567 |         from datetime import datetime, timedelta
568 |         import json
    |                ^^^^
569 |         
570 |         # Find user by PSID hash
    |
help: Remove unused import: `json`

E402 Module level import not at top of file
   --> app.py:945:1
    |
944 | # Register streamlined admin operations
945 | from admin_ops import admin_ops
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
946 | app.register_blueprint(admin_ops)
    |

F401 [*] `time` imported but unused
  --> app/admin_ops.py:8:8
   |
 6 | from functools import wraps
 7 | import os
 8 | import time
   |        ^^^^
 9 |
10 | from flags import FLAGS, toggle_ai
   |
help: Remove unused import: `time`

F401 [*] `utils.production_router.production_router` imported but unused
  --> app/admin_ops.py:11:37
   |
10 | from flags import FLAGS, toggle_ai
11 | from utils.production_router import production_router
   |                                     ^^^^^^^^^^^^^^^^^
12 | from utils.ai_adapter_v2 import production_ai_adapter
   |
help: Remove unused import: `utils.production_router.production_router`

F401 [*] `utils.production_router.get_ai_stats` imported but unused
  --> app/admin_ops.py:50:70
   |
48 | def ai_status():
49 |     """Get AI system status"""
50 |     from utils.production_router import production_router as router, get_ai_stats
   |                                                                      ^^^^^^^^^^^^
51 |     return jsonify({
52 |         "ai_enabled": FLAGS.ai_enabled,
   |
help: Remove unused import: `utils.production_router.get_ai_stats`

E722 Do not use bare `except`
  --> config.py:13:5
   |
11 |     try: 
12 |         return int(os.getenv(k, str(d)))
13 |     except: 
   |     ^^^^^^
14 |         return d
   |

E401 [*] Multiple imports on one line
 --> fb_client.py:1:1
  |
1 | import os, re, requests
  | ^^^^^^^^^^^^^^^^^^^^^^^
2 |
3 | PAGE_TOKEN = os.environ["FACEBOOK_PAGE_ACCESS_TOKEN"]
  |
help: Split imports

F401 [*] `time` imported but unused
 --> finbrain/ops/perf.py:5:8
  |
3 | """
4 |
5 | import time
  |        ^^^^
6 | from typing import Optional, List
  |
help: Remove unused import: `time`

F401 [*] `typing.List` imported but unused
 --> handlers/logger.py:4:26
  |
2 | Expense logger handler: Logs expenses to database
3 | """
4 | from typing import Dict, List
  |                          ^^^^
5 | import logging
6 | from utils.parser import extract_expenses
  |
help: Remove unused import: `typing.List`

F401 [*] `utils.user_manager.resolve_user_id` imported but unused
 --> handlers/logger.py:7:51
  |
5 | import logging
6 | from utils.parser import extract_expenses
7 | from utils.user_manager import resolve_user_id as ensure_hashed
  |                                                   ^^^^^^^^^^^^^
8 |
9 | logger = logging.getLogger(__name__)
  |
help: Remove unused import: `utils.user_manager.resolve_user_id`

F401 [*] `datetime.time` imported but unused
 --> models.py:2:38
  |
1 | from app import db
2 | from datetime import datetime, date, time
  |                                      ^^^^
3 | from sqlalchemy import JSON
  |
help: Remove unused import: `datetime.time`

F811 Redefinition of unused `time` from line 2
  --> models.py:16:5
   |
14 |     currency = db.Column(db.String(10), default='৳')  # Currency symbol
15 |     date = db.Column(db.Date, nullable=False, default=date.today)  # Expense date
16 |     time = db.Column(db.Time, nullable=False, default=lambda: datetime.now().time())  # Expense time
   |     ^^^^
17 |     month = db.Column(db.String(7), nullable=False)  # Format: YYYY-MM
18 |     unique_id = db.Column(db.Text, nullable=False)  # Unique identifier per expense
   |
help: Remove definition: `time`

E401 [*] Multiple imports on one line
 --> prod_probe.py:2:1
  |
1 | # prod_probe.py
2 | import os, hmac, hashlib, json, time, requests
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3 |
4 | PROD_URL        = os.environ.get("PROD_URL", "https://<your-deploy-domain>/webhook/messenger")
  |
help: Split imports

E701 Multiple statements on one line (colon)
  --> prod_probe.py:46:15
   |
45 | print("PROD URL:", PROD_URL)
46 | for t in tests: send(t)
   |               ^
   |

F401 [*] `app.db` imported but unused
 --> routes/ops_quickscan.py:7:17
  |
5 | from utils.crypto import ensure_hashed
6 | from models import Expense, User
7 | from app import db
  |                 ^^
8 |
9 | bp = Blueprint("quickscan", __name__)
  |
help: Remove unused import: `app.db`

F541 [*] f-string without any placeholders
  --> scripts/check_db_indexes.py:44:27
   |
42 |                 print(f"  - {idx_name}")
43 |                 if "user_id" in idx_def:
44 |                     print(f"    ✓ Has user_id index")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
45 |         
46 |         # Create missing indexes
   |
help: Remove extraneous `f` prefix

F401 [*] `time` imported but unused
  --> scripts/comprehensive_uat.py:8:8
   |
 6 | import sys
 7 | import os
 8 | import time
   |        ^^^^
 9 | import json
10 | import requests
   |
help: Remove unused import: `time`

E401 [*] Multiple imports on one line
 --> scripts/finbrain_diagnose.py:2:1
  |
1 | # finbrain_diagnose.py
2 | import os, time, json, requests
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3 |
4 | BASE = os.environ.get("BASE_URL", "http://127.0.0.1:5000").rstrip("/")
  |
help: Split imports

E701 Multiple statements on one line (colon)
  --> scripts/finbrain_diagnose.py:52:17
   |
50 | try:
51 |     ai_flag = (body2 or {}).get("ai_status") or (body2 or {}).get("AI_ENABLED")
52 | except Exception: pass
   |                 ^
53 | print("GET /ops/telemetry ->", code2, "| AI:", ai_flag, "| Extra:", clip(body2))
   |

F401 [*] `sys` imported but unused
 --> scripts/probe_imports.py:5:8
  |
3 | Runtime import probe to detect circular dependencies and broken imports
4 | """
5 | import sys
  |        ^^^
6 | import traceback
  |
help: Remove unused import: `sys`

F401 [*] `json` imported but unused
 --> scripts/security_audit.py:8:8
  |
6 | import os
7 | import requests
8 | import json
  |        ^^^^
9 | import time
  |
help: Remove unused import: `json`

E722 Do not use bare `except`
  --> scripts/security_audit.py:91:17
   |
89 |                             hardcoded_found = True
90 |                             break
91 |                 except:
   |                 ^^^^^^
92 |                     continue
   |

F541 [*] f-string without any placeholders
  --> scripts/system_health_report.py:87:19
   |
85 |         if resp.status_code == 200:
86 |             print(f"   Dashboard Load: {db_query_time:.2f}ms")
87 |             print(f"   Connection: ✅ HEALTHY")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
88 |             
89 |             # Check if dashboard has data
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> scripts/system_health_report.py:91:23
   |
89 |             # Check if dashboard has data
90 |             if "expense" in resp.text.lower() or "total" in resp.text.lower():
91 |                 print(f"   Data Access: ✅ ACTIVE")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
92 |             else:
93 |                 print(f"   Data Access: ⚠️ NO DATA")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> scripts/system_health_report.py:93:23
   |
91 |                 print(f"   Data Access: ✅ ACTIVE")
92 |             else:
93 |                 print(f"   Data Access: ⚠️ NO DATA")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
94 |         else:
95 |             print(f"   ❌ Database query failed: {resp.status_code}")
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/system_health_report.py:104:19
    |
102 |         resp = requests.get(f"{BASE_URL}/ops", auth=AUTH, timeout=10)
103 |         if resp.status_code == 200:
104 |             print(f"   Token Monitoring: ✅ ACTIVE")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
105 |             print(f"   Ops Dashboard: ✅ ACCESSIBLE")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/system_health_report.py:105:19
    |
103 |         if resp.status_code == 200:
104 |             print(f"   Token Monitoring: ✅ ACTIVE")
105 |             print(f"   Ops Dashboard: ✅ ACCESSIBLE")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
106 |             
107 |             # Check webhook security
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/system_health_report.py:111:23
    |
109 |                                        json={"test": "security"}, timeout=5)
110 |             if webhook_resp.status_code in [400, 401, 403]:
111 |                 print(f"   Webhook Security: ✅ ENFORCED")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
112 |             else:
113 |                 print(f"   Webhook Security: ⚠️ CHECK NEEDED")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/system_health_report.py:113:23
    |
111 |                 print(f"   Webhook Security: ✅ ENFORCED")
112 |             else:
113 |                 print(f"   Webhook Security: ⚠️ CHECK NEEDED")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
114 |         else:
115 |             print(f"   ❌ Facebook ops failed: {resp.status_code}")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/system_health_report.py:130:19
    |
128 |             ai_limiter = telemetry.get("ai_limiter", {})
129 |             config = ai_limiter.get("config", {})
130 |             print(f"   AI Rate Limiting: ✅ ACTIVE")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
131 |             print(f"   Per-user Limit: {config.get('AI_MAX_CALLS_PER_MIN_PER_PSID', 0)}/min")
132 |             print(f"   Global Limit: {config.get('AI_MAX_CALLS_PER_MIN', 0)}/min")
    |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
   --> scripts/system_health_report.py:258:11
    |
256 |         json.dump(report_data, f, indent=2)
257 |     
258 |     print(f"\nDetailed health data saved to system_health_report.json")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
259 |     
260 |     return health_percentage >= 75
    |
help: Remove extraneous `f` prefix

F401 [*] `utils.crypto.ensure_hashed` imported but unused
  --> scripts/uat_ensure_hashed.py:11:26
   |
10 | from app import app
11 | from utils.crypto import ensure_hashed
   |                          ^^^^^^^^^^^^^
12 | from utils.security import hash_psid
13 | from utils.db import record_expense, get_user_spending_summary
   |
help: Remove unused import: `utils.crypto.ensure_hashed`

F541 [*] f-string without any placeholders
  --> scripts/uat_ensure_hashed.py:68:23
   |
67 |             if success:
68 |                 print(f"✓ Both raw PSID and hash parameter produce identical results")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
69 |                 print(f"✓ Total expenses: ${summary_raw.get('total', 0)}")
70 |                 print(f"✓ Transaction count: {summary_raw.get('total_transactions', 0)}")
   |
help: Remove extraneous `f` prefix

F401 [*] `os` imported but unused
 --> start_server.py:6:8
  |
4 | Starts gunicorn without the --reload flag to prevent WINCH signal loops
5 | """
6 | import os
  |        ^^
7 | import sys
8 | import subprocess
  |
help: Remove unused import: `os`

F401 [*] `os` imported but unused
 --> tests/test_router_canonicality.py:6:8
  |
4 | """
5 |
6 | import os
  |        ^^
7 | import re
8 | from pathlib import Path
  |
help: Remove unused import: `os`

F401 [*] `typing.Optional` imported but unused
  --> utils/ai_adapter_v2.py:10:31
   |
 8 | import logging
 9 | import requests
10 | from typing import Dict, Any, Optional
   |                               ^^^^^^^^
11 | from datetime import datetime
   |
help: Remove unused import: `typing.Optional`

F401 [*] `datetime.datetime` imported but unused
  --> utils/ai_adapter_v2.py:11:22
   |
 9 | import requests
10 | from typing import Dict, Any, Optional
11 | from datetime import datetime
   |                      ^^^^^^^^
12 |
13 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `datetime.datetime`

E722 Do not use bare `except`
   --> utils/ai_adapter_v2.py:244:29
    |
242 | …                         else:
243 | …                             raise json_error
244 | …                     except:
    |                       ^^^^^^
245 | …                         # If all repair attempts fail, create minimal valid response
246 | …                         ai_response = {
    |

F401 [*] `typing.Tuple` imported but unused
  --> utils/ai_context_adapter.py:8:41
   |
 6 | import json
 7 | import logging
 8 | from typing import Dict, Any, Optional, Tuple
   |                                         ^^^^^
 9 | from utils.context_packet import (
10 |     build_context, is_context_thin, get_thin_context_reply,
   |
help: Remove unused import: `typing.Tuple`

F401 [*] `typing.List` imported but unused
  --> utils/ai_expense_parser.py:9:20
   |
 7 | import logging
 8 | import re
 9 | from typing import List, Dict, Any, Optional, Tuple
   |                    ^^^^
10 |
11 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/ai_expense_parser.py:9:37
   |
 7 | import logging
 8 | import re
 9 | from typing import List, Dict, Any, Optional, Tuple
   |                                     ^^^^^^^^
10 |
11 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `typing.Tuple` imported but unused
  --> utils/ai_expense_parser.py:9:47
   |
 7 | import logging
 8 | import re
 9 | from typing import List, Dict, Any, Optional, Tuple
   |                                               ^^^^^
10 |
11 | logger = logging.getLogger(__name__)
   |
help: Remove unused import

F401 [*] `json` imported but unused
 --> utils/ai_limiter.py:7:8
  |
5 | import os
6 | import time
7 | import json
  |        ^^^^
8 | import logging
9 | from datetime import datetime, timezone, timedelta
  |
help: Remove unused import: `json`

E402 Module level import not at top of file
  --> utils/ai_limiter.py:17:1
   |
16 | # Configuration from centralized config
17 | from config import AI_RL_GLOBAL_LIMIT, AI_RL_USER_LIMIT
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
18 | AI_ENABLED = os.environ.get("AI_ENABLED", "false").lower() == "true"
19 | AI_MAX_CALLS_PER_MIN = AI_RL_GLOBAL_LIMIT
   |

F401 [*] `json` imported but unused
 --> utils/ai_onboarding_system.py:5:8
  |
3 | """
4 | import logging
5 | import json
  |        ^^^^
6 | from typing import Dict, Any, Optional, Tuple
7 | from ai_adapter_gemini import generate_with_schema
  |
help: Remove unused import: `json`

F401 [*] `typing.Optional` imported but unused
 --> utils/ai_onboarding_system.py:6:31
  |
4 | import logging
5 | import json
6 | from typing import Dict, Any, Optional, Tuple
  |                               ^^^^^^^^
7 | from ai_adapter_gemini import generate_with_schema
  |
help: Remove unused import: `typing.Optional`

F401 [*] `typing.Tuple` imported but unused
  --> utils/ai_rate_limiter.py:10:32
   |
 8 | import threading
 9 | from datetime import datetime, timezone
10 | from typing import Dict, List, Tuple, Optional
   |                                ^^^^^
11 | from dataclasses import dataclass
   |
help: Remove unused import: `typing.Tuple`

F401 [*] `os` imported but unused
 --> utils/background_processor.py:5:8
  |
3 | Includes RL-2 graceful non-AI fallback system
4 | """
5 | import os
  |        ^^
6 | import time
7 | import json
  |
help: Remove unused import: `os`

F401 [*] `threading` imported but unused
  --> utils/background_processor.py:9:8
   |
 7 | import json
 8 | import logging
 9 | import threading
   |        ^^^^^^^^^
10 | import requests
11 | from datetime import datetime
   |
help: Remove unused import: `threading`

F401 [*] `requests` imported but unused
  --> utils/background_processor.py:10:8
   |
 8 | import logging
 9 | import threading
10 | import requests
   |        ^^^^^^^^
11 | from datetime import datetime
12 | from concurrent.futures import ThreadPoolExecutor, TimeoutError as FutureTimeoutError
   |
help: Remove unused import: `requests`

F401 [*] `datetime.datetime` imported but unused
  --> utils/background_processor.py:11:22
   |
 9 | import threading
10 | import requests
11 | from datetime import datetime
   |                      ^^^^^^^^
12 | from concurrent.futures import ThreadPoolExecutor, TimeoutError as FutureTimeoutError
13 | from queue import Queue, Empty
   |
help: Remove unused import: `datetime.datetime`

F401 [*] `concurrent.futures.TimeoutError` imported but unused
  --> utils/background_processor.py:12:68
   |
10 | import requests
11 | from datetime import datetime
12 | from concurrent.futures import ThreadPoolExecutor, TimeoutError as FutureTimeoutError
   |                                                                    ^^^^^^^^^^^^^^^^^^
13 | from queue import Queue, Empty
14 | from dataclasses import dataclass
   |
help: Remove unused import: `concurrent.futures.TimeoutError`

F401 [*] `queue.Empty` imported but unused
  --> utils/background_processor.py:13:26
   |
11 | from datetime import datetime
12 | from concurrent.futures import ThreadPoolExecutor, TimeoutError as FutureTimeoutError
13 | from queue import Queue, Empty
   |                          ^^^^^
14 | from dataclasses import dataclass
15 | from typing import Optional, Dict, Any, Tuple
   |
help: Remove unused import: `queue.Empty`

F401 [*] `.logger.get_request_id` imported but unused
  --> utils/background_processor.py:17:42
   |
15 | from typing import Optional, Dict, Any, Tuple
16 |
17 | from .logger import log_webhook_success, get_request_id
   |                                          ^^^^^^^^^^^^^^
18 | from .user_manager import resolve_user_id
19 | from .identity import psid_hash
   |
help: Remove unused import: `.logger.get_request_id`

F401 [*] `.rate_limiter.check_rate_limit` imported but unused
  --> utils/background_processor.py:20:27
   |
18 | from .user_manager import resolve_user_id
19 | from .identity import psid_hash
20 | from .rate_limiter import check_rate_limit
   |                           ^^^^^^^^^^^^^^^^
21 | from .policy_guard import update_user_message_timestamp, is_within_24_hour_window
22 | from .facebook_handler import send_facebook_message
   |
help: Remove unused import: `.rate_limiter.check_rate_limit`

F401 [*] `.ai_rate_limiter.ai_rate_limiter` imported but unused
  --> utils/background_processor.py:23:30
   |
21 | from .policy_guard import update_user_message_timestamp, is_within_24_hour_window
22 | from .facebook_handler import send_facebook_message
23 | from .ai_rate_limiter import ai_rate_limiter
   |                              ^^^^^^^^^^^^^^^
24 | from .background_processor_rl2 import rl2_processor
25 | from utils.production_router import production_router
   |
help: Remove unused import: `.ai_rate_limiter.ai_rate_limiter`

F401 [*] `.background_processor_rl2.rl2_processor` imported but unused
  --> utils/background_processor.py:24:39
   |
22 | from .facebook_handler import send_facebook_message
23 | from .ai_rate_limiter import ai_rate_limiter
24 | from .background_processor_rl2 import rl2_processor
   |                                       ^^^^^^^^^^^^^
25 | from utils.production_router import production_router
   |
help: Remove unused import: `.background_processor_rl2.rl2_processor`

F841 Local variable `future` is assigned to but never used
  --> utils/background_processor.py:67:13
   |
65 |             )
66 |             
67 |             future = self.executor.submit(self._process_job_safe, job)
   |             ^^^^^^
68 |             
69 |             psid_hash = resolve_user_id(psid=psid)
   |
help: Remove assignment to unused variable `future`

F811 [*] Redefinition of unused `datetime` from line 11
   --> utils/background_processor.py:212:30
    |
210 |         from app import db
211 |         from models import Expense
212 |         from datetime import datetime, timedelta
    |                              ^^^^^^^^
213 |         
214 |         try:
    |
help: Remove definition: `datetime`

F401 [*] `models.Expense` imported but unused
  --> utils/background_processor_rl2.py:81:32
   |
79 |         try:
80 |             from app import db
81 |             from models import Expense
   |                                ^^^^^^^
82 |             from sqlalchemy import text
   |
help: Remove unused import: `models.Expense`

E722 Do not use bare `except`
   --> utils/background_processor_rl2.py:194:17
    |
192 |                 try:
193 |                     db.session.rollback()
194 |                 except:
    |                 ^^^^^^
195 |                     pass
    |

F401 [*] `typing.Optional` imported but unused
  --> utils/cold_start_mitigation.py:11:20
   |
 9 | import requests
10 | from datetime import datetime
11 | from typing import Optional, Dict, Any
   |                    ^^^^^^^^
12 |
13 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `typing.Optional`

F401 [*] `typing.Optional` imported but unused
 --> utils/context_integration.py:7:31
  |
6 | import logging
7 | from typing import Dict, Any, Optional
  |                               ^^^^^^^^
8 | from sqlalchemy.orm import Session
9 | from utils.context_packet import build_context, is_context_thin, get_thin_context_reply, format_context_for_ai, CONTEXT_SYSTEM_PROMPT,…
  |
help: Remove unused import: `typing.Optional`

F401 [*] `utils.ai_context_adapter.ContextDrivenAI` imported but unused
  --> utils/context_integration.py:10:38
   |
 8 | from sqlalchemy.orm import Session
 9 | from utils.context_packet import build_context, is_context_thin, get_thin_context_reply, format_context_for_ai, CONTEXT_SYSTEM_PROMPT,…
10 | from utils.ai_context_adapter import ContextDrivenAI, handle_context_driven_message
   |                                      ^^^^^^^^^^^^^^^
11 | from utils.ux_components import safe_send_text, record_event, format_coach_reply
12 | from utils.facebook_handler import send_message
   |
help: Remove unused import

F401 [*] `utils.ai_context_adapter.handle_context_driven_message` imported but unused
  --> utils/context_integration.py:10:55
   |
 8 | from sqlalchemy.orm import Session
 9 | from utils.context_packet import build_context, is_context_thin, get_thin_context_reply, format_context_for_ai, CONTEXT_SYSTEM_PROMPT,…
10 | from utils.ai_context_adapter import ContextDrivenAI, handle_context_driven_message
   |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 | from utils.ux_components import safe_send_text, record_event, format_coach_reply
12 | from utils.facebook_handler import send_message
   |
help: Remove unused import

F401 [*] `utils.ux_components.safe_send_text` imported but unused
  --> utils/context_integration.py:11:33
   |
 9 | from utils.context_packet import build_context, is_context_thin, get_thin_context_reply, format_context_for_ai, CONTEXT_SYSTEM_PROMPT,…
10 | from utils.ai_context_adapter import ContextDrivenAI, handle_context_driven_message
11 | from utils.ux_components import safe_send_text, record_event, format_coach_reply
   |                                 ^^^^^^^^^^^^^^
12 | from utils.facebook_handler import send_message
13 | from utils.quick_reply_system import send_custom_quick_replies
   |
help: Remove unused import: `utils.ux_components.safe_send_text`

F401 [*] `utils.ai_adapter_v2.production_ai_adapter` imported but unused
  --> utils/context_integration.py:14:33
   |
12 | from utils.facebook_handler import send_message
13 | from utils.quick_reply_system import send_custom_quick_replies
14 | from utils.ai_adapter_v2 import production_ai_adapter
   |                                 ^^^^^^^^^^^^^^^^^^^^^
15 | from limiter import can_use_ai
16 | from app import db
   |
help: Remove unused import: `utils.ai_adapter_v2.production_ai_adapter`

F821 Undefined name `generate_with_schema`
  --> utils/context_integration.py:83:25
   |
81 |             full_user_text = f"Question: {text}\n\n{ai_context}"
82 |             
83 |             ai_result = generate_with_schema(
   |                         ^^^^^^^^^^^^^^^^^^^^
84 |                 user_text=full_user_text,
85 |                 system_prompt=CONTEXT_SYSTEM_PROMPT,
   |

F821 Undefined name `generate_with_schema`
   --> utils/context_integration.py:265:48
    |
263 |     try:
264 |         # Use production AI adapter instead
265 |         print(f"✓ Schema generation function: {generate_with_schema.__name__}")
    |                                                ^^^^^^^^^^^^^^^^^^^^
266 |     except ImportError as e:
267 |         print(f"⚠ Schema function not available: {e}")
    |

F401 [*] `models.User` imported but unused
  --> utils/context_packet.py:10:29
   |
 8 | from datetime import datetime, timedelta
 9 | from sqlalchemy.orm import Session
10 | from models import Expense, User
   |                             ^^^^
11 | from .identity import psid_hash
   |
help: Remove unused import: `models.User`

F841 Local variable `now` is assigned to but never used
  --> utils/context_packet.py:28:9
   |
26 |     try:
27 |         user_hash = psid_hash(psid)
28 |         now = datetime.utcnow()
   |         ^^^
29 |         
30 |         # Get 30-day and previous 30-day spending by category
   |
help: Remove assignment to unused variable `now`

F401 [*] `typing.Optional` imported but unused
 --> utils/conversational_ai.py:7:37
  |
6 | import logging
7 | from typing import Dict, Any, List, Optional, Tuple
  |                                     ^^^^^^^^
8 | from datetime import datetime, timedelta
9 | from utils.identity import psid_hash
  |
help: Remove unused import: `typing.Optional`

F401 [*] `app.db` imported but unused
  --> utils/conversational_ai.py:22:25
   |
20 |         """Get comprehensive user expense context for conversations"""
21 |         from models import Expense
22 |         from app import db
   |                         ^^
23 |         from utils.identity import psid_hash as ensure_hashed
24 |         from utils.tracer import trace_event
   |
help: Remove unused import: `app.db`

F841 Local variable `message_lower` is assigned to but never used
   --> utils/conversational_ai.py:257:9
    |
255 |     def handle_conversational_query(self, psid_or_hash: str, user_message: str) -> Tuple[str, str]:
256 |         """Handle conversational queries using user-level memory (legacy method for backwards compatibility)"""
257 |         message_lower = user_message.lower()
    |         ^^^^^^^^^^^^^
258 |         
259 |         # Determine if we have a PSID or hash (hash length is 64 chars)
    |
help: Remove assignment to unused variable `message_lower`

F401 [*] `app.db` imported but unused
   --> utils/conversational_ai.py:318:25
    |
316 |         """Get user expense context using pre-hashed PSID (no double hashing)"""
317 |         from models import Expense
318 |         from app import db
    |                         ^^
319 |         
320 |         cutoff_date = datetime.utcnow() - timedelta(days=days)
    |
help: Remove unused import: `app.db`

F401 [*] `flask.current_app` imported but unused
  --> utils/db.py:12:23
   |
10 |     """Get existing user or create new one with hashed ID"""
11 |     from models import User
12 |     from flask import current_app
   |                       ^^^^^^^^^^^
13 |     
14 |     if db_session is None:
   |
help: Remove unused import: `flask.current_app`

F401 [*] `models.User` imported but unused
  --> utils/db.py:43:33
   |
41 | def save_expense(user_identifier, description, amount, category, platform, original_message, unique_id, db_session=None):
42 |     """Save expense to database and update monthly summaries"""
43 |     from models import Expense, User, MonthlySummary
   |                                 ^^^^
44 |     from utils.tracer import trace_event
45 |     from utils.identity import psid_hash
   |
help: Remove unused import: `models.User`

F401 [*] `utils.identity.psid_hash` imported but unused
  --> utils/db.py:45:32
   |
43 |     from models import Expense, User, MonthlySummary
44 |     from utils.tracer import trace_event
45 |     from utils.identity import psid_hash
   |                                ^^^^^^^^^
46 |     
47 |     if db_session is None:
   |
help: Remove unused import: `utils.identity.psid_hash`

F401 [*] `typing.Dict` imported but unused
 --> utils/dispatcher.py:5:20
  |
3 | """
4 | import logging
5 | from typing import Dict, Tuple
  |                    ^^^^
6 | from utils.intent_router import detect_intent
7 | from handlers.summary import handle_summary
  |
help: Remove unused import: `typing.Dict`

F401 [*] `typing.List` imported but unused
 --> utils/engagement.py:6:41
  |
4 | """
5 | import logging
6 | from typing import Dict, Any, Optional, List
  |                                         ^^^^
7 | from datetime import datetime, timedelta
  |
help: Remove unused import: `typing.List`

F401 [*] `datetime.datetime` imported but unused
 --> utils/expense.py:4:22
  |
2 | import re
3 | import logging
4 | from datetime import datetime
  |                      ^^^^^^^^
5 | from utils.categories import categorize_expense
6 | from utils.db import save_expense
  |
help: Remove unused import: `datetime.datetime`

F401 [*] `json` imported but unused
 --> utils/facebook_handler.py:4:8
  |
2 | import os
3 | import logging
4 | import json
  |        ^^^^
5 | import time
6 | from datetime import datetime
  |
help: Remove unused import: `json`

F401 [*] `datetime.datetime` imported but unused
 --> utils/facebook_handler.py:6:22
  |
4 | import json
5 | import time
6 | from datetime import datetime
  |                      ^^^^^^^^
7 | from utils.expense import process_expense_message
8 | from .logger import log_graph_call
  |
help: Remove unused import: `datetime.datetime`

F401 [*] `utils.expense.process_expense_message` imported but unused
 --> utils/facebook_handler.py:7:27
  |
5 | import time
6 | from datetime import datetime
7 | from utils.expense import process_expense_message
  |                           ^^^^^^^^^^^^^^^^^^^^^^^
8 | from .logger import log_graph_call
  |
help: Remove unused import: `utils.expense.process_expense_message`

F401 [*] `typing.Optional` imported but unused
  --> utils/health_ping.py:11:20
   |
 9 | import threading
10 | from datetime import datetime
11 | from typing import Optional
   |                    ^^^^^^^^
12 |
13 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `typing.Optional`

F841 [*] Local variable `e` is assigned to but never used
   --> utils/logger.py:151:29
    |
149 |             return response
150 |             
151 |         except Exception as e:
    |                             ^
152 |             # Calculate duration even for errors
153 |             duration_ms = (time.time() - g.request_start_time) * 1000
    |
help: Remove assignment to unused variable `e`

F401 [*] `typing.Optional` imported but unused
 --> utils/message_handlers.py:7:31
  |
6 | import logging
7 | from typing import Dict, Any, Optional
  |                               ^^^^^^^^
8 | from utils.ux_components import (
9 |     handle_enhanced_message, handle_payload, get_ux_metrics,
  |
help: Remove unused import: `typing.Optional`

F401 [*] `utils.ux_components.safe_send_text` imported but unused
  --> utils/message_handlers.py:10:20
   |
 8 | from utils.ux_components import (
 9 |     handle_enhanced_message, handle_payload, get_ux_metrics,
10 |     parse_expense, safe_send_text, send_picker, record_event
   |                    ^^^^^^^^^^^^^^
11 | )
12 | from utils.facebook_handler import send_message
   |
help: Remove unused import

F401 [*] `utils.ux_components.send_picker` imported but unused
  --> utils/message_handlers.py:10:36
   |
 8 | from utils.ux_components import (
 9 |     handle_enhanced_message, handle_payload, get_ux_metrics,
10 |     parse_expense, safe_send_text, send_picker, record_event
   |                                    ^^^^^^^^^^^
11 | )
12 | from utils.facebook_handler import send_message
   |
help: Remove unused import

F401 [*] `models.User` imported but unused
  --> utils/message_handlers.py:63:45
   |
61 |                 psid, category, amount = args
62 |                 # Integrate with your existing expense logging
63 |                 from models import Expense, User
   |                                             ^^^^
64 |                 from utils.security import hash_psid
   |
help: Remove unused import: `models.User`

F401 [*] `typing.Optional` imported but unused
 --> utils/policy_guard.py:4:20
  |
2 | import logging
3 | from datetime import datetime, timedelta
4 | from typing import Optional
  |                    ^^^^^^^^
5 |
6 | from utils.user_manager import resolve_user_id
  |
help: Remove unused import: `typing.Optional`

F401 [*] `models.db` imported but unused
  --> utils/policy_guard.py:13:34
   |
11 |     """Check if user's last message was within 24 hours (policy-safe to respond)"""
12 |     try:
13 |         from models import User, db
   |                                  ^^
14 |         
15 |         user_hash = resolve_user_id(psid=psid)
   |
help: Remove unused import: `models.db`

F401 [*] `typing.Any` imported but unused
 --> utils/quick_reply_system.py:7:32
  |
6 | import logging
7 | from typing import List, Dict, Any, Optional
  |                                ^^^
8 | import sys
9 | import os
  |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
 --> utils/quick_reply_system.py:7:37
  |
6 | import logging
7 | from typing import List, Dict, Any, Optional
  |                                     ^^^^^^^^
8 | import sys
9 | import os
  |
help: Remove unused import

F541 [*] f-string without any placeholders
  --> utils/quick_reply_system.py:33:19
   |
31 |         """
32 |         try:
33 |             url = f"https://graph.facebook.com/v17.0/me/messages"
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
34 |             
35 |             quick_replies = [
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> utils/quick_reply_system.py:78:19
   |
76 |         """Send persistent menu (appears as hamburger menu in chat)"""
77 |         try:
78 |             url = f"https://graph.facebook.com/v17.0/me/messenger_profile"
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
79 |             
80 |             menu_data = {
   |
help: Remove extraneous `f` prefix

F401 [*] `datetime.timedelta` imported but unused
 --> utils/rate_limiter.py:4:38
  |
2 | import os
3 | import logging
4 | from datetime import datetime, date, timedelta
  |                                      ^^^^^^^^^
5 | from utils.security import hash_user_id
  |
help: Remove unused import: `datetime.timedelta`

F401 [*] `utils.security.hash_user_id` imported but unused
 --> utils/rate_limiter.py:5:28
  |
3 | import logging
4 | from datetime import datetime, date, timedelta
5 | from utils.security import hash_user_id
  |                            ^^^^^^^^^^^^
6 |
7 | logger = logging.getLogger(__name__)
  |
help: Remove unused import: `utils.security.hash_user_id`

F821 Undefined name `ensure_hashed`
  --> utils/rate_limiter.py:19:21
   |
18 |     try:
19 |         user_hash = ensure_hashed(user_identifier)
   |                     ^^^^^^^^^^^^^
20 |         current_date = date.today()
21 |         current_hour = datetime.now().replace(minute=0, second=0, microsecond=0)
   |

F821 Undefined name `ensure_hashed`
  --> utils/rate_limiter.py:78:21
   |
77 |     try:
78 |         user_hash = ensure_hashed(user_identifier)
   |                     ^^^^^^^^^^^^^
79 |         
80 |         rate_limit = RateLimit.query.filter_by(
   |

F401 [*] `datetime.datetime` imported but unused
 --> utils/report_generator.py:3:22
  |
1 | """Automated report generation for daily and weekly summaries"""
2 | import logging
3 | from datetime import datetime, date, timedelta
  |                      ^^^^^^^^
4 | from utils.db import get_monthly_summary, get_user_expenses
  |
help: Remove unused import: `datetime.datetime`

F401 [*] `utils.db.get_user_expenses` imported but unused
 --> utils/report_generator.py:4:43
  |
2 | import logging
3 | from datetime import datetime, date, timedelta
4 | from utils.db import get_monthly_summary, get_user_expenses
  |                                           ^^^^^^^^^^^^^^^^^
5 |
6 | from utils.facebook_handler import send_facebook_report
  |
help: Remove unused import: `utils.db.get_user_expenses`

F401 [*] `utils.facebook_handler.send_facebook_report` imported but unused
 --> utils/report_generator.py:6:36
  |
4 | from utils.db import get_monthly_summary, get_user_expenses
5 |
6 | from utils.facebook_handler import send_facebook_report
  |                                    ^^^^^^^^^^^^^^^^^^^^
7 | from models import User, Expense
8 | from app import db
  |
help: Remove unused import: `utils.facebook_handler.send_facebook_report`

F401 [*] `models.User` imported but unused
 --> utils/report_generator.py:7:20
  |
6 | from utils.facebook_handler import send_facebook_report
7 | from models import User, Expense
  |                    ^^^^
8 | from app import db
  |
help: Remove unused import: `models.User`

F401 [*] `app.db` imported but unused
  --> utils/report_generator.py:8:17
   |
 6 | from utils.facebook_handler import send_facebook_report
 7 | from models import User, Expense
 8 | from app import db
   |                 ^^
 9 |
10 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `app.db`

F401 [*] `utils.security.hash_user_id` imported but unused
  --> utils/report_generator.py:15:36
   |
13 |     """Generate daily expense report for user"""
14 |     try:
15 |         from utils.security import hash_user_id
   |                                    ^^^^^^^^^^^^
16 |         
17 |         user_hash = ensure_hashed(user_identifier)
   |
help: Remove unused import: `utils.security.hash_user_id`

F821 Undefined name `ensure_hashed`
  --> utils/report_generator.py:17:21
   |
15 |         from utils.security import hash_user_id
16 |         
17 |         user_hash = ensure_hashed(user_identifier)
   |                     ^^^^^^^^^^^^^
18 |         today = date.today()
   |

F401 [*] `utils.security.hash_user_id` imported but unused
  --> utils/report_generator.py:65:36
   |
63 |     """Generate weekly expense report for user"""
64 |     try:
65 |         from utils.security import hash_user_id
   |                                    ^^^^^^^^^^^^
66 |         
67 |         user_hash = ensure_hashed(user_identifier)
   |
help: Remove unused import: `utils.security.hash_user_id`

F821 Undefined name `ensure_hashed`
  --> utils/report_generator.py:67:21
   |
65 |         from utils.security import hash_user_id
66 |         
67 |         user_hash = ensure_hashed(user_identifier)
   |                     ^^^^^^^^^^^^^
68 |         today = date.today()
69 |         week_start = today - timedelta(days=6)  # Last 7 days
   |

F541 [*] f-string without any placeholders
   --> utils/report_generator.py:123:31
    |
121 |                     report += f"\n📉 Trend: ৳{trend:.2f} vs yesterday"
122 |                 else:
123 |                     report += f"\n➡️ Trend: Same as yesterday"
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
124 |         
125 |         return report
    |
help: Remove extraneous `f` prefix

F401 [*] `os` imported but unused
 --> utils/scheduler.py:2:8
  |
1 | """Task scheduling for automated reports"""
2 | import os
  |        ^^
3 | import logging
4 | from datetime import datetime
  |
help: Remove unused import: `os`

F401 [*] `datetime.datetime` imported but unused
 --> utils/scheduler.py:4:22
  |
2 | import os
3 | import logging
4 | from datetime import datetime
  |                      ^^^^^^^^
5 | from apscheduler.schedulers.background import BackgroundScheduler
6 | from apscheduler.triggers.cron import CronTrigger
  |
help: Remove unused import: `datetime.datetime`

F541 [*] f-string without any placeholders
  --> utils/security.py:20:22
   |
18 |         hashed_id = hash_object.hexdigest()
19 |         
20 |         logger.debug(f"User ID hashed successfully")
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
21 |         return hashed_id
   |
help: Remove extraneous `f` prefix

E402 Module level import not at top of file
  --> utils/textutil.py:14:1
   |
13 | # Configuration from centralized config and environment
14 | from config import MSG_MAX_CHARS
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
15 | SAY_ENABLED = os.environ.get("SAY_ENABLED", "true").lower() == "true"
16 | EMOJI_ENABLED = os.environ.get("EMOJI_ENABLED", "true").lower() == "true"
   |

F401 [*] `datetime.timedelta` imported but unused
 --> utils/token_manager.py:6:32
  |
4 | import time
5 | import requests
6 | from datetime import datetime, timedelta
  |                                ^^^^^^^^^
7 | from typing import Dict, Optional, Tuple
  |
help: Remove unused import: `datetime.timedelta`

F541 [*] f-string without any placeholders
  --> utils/token_manager.py:33:19
   |
32 |         try:
33 |             url = f"https://graph.facebook.com/v17.0/me"
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
34 |             params = {
35 |                 'fields': 'id,name',
   |
help: Remove extraneous `f` prefix

F541 [*] f-string without any placeholders
  --> utils/token_manager.py:45:29
   |
44 |                 # Get token expiration info using debug_token
45 |                 debug_url = f"https://graph.facebook.com/v17.0/debug_token"
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
46 |                 debug_params = {
47 |                     'input_token': self.page_access_token,
   |
help: Remove extraneous `f` prefix

F401 [*] `os` imported but unused
 --> utils/token_refresh_reminder.py:3:8
  |
1 | """Token refresh reminder and monitoring system"""
2 | import logging
3 | import os
  |        ^^
4 | from datetime import datetime, timedelta
5 | from typing import Dict, List, Optional
  |
help: Remove unused import: `os`

F401 [*] `typing.Optional` imported but unused
 --> utils/token_refresh_reminder.py:5:32
  |
3 | import os
4 | from datetime import datetime, timedelta
5 | from typing import Dict, List, Optional
  |                                ^^^^^^^^
6 | from .token_manager import token_manager
  |
help: Remove unused import: `typing.Optional`

F401 [*] `typing.List` imported but unused
 --> utils/uat_system.py:6:41
  |
4 | """
5 | import logging
6 | from typing import Dict, Any, Optional, List
  |                                         ^^^^
7 | from datetime import datetime
8 | from app import db
  |
help: Remove unused import: `typing.List`

F401 [*] `app.db` imported but unused
  --> utils/uat_system.py:8:17
   |
 6 | from typing import Dict, Any, Optional, List
 7 | from datetime import datetime
 8 | from app import db
   |                 ^^
 9 | from models import User
10 | from utils.security import hash_psid
   |
help: Remove unused import: `app.db`

F401 [*] `models.User` imported but unused
  --> utils/uat_system.py:9:20
   |
 7 | from datetime import datetime
 8 | from app import db
 9 | from models import User
   |                    ^^^^
10 | from utils.security import hash_psid
   |
help: Remove unused import: `models.User`

F401 [*] `time` imported but unused
 --> utils/ux_components.py:7:8
  |
6 | import re
7 | import time
  |        ^^^^
8 | import logging
9 | from typing import Dict, List, Optional, Tuple, Any
  |
help: Remove unused import: `time`

F401 [*] `typing.List` imported but unused
  --> utils/ux_components.py:9:26
   |
 7 | import time
 8 | import logging
 9 | from typing import Dict, List, Optional, Tuple, Any
   |                          ^^^^
10 | from collections import Counter
11 | from config import MSG_MAX_CHARS
   |
help: Remove unused import: `typing.List`

F401 [*] `threading` imported but unused
  --> utils/webhook_processor.py:8:8
   |
 6 | import time
 7 | import uuid
 8 | import threading
   |        ^^^^^^^^^
 9 | from concurrent.futures import ThreadPoolExecutor
10 | from datetime import datetime, timedelta
   |
help: Remove unused import: `threading`

F401 [*] `datetime.datetime` imported but unused
  --> utils/webhook_processor.py:10:22
   |
 8 | import threading
 9 | from concurrent.futures import ThreadPoolExecutor
10 | from datetime import datetime, timedelta
   |                      ^^^^^^^^
11 | from typing import Dict, Any, Optional
12 | from .logger import log_webhook_success, get_request_id
   |
help: Remove unused import

F401 [*] `datetime.timedelta` imported but unused
  --> utils/webhook_processor.py:10:32
   |
 8 | import threading
 9 | from concurrent.futures import ThreadPoolExecutor
10 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^
11 | from typing import Dict, Any, Optional
12 | from .logger import log_webhook_success, get_request_id
   |
help: Remove unused import

F401 [*] `typing.Optional` imported but unused
  --> utils/webhook_processor.py:11:31
   |
 9 | from concurrent.futures import ThreadPoolExecutor
10 | from datetime import datetime, timedelta
11 | from typing import Dict, Any, Optional
   |                               ^^^^^^^^
12 | from .logger import log_webhook_success, get_request_id
   |
help: Remove unused import: `typing.Optional`

F401 [*] `.logger.get_request_id` imported but unused
  --> utils/webhook_processor.py:12:42
   |
10 | from datetime import datetime, timedelta
11 | from typing import Dict, Any, Optional
12 | from .logger import log_webhook_success, get_request_id
   |                                          ^^^^^^^^^^^^^^
13 |
14 | logger = logging.getLogger(__name__)
   |
help: Remove unused import: `.logger.get_request_id`

F841 Local variable `user_hash` is assigned to but never used
  --> utils/webhook_processor.py:85:9
   |
84 |         # Compute hash once at intake
85 |         user_hash = psid_hash(psid)
   |         ^^^^^^^^^
86 |         
87 |         for messaging in entry.get('messaging', []):
   |
help: Remove assignment to unused variable `user_hash`

Found 150 errors.
[*] 126 fixable with the `--fix` option (5 hidden fixes can be enabled with the `--unsafe-fixes` option).
